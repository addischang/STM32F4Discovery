
build/main.elf-main:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de8  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a18  08009f94  08009f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000060  20000000  0800c9ac  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ccmram       00000000  10000000  10000000  00018060  2**0
                  CONTENTS
  5 .bss          0000005c  20000060  20000060  00018060  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200000bc  200000bc  00018060  2**0
                  ALLOC
  7 .ARM.attributes 00000031  00000000  00000000  00018060  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b2de  00000000  00000000  00018091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001f1b  00000000  00000000  0002336f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e48  00000000  00000000  00025290  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d00  00000000  00000000  000260d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004dc5  00000000  00000000  00026dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004f2b  00000000  00000000  0002bb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000020  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002d5c  00000000  00000000  00030ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	08000345 	stmdaeq	r0, {r0, r2, r6, r8, r9}
 8000008:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800000c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000010:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000014:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000018:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
	...
 800002c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000030:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800003c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000040:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000044:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000048:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800004c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000050:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000054:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000058:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800005c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000060:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000064:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000068:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800006c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000070:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000074:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000078:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800007c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000080:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000084:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000088:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800008c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000090:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000094:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000098:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800009c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000a0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000a4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000a8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000ac:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000b0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000b4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000b8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000bc:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000c0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000c4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000c8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000cc:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000d0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000d4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000d8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000dc:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000e0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000e4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000e8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000ec:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000f0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000f4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000f8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80000fc:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000100:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000104:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000108:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800010c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000110:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000114:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000118:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800011c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000120:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000124:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000128:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800012c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000130:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000134:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000138:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800013c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000140:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000144:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000148:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800014c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000150:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000154:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000158:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800015c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000160:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000164:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000168:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800016c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000170:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000174:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000178:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800017c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000180:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000184:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000188:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800018c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000190:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000194:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000198:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 800019c:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80001a0:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80001a4:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 80001a8:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}

Disassembly of section .text:

080001ac <RCC_Configuration-0x14>:
 80001ac:	0800c9ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, lr, pc}
 80001b0:	20000000 	andcs	r0, r0, r0
 80001b4:	20000060 	andcs	r0, r0, r0, rrx
 80001b8:	20000060 	andcs	r0, r0, r0, rrx
 80001bc:	200000bc 	strhcs	r0, [r0], -ip

080001c0 <RCC_Configuration>:
#include "stm32f429i_discovery_l3gd20.h"
#include "stm32f429i_discovery_lcd.h"
#include "stm32f429i_discovery_ioe.h"

void RCC_Configuration()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	// RCC Configuration
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80001c4:	2040      	movs	r0, #64	; 0x40
 80001c6:	2101      	movs	r1, #1
 80001c8:	f001 f8f8 	bl	80013bc <RCC_AHB1PeriphClockCmd>
}
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop

080001d0 <GPIO_Configuration>:

void GPIO_Configuration()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	// GPIO Configuration
	// LED3 (Green): GPIO_Pin_13, LED4 (Red): GPIO_Pin_14
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 80001d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80001da:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80001dc:	2301      	movs	r3, #1
 80001de:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001e0:	2300      	movs	r3, #0
 80001e2:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80001e8:	2300      	movs	r3, #0
 80001ea:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 80001ec:	463b      	mov	r3, r7
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <GPIO_Configuration+0x2c>)
 80001f0:	4619      	mov	r1, r3
 80001f2:	f000 fb69 	bl	80008c8 <GPIO_Init>
}
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40021800 	andmi	r1, r2, r0, lsl #16

08000200 <L3GD20_Configuration>:

void L3GD20_Configuration()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
	// L3GD20 Configuration
	L3GD20_InitTypeDef L3GD20_InitStructure;
	L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8000206:	2308      	movs	r3, #8
 8000208:	723b      	strb	r3, [r7, #8]
	L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 800020a:	2300      	movs	r3, #0
 800020c:	727b      	strb	r3, [r7, #9]
	L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 800020e:	2307      	movs	r3, #7
 8000210:	72bb      	strb	r3, [r7, #10]
	L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8000212:	2330      	movs	r3, #48	; 0x30
 8000214:	72fb      	strb	r3, [r7, #11]
	L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 800021a:	2300      	movs	r3, #0
 800021c:	737b      	strb	r3, [r7, #13]
	L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_250;
 800021e:	2300      	movs	r3, #0
 8000220:	73bb      	strb	r3, [r7, #14]
	L3GD20_Init(&L3GD20_InitStructure);
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	4618      	mov	r0, r3
 8000228:	f006 fa68 	bl	80066fc <L3GD20_Init>

	// L3GD20 Filter Configuration
	L3GD20_FilterConfigTypeDef L3GD20Filter_InitStructure;
	L3GD20Filter_InitStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE;
 800022c:	2320      	movs	r3, #32
 800022e:	713b      	strb	r3, [r7, #4]
	L3GD20Filter_InitStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_4;
 8000230:	2304      	movs	r3, #4
 8000232:	717b      	strb	r3, [r7, #5]
	L3GD20_FilterConfig(&L3GD20Filter_InitStructure);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4618      	mov	r0, r3
 8000238:	f006 fb36 	bl	80068a8 <L3GD20_FilterConfig>

}
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop

08000244 <ILI9341_Configuration>:

void ILI9341_Configuration()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	/** 
  	* @brief ILI9341 Configuration
  	* 		 Do not change the following except you had known all 
  	*	 	 configurations.
  	*/ 
	LCD_Init();
 8000248:	f006 fde0 	bl	8006e0c <LCD_Init>
	IOE_Config();
 800024c:	f008 fe10 	bl	8008e70 <IOE_Config>
	LTDC_Cmd( ENABLE );
 8000250:	2001      	movs	r0, #1
 8000252:	f004 fa41 	bl	80046d8 <LTDC_Cmd>
	LCD_LayerInit();
 8000256:	f006 fe33 	bl	8006ec0 <LCD_LayerInit>
	LCD_SetLayer(LCD_FOREGROUND_LAYER );
 800025a:	2001      	movs	r0, #1
 800025c:	f006 fea0 	bl	8006fa0 <LCD_SetLayer>
	LCD_Clear(LCD_COLOR_BLACK );
 8000260:	2000      	movs	r0, #0
 8000262:	f006 ff6b 	bl	800713c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_RED );
 8000266:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800026a:	f006 fee5 	bl	8007038 <LCD_SetTextColor>

	/** 
  	* @brief Display String
  	* 		 
  	*/ 
	LCD_DisplayStringLine(LCD_LINE_1, (uint8_t *)"WELCOME TO TKU");
 800026e:	f006 ff31 	bl	80070d4 <LCD_GetFont>
 8000272:	4603      	mov	r3, r0
 8000274:	88db      	ldrh	r3, [r3, #6]
 8000276:	4618      	mov	r0, r3
 8000278:	4918      	ldr	r1, [pc, #96]	; (80002dc <ILI9341_Configuration+0x98>)
 800027a:	f007 f8a7 	bl	80073cc <LCD_DisplayStringLine>
	LCD_DisplayStringLine(LCD_LINE_2, (uint8_t *)"ASFL");
 800027e:	f006 ff29 	bl	80070d4 <LCD_GetFont>
 8000282:	4603      	mov	r3, r0
 8000284:	88db      	ldrh	r3, [r3, #6]
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	b29b      	uxth	r3, r3
 800028a:	4618      	mov	r0, r3
 800028c:	4914      	ldr	r1, [pc, #80]	; (80002e0 <ILI9341_Configuration+0x9c>)
 800028e:	f007 f89d 	bl	80073cc <LCD_DisplayStringLine>
	LCD_DisplayStringLine(LCD_LINE_4, (uint8_t *)"X: ");
 8000292:	f006 ff1f 	bl	80070d4 <LCD_GetFont>
 8000296:	4603      	mov	r3, r0
 8000298:	88db      	ldrh	r3, [r3, #6]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	b29b      	uxth	r3, r3
 800029e:	4618      	mov	r0, r3
 80002a0:	4910      	ldr	r1, [pc, #64]	; (80002e4 <ILI9341_Configuration+0xa0>)
 80002a2:	f007 f893 	bl	80073cc <LCD_DisplayStringLine>
	LCD_DisplayStringLine(LCD_LINE_5, (uint8_t *)"Y: ");
 80002a6:	f006 ff15 	bl	80070d4 <LCD_GetFont>
 80002aa:	4603      	mov	r3, r0
 80002ac:	88db      	ldrh	r3, [r3, #6]
 80002ae:	461a      	mov	r2, r3
 80002b0:	0092      	lsls	r2, r2, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	4618      	mov	r0, r3
 80002b8:	490b      	ldr	r1, [pc, #44]	; (80002e8 <ILI9341_Configuration+0xa4>)
 80002ba:	f007 f887 	bl	80073cc <LCD_DisplayStringLine>
	LCD_DisplayStringLine(LCD_LINE_6, (uint8_t *)"Z: ");
 80002be:	f006 ff09 	bl	80070d4 <LCD_GetFont>
 80002c2:	4603      	mov	r3, r0
 80002c4:	88db      	ldrh	r3, [r3, #6]
 80002c6:	461a      	mov	r2, r3
 80002c8:	0052      	lsls	r2, r2, #1
 80002ca:	4413      	add	r3, r2
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	4906      	ldr	r1, [pc, #24]	; (80002ec <ILI9341_Configuration+0xa8>)
 80002d4:	f007 f87a 	bl	80073cc <LCD_DisplayStringLine>

}
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	08009f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, pc}
 80002e0:	08009fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, pc}
 80002e4:	08009fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, pc}
 80002e8:	08009fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip, pc}
 80002ec:	08009fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, pc}

080002f0 <main>:

int main()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	RCC_Configuration();
 80002f6:	f7ff ff63 	bl	80001c0 <RCC_Configuration>
	GPIO_Configuration();
 80002fa:	f7ff ff69 	bl	80001d0 <GPIO_Configuration>
	L3GD20_Configuration();
 80002fe:	f7ff ff7f 	bl	8000200 <L3GD20_Configuration>
	//L3GD20_LowLevel_Init();
	ILI9341_Configuration();
 8000302:	f7ff ff9f 	bl	8000244 <ILI9341_Configuration>

	// Demo Code: switch flashing two LED 
	GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
 8000306:	480d      	ldr	r0, [pc, #52]	; (800033c <main+0x4c>)
 8000308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030c:	f000 fc38 	bl	8000b80 <GPIO_ToggleBits>

	while(1)
	{
		GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
 8000310:	480a      	ldr	r0, [pc, #40]	; (800033c <main+0x4c>)
 8000312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000316:	f000 fc33 	bl	8000b80 <GPIO_ToggleBits>
		GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
 800031a:	4808      	ldr	r0, [pc, #32]	; (800033c <main+0x4c>)
 800031c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000320:	f000 fc2e 	bl	8000b80 <GPIO_ToggleBits>

		for(int i=0; i<500000; i++);
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e002      	b.n	8000330 <main+0x40>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4b03      	ldr	r3, [pc, #12]	; (8000340 <main+0x50>)
 8000334:	429a      	cmp	r2, r3
 8000336:	ddf8      	ble.n	800032a <main+0x3a>
	}
 8000338:	e7ea      	b.n	8000310 <main+0x20>
 800033a:	bf00      	nop
 800033c:	40021800 	andmi	r1, r2, r0, lsl #16
 8000340:	0007a11f 	andeq	sl, r7, pc, lsl r1

08000344 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000346:	e003      	b.n	8000350 <LoopCopyDataInit>

08000348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 800034a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800034c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800034e:	3104      	adds	r1, #4

08000350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000350:	4809      	ldr	r0, [pc, #36]	; (8000378 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8000354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000358:	d3f6      	bcc.n	8000348 <CopyDataInit>
  ldr  r2, =_sbss
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 800035c:	e002      	b.n	8000364 <LoopFillZerobss>

0800035e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800035e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000360:	f842 3b04 	str.w	r3, [r2], #4

08000364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8000366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000368:	d3f9      	bcc.n	800035e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f000 f80f 	bl	800038c <SystemInit>
/* Call the application's entry point.*/
  bl  main
 800036e:	f7ff ffbf 	bl	80002f0 <main>
  bx  lr    
 8000372:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000374:	0800c9ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, lr, pc}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000378:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 800037c:	20000060 	andcs	r0, r0, r0, rrx
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000380:	20000060 	andcs	r0, r0, r0, rrx
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000384:	200000bc 	strhcs	r0, [r0], -ip

08000388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <SystemInit+0x5c>)
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <SystemInit+0x5c>)
 8000394:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000398:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800039c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <SystemInit+0x60>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <SystemInit+0x60>)
 80003a4:	6812      	ldr	r2, [r2, #0]
 80003a6:	f042 0201 	orr.w	r2, r2, #1
 80003aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <SystemInit+0x60>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <SystemInit+0x60>)
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <SystemInit+0x60>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <SystemInit+0x60>)
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <SystemInit+0x64>)
 80003c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <SystemInit+0x60>)
 80003ca:	4a08      	ldr	r2, [pc, #32]	; (80003ec <SystemInit+0x60>)
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80003d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <SystemInit+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80003da:	f000 f887 	bl	80004ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003de:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <SystemInit+0x5c>)
 80003e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003e4:	609a      	str	r2, [r3, #8]
#endif
}
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	e000ed00 	and	lr, r0, r0, lsl #26
 80003ec:	40023800 	andmi	r3, r2, r0, lsl #16
 80003f0:	24003010 	strcs	r3, [r0], #-16

080003f4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	2302      	movs	r3, #2
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	2302      	movs	r3, #2
 800040c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800040e:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f003 030c 	and.w	r3, r3, #12
 8000416:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	2b04      	cmp	r3, #4
 800041c:	d007      	beq.n	800042e <SystemCoreClockUpdate+0x3a>
 800041e:	2b08      	cmp	r3, #8
 8000420:	d009      	beq.n	8000436 <SystemCoreClockUpdate+0x42>
 8000422:	2b00      	cmp	r3, #0
 8000424:	d13f      	bne.n	80004a6 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <SystemCoreClockUpdate+0xe8>)
 8000428:	4a2d      	ldr	r2, [pc, #180]	; (80004e0 <SystemCoreClockUpdate+0xec>)
 800042a:	601a      	str	r2, [r3, #0]
      break;
 800042c:	e03f      	b.n	80004ae <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <SystemCoreClockUpdate+0xe8>)
 8000430:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <SystemCoreClockUpdate+0xf0>)
 8000432:	601a      	str	r2, [r3, #0]
      break;
 8000434:	e03b      	b.n	80004ae <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000436:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800043e:	0d9b      	lsrs	r3, r3, #22
 8000440:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800044a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00d      	beq.n	800046e <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000452:	4a24      	ldr	r2, [pc, #144]	; (80004e4 <SystemCoreClockUpdate+0xf0>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	fbb2 f2f3 	udiv	r2, r2, r3
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 800045c:	6859      	ldr	r1, [r3, #4]
 800045e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000462:	400b      	ands	r3, r1
 8000464:	099b      	lsrs	r3, r3, #6
 8000466:	fb03 f302 	mul.w	r3, r3, r2
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e00c      	b.n	8000488 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <SystemCoreClockUpdate+0xec>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	fbb2 f2f3 	udiv	r2, r2, r3
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 8000478:	6859      	ldr	r1, [r3, #4]
 800047a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800047e:	400b      	ands	r3, r1
 8000480:	099b      	lsrs	r3, r3, #6
 8000482:	fb03 f302 	mul.w	r3, r3, r2
 8000486:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000490:	0c1b      	lsrs	r3, r3, #16
 8000492:	3301      	adds	r3, #1
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	fbb2 f2f3 	udiv	r2, r2, r3
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SystemCoreClockUpdate+0xe8>)
 80004a2:	601a      	str	r2, [r3, #0]
      break;
 80004a4:	e003      	b.n	80004ae <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <SystemCoreClockUpdate+0xe8>)
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <SystemCoreClockUpdate+0xec>)
 80004aa:	601a      	str	r2, [r3, #0]
      break;
 80004ac:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <SystemCoreClockUpdate+0xe4>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004b6:	091b      	lsrs	r3, r3, #4
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <SystemCoreClockUpdate+0xf4>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <SystemCoreClockUpdate+0xe8>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	40da      	lsrs	r2, r3
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <SystemCoreClockUpdate+0xe8>)
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	371c      	adds	r7, #28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40023800 	andmi	r3, r2, r0, lsl #16
 80004dc:	20000000 	andcs	r0, r0, r0
 80004e0:	00f42400 	rscseq	r2, r4, r0, lsl #8
 80004e4:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80004e8:	20000004 	andcs	r0, r0, r4

080004ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004fa:	4b35      	ldr	r3, [pc, #212]	; (80005d0 <SetSysClock+0xe4>)
 80004fc:	4a34      	ldr	r2, [pc, #208]	; (80005d0 <SetSysClock+0xe4>)
 80004fe:	6812      	ldr	r2, [r2, #0]
 8000500:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000504:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000506:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <SetSysClock+0xe4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <SetSysClock+0x38>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000522:	d1f0      	bne.n	8000506 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <SetSysClock+0xe4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000530:	2301      	movs	r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	e001      	b.n	800053a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d142      	bne.n	80005c6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <SetSysClock+0xe4>)
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <SetSysClock+0xe4>)
 8000544:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000546:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800054a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <SetSysClock+0xe8>)
 800054e:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SetSysClock+0xe8>)
 8000550:	6812      	ldr	r2, [r2, #0]
 8000552:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000556:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <SetSysClock+0xe4>)
 800055a:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <SetSysClock+0xe4>)
 800055c:	6892      	ldr	r2, [r2, #8]
 800055e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SetSysClock+0xe4>)
 8000562:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <SetSysClock+0xe4>)
 8000564:	6892      	ldr	r2, [r2, #8]
 8000566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800056a:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <SetSysClock+0xe4>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <SetSysClock+0xe4>)
 8000570:	6892      	ldr	r2, [r2, #8]
 8000572:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000576:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <SetSysClock+0xe4>)
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <SetSysClock+0xec>)
 800057c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <SetSysClock+0xe4>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <SetSysClock+0xe4>)
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000588:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800058a:	bf00      	nop
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <SetSysClock+0xe4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <SetSysClock+0xf0>)
 800059a:	f240 6204 	movw	r2, #1540	; 0x604
 800059e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <SetSysClock+0xe4>)
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <SetSysClock+0xe4>)
 80005a4:	6892      	ldr	r2, [r2, #8]
 80005a6:	f022 0203 	bic.w	r2, r2, #3
 80005aa:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SetSysClock+0xe4>)
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <SetSysClock+0xe4>)
 80005b0:	6892      	ldr	r2, [r2, #8]
 80005b2:	f042 0202 	orr.w	r2, r2, #2
 80005b6:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80005b8:	bf00      	nop
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SetSysClock+0xe4>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 030c 	and.w	r3, r3, #12
 80005c2:	2b08      	cmp	r3, #8
 80005c4:	d1f9      	bne.n	80005ba <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40023800 	andmi	r3, r2, r0, lsl #16
 80005d4:	40007000 	andmi	r7, r0, r0
 80005d8:	07404b19 	smlaldeq	r4, r0, r9, fp
 80005dc:	40023c00 	andmi	r3, r2, r0, lsl #24

080005e0 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <NVIC_PriorityGroupConfig+0x20>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	60d3      	str	r3, [r2, #12]
}
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	and	lr, r0, r0, lsl #26

08000604 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	2300      	movs	r3, #0
 8000612:	73bb      	strb	r3, [r7, #14]
 8000614:	230f      	movs	r3, #15
 8000616:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	78db      	ldrb	r3, [r3, #3]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d037      	beq.n	8000690 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <NVIC_Init+0xb4>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	43db      	mvns	r3, r3
 8000626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800062a:	0a1b      	lsrs	r3, r3, #8
 800062c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	f1c3 0304 	rsb	r3, r3, #4
 8000634:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000636:	7b7a      	ldrb	r2, [r7, #13]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	fa42 f303 	asr.w	r3, r2, r3
 800063e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	461a      	mov	r2, r3
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789a      	ldrb	r2, [r3, #2]
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	4013      	ands	r3, r2
 8000656:	b2da      	uxtb	r2, r3
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	4313      	orrs	r3, r2
 800065c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <NVIC_Init+0xb8>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	7bfa      	ldrb	r2, [r7, #15]
 800066e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <NVIC_Init+0xb8>)
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	0952      	lsrs	r2, r2, #5
 800067a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	7809      	ldrb	r1, [r1, #0]
 8000680:	f001 011f 	and.w	r1, r1, #31
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800068a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800068e:	e00e      	b.n	80006ae <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <NVIC_Init+0xb8>)
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	0952      	lsrs	r2, r2, #5
 8000698:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	7809      	ldrb	r1, [r1, #0]
 800069e:	f001 011f 	and.w	r1, r1, #31
 80006a2:	2001      	movs	r0, #1
 80006a4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006a8:	3220      	adds	r2, #32
 80006aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	and	lr, r0, r0, lsl #26
 80006bc:	e000e100 	and	lr, r0, r0, lsl #2

080006c0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <NVIC_SetVectorTable+0x28>)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80006d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	and	lr, r0, r0, lsl #26

080006ec <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4602      	mov	r2, r0
 80006f4:	460b      	mov	r3, r1
 80006f6:	71fa      	strb	r2, [r7, #7]
 80006f8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <NVIC_SystemLPConfig+0x3c>)
 8000702:	4a09      	ldr	r2, [pc, #36]	; (8000728 <NVIC_SystemLPConfig+0x3c>)
 8000704:	6911      	ldr	r1, [r2, #16]
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	430a      	orrs	r2, r1
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	e006      	b.n	800071c <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <NVIC_SystemLPConfig+0x3c>)
 8000710:	4a05      	ldr	r2, [pc, #20]	; (8000728 <NVIC_SystemLPConfig+0x3c>)
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	43d2      	mvns	r2, r2
 8000718:	400a      	ands	r2, r1
 800071a:	611a      	str	r2, [r3, #16]
  }
}
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	and	lr, r0, r0, lsl #26

0800072c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b04      	cmp	r3, #4
 8000738:	d106      	bne.n	8000748 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <SysTick_CLKSourceConfig+0x34>)
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <SysTick_CLKSourceConfig+0x34>)
 800073e:	6812      	ldr	r2, [r2, #0]
 8000740:	f042 0204 	orr.w	r2, r2, #4
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	e005      	b.n	8000754 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_CLKSourceConfig+0x34>)
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <SysTick_CLKSourceConfig+0x34>)
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	f022 0204 	bic.w	r2, r2, #4
 8000752:	601a      	str	r2, [r3, #0]
  }
}
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e010 	and	lr, r0, r0, lsl r0

08000764 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4b4b      	ldr	r3, [pc, #300]	; (800089c <GPIO_DeInit+0x138>)
 8000770:	429a      	cmp	r2, r3
 8000772:	d108      	bne.n	8000786 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000774:	2001      	movs	r0, #1
 8000776:	2101      	movs	r1, #1
 8000778:	f000 feb6 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800077c:	2001      	movs	r0, #1
 800077e:	2100      	movs	r1, #0
 8000780:	f000 feb2 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 8000784:	e086      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <GPIO_DeInit+0x13c>)
 800078a:	429a      	cmp	r2, r3
 800078c:	d108      	bne.n	80007a0 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800078e:	2002      	movs	r0, #2
 8000790:	2101      	movs	r1, #1
 8000792:	f000 fea9 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000796:	2002      	movs	r0, #2
 8000798:	2100      	movs	r1, #0
 800079a:	f000 fea5 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 800079e:	e079      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <GPIO_DeInit+0x140>)
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d108      	bne.n	80007ba <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80007a8:	2004      	movs	r0, #4
 80007aa:	2101      	movs	r1, #1
 80007ac:	f000 fe9c 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80007b0:	2004      	movs	r0, #4
 80007b2:	2100      	movs	r1, #0
 80007b4:	f000 fe98 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 80007b8:	e06c      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <GPIO_DeInit+0x144>)
 80007be:	429a      	cmp	r2, r3
 80007c0:	d108      	bne.n	80007d4 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80007c2:	2008      	movs	r0, #8
 80007c4:	2101      	movs	r1, #1
 80007c6:	f000 fe8f 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80007ca:	2008      	movs	r0, #8
 80007cc:	2100      	movs	r1, #0
 80007ce:	f000 fe8b 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 80007d2:	e05f      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <GPIO_DeInit+0x148>)
 80007d8:	429a      	cmp	r2, r3
 80007da:	d108      	bne.n	80007ee <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80007dc:	2010      	movs	r0, #16
 80007de:	2101      	movs	r1, #1
 80007e0:	f000 fe82 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80007e4:	2010      	movs	r0, #16
 80007e6:	2100      	movs	r1, #0
 80007e8:	f000 fe7e 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 80007ec:	e052      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <GPIO_DeInit+0x14c>)
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d108      	bne.n	8000808 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80007f6:	2020      	movs	r0, #32
 80007f8:	2101      	movs	r1, #1
 80007fa:	f000 fe75 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80007fe:	2020      	movs	r0, #32
 8000800:	2100      	movs	r1, #0
 8000802:	f000 fe71 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 8000806:	e045      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <GPIO_DeInit+0x150>)
 800080c:	429a      	cmp	r2, r3
 800080e:	d108      	bne.n	8000822 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	2101      	movs	r1, #1
 8000814:	f000 fe68 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000818:	2040      	movs	r0, #64	; 0x40
 800081a:	2100      	movs	r1, #0
 800081c:	f000 fe64 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 8000820:	e038      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <GPIO_DeInit+0x154>)
 8000826:	429a      	cmp	r2, r3
 8000828:	d108      	bne.n	800083c <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800082a:	2080      	movs	r0, #128	; 0x80
 800082c:	2101      	movs	r1, #1
 800082e:	f000 fe5b 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000832:	2080      	movs	r0, #128	; 0x80
 8000834:	2100      	movs	r1, #0
 8000836:	f000 fe57 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 800083a:	e02b      	b.n	8000894 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <GPIO_DeInit+0x158>)
 8000840:	429a      	cmp	r2, r3
 8000842:	d10a      	bne.n	800085a <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000844:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000848:	2101      	movs	r1, #1
 800084a:	f000 fe4d 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800084e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000852:	2100      	movs	r1, #0
 8000854:	f000 fe48 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 8000858:	e01c      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <GPIO_DeInit+0x15c>)
 800085e:	429a      	cmp	r2, r3
 8000860:	d10a      	bne.n	8000878 <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8000862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000866:	2101      	movs	r1, #1
 8000868:	f000 fe3e 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800086c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000870:	2100      	movs	r1, #0
 8000872:	f000 fe39 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
 8000876:	e00d      	b.n	8000894 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <GPIO_DeInit+0x160>)
 800087c:	429a      	cmp	r2, r3
 800087e:	d109      	bne.n	8000894 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8000880:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000884:	2101      	movs	r1, #1
 8000886:	f000 fe2f 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800088a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800088e:	2100      	movs	r1, #0
 8000890:	f000 fe2a 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40020000 	andmi	r0, r2, r0
 80008a0:	40020400 	andmi	r0, r2, r0, lsl #8
 80008a4:	40020800 	andmi	r0, r2, r0, lsl #16
 80008a8:	40020c00 	andmi	r0, r2, r0, lsl #24
 80008ac:	40021000 	andmi	r1, r2, r0
 80008b0:	40021400 	andmi	r1, r2, r0, lsl #8
 80008b4:	40021800 	andmi	r1, r2, r0, lsl #16
 80008b8:	40021c00 	andmi	r1, r2, r0, lsl #24
 80008bc:	40022000 	andmi	r2, r2, r0
 80008c0:	40022400 	andmi	r2, r2, r0, lsl #8
 80008c4:	40022800 	andmi	r2, r2, r0, lsl #16

080008c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e076      	b.n	80009d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	2201      	movs	r2, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d165      	bne.n	80009cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2103      	movs	r1, #3
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	401a      	ands	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	431a      	orrs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d003      	beq.n	800093e <GPIO_Init+0x76>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d12e      	bne.n	800099c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2103      	movs	r1, #3
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	401a      	ands	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	795b      	ldrb	r3, [r3, #5]
 800095c:	4619      	mov	r1, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	431a      	orrs	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	b29b      	uxth	r3, r3
 8000974:	2101      	movs	r1, #1
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	401a      	ands	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	799b      	ldrb	r3, [r3, #6]
 800098a:	4619      	mov	r1, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	b29b      	uxth	r3, r3
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	b29b      	uxth	r3, r3
 8000996:	431a      	orrs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2103      	movs	r1, #3
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	401a      	ands	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	79db      	ldrb	r3, [r3, #7]
 80009bc:	4619      	mov	r1, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d985      	bls.n	80008e4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	71da      	strb	r2, [r3, #7]
}
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8000a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000a2a:	887a      	ldrh	r2, [r7, #2]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000a38:	887a      	ldrh	r2, [r7, #2]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	60fb      	str	r3, [r7, #12]
}
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	4013      	ands	r3, r2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e001      	b.n	8000a82 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	b29b      	uxth	r3, r3
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e001      	b.n	8000ad2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	b29b      	uxth	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	831a      	strh	r2, [r3, #24]
}
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	835a      	strh	r2, [r3, #26]
}
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	460a      	mov	r2, r1
 8000b40:	807a      	strh	r2, [r7, #2]
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	887a      	ldrh	r2, [r7, #2]
 8000b4e:	831a      	strh	r2, [r3, #24]
 8000b50:	e002      	b.n	8000b58 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	835a      	strh	r2, [r3, #26]
  }
}
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	615a      	str	r2, [r3, #20]
}
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	405a      	eors	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	615a      	str	r2, [r3, #20]
}
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	4613      	mov	r3, r2
 8000bae:	460a      	mov	r2, r1
 8000bb0:	807a      	strh	r2, [r7, #2]
 8000bb2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bbc:	787a      	ldrb	r2, [r7, #1]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3108      	adds	r1, #8
 8000be0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	200f      	movs	r0, #15
 8000bee:	fa00 f303 	lsl.w	r3, r0, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4019      	ands	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	08db      	lsrs	r3, r3, #3
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3208      	adds	r2, #8
 8000c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3208      	adds	r2, #8
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <RCC_DeInit+0x60>)
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <RCC_DeInit+0x60>)
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	f042 0201 	orr.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <RCC_DeInit+0x60>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <RCC_DeInit+0x60>)
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <RCC_DeInit+0x60>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <RCC_DeInit+0x60>)
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <RCC_DeInit+0x64>)
 8000c5a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <RCC_DeInit+0x60>)
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <RCC_DeInit+0x68>)
 8000c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <RCC_DeInit+0x60>)
 8000c66:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <RCC_DeInit+0x6c>)
 8000c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <RCC_DeInit+0x60>)
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <RCC_DeInit+0x60>)
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c76:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <RCC_DeInit+0x60>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <RCC_DeInit+0x60>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	andmi	r3, r2, r0, lsl #16
 8000c94:	24003010 	strcs	r3, [r0], #-16
 8000c98:	20003000 	andcs	r3, r0, r0
 8000c9c:	24003000 	strcs	r3, [r0], #-0

08000ca0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <RCC_HSEConfig+0x20>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <RCC_HSEConfig+0x20>)
 8000cb2:	79fa      	ldrb	r2, [r7, #7]
 8000cb4:	701a      	strb	r2, [r3, #0]
}
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40023802 	andmi	r3, r2, r2, lsl #16

08000cc4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000cd6:	2031      	movs	r0, #49	; 0x31
 8000cd8:	f000 fd56 	bl	8001788 <RCC_GetFlagStatus>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000cec:	d002      	beq.n	8000cf4 <RCC_WaitForHSEStartUp+0x30>
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f0      	beq.n	8000cd6 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000cf4:	2031      	movs	r0, #49	; 0x31
 8000cf6:	f000 fd47 	bl	8001788 <RCC_GetFlagStatus>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000d00:	2301      	movs	r3, #1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	e001      	b.n	8000d0a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <RCC_AdjustHSICalibrationValue+0x38>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <RCC_AdjustHSICalibrationValue+0x38>)
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	andmi	r3, r2, r0, lsl #16

08000d50 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <RCC_HSICmd+0x1c>)
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	42470000 	submi	r0, r7, #0

08000d70 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <RCC_LSEConfig+0x3c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <RCC_LSEConfig+0x3c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <RCC_LSEConfig+0x22>
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d004      	beq.n	8000d9a <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8000d90:	e007      	b.n	8000da2 <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <RCC_LSEConfig+0x3c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
      break;
 8000d98:	e003      	b.n	8000da2 <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <RCC_LSEConfig+0x3c>)
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	701a      	strb	r2, [r3, #0]
      break;
 8000da0:	bf00      	nop
    default:
      break;
  }
}
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40023870 	andmi	r3, r2, r0, ror r8

08000db0 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <RCC_LSICmd+0x1c>)
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	42470e80 	submi	r0, r7, #128, 28	; 0x800

08000dd0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <RCC_PLLConfig+0x38>)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	0191      	lsls	r1, r2, #6
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	4311      	orrs	r1, r2
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	0852      	lsrs	r2, r2, #1
 8000dec:	3a01      	subs	r2, #1
 8000dee:	0412      	lsls	r2, r2, #16
 8000df0:	4311      	orrs	r1, r2
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40023800 	andmi	r3, r2, r0, lsl #16

08000e0c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <RCC_PLLCmd+0x1c>)
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	42470060 	submi	r0, r7, #96	; 0x60

08000e2c <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <RCC_PLLI2SConfig+0x2c>)
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	0191      	lsls	r1, r2, #6
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	0612      	lsls	r2, r2, #24
 8000e42:	4311      	orrs	r1, r2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	0712      	lsls	r2, r2, #28
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40023800 	andmi	r3, r2, r0, lsl #16

08000e5c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <RCC_PLLI2SCmd+0x1c>)
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	42470068 	submi	r0, r7, #104	; 0x68

08000e7c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <RCC_PLLSAIConfig+0x2c>)
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	0191      	lsls	r1, r2, #6
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	0612      	lsls	r2, r2, #24
 8000e92:	4311      	orrs	r1, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	0712      	lsls	r2, r2, #28
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40023800 	andmi	r3, r2, r0, lsl #16

08000eac <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <RCC_PLLSAICmd+0x1c>)
 8000eb8:	79fa      	ldrb	r2, [r7, #7]
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	42470070 	submi	r0, r7, #112	; 0x70

08000ecc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <RCC_ClockSecuritySystemCmd+0x1c>)
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	4247004c 	submi	r0, r7, #76	; 0x4c

08000eec <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <RCC_MCO1Config+0x38>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000f06:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <RCC_MCO1Config+0x38>)
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40023800 	andmi	r3, r2, r0, lsl #16

08000f28 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <RCC_MCO2Config+0x38>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <RCC_MCO2Config+0x38>)
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	609a      	str	r2, [r3, #8]
}
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40023800 	andmi	r3, r2, r0, lsl #16

08000f64 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <RCC_SYSCLKConfig+0x34>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f023 0303 	bic.w	r3, r3, #3
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <RCC_SYSCLKConfig+0x34>)
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	609a      	str	r2, [r3, #8]
}
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	andmi	r3, r2, r0, lsl #16

08000f9c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <RCC_GetSYSCLKSource+0x1c>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	andmi	r3, r2, r0, lsl #16

08000fbc <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <RCC_HCLKConfig+0x34>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <RCC_HCLKConfig+0x34>)
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	andmi	r3, r2, r0, lsl #16

08000ff4 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <RCC_PCLK1Config+0x34>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800100c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <RCC_PCLK1Config+0x34>)
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	609a      	str	r2, [r3, #8]
}
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	andmi	r3, r2, r0, lsl #16

0800102c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <RCC_PCLK2Config+0x34>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001044:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <RCC_PCLK2Config+0x34>)
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	609a      	str	r2, [r3, #8]
}
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40023800 	andmi	r3, r2, r0, lsl #16

08001064 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001084:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d007      	beq.n	80010a4 <RCC_GetClocksFreq+0x40>
 8001094:	2b08      	cmp	r3, #8
 8001096:	d009      	beq.n	80010ac <RCC_GetClocksFreq+0x48>
 8001098:	2b00      	cmp	r3, #0
 800109a:	d13f      	bne.n	800111c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a43      	ldr	r2, [pc, #268]	; (80011ac <RCC_GetClocksFreq+0x148>)
 80010a0:	601a      	str	r2, [r3, #0]
      break;
 80010a2:	e03f      	b.n	8001124 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a42      	ldr	r2, [pc, #264]	; (80011b0 <RCC_GetClocksFreq+0x14c>)
 80010a8:	601a      	str	r2, [r3, #0]
      break;
 80010aa:	e03b      	b.n	8001124 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	0d9b      	lsrs	r3, r3, #22
 80010b6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010c8:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <RCC_GetClocksFreq+0x14c>)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010d8:	400b      	ands	r3, r1
 80010da:	099b      	lsrs	r3, r3, #6
 80010dc:	fb03 f302 	mul.w	r3, r3, r2
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e00c      	b.n	80010fe <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <RCC_GetClocksFreq+0x148>)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 80010ee:	6859      	ldr	r1, [r3, #4]
 80010f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010f4:	400b      	ands	r3, r1
 80010f6:	099b      	lsrs	r3, r3, #6
 80010f8:	fb03 f302 	mul.w	r3, r3, r2
 80010fc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	3301      	adds	r3, #1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	fbb2 f2f3 	udiv	r2, r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
      break;
 800111a:	e003      	b.n	8001124 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <RCC_GetClocksFreq+0x148>)
 8001120:	601a      	str	r2, [r3, #0]
      break;
 8001122:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800112c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <RCC_GetClocksFreq+0x150>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	40da      	lsrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001154:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	0a9b      	lsrs	r3, r3, #10
 800115a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <RCC_GetClocksFreq+0x150>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	40da      	lsrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <RCC_GetClocksFreq+0x144>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800117c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	0b5b      	lsrs	r3, r3, #13
 8001182:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <RCC_GetClocksFreq+0x150>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	40da      	lsrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60da      	str	r2, [r3, #12]
}
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	andmi	r3, r2, r0, lsl #16
 80011ac:	00f42400 	rscseq	r2, r4, r0, lsl #8
 80011b0:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80011b4:	20000014 	andcs	r0, r0, r4, lsl r0

080011b8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011ce:	d111      	bne.n	80011f4 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <RCC_RTCCLKConfig+0x58>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80011dc:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80011e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <RCC_RTCCLKConfig+0x58>)
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <RCC_RTCCLKConfig+0x58>)
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <RCC_RTCCLKConfig+0x58>)
 80011f8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001200:	430a      	orrs	r2, r1
 8001202:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	andmi	r3, r2, r0, lsl #16

08001214 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <RCC_RTCCLKCmd+0x1c>)
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

08001234 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <RCC_BackupResetCmd+0x1c>)
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	42470e40 	submi	r0, r7, #64, 28	; 0x400

08001254 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <RCC_I2SCLKConfig+0x18>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	4247015c 	submi	r0, r7, #92, 2

08001270 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800127e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001282:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f023 031f 	bic.w	r3, r3, #31
 800128a:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40023800 	andmi	r3, r2, r0, lsl #16

080012ac <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 80012ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012be:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	andmi	r3, r2, r0, lsl #16

080012ec <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <RCC_SAIBlockACLKConfig+0x38>)
 80012fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001306:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <RCC_SAIBlockACLKConfig+0x38>)
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	andmi	r3, r2, r0, lsl #16

08001328 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <RCC_SAIBlockBCLKConfig+0x38>)
 8001336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001342:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4313      	orrs	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <RCC_SAIBlockBCLKConfig+0x38>)
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	andmi	r3, r2, r0, lsl #16

08001364 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <RCC_LTDCCLKDivConfig+0x38>)
 8001372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001376:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800137e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <RCC_LTDCCLKDivConfig+0x38>)
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	andmi	r3, r2, r0, lsl #16

080013a0 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <RCC_TIMCLKPresConfig+0x18>)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
  
}
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	424711e0 	submi	r1, r7, #224, 2	; 0x38

080013bc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <RCC_AHB1PeriphClockCmd+0x38>)
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <RCC_AHB1PeriphClockCmd+0x38>)
 80013d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
 80013da:	e006      	b.n	80013ea <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <RCC_AHB1PeriphClockCmd+0x38>)
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <RCC_AHB1PeriphClockCmd+0x38>)
 80013e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	43d2      	mvns	r2, r2
 80013e6:	400a      	ands	r2, r1
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40023800 	andmi	r3, r2, r0, lsl #16

080013f8 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <RCC_AHB2PeriphClockCmd+0x38>)
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <RCC_AHB2PeriphClockCmd+0x38>)
 800140e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e006      	b.n	8001426 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <RCC_AHB2PeriphClockCmd+0x38>)
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <RCC_AHB2PeriphClockCmd+0x38>)
 800141c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	43d2      	mvns	r2, r2
 8001422:	400a      	ands	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40023800 	andmi	r3, r2, r0, lsl #16

08001434 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <RCC_AHB3PeriphClockCmd+0x38>)
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <RCC_AHB3PeriphClockCmd+0x38>)
 800144a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	430a      	orrs	r2, r1
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
 8001452:	e006      	b.n	8001462 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <RCC_AHB3PeriphClockCmd+0x38>)
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <RCC_AHB3PeriphClockCmd+0x38>)
 8001458:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	43d2      	mvns	r2, r2
 800145e:	400a      	ands	r2, r1
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023800 	andmi	r3, r2, r0, lsl #16

08001470 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <RCC_APB1PeriphClockCmd+0x38>)
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <RCC_APB1PeriphClockCmd+0x38>)
 8001486:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	430a      	orrs	r2, r1
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
 800148e:	e006      	b.n	800149e <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <RCC_APB1PeriphClockCmd+0x38>)
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <RCC_APB1PeriphClockCmd+0x38>)
 8001494:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	43d2      	mvns	r2, r2
 800149a:	400a      	ands	r2, r1
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	andmi	r3, r2, r0, lsl #16

080014ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <RCC_APB2PeriphClockCmd+0x38>)
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <RCC_APB2PeriphClockCmd+0x38>)
 80014c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
 80014ca:	e006      	b.n	80014da <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <RCC_APB2PeriphClockCmd+0x38>)
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <RCC_APB2PeriphClockCmd+0x38>)
 80014d0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	43d2      	mvns	r2, r2
 80014d6:	400a      	ands	r2, r1
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40023800 	andmi	r3, r2, r0, lsl #16

080014e8 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <RCC_AHB1PeriphResetCmd+0x38>)
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <RCC_AHB1PeriphResetCmd+0x38>)
 80014fe:	6911      	ldr	r1, [r2, #16]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	430a      	orrs	r2, r1
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	e006      	b.n	8001516 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <RCC_AHB1PeriphResetCmd+0x38>)
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <RCC_AHB1PeriphResetCmd+0x38>)
 800150c:	6911      	ldr	r1, [r2, #16]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	43d2      	mvns	r2, r2
 8001512:	400a      	ands	r2, r1
 8001514:	611a      	str	r2, [r3, #16]
  }
}
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40023800 	andmi	r3, r2, r0, lsl #16

08001524 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <RCC_AHB2PeriphResetCmd+0x38>)
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <RCC_AHB2PeriphResetCmd+0x38>)
 800153a:	6951      	ldr	r1, [r2, #20]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	430a      	orrs	r2, r1
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	e006      	b.n	8001552 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <RCC_AHB2PeriphResetCmd+0x38>)
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <RCC_AHB2PeriphResetCmd+0x38>)
 8001548:	6951      	ldr	r1, [r2, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	43d2      	mvns	r2, r2
 800154e:	400a      	ands	r2, r1
 8001550:	615a      	str	r2, [r3, #20]
  }
}
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40023800 	andmi	r3, r2, r0, lsl #16

08001560 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <RCC_AHB3PeriphResetCmd+0x38>)
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <RCC_AHB3PeriphResetCmd+0x38>)
 8001576:	6991      	ldr	r1, [r2, #24]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	430a      	orrs	r2, r1
 800157c:	619a      	str	r2, [r3, #24]
 800157e:	e006      	b.n	800158e <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <RCC_AHB3PeriphResetCmd+0x38>)
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <RCC_AHB3PeriphResetCmd+0x38>)
 8001584:	6991      	ldr	r1, [r2, #24]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	43d2      	mvns	r2, r2
 800158a:	400a      	ands	r2, r1
 800158c:	619a      	str	r2, [r3, #24]
  }
}
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023800 	andmi	r3, r2, r0, lsl #16

0800159c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <RCC_APB1PeriphResetCmd+0x38>)
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <RCC_APB1PeriphResetCmd+0x38>)
 80015b2:	6a11      	ldr	r1, [r2, #32]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	621a      	str	r2, [r3, #32]
 80015ba:	e006      	b.n	80015ca <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <RCC_APB1PeriphResetCmd+0x38>)
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <RCC_APB1PeriphResetCmd+0x38>)
 80015c0:	6a11      	ldr	r1, [r2, #32]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	43d2      	mvns	r2, r2
 80015c6:	400a      	ands	r2, r1
 80015c8:	621a      	str	r2, [r3, #32]
  }
}
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40023800 	andmi	r3, r2, r0, lsl #16

080015d8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <RCC_APB2PeriphResetCmd+0x38>)
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <RCC_APB2PeriphResetCmd+0x38>)
 80015ee:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
 80015f6:	e006      	b.n	8001606 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <RCC_APB2PeriphResetCmd+0x38>)
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <RCC_APB2PeriphResetCmd+0x38>)
 80015fc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	43d2      	mvns	r2, r2
 8001602:	400a      	ands	r2, r1
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40023800 	andmi	r3, r2, r0, lsl #16

08001614 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800162a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	430a      	orrs	r2, r1
 8001630:	651a      	str	r2, [r3, #80]	; 0x50
 8001632:	e006      	b.n	8001642 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 8001638:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	43d2      	mvns	r2, r2
 800163e:	400a      	ands	r2, r1
 8001640:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40023800 	andmi	r3, r2, r0, lsl #16

08001650 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8001666:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	430a      	orrs	r2, r1
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
 800166e:	e006      	b.n	800167e <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 8001674:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	43d2      	mvns	r2, r2
 800167a:	400a      	ands	r2, r1
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40023800 	andmi	r3, r2, r0, lsl #16

0800168c <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80016a2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	659a      	str	r2, [r3, #88]	; 0x58
 80016aa:	e006      	b.n	80016ba <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80016b0:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	43d2      	mvns	r2, r2
 80016b6:	400a      	ands	r2, r1
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40023800 	andmi	r3, r2, r0, lsl #16

080016c8 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80016dc:	4a08      	ldr	r2, [pc, #32]	; (8001700 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80016de:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	661a      	str	r2, [r3, #96]	; 0x60
 80016e6:	e006      	b.n	80016f6 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 80016ec:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	43d2      	mvns	r2, r2
 80016f2:	400a      	ands	r2, r1
 80016f4:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40023800 	andmi	r3, r2, r0, lsl #16

08001704 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8001718:	4a08      	ldr	r2, [pc, #32]	; (800173c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800171a:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	430a      	orrs	r2, r1
 8001720:	665a      	str	r2, [r3, #100]	; 0x64
 8001722:	e006      	b.n	8001732 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <RCC_APB2PeriphClockLPModeCmd+0x38>)
 8001728:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	43d2      	mvns	r2, r2
 800172e:	400a      	ands	r2, r1
 8001730:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40023800 	andmi	r3, r2, r0, lsl #16

08001740 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	71fa      	strb	r2, [r7, #7]
 800174c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <RCC_ITConfig+0x44>)
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <RCC_ITConfig+0x44>)
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	b2d1      	uxtb	r1, r2
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	430a      	orrs	r2, r1
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e009      	b.n	800177a <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <RCC_ITConfig+0x44>)
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <RCC_ITConfig+0x44>)
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	b2d1      	uxtb	r1, r2
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	43d2      	mvns	r2, r2
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	400a      	ands	r2, r1
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]
  }
}
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	4002380d 	andmi	r3, r2, sp, lsl #16

08001788 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d103      	bne.n	80017b4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <RCC_GetFlagStatus+0x70>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e009      	b.n	80017c8 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d103      	bne.n	80017c2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <RCC_GetFlagStatus+0x70>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e002      	b.n	80017c8 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <RCC_GetFlagStatus+0x70>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	74fb      	strb	r3, [r7, #19]
 80017e4:	e001      	b.n	80017ea <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40023800 	andmi	r3, r2, r0, lsl #16

080017fc <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <RCC_ClearFlag+0x18>)
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <RCC_ClearFlag+0x18>)
 8001804:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001806:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800180a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023800 	andmi	r3, r2, r0, lsl #16

08001818 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <RCC_GetITStatus+0x34>)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e001      	b.n	800183c <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	andmi	r3, r2, r0, lsl #16

08001850 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <RCC_ClearITPendingBit+0x1c>)
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	701a      	strb	r2, [r3, #0]
}
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	4002380e 	andmi	r3, r2, lr, lsl #16

08001870 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <USART_DeInit+0xf4>)
 800187c:	429a      	cmp	r2, r3
 800187e:	d108      	bne.n	8001892 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001880:	2010      	movs	r0, #16
 8001882:	2101      	movs	r1, #1
 8001884:	f7ff fea8 	bl	80015d8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001888:	2010      	movs	r0, #16
 800188a:	2100      	movs	r1, #0
 800188c:	f7ff fea4 	bl	80015d8 <RCC_APB2PeriphResetCmd>
 8001890:	e065      	b.n	800195e <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <USART_DeInit+0xf8>)
 8001896:	429a      	cmp	r2, r3
 8001898:	d10a      	bne.n	80018b0 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800189a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800189e:	2101      	movs	r1, #1
 80018a0:	f7ff fe7c 	bl	800159c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80018a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018a8:	2100      	movs	r1, #0
 80018aa:	f7ff fe77 	bl	800159c <RCC_APB1PeriphResetCmd>
 80018ae:	e056      	b.n	800195e <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <USART_DeInit+0xfc>)
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d10a      	bne.n	80018ce <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80018b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018bc:	2101      	movs	r1, #1
 80018be:	f7ff fe6d 	bl	800159c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80018c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018c6:	2100      	movs	r1, #0
 80018c8:	f7ff fe68 	bl	800159c <RCC_APB1PeriphResetCmd>
 80018cc:	e047      	b.n	800195e <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <USART_DeInit+0x100>)
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10a      	bne.n	80018ec <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80018d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018da:	2101      	movs	r1, #1
 80018dc:	f7ff fe5e 	bl	800159c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80018e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018e4:	2100      	movs	r1, #0
 80018e6:	f7ff fe59 	bl	800159c <RCC_APB1PeriphResetCmd>
 80018ea:	e038      	b.n	800195e <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <USART_DeInit+0x104>)
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d10a      	bne.n	800190a <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80018f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80018f8:	2101      	movs	r1, #1
 80018fa:	f7ff fe4f 	bl	800159c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80018fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001902:	2100      	movs	r1, #0
 8001904:	f7ff fe4a 	bl	800159c <RCC_APB1PeriphResetCmd>
 8001908:	e029      	b.n	800195e <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <USART_DeInit+0x108>)
 800190e:	429a      	cmp	r2, r3
 8001910:	d108      	bne.n	8001924 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8001912:	2020      	movs	r0, #32
 8001914:	2101      	movs	r1, #1
 8001916:	f7ff fe5f 	bl	80015d8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800191a:	2020      	movs	r0, #32
 800191c:	2100      	movs	r1, #0
 800191e:	f7ff fe5b 	bl	80015d8 <RCC_APB2PeriphResetCmd>
 8001922:	e01c      	b.n	800195e <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <USART_DeInit+0x10c>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d10a      	bne.n	8001942 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800192c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001930:	2101      	movs	r1, #1
 8001932:	f7ff fe33 	bl	800159c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8001936:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800193a:	2100      	movs	r1, #0
 800193c:	f7ff fe2e 	bl	800159c <RCC_APB1PeriphResetCmd>
 8001940:	e00d      	b.n	800195e <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <USART_DeInit+0x110>)
 8001946:	429a      	cmp	r2, r3
 8001948:	d109      	bne.n	800195e <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800194a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800194e:	2101      	movs	r1, #1
 8001950:	f7ff fe24 	bl	800159c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8001954:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001958:	2100      	movs	r1, #0
 800195a:	f7ff fe1f 	bl	800159c <RCC_APB1PeriphResetCmd>
    }
  }
}
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40011000 	andmi	r1, r1, r0
 8001968:	40004400 	andmi	r4, r0, r0, lsl #8
 800196c:	40004800 	andmi	r4, r0, r0, lsl #16
 8001970:	40004c00 	andmi	r4, r0, r0, lsl #24
 8001974:	40005000 	andmi	r5, r0, r0
 8001978:	40011400 	andmi	r1, r1, r0, lsl #8
 800197c:	40007800 	andmi	r7, r0, r0, lsl #16
 8001980:	40007c00 	andmi	r7, r0, r0, lsl #24

08001984 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	8a1b      	ldrh	r3, [r3, #16]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	88db      	ldrh	r3, [r3, #6]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	4313      	orrs	r3, r2
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	899b      	ldrh	r3, [r3, #12]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019ce:	f023 030c 	bic.w	r3, r3, #12
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	889a      	ldrh	r2, [r3, #4]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	891b      	ldrh	r3, [r3, #8]
 80019dc:	4313      	orrs	r3, r2
 80019de:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	4313      	orrs	r3, r2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8a9b      	ldrh	r3, [r3, #20]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	899b      	ldrh	r3, [r3, #12]
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb21 	bl	8001064 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <USART_Init+0x168>)
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d003      	beq.n	8001a32 <USART_Init+0xae>
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <USART_Init+0x16c>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d102      	bne.n	8001a38 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	e001      	b.n	8001a3c <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	899b      	ldrh	r3, [r3, #12]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da0c      	bge.n	8001a64 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009a      	lsls	r2, r3, #2
 8001a54:	441a      	add	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e00b      	b.n	8001a7c <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009a      	lsls	r2, r3, #2
 8001a6e:	441a      	add	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <USART_Init+0x170>)
 8001a80:	fba3 1302 	umull	r1, r3, r3, r2
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	2264      	movs	r2, #100	; 0x64
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	899b      	ldrh	r3, [r3, #12]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da0d      	bge.n	8001ac4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <USART_Init+0x170>)
 8001ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e00c      	b.n	8001ade <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <USART_Init+0x170>)
 8001ace:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	4313      	orrs	r3, r2
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	811a      	strh	r2, [r3, #8]
}
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40011000 	andmi	r1, r1, r0
 8001af0:	40011400 	andmi	r1, r1, r0, lsl #8
 8001af4:	51eb851f 	mvnpl	r8, pc, lsl r5

08001af8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b06:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	819a      	strh	r2, [r3, #12]
}
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8a1b      	ldrh	r3, [r3, #16]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b4c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	881a      	ldrh	r2, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	889b      	ldrh	r3, [r3, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	88db      	ldrh	r3, [r3, #6]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	821a      	strh	r2, [r3, #16]
}
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop

08001b84 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	80da      	strh	r2, [r3, #6]
}
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop

08001bb0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	899b      	ldrh	r3, [r3, #12]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	819a      	strh	r2, [r3, #12]
 8001bd2:	e007      	b.n	8001be4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	899b      	ldrh	r3, [r3, #12]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	819a      	strh	r2, [r3, #12]
  }
}
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8b1b      	ldrh	r3, [r3, #24]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	8b1b      	ldrh	r3, [r3, #24]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	831a      	strh	r2, [r3, #24]
}
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	899b      	ldrh	r3, [r3, #12]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	819a      	strh	r2, [r3, #12]
 8001c4e:	e007      	b.n	8001c60 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	899b      	ldrh	r3, [r3, #12]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	819a      	strh	r2, [r3, #12]
  }
}  
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8a9b      	ldrh	r3, [r3, #20]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	829a      	strh	r2, [r3, #20]
 8001c8e:	e007      	b.n	8001ca0 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	8a9b      	ldrh	r3, [r3, #20]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	829a      	strh	r2, [r3, #20]
  }
}
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	809a      	strh	r2, [r3, #4]
}
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	889b      	ldrh	r3, [r3, #4]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce2:	b29b      	uxth	r3, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8a1b      	ldrh	r3, [r3, #16]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f023 030f 	bic.w	r3, r3, #15
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8a1b      	ldrh	r3, [r3, #16]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	821a      	strh	r2, [r3, #16]
}
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	899b      	ldrh	r3, [r3, #12]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	819a      	strh	r2, [r3, #12]
 8001d4a:	e007      	b.n	8001d5c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	899b      	ldrh	r3, [r3, #12]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f023 0302 	bic.w	r3, r3, #2
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	819a      	strh	r2, [r3, #12]
  }
}
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	899b      	ldrh	r3, [r3, #12]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	899b      	ldrh	r3, [r3, #12]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	819a      	strh	r2, [r3, #12]
}
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8a1b      	ldrh	r3, [r3, #16]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f023 0320 	bic.w	r3, r3, #32
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8a1b      	ldrh	r3, [r3, #16]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	821a      	strh	r2, [r3, #16]
}
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8a1b      	ldrh	r3, [r3, #16]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	821a      	strh	r2, [r3, #16]
 8001dfa:	e007      	b.n	8001e0c <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8a1b      	ldrh	r3, [r3, #16]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	821a      	strh	r2, [r3, #16]
  }
}
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	899b      	ldrh	r3, [r3, #12]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	819a      	strh	r2, [r3, #12]
}
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8a9b      	ldrh	r3, [r3, #20]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	829a      	strh	r2, [r3, #20]
 8001e5e:	e007      	b.n	8001e70 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8a9b      	ldrh	r3, [r3, #20]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f023 0308 	bic.w	r3, r3, #8
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	829a      	strh	r2, [r3, #20]
  }
}
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop

08001e7c <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8b1b      	ldrh	r3, [r3, #24]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8b1b      	ldrh	r3, [r3, #24]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	831a      	strh	r2, [r3, #24]
}
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	8a9b      	ldrh	r3, [r3, #20]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	829a      	strh	r2, [r3, #20]
 8001eda:	e007      	b.n	8001eec <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	8a9b      	ldrh	r3, [r3, #20]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f023 0320 	bic.w	r3, r3, #32
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	829a      	strh	r2, [r3, #20]
  }
}
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	8a9b      	ldrh	r3, [r3, #20]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	829a      	strh	r2, [r3, #20]
 8001f1a:	e007      	b.n	8001f2c <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8a9b      	ldrh	r3, [r3, #20]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f023 0310 	bic.w	r3, r3, #16
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	829a      	strh	r2, [r3, #20]
  }
}
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop

08001f38 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8a9b      	ldrh	r3, [r3, #20]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	8a9b      	ldrh	r3, [r3, #20]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	829a      	strh	r2, [r3, #20]
}
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8a9b      	ldrh	r3, [r3, #20]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	829a      	strh	r2, [r3, #20]
 8001f92:	e007      	b.n	8001fa4 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8a9b      	ldrh	r3, [r3, #20]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f023 0302 	bic.w	r3, r3, #2
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	829a      	strh	r2, [r3, #20]
  }
}
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	460a      	mov	r2, r1
 8001fbc:	807a      	strh	r2, [r7, #2]
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8a9b      	ldrh	r3, [r3, #20]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	829a      	strh	r2, [r3, #20]
 8001fd6:	e009      	b.n	8001fec <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8a9b      	ldrh	r3, [r3, #20]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	829a      	strh	r2, [r3, #20]
  }
}
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	460a      	mov	r2, r1
 8002004:	807a      	strh	r2, [r7, #2]
 8002006:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d103      	bne.n	8002046 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	330c      	adds	r3, #12
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e009      	b.n	800205a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d103      	bne.n	8002054 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3310      	adds	r3, #16
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e002      	b.n	800205a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3314      	adds	r3, #20
 8002058:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800205a:	787b      	ldrb	r3, [r7, #1]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	6811      	ldr	r1, [r2, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e006      	b.n	800207c <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	6811      	ldr	r1, [r2, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	43d2      	mvns	r2, r2
 8002078:	400a      	ands	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
  }
}
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29a      	uxth	r2, r3
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	4013      	ands	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	801a      	strh	r2, [r3, #0]
}
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2201      	movs	r2, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d106      	bne.n	800212c <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	899b      	ldrh	r3, [r3, #12]
 8002122:	b29b      	uxth	r3, r3
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4013      	ands	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e00f      	b.n	800214c <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d106      	bne.n	8002140 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8a1b      	ldrh	r3, [r3, #16]
 8002136:	b29b      	uxth	r3, r3
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4013      	ands	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e005      	b.n	800214c <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8a9b      	ldrh	r3, [r3, #20]
 8002144:	b29b      	uxth	r3, r3
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <USART_GetITStatus+0x9c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	74fb      	strb	r3, [r7, #19]
 800217a:	e001      	b.n	8002180 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002180:	7cfb      	ldrb	r3, [r7, #19]
}
 8002182:	4618      	mov	r0, r3
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop

08002190 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800219c:	2300      	movs	r3, #0
 800219e:	81fb      	strh	r3, [r7, #14]
 80021a0:	2300      	movs	r3, #0
 80021a2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	2201      	movs	r2, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80021b4:	89bb      	ldrh	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	801a      	strh	r2, [r3, #0]
}
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80021cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d0:	2101      	movs	r1, #1
 80021d2:	f7ff fa01 	bl	80015d8 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80021d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021da:	2100      	movs	r1, #0
 80021dc:	f7ff f9fc 	bl	80015d8 <RCC_APB2PeriphResetCmd>
}
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop

080021e4 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SYSCFG_MemoryRemapConfig+0x1c>)
 80021f0:	79fa      	ldrb	r2, [r7, #7]
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40013800 	andmi	r3, r1, r0, lsl #16

08002204 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SYSCFG_MemorySwappingBank+0x1c>)
 8002210:	79fa      	ldrb	r2, [r7, #7]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	42270020 	eormi	r0, r7, #32

08002224 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002224:	b490      	push	{r4, r7}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	71fa      	strb	r2, [r7, #7]
 8002230:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <SYSCFG_EXTILineConfig+0x78>)
 8002248:	79ba      	ldrb	r2, [r7, #6]
 800224a:	0892      	lsrs	r2, r2, #2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	4913      	ldr	r1, [pc, #76]	; (800229c <SYSCFG_EXTILineConfig+0x78>)
 8002250:	79b8      	ldrb	r0, [r7, #6]
 8002252:	0880      	lsrs	r0, r0, #2
 8002254:	b2c0      	uxtb	r0, r0
 8002256:	3002      	adds	r0, #2
 8002258:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	43c9      	mvns	r1, r1
 8002260:	4001      	ands	r1, r0
 8002262:	3202      	adds	r2, #2
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <SYSCFG_EXTILineConfig+0x78>)
 800226a:	79ba      	ldrb	r2, [r7, #6]
 800226c:	0892      	lsrs	r2, r2, #2
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	490a      	ldr	r1, [pc, #40]	; (800229c <SYSCFG_EXTILineConfig+0x78>)
 8002272:	79b8      	ldrb	r0, [r7, #6]
 8002274:	0880      	lsrs	r0, r0, #2
 8002276:	b2c0      	uxtb	r0, r0
 8002278:	3002      	adds	r0, #2
 800227a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800227e:	79fc      	ldrb	r4, [r7, #7]
 8002280:	79b9      	ldrb	r1, [r7, #6]
 8002282:	f001 0103 	and.w	r1, r1, #3
 8002286:	0089      	lsls	r1, r1, #2
 8002288:	fa04 f101 	lsl.w	r1, r4, r1
 800228c:	4301      	orrs	r1, r0
 800228e:	3202      	adds	r2, #2
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bc90      	pop	{r4, r7}
 800229a:	4770      	bx	lr
 800229c:	40013800 	andmi	r3, r1, r0, lsl #16

080022a0 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	422700dc 	eormi	r0, r7, #220	; 0xdc

080022bc <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SYSCFG_CompensationCellCmd+0x1c>)
 80022c8:	79fa      	ldrb	r2, [r7, #7]
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	42270400 	eormi	r0, r7, #0, 8

080022dc <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <SYSCFG_GetCompensationCellStatus+0x30>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	e001      	b.n	80022fc <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40013800 	andmi	r3, r1, r0, lsl #16

08002310 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <I2C_DeInit+0x68>)
 800231c:	429a      	cmp	r2, r3
 800231e:	d10a      	bne.n	8002336 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002320:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002324:	2101      	movs	r1, #1
 8002326:	f7ff f939 	bl	800159c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800232a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800232e:	2100      	movs	r1, #0
 8002330:	f7ff f934 	bl	800159c <RCC_APB1PeriphResetCmd>
 8002334:	e01c      	b.n	8002370 <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <I2C_DeInit+0x6c>)
 800233a:	429a      	cmp	r2, r3
 800233c:	d10a      	bne.n	8002354 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800233e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002342:	2101      	movs	r1, #1
 8002344:	f7ff f92a 	bl	800159c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8002348:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800234c:	2100      	movs	r1, #0
 800234e:	f7ff f925 	bl	800159c <RCC_APB1PeriphResetCmd>
 8002352:	e00d      	b.n	8002370 <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <I2C_DeInit+0x70>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d109      	bne.n	8002370 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800235c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002360:	2101      	movs	r1, #1
 8002362:	f7ff f91b 	bl	800159c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8002366:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800236a:	2100      	movs	r1, #0
 800236c:	f7ff f916 	bl	800159c <RCC_APB1PeriphResetCmd>
    }
  }
}
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40005400 	andmi	r5, r0, r0, lsl #8
 800237c:	40005800 	andmi	r5, r0, r0, lsl #16
 8002380:	40005c00 	andmi	r5, r0, r0, lsl #24

08002384 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002392:	2300      	movs	r3, #0
 8002394:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8002396:	2304      	movs	r3, #4
 8002398:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800239a:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <I2C_Init+0x174>)
 800239c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	889b      	ldrh	r3, [r3, #4]
 80023a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80023a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023aa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fe57 	bl	8001064 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <I2C_Init+0x178>)
 80023be:	fba3 1302 	umull	r1, r3, r3, r2
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80023c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023ca:	4313      	orrs	r3, r2
 80023cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023d2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b44      	ldr	r3, [pc, #272]	; (8002500 <I2C_Init+0x17c>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d815      	bhi.n	800241e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8002400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002402:	2b03      	cmp	r3, #3
 8002404:	d801      	bhi.n	800240a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8002406:	2304      	movs	r3, #4
 8002408:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800240a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800240c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800240e:	4313      	orrs	r3, r2
 8002410:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8002412:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002414:	3301      	adds	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	841a      	strh	r2, [r3, #32]
 800241c:	e040      	b.n	80024a0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	88da      	ldrh	r2, [r3, #6]
 8002422:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002426:	429a      	cmp	r2, r3
 8002428:	d109      	bne.n	800243e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800243c:	e00e      	b.n	800245c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	009a      	lsls	r2, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8002454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800245c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800245e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8002466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800246e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002472:	4313      	orrs	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8002480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <I2C_Init+0x180>)
 800248c:	fb82 1203 	smull	r1, r2, r2, r3
 8002490:	1192      	asrs	r2, r2, #6
 8002492:	17db      	asrs	r3, r3, #31
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	b29b      	uxth	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80024a4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80024bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024be:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80024c2:	f023 0302 	bic.w	r3, r3, #2
 80024c6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	889a      	ldrh	r2, [r3, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	895b      	ldrh	r3, [r3, #10]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024d6:	4313      	orrs	r3, r2
 80024d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80024de:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	899a      	ldrh	r2, [r3, #12]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	891b      	ldrh	r3, [r3, #8]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	811a      	strh	r2, [r3, #8]
}
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80024fc:	431bde83 	tstmi	fp, #2096	; 0x830
 8002500:	000186a0 	andeq	r8, r1, r0, lsr #13
 8002504:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08002508 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8002524:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002538:	819a      	strh	r2, [r3, #12]
}
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	801a      	strh	r2, [r3, #0]
  }
}
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800259a:	b29b      	uxth	r3, r3
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	849a      	strh	r2, [r3, #36]	; 0x24
 80025a6:	e007      	b.n	80025b8 <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025d8:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 80025da:	89fb      	ldrh	r3, [r7, #14]
 80025dc:	f023 030f 	bic.w	r3, r3, #15
 80025e0:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	89fa      	ldrh	r2, [r7, #14]
 80025f6:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002632:	b29a      	uxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	801a      	strh	r2, [r3, #0]
  }
}
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	801a      	strh	r2, [r3, #0]
  }
}
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	460a      	mov	r2, r1
 8002690:	70fa      	strb	r2, [r7, #3]
 8002692:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8002694:	78bb      	ldrb	r3, [r7, #2]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	70fb      	strb	r3, [r7, #3]
 80026a2:	e003      	b.n	80026ac <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	821a      	strh	r2, [r3, #16]
}
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	801a      	strh	r2, [r3, #0]
  }
}
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop

08002700 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	899b      	ldrh	r3, [r3, #12]
 8002714:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800271c:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002726:	b29a      	uxth	r2, r3
 8002728:	89fb      	ldrh	r3, [r7, #14]
 800272a:	4313      	orrs	r3, r2
 800272c:	b29b      	uxth	r3, r3
 800272e:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	89fa      	ldrh	r2, [r7, #14]
 8002734:	819a      	strh	r2, [r3, #12]
}
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	899b      	ldrh	r3, [r3, #12]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	819a      	strh	r2, [r3, #12]
 8002762:	e007      	b.n	8002774 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	899b      	ldrh	r3, [r3, #12]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	819a      	strh	r2, [r3, #12]
  }
}
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279c:	b29a      	uxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	801a      	strh	r2, [r3, #0]
  }
}
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e007      	b.n	80027f8 <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	801a      	strh	r2, [r3, #0]
  }
}
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop

08002804 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	e007      	b.n	8002838 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	801a      	strh	r2, [r3, #0]
  }
}
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002856:	d008      	beq.n	800286a <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8b9b      	ldrh	r3, [r3, #28]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	839a      	strh	r2, [r3, #28]
 8002868:	e007      	b.n	800287a <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8b9b      	ldrh	r3, [r3, #28]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	839a      	strh	r2, [r3, #28]
  }
}
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002896:	d108      	bne.n	80028aa <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	e007      	b.n	80028ba <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	801a      	strh	r2, [r3, #0]
  }
}
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	d108      	bne.n	80028ea <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	e007      	b.n	80028fa <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	801a      	strh	r2, [r3, #0]
  }
}
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f043 0310 	orr.w	r3, r3, #16
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f023 0310 	bic.w	r3, r3, #16
 8002932:	b29a      	uxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	801a      	strh	r2, [r3, #0]
  }
}
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	b29a      	uxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	821a      	strh	r2, [r3, #16]
}
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop

08002964 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8a1b      	ldrh	r3, [r3, #16]
 8002970:	b29b      	uxth	r3, r3
 8002972:	b2db      	uxtb	r3, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e007      	b.n	80029b4 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	801a      	strh	r2, [r3, #0]
  }
}
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d2:	d108      	bne.n	80029e6 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	801a      	strh	r2, [r3, #0]
  }
}
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	e007      	b.n	8002a34 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f023 0320 	bic.w	r3, r3, #32
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	801a      	strh	r2, [r3, #0]
  }
}
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop

08002a40 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8b1b      	ldrh	r3, [r3, #24]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	889b      	ldrh	r3, [r3, #4]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	809a      	strh	r2, [r3, #4]
 8002a82:	e007      	b.n	8002a94 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	889b      	ldrh	r3, [r3, #4]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	809a      	strh	r2, [r3, #4]
  }
}
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	889b      	ldrh	r3, [r3, #4]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	809a      	strh	r2, [r3, #4]
 8002ac2:	e007      	b.n	8002ad4 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	889b      	ldrh	r3, [r3, #4]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	809a      	strh	r2, [r3, #4]
  }
}
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	807a      	strh	r2, [r7, #2]
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	889b      	ldrh	r3, [r3, #4]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	809a      	strh	r2, [r3, #4]
 8002b36:	e009      	b.n	8002b4c <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	889b      	ldrh	r3, [r3, #4]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	809a      	strh	r2, [r3, #4]
  }
}
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8a9b      	ldrh	r3, [r3, #20]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8b1b      	ldrh	r3, [r3, #24]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b92:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	401a      	ands	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d102      	bne.n	8002ba6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
 8002ba4:	e001      	b.n	8002baa <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8a9b      	ldrh	r3, [r3, #20]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8b1b      	ldrh	r3, [r3, #24]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bec:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8002bee:	697b      	ldr	r3, [r7, #20]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	0f1b      	lsrs	r3, r3, #28
 8002c1a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c22:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e005      	b.n	8002c3e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
 8002c4e:	e001      	b.n	8002c54 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8002c50:	2300      	movs	r3, #0
 8002c52:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	829a      	strh	r2, [r3, #20]
}
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002ca8:	0c1a      	lsrs	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	889b      	ldrh	r3, [r3, #4]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cba:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8a9b      	ldrh	r3, [r3, #20]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <I2C_GetITStatus+0x48>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e001      	b.n	8002cdc <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop

08002cec <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	829a      	strh	r2, [r3, #20]
}
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 0201 	bic.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2221      	movs	r2, #33	; 0x21
 8002d4e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <DMA_DeInit+0x150>)
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d103      	bne.n	8002d60 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002d58:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <DMA_DeInit+0x154>)
 8002d5a:	223d      	movs	r2, #61	; 0x3d
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	e07e      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <DMA_DeInit+0x158>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d104      	bne.n	8002d72 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <DMA_DeInit+0x154>)
 8002d6a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e075      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <DMA_DeInit+0x15c>)
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d104      	bne.n	8002d84 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <DMA_DeInit+0x154>)
 8002d7c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	e06c      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <DMA_DeInit+0x160>)
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d104      	bne.n	8002d96 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <DMA_DeInit+0x154>)
 8002d8e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e063      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <DMA_DeInit+0x164>)
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d103      	bne.n	8002da6 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <DMA_DeInit+0x154>)
 8002da0:	4a37      	ldr	r2, [pc, #220]	; (8002e80 <DMA_DeInit+0x168>)
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	e05b      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <DMA_DeInit+0x16c>)
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d103      	bne.n	8002db6 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <DMA_DeInit+0x154>)
 8002db0:	4a35      	ldr	r2, [pc, #212]	; (8002e88 <DMA_DeInit+0x170>)
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e053      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <DMA_DeInit+0x174>)
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d103      	bne.n	8002dc6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <DMA_DeInit+0x154>)
 8002dc0:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <DMA_DeInit+0x178>)
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e04b      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <DMA_DeInit+0x17c>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d104      	bne.n	8002dd8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <DMA_DeInit+0x154>)
 8002dd0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	e042      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <DMA_DeInit+0x180>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d103      	bne.n	8002de8 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <DMA_DeInit+0x184>)
 8002de2:	223d      	movs	r2, #61	; 0x3d
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	e03a      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <DMA_DeInit+0x188>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d104      	bne.n	8002dfa <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <DMA_DeInit+0x184>)
 8002df2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	e031      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <DMA_DeInit+0x18c>)
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d104      	bne.n	8002e0c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <DMA_DeInit+0x184>)
 8002e04:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e028      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <DMA_DeInit+0x190>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d104      	bne.n	8002e1e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <DMA_DeInit+0x184>)
 8002e16:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e01f      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <DMA_DeInit+0x194>)
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d103      	bne.n	8002e2e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <DMA_DeInit+0x184>)
 8002e28:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <DMA_DeInit+0x168>)
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	e017      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <DMA_DeInit+0x198>)
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d103      	bne.n	8002e3e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <DMA_DeInit+0x184>)
 8002e38:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <DMA_DeInit+0x170>)
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	e00f      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <DMA_DeInit+0x19c>)
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d103      	bne.n	8002e4e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <DMA_DeInit+0x184>)
 8002e48:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <DMA_DeInit+0x178>)
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	e007      	b.n	8002e5e <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <DMA_DeInit+0x1a0>)
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d103      	bne.n	8002e5e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <DMA_DeInit+0x184>)
 8002e58:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002e5c:	60da      	str	r2, [r3, #12]
    }
  }
}
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40026010 	andmi	r6, r2, r0, lsl r0
 8002e6c:	40026000 	andmi	r6, r2, r0
 8002e70:	40026028 	andmi	r6, r2, r8, lsr #32
 8002e74:	40026040 	andmi	r6, r2, r0, asr #32
 8002e78:	40026058 	andmi	r6, r2, r8, asr r0
 8002e7c:	40026070 	andmi	r6, r2, r0, ror r0
 8002e80:	2000003d 	andcs	r0, r0, sp, lsr r0
 8002e84:	40026088 	andmi	r6, r2, r8, lsl #1
 8002e88:	20000f40 	andcs	r0, r0, r0, asr #30
 8002e8c:	400260a0 	andmi	r6, r2, r0, lsr #1
 8002e90:	203d0000 	eorscs	r0, sp, r0
 8002e94:	400260b8 	strhmi	r6, [r2], -r8
 8002e98:	40026410 	andmi	r6, r2, r0, lsl r4
 8002e9c:	40026400 	andmi	r6, r2, r0, lsl #8
 8002ea0:	40026428 	andmi	r6, r2, r8, lsr #8
 8002ea4:	40026440 	andmi	r6, r2, r0, asr #8
 8002ea8:	40026458 	andmi	r6, r2, r8, asr r4
 8002eac:	40026470 	andmi	r6, r2, r0, ror r4
 8002eb0:	40026488 	andmi	r6, r2, r8, lsl #9
 8002eb4:	400264a0 	andmi	r6, r2, r0, lsr #9
 8002eb8:	400264b8 			; <UNDEFINED> instruction: 0x400264b8

08002ebc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <DMA_Init+0xa8>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002ee6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002ef2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002efe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002f0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4313      	orrs	r3, r2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	60da      	str	r2, [r3, #12]
}
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	f01c803f 			; <UNDEFINED> instruction: 0xf01c803f

08002f68 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e005      	b.n	8003000 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 0201 	bic.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
  }
}
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e005      	b.n	8003036 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
  }
}
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e005      	b.n	800306a <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0220 	bic.w	r2, r3, #32
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
  }
}
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	605a      	str	r2, [r3, #4]
}
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b29b      	uxth	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop

080030ac <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e005      	b.n	80030d8 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	611a      	str	r2, [r3, #16]
}
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e005      	b.n	8003114 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	601a      	str	r2, [r3, #0]
  }
}
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop

08003120 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	611a      	str	r2, [r3, #16]
 8003138:	e002      	b.n	8003140 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	60da      	str	r2, [r3, #12]
  }
}
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8003164:	2301      	movs	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e001      	b.n	800316e <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e001      	b.n	800319e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c0:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <DMA_GetFlagStatus+0x6c>)
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d802      	bhi.n	80031f0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <DMA_GetFlagStatus+0x70>)
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e001      	b.n	80031f4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <DMA_GetFlagStatus+0x74>)
 80031f2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e002      	b.n	800320c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003212:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
 8003226:	e001      	b.n	800322c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
}
 800322e:	4618      	mov	r0, r3
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	4002640f 	andmi	r6, r2, pc, lsl #8
 8003240:	40026000 	andmi	r6, r2, r0
 8003244:	40026400 	andmi	r6, r2, r0, lsl #8

08003248 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <DMA_ClearFlag+0x50>)
 8003256:	429a      	cmp	r2, r3
 8003258:	d802      	bhi.n	8003260 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <DMA_ClearFlag+0x54>)
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e001      	b.n	8003264 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <DMA_ClearFlag+0x58>)
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003274:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	60d3      	str	r3, [r2, #12]
 800327c:	e006      	b.n	800328c <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003284:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	6093      	str	r3, [r2, #8]
  }    
}
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	4002640f 	andmi	r6, r2, pc, lsl #8
 800329c:	40026000 	andmi	r6, r2, r0
 80032a0:	40026400 	andmi	r6, r2, r0, lsl #8

080032a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00f      	beq.n	80032dc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	615a      	str	r2, [r3, #20]
 80032ce:	e005      	b.n	80032dc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d014      	beq.n	800330c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 031e 	and.w	r3, r3, #30
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e008      	b.n	800330c <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 031e 	and.w	r3, r3, #30
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4b22      	ldr	r3, [pc, #136]	; (80033bc <DMA_GetITStatus+0xa4>)
 8003332:	429a      	cmp	r2, r3
 8003334:	d802      	bhi.n	800333c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <DMA_GetITStatus+0xa8>)
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e001      	b.n	8003340 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <DMA_GetITStatus+0xac>)
 800333e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003346:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	0adb      	lsrs	r3, r3, #11
 8003352:	f003 031e 	and.w	r3, r3, #30
 8003356:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	e004      	b.n	800336e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e002      	b.n	8003386 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800338c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003390:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <DMA_GetITStatus+0x90>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	e001      	b.n	80033ac <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	4002640f 	andmi	r6, r2, pc, lsl #8
 80033c0:	40026000 	andmi	r6, r2, r0
 80033c4:	40026400 	andmi	r6, r2, r0, lsl #8

080033c8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <DMA_ClearITPendingBit+0x50>)
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d802      	bhi.n	80033e0 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <DMA_ClearITPendingBit+0x54>)
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e001      	b.n	80033e4 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <DMA_ClearITPendingBit+0x58>)
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80033f4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	60d3      	str	r3, [r2, #12]
 80033fc:	e006      	b.n	800340c <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003404:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	6093      	str	r3, [r2, #8]
  }   
}
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	4002640f 	andmi	r6, r2, pc, lsl #8
 800341c:	40026000 	andmi	r6, r2, r0
 8003420:	40026400 	andmi	r6, r2, r0, lsl #8

08003424 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <SPI_I2S_DeInit+0xc0>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d10a      	bne.n	800344a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8003434:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003438:	2101      	movs	r1, #1
 800343a:	f7fe f8cd 	bl	80015d8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800343e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003442:	2100      	movs	r1, #0
 8003444:	f7fe f8c8 	bl	80015d8 <RCC_APB2PeriphResetCmd>
 8003448:	e049      	b.n	80034de <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <SPI_I2S_DeInit+0xc4>)
 800344e:	429a      	cmp	r2, r3
 8003450:	d10a      	bne.n	8003468 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8003452:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003456:	2101      	movs	r1, #1
 8003458:	f7fe f8a0 	bl	800159c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800345c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003460:	2100      	movs	r1, #0
 8003462:	f7fe f89b 	bl	800159c <RCC_APB1PeriphResetCmd>
 8003466:	e03a      	b.n	80034de <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <SPI_I2S_DeInit+0xc8>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d10a      	bne.n	8003486 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8003470:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003474:	2101      	movs	r1, #1
 8003476:	f7fe f891 	bl	800159c <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800347a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800347e:	2100      	movs	r1, #0
 8003480:	f7fe f88c 	bl	800159c <RCC_APB1PeriphResetCmd>
 8003484:	e02b      	b.n	80034de <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <SPI_I2S_DeInit+0xcc>)
 800348a:	429a      	cmp	r2, r3
 800348c:	d10a      	bne.n	80034a4 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 800348e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003492:	2101      	movs	r1, #1
 8003494:	f7fe f8a0 	bl	80015d8 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8003498:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800349c:	2100      	movs	r1, #0
 800349e:	f7fe f89b 	bl	80015d8 <RCC_APB2PeriphResetCmd>
 80034a2:	e01c      	b.n	80034de <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <SPI_I2S_DeInit+0xd0>)
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10a      	bne.n	80034c2 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80034ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80034b0:	2101      	movs	r1, #1
 80034b2:	f7fe f891 	bl	80015d8 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80034b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80034ba:	2100      	movs	r1, #0
 80034bc:	f7fe f88c 	bl	80015d8 <RCC_APB2PeriphResetCmd>
 80034c0:	e00d      	b.n	80034de <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <SPI_I2S_DeInit+0xd4>)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d109      	bne.n	80034de <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80034ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80034ce:	2101      	movs	r1, #1
 80034d0:	f7fe f882 	bl	80015d8 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80034d4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80034d8:	2100      	movs	r1, #0
 80034da:	f7fe f87d 	bl	80015d8 <RCC_APB2PeriphResetCmd>
    }
  }
}
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40013000 	andmi	r3, r1, r0
 80034e8:	40003800 	andmi	r3, r0, r0, lsl #16
 80034ec:	40003c00 	andmi	r3, r0, r0, lsl #24
 80034f0:	40013400 	andmi	r3, r1, r0, lsl #8
 80034f4:	40015000 	andmi	r5, r1, r0
 80034f8:	40015400 	andmi	r5, r1, r0, lsl #8

080034fc <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003510:	89fb      	ldrh	r3, [r7, #14]
 8003512:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8003516:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	885b      	ldrh	r3, [r3, #2]
 8003520:	4313      	orrs	r3, r2
 8003522:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003528:	4313      	orrs	r3, r2
 800352a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003530:	4313      	orrs	r3, r2
 8003532:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003538:	4313      	orrs	r3, r2
 800353a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003540:	4313      	orrs	r3, r2
 8003542:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003548:	4313      	orrs	r3, r2
 800354a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8003550:	4313      	orrs	r3, r2
 8003552:	b29a      	uxth	r2, r3
 8003554:	89fb      	ldrh	r3, [r7, #14]
 8003556:	4313      	orrs	r3, r2
 8003558:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	89fa      	ldrh	r2, [r7, #14]
 800355e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8b9b      	ldrh	r3, [r3, #28]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	8a1a      	ldrh	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	821a      	strh	r2, [r3, #16]
}
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop

08003584 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8003584:	b480      	push	{r7}
 8003586:	b08b      	sub	sp, #44	; 0x2c
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800358e:	2300      	movs	r3, #0
 8003590:	837b      	strh	r3, [r7, #26]
 8003592:	2302      	movs	r3, #2
 8003594:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003596:	2300      	movs	r3, #0
 8003598:	84bb      	strh	r3, [r7, #36]	; 0x24
 800359a:	2301      	movs	r3, #1
 800359c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8b9b      	ldrh	r3, [r3, #28]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035bc:	f023 030f 	bic.w	r3, r3, #15
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8b9b      	ldrh	r3, [r3, #28]
 80035d0:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d104      	bne.n	80035e4 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80035da:	2300      	movs	r3, #0
 80035dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80035de:	2302      	movs	r3, #2
 80035e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035e2:	e071      	b.n	80036c8 <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	889b      	ldrh	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80035f0:	e001      	b.n	80035f6 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80035f2:	2302      	movs	r3, #2
 80035f4:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80035f6:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <I2S_Init+0x1a4>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8003602:	4b49      	ldr	r3, [pc, #292]	; (8003728 <I2S_Init+0x1a4>)
 8003604:	4a48      	ldr	r2, [pc, #288]	; (8003728 <I2S_Init+0x1a4>)
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800360c:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800360e:	4b46      	ldr	r3, [pc, #280]	; (8003728 <I2S_Init+0x1a4>)
 8003610:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003618:	4013      	ands	r3, r2
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003620:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <I2S_Init+0x1a4>)
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800362c:	0f1b      	lsrs	r3, r3, #28
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8003634:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <I2S_Init+0x1a4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <I2S_Init+0x1a8>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	fb02 f203 	mul.w	r2, r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	88db      	ldrh	r3, [r3, #6]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d10f      	bne.n	800367e <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	0a1a      	lsrs	r2, r3, #8
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	461a      	mov	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	3305      	adds	r3, #5
 8003678:	b29b      	uxth	r3, r3
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	e011      	b.n	80036a2 <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800367e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003680:	015b      	lsls	r3, r3, #5
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	461a      	mov	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	b29b      	uxth	r3, r3
 800369c:	3305      	adds	r3, #5
 800369e:	b29b      	uxth	r3, r3
 80036a0:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	4b22      	ldr	r3, [pc, #136]	; (8003730 <I2S_Init+0x1ac>)
 80036a6:	fba3 1302 	umull	r1, r3, r3, r2
 80036aa:	08db      	lsrs	r3, r3, #3
 80036ac:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80036b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80036c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80036c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d902      	bls.n	80036d4 <I2S_Init+0x150>
 80036ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036d0:	2bff      	cmp	r3, #255	; 0xff
 80036d2:	d903      	bls.n	80036dc <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 80036d4:	2302      	movs	r3, #2
 80036d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	88da      	ldrh	r2, [r3, #6]
 80036e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036e2:	4313      	orrs	r3, r2
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	8859      	ldrh	r1, [r3, #2]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003700:	4303      	orrs	r3, r0
 8003702:	b29b      	uxth	r3, r3
 8003704:	430b      	orrs	r3, r1
 8003706:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8003708:	4313      	orrs	r3, r2
 800370a:	b29a      	uxth	r2, r3
 800370c:	8b7b      	ldrh	r3, [r7, #26]
 800370e:	4313      	orrs	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003716:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8b7a      	ldrh	r2, [r7, #26]
 800371c:	839a      	strh	r2, [r3, #28]
}
 800371e:	372c      	adds	r7, #44	; 0x2c
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40023800 	andmi	r3, r2, r0, lsl #16
 800372c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8003730:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

08003734 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2207      	movs	r2, #7
 8003770:	821a      	strh	r2, [r3, #16]
}
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	819a      	strh	r2, [r3, #12]
}
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	801a      	strh	r2, [r3, #0]
  }
}
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8b9b      	ldrh	r3, [r3, #28]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	839a      	strh	r2, [r3, #28]
 8003816:	e007      	b.n	8003828 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8b9b      	ldrh	r3, [r3, #28]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	839a      	strh	r2, [r3, #28]
  }
}
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29a      	uxth	r2, r3
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	4313      	orrs	r3, r2
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	801a      	strh	r2, [r3, #0]
}
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop

0800386c <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387e:	d108      	bne.n	8003892 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	e007      	b.n	80038a2 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	801a      	strh	r2, [r3, #0]
  }
}
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80038b8:	887a      	ldrh	r2, [r7, #2]
 80038ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80038be:	429a      	cmp	r2, r3
 80038c0:	d008      	beq.n	80038d4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	e007      	b.n	80038e4 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	801a      	strh	r2, [r3, #0]
  }
}
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop

080038f0 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	889b      	ldrh	r3, [r3, #4]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	809a      	strh	r2, [r3, #4]
 8003912:	e007      	b.n	8003924 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	889b      	ldrh	r3, [r3, #4]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f023 0304 	bic.w	r3, r3, #4
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	809a      	strh	r2, [r3, #4]
  }
}
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	889b      	ldrh	r3, [r3, #4]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	809a      	strh	r2, [r3, #4]
 8003952:	e007      	b.n	8003964 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	889b      	ldrh	r3, [r3, #4]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	809a      	strh	r2, [r3, #4]
  }
}
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop

08003970 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	81bb      	strh	r3, [r7, #12]
 800397e:	2300      	movs	r3, #0
 8003980:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8b9b      	ldrh	r3, [r3, #28]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800398c:	f023 030f 	bic.w	r3, r3, #15
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8b9b      	ldrh	r3, [r3, #28]
 80039a0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039aa:	d003      	beq.n	80039b4 <I2S_FullDuplexConfig+0x44>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 80039b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b8:	81fb      	strh	r3, [r7, #14]
 80039ba:	e00b      	b.n	80039d4 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c4:	d004      	beq.n	80039d0 <I2S_FullDuplexConfig+0x60>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d101      	bne.n	80039d4 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 80039d0:	2300      	movs	r3, #0
 80039d2:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	885a      	ldrh	r2, [r3, #2]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80039e0:	430b      	orrs	r3, r1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	89bb      	ldrh	r3, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039f8:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	89ba      	ldrh	r2, [r7, #12]
 80039fe:	839a      	strh	r2, [r3, #28]
}
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop

08003a0c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	899b      	ldrh	r3, [r3, #12]
 8003a18:	b29b      	uxth	r3, r3
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop

08003a28 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	819a      	strh	r2, [r3, #12]
}
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e007      	b.n	8003a78 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	801a      	strh	r2, [r3, #0]
  }
}
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	801a      	strh	r2, [r3, #0]
}
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d003      	beq.n	8003ac6 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8b1b      	ldrh	r3, [r3, #24]
 8003ac2:	81fb      	strh	r3, [r7, #14]
 8003ac4:	e002      	b.n	8003acc <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8a9b      	ldrh	r3, [r3, #20]
 8003aca:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 8003acc:	89fb      	ldrh	r3, [r7, #14]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8a1b      	ldrh	r3, [r3, #16]
 8003ae8:	b29b      	uxth	r3, r3
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	460a      	mov	r2, r1
 8003b04:	807a      	strh	r2, [r7, #2]
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	889b      	ldrh	r3, [r3, #4]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	809a      	strh	r2, [r3, #4]
 8003b1e:	e009      	b.n	8003b34 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	889b      	ldrh	r3, [r3, #4]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	809a      	strh	r2, [r3, #4]
  }
}
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	70fa      	strb	r2, [r7, #3]
 8003b4e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8003b50:	2300      	movs	r3, #0
 8003b52:	81fb      	strh	r3, [r7, #14]
 8003b54:	2300      	movs	r3, #0
 8003b56:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	2201      	movs	r2, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8003b6a:	78bb      	ldrb	r3, [r7, #2]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	889b      	ldrh	r3, [r3, #4]
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	89bb      	ldrh	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	809a      	strh	r2, [r3, #4]
 8003b80:	e009      	b.n	8003b96 <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	889b      	ldrh	r3, [r3, #4]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	89bb      	ldrh	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	809a      	strh	r2, [r3, #4]
  }
}
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	891b      	ldrh	r3, [r3, #8]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	e001      	b.n	8003bca <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	811a      	strh	r2, [r3, #8]
}
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	81bb      	strh	r3, [r7, #12]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	817b      	strh	r3, [r7, #10]
 8003c10:	2300      	movs	r3, #0
 8003c12:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	889b      	ldrh	r3, [r3, #4]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	891b      	ldrh	r3, [r3, #8]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	89bb      	ldrh	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <SPI_I2S_GetITStatus+0x64>
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e001      	b.n	8003c60 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8003c8e:	89fb      	ldrh	r3, [r7, #14]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	811a      	strh	r2, [r3, #8]
}
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <EXTI_DeInit+0x2c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <EXTI_DeInit+0x2c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <EXTI_DeInit+0x2c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <EXTI_DeInit+0x2c>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <EXTI_DeInit+0x2c>)
 8003cc2:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <EXTI_DeInit+0x30>)
 8003cc4:	615a      	str	r2, [r3, #20]
}
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40013c00 	andmi	r3, r1, r0, lsl #24
 8003cd4:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>

08003cd8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <EXTI_Init+0xd8>)
 8003ce6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	799b      	ldrb	r3, [r3, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d04d      	beq.n	8003d8c <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <EXTI_Init+0xd8>)
 8003cf2:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <EXTI_Init+0xd8>)
 8003cf4:	6811      	ldr	r1, [r2, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	43d2      	mvns	r2, r2
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <EXTI_Init+0xd8>)
 8003d02:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <EXTI_Init+0xd8>)
 8003d04:	6851      	ldr	r1, [r2, #4]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	43d2      	mvns	r2, r2
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	791b      	ldrb	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	6811      	ldr	r1, [r2, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003d28:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <EXTI_Init+0xd8>)
 8003d2a:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <EXTI_Init+0xd8>)
 8003d2c:	6891      	ldr	r1, [r2, #8]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	43d2      	mvns	r2, r2
 8003d34:	400a      	ands	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <EXTI_Init+0xd8>)
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <EXTI_Init+0xd8>)
 8003d3c:	68d1      	ldr	r1, [r2, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	43d2      	mvns	r2, r2
 8003d44:	400a      	ands	r2, r1
 8003d46:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	795b      	ldrb	r3, [r3, #5]
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d10e      	bne.n	8003d6e <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <EXTI_Init+0xd8>)
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <EXTI_Init+0xd8>)
 8003d54:	6891      	ldr	r1, [r2, #8]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <EXTI_Init+0xd8>)
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <EXTI_Init+0xd8>)
 8003d62:	68d1      	ldr	r1, [r2, #12]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	e01b      	b.n	8003da6 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <EXTI_Init+0xd8>)
 8003d70:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	795b      	ldrb	r3, [r3, #5]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00c      	b.n	8003da6 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	6811      	ldr	r1, [r2, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	43d2      	mvns	r2, r2
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
  }
}
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40013c00 	andmi	r3, r1, r0, lsl #24

08003db4 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	220c      	movs	r2, #12
 8003dcc:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	719a      	strb	r2, [r3, #6]
}
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop

08003de0 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <EXTI_GenerateSWInterrupt+0x20>)
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <EXTI_GenerateSWInterrupt+0x20>)
 8003dec:	6911      	ldr	r1, [r2, #16]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	611a      	str	r2, [r3, #16]
}
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40013c00 	andmi	r3, r1, r0, lsl #24

08003e04 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <EXTI_GetFlagStatus+0x30>)
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e001      	b.n	8003e26 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40013c00 	andmi	r3, r1, r0, lsl #24

08003e38 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <EXTI_ClearFlag+0x18>)
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40013c00 	andmi	r3, r1, r0, lsl #24

08003e54 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <EXTI_GetITStatus+0x30>)
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40013c00 	andmi	r3, r1, r0, lsl #24

08003e88 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <EXTI_ClearITPendingBit+0x18>)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	615a      	str	r2, [r3, #20]
}
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40013c00 	andmi	r3, r1, r0, lsl #24

08003ea4 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 8003ea8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003eac:	2101      	movs	r1, #1
 8003eae:	f7fd fb1b 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 8003eb2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f7fd fb16 	bl	80014e8 <RCC_AHB1PeriphResetCmd>
}
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop

08003ec0 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8003ed8:	4a4f      	ldr	r2, [pc, #316]	; (8004018 <DMA2D_Init+0x158>)
 8003eda:	4b4f      	ldr	r3, [pc, #316]	; (8004018 <DMA2D_Init+0x158>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 8003ee2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003ee6:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <DMA2D_Init+0x158>)
 8003eea:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <DMA2D_Init+0x158>)
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8003ef6:	4b48      	ldr	r3, [pc, #288]	; (8004018 <DMA2D_Init+0x158>)
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <DMA2D_Init+0x158>)
 8003efa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003efc:	f022 0207 	bic.w	r2, r2, #7
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 8003f02:	4b45      	ldr	r3, [pc, #276]	; (8004018 <DMA2D_Init+0x158>)
 8003f04:	4a44      	ldr	r2, [pc, #272]	; (8004018 <DMA2D_Init+0x158>)
 8003f06:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6852      	ldr	r2, [r2, #4]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10c      	bne.n	8003f32 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e03a      	b.n	8003fa8 <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10a      	bne.n	8003f50 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e02b      	b.n	8003fa8 <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d10a      	bne.n	8003f6e <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	015b      	lsls	r3, r3, #5
 8003f5e:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	02db      	lsls	r3, r3, #11
 8003f66:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e01c      	b.n	8003fa8 <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d10c      	bne.n	8003f90 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	015b      	lsls	r3, r3, #5
 8003f7c:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	029b      	lsls	r3, r3, #10
 8003f84:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	03db      	lsls	r3, r3, #15
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e00b      	b.n	8003fa8 <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	031b      	lsls	r3, r3, #12
 8003fa6:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <DMA2D_Init+0x158>)
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <DMA2D_Init+0x158>)
 8003fac:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4310      	orrs	r0, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6892      	ldr	r2, [r2, #8]
 8003fb8:	4310      	orrs	r0, r2
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4302      	orrs	r2, r0
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <DMA2D_Init+0x158>)
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6992      	ldr	r2, [r2, #24]
 8003fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <DMA2D_Init+0x158>)
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <DMA2D_Init+0x158>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <DMA2D_Init+0x158>)
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <DMA2D_Init+0x158>)
 8003fde:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	69d2      	ldr	r2, [r2, #28]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <DMA2D_Init+0x158>)
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <DMA2D_Init+0x158>)
 8003ff4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ff6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <DMA2D_Init+0x158>)
 8003ffe:	4a06      	ldr	r2, [pc, #24]	; (8004018 <DMA2D_Init+0x158>)
 8004000:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a10      	ldr	r0, [r2, #32]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	4302      	orrs	r2, r0
 800400a:	430a      	orrs	r2, r1
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	4002b000 	andmi	fp, r2, r0

0800401c <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop

0800406c <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <DMA2D_StartTransfer+0x18>)
 8004072:	4a04      	ldr	r2, [pc, #16]	; (8004084 <DMA2D_StartTransfer+0x18>)
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
}
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	4002b000 	andmi	fp, r2, r0

08004088 <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <DMA2D_AbortTransfer+0x18>)
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <DMA2D_AbortTransfer+0x18>)
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	f042 0204 	orr.w	r2, r2, #4
 8004096:	601a      	str	r2, [r3, #0]

}
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	4002b000 	andmi	fp, r2, r0

080040a4 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <DMA2D_Suspend+0x34>)
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <DMA2D_Suspend+0x34>)
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	f042 0202 	orr.w	r2, r2, #2
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e005      	b.n	80040ce <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <DMA2D_Suspend+0x34>)
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <DMA2D_Suspend+0x34>)
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	f022 0202 	bic.w	r2, r2, #2
 80040cc:	601a      	str	r2, [r3, #0]
  }
}
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	4002b000 	andmi	fp, r2, r0

080040dc <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800410e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004112:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004116:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004118:	6911      	ldr	r1, [r2, #16]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6852      	ldr	r2, [r2, #4]
 800411e:	430a      	orrs	r2, r1
 8004120:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 8004122:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004124:	4b22      	ldr	r3, [pc, #136]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <DMA2D_FGConfig+0xd8>)
 800412a:	400b      	ands	r3, r1
 800412c:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800414e:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004152:	69d1      	ldr	r1, [r2, #28]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6890      	ldr	r0, [r2, #8]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	4310      	orrs	r0, r2
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4310      	orrs	r0, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 8004168:	430a      	orrs	r2, r1
 800416a:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 800416e:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 8004170:	6a12      	ldr	r2, [r2, #32]
 8004172:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004176:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 800418c:	6a11      	ldr	r1, [r2, #32]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	69d0      	ldr	r0, [r2, #28]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4310      	orrs	r0, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	4302      	orrs	r2, r0
 800419a:	430a      	orrs	r2, r1
 800419c:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <DMA2D_FGConfig+0xd4>)
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041a6:	3724      	adds	r7, #36	; 0x24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	4002b000 	andmi	fp, r2, r0
 80041b4:	00fc00c0 	rscseq	r0, ip, r0, asr #1

080041b8 <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800422c:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800423e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004242:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004246:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004248:	6991      	ldr	r1, [r2, #24]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	430a      	orrs	r2, r1
 8004250:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 8004252:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004256:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <DMA2D_BGConfig+0xd8>)
 800425a:	400b      	ands	r3, r1
 800425c:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 8004282:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6890      	ldr	r0, [r2, #8]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	4310      	orrs	r0, r2
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4310      	orrs	r0, r2
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 8004298:	430a      	orrs	r2, r1
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 80042a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 80042bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	69d0      	ldr	r0, [r2, #28]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4310      	orrs	r0, r2
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4302      	orrs	r2, r0
 80042ca:	430a      	orrs	r2, r1
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <DMA2D_BGConfig+0xd4>)
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30

}
 80042d6:	3724      	adds	r7, #36	; 0x24
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	4002b000 	andmi	fp, r2, r0
 80042e4:	00fc00c0 	rscseq	r0, ip, r0, asr #1

080042e8 <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800434c:	4b08      	ldr	r3, [pc, #32]	; (8004370 <DMA2D_FGStart+0x34>)
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <DMA2D_FGStart+0x34>)
 8004350:	69d2      	ldr	r2, [r2, #28]
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	61da      	str	r2, [r3, #28]
 8004358:	e005      	b.n	8004366 <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <DMA2D_FGStart+0x34>)
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <DMA2D_FGStart+0x34>)
 800435e:	69d2      	ldr	r2, [r2, #28]
 8004360:	f022 0220 	bic.w	r2, r2, #32
 8004364:	61da      	str	r2, [r3, #28]
  }
}
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	4002b000 	andmi	fp, r2, r0

08004374 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <DMA2D_BGStart+0x34>)
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <DMA2D_BGStart+0x34>)
 8004388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438a:	f042 0220 	orr.w	r2, r2, #32
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
 8004390:	e005      	b.n	800439e <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <DMA2D_BGStart+0x34>)
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <DMA2D_BGStart+0x34>)
 8004396:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004398:	f022 0220 	bic.w	r2, r2, #32
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	4002b000 	andmi	fp, r2, r0

080043ac <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d013      	beq.n	80043e6 <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 80043be:	4a0f      	ldr	r2, [pc, #60]	; (80043fc <DMA2D_DeadTimeConfig+0x50>)
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <DMA2D_DeadTimeConfig+0x50>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <DMA2D_DeadTimeConfig+0x50>)
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <DMA2D_DeadTimeConfig+0x50>)
 80043d8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	430a      	orrs	r2, r1
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80043e4:	e005      	b.n	80043f2 <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <DMA2D_DeadTimeConfig+0x50>)
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <DMA2D_DeadTimeConfig+0x50>)
 80043ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	4002b000 	andmi	fp, r2, r0

08004400 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <DMA2D_LineWatermarkConfig+0x18>)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	649a      	str	r2, [r3, #72]	; 0x48
}
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	4002b000 	andmi	fp, r2, r0

0800441c <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <DMA2D_ITConfig+0x38>)
 8004430:	4a08      	ldr	r2, [pc, #32]	; (8004454 <DMA2D_ITConfig+0x38>)
 8004432:	6811      	ldr	r1, [r2, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e006      	b.n	800444a <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <DMA2D_ITConfig+0x38>)
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <DMA2D_ITConfig+0x38>)
 8004440:	6811      	ldr	r1, [r2, #0]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	43d2      	mvns	r2, r2
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
  }
}
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	4002b000 	andmi	fp, r2, r0

08004458 <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <DMA2D_GetFlagStatus+0x30>)
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	e001      	b.n	800447a <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	4002b000 	andmi	fp, r2, r0

0800448c <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <DMA2D_ClearFlag+0x18>)
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	609a      	str	r2, [r3, #8]
}
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	4002b000 	andmi	fp, r2, r0

080044a8 <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <DMA2D_GetITStatus+0x54>)
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	e001      	b.n	80044d0 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <DMA2D_GetITStatus+0x54>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <DMA2D_GetITStatus+0x40>
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	e001      	b.n	80044ec <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	4002b000 	andmi	fp, r2, r0

08004500 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <DMA2D_ClearITPendingBit+0x20>)
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	4002b000 	andmi	fp, r2, r0

08004524 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 8004528:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800452c:	2101      	movs	r1, #1
 800452e:	f7fd f853 	bl	80015d8 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 8004532:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004536:	2100      	movs	r1, #0
 8004538:	f7fd f84e 	bl	80015d8 <RCC_APB2PeriphResetCmd>
}
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop

08004540 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004560:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <LTDC_Init+0x120>)
 8004562:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <LTDC_Init+0x120>)
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <LTDC_Init+0x124>)
 8004568:	400b      	ands	r3, r1
 800456a:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8004574:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <LTDC_Init+0x120>)
 8004576:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <LTDC_Init+0x120>)
 8004578:	6891      	ldr	r1, [r2, #8]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6950      	ldr	r0, [r2, #20]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	4302      	orrs	r2, r0
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004586:	4a36      	ldr	r2, [pc, #216]	; (8004660 <LTDC_Init+0x120>)
 8004588:	4b35      	ldr	r3, [pc, #212]	; (8004660 <LTDC_Init+0x120>)
 800458a:	68d9      	ldr	r1, [r3, #12]
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <LTDC_Init+0x124>)
 800458e:	400b      	ands	r3, r1
 8004590:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <LTDC_Init+0x120>)
 800459c:	4a30      	ldr	r2, [pc, #192]	; (8004660 <LTDC_Init+0x120>)
 800459e:	68d1      	ldr	r1, [r2, #12]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	69d0      	ldr	r0, [r2, #28]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4302      	orrs	r2, r0
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80045ac:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <LTDC_Init+0x120>)
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <LTDC_Init+0x120>)
 80045b0:	6919      	ldr	r1, [r3, #16]
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <LTDC_Init+0x124>)
 80045b4:	400b      	ands	r3, r1
 80045b6:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <LTDC_Init+0x120>)
 80045c2:	4a27      	ldr	r2, [pc, #156]	; (8004660 <LTDC_Init+0x120>)
 80045c4:	6911      	ldr	r1, [r2, #16]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4302      	orrs	r2, r0
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045d2:	4a23      	ldr	r2, [pc, #140]	; (8004660 <LTDC_Init+0x120>)
 80045d4:	4b22      	ldr	r3, [pc, #136]	; (8004660 <LTDC_Init+0x120>)
 80045d6:	6959      	ldr	r1, [r3, #20]
 80045d8:	4b22      	ldr	r3, [pc, #136]	; (8004664 <LTDC_Init+0x124>)
 80045da:	400b      	ands	r3, r1
 80045dc:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80045e6:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <LTDC_Init+0x120>)
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <LTDC_Init+0x120>)
 80045ea:	6951      	ldr	r1, [r2, #20]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4302      	orrs	r2, r0
 80045f4:	430a      	orrs	r2, r1
 80045f6:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <LTDC_Init+0x120>)
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <LTDC_Init+0x120>)
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <LTDC_Init+0x128>)
 8004600:	400b      	ands	r3, r1
 8004602:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <LTDC_Init+0x120>)
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <LTDC_Init+0x120>)
 8004608:	6991      	ldr	r1, [r2, #24]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6810      	ldr	r0, [r2, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8004618:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800461e:	4302      	orrs	r2, r0
 8004620:	430a      	orrs	r2, r1
 8004622:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <LTDC_Init+0x120>)
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <LTDC_Init+0x120>)
 8004638:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800463a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <LTDC_Init+0x120>)
 8004642:	4a07      	ldr	r2, [pc, #28]	; (8004660 <LTDC_Init+0x120>)
 8004644:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4310      	orrs	r0, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004650:	4302      	orrs	r2, r0
 8004652:	430a      	orrs	r2, r1
 8004654:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004656:	3724      	adds	r7, #36	; 0x24
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40016800 	andmi	r6, r1, r0, lsl #16
 8004664:	f000f800 			; <UNDEFINED> instruction: 0xf000f800
 8004668:	0ffe888f 	svceq	0x00fe888f

0800466c <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 80046e8:	4b08      	ldr	r3, [pc, #32]	; (800470c <LTDC_Cmd+0x34>)
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <LTDC_Cmd+0x34>)
 80046ec:	6992      	ldr	r2, [r2, #24]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	619a      	str	r2, [r3, #24]
 80046f4:	e005      	b.n	8004702 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <LTDC_Cmd+0x34>)
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <LTDC_Cmd+0x34>)
 80046fa:	6992      	ldr	r2, [r2, #24]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	619a      	str	r2, [r3, #24]
  }
}
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40016800 	andmi	r6, r1, r0, lsl #16

08004710 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <LTDC_DitherCmd+0x34>)
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <LTDC_DitherCmd+0x34>)
 8004724:	6992      	ldr	r2, [r2, #24]
 8004726:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800472a:	619a      	str	r2, [r3, #24]
 800472c:	e005      	b.n	800473a <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <LTDC_DitherCmd+0x34>)
 8004730:	4a04      	ldr	r2, [pc, #16]	; (8004744 <LTDC_DitherCmd+0x34>)
 8004732:	6992      	ldr	r2, [r2, #24]
 8004734:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004738:	619a      	str	r2, [r3, #24]
  }
}
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40016800 	andmi	r6, r1, r0, lsl #16

08004748 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8004750:	4a11      	ldr	r2, [pc, #68]	; (8004798 <LTDC_GetRGBWidth+0x50>)
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <LTDC_GetRGBWidth+0x50>)
 8004754:	6999      	ldr	r1, [r3, #24]
 8004756:	4b11      	ldr	r3, [pc, #68]	; (800479c <LTDC_GetRGBWidth+0x54>)
 8004758:	400b      	ands	r3, r1
 800475a:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <LTDC_GetRGBWidth+0x50>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <LTDC_GetRGBWidth+0x50>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <LTDC_GetRGBWidth+0x50>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	0b1b      	lsrs	r3, r3, #12
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f107 020c 	add.w	r2, r7, #12
 8004786:	ca07      	ldmia	r2, {r0, r1, r2}
 8004788:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40016800 	andmi	r6, r1, r0, lsl #16
 800479c:	0ffe888f 	svceq	0x00fe888f

080047a0 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2202      	movs	r2, #2
 80047b2:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	609a      	str	r2, [r3, #8]
}
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <LTDC_LIPConfig+0x18>)
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40016800 	andmi	r6, r1, r0, lsl #16

080047e0 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <LTDC_ReloadConfig+0x18>)
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40016800 	andmi	r6, r1, r0, lsl #16

080047fc <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	061b      	lsls	r3, r3, #24
 8004888:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	431a      	orrs	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004914:	f023 0307 	bic.w	r3, r3, #7
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30

}
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800497a:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2207      	movs	r2, #7
 8004980:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d006      	beq.n	80049c4 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e005      	b.n	80049d0 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f023 0201 	bic.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
  }
}
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop

080049dc <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <LTDC_GetPosStatus+0x3c>)
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <LTDC_GetPosStatus+0x3c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <LTDC_GetPosStatus+0x3c>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <LTDC_GetPosStatus+0x3c>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f107 0208 	add.w	r2, r7, #8
 8004a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a08:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40016800 	andmi	r6, r1, r0, lsl #16

08004a1c <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	605a      	str	r2, [r3, #4]
}
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop

08004a3c <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <LTDC_GetCDStatus+0x2c>)
 8004a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	e001      	b.n	8004a5a <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40016800 	andmi	r6, r1, r0, lsl #16

08004a6c <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01f      	beq.n	8004ac8 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f043 0202 	orr.w	r2, r3, #2
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6819      	ldr	r1, [r3, #0]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4319      	orrs	r1, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e005      	b.n	8004ad4 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f023 0202 	bic.w	r2, r3, #2
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <LTDC_ColorKeyingConfig+0x78>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40016800 	andmi	r6, r1, r0, lsl #16

08004ae8 <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
}
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d006      	beq.n	8004b2c <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f043 0210 	orr.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e005      	b.n	8004b38 <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 0210 	bic.w	r2, r3, #16
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <LTDC_CLUTCmd+0x3c>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40016800 	andmi	r6, r1, r0, lsl #16

08004b4c <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	431a      	orrs	r2, r3
                              green | red);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60da      	str	r2, [r3, #12]
}
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	460a      	mov	r2, r1
 8004bd0:	807a      	strh	r2, [r7, #2]
 8004bd2:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 8004bec:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <LTDC_LayerPosition+0xd8>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	0c1a      	lsrs	r2, r3, #16
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	883b      	ldrh	r3, [r7, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	3301      	adds	r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 8004c16:	2304      	movs	r3, #4
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e016      	b.n	8004c4a <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d102      	bne.n	8004c28 <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 8004c22:	2303      	movs	r3, #3
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e010      	b.n	8004c4a <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d008      	beq.n	8004c40 <LTDC_LayerPosition+0x7c>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d005      	beq.n	8004c40 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d002      	beq.n	8004c40 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b07      	cmp	r3, #7
 8004c3e:	d102      	bne.n	8004c46 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8004c40:	2302      	movs	r3, #2
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	e001      	b.n	8004c4a <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c56:	1eda      	subs	r2, r3, #3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	041a      	lsls	r2, r3, #16
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	041a      	lsls	r2, r3, #16
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
}
 8004c92:	3724      	adds	r7, #36	; 0x24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40016800 	andmi	r6, r1, r0, lsl #16

08004ca0 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b08b      	sub	sp, #44	; 0x2c
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d103      	bne.n	8004cf8 <LTDC_LayerSize+0x20>
  {
    temp = 4;
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cf6:	e019      	b.n	8004d2c <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d103      	bne.n	8004d06 <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d04:	e012      	b.n	8004d2c <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d008      	beq.n	8004d1e <LTDC_LayerSize+0x46>
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d005      	beq.n	8004d1e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d002      	beq.n	8004d1e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	2b07      	cmp	r3, #7
 8004d1c:	d103      	bne.n	8004d26 <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8004d1e:	2302      	movs	r3, #2
 8004d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d24:	e002      	b.n	8004d2c <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d38:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3b01      	subs	r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d50:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	041a      	lsls	r2, r3, #16
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	041a      	lsls	r2, r3, #16
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 8004d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	041a      	lsls	r2, r3, #16
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	3303      	adds	r3, #3
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 8004d98:	372c      	adds	r7, #44	; 0x2c
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 8004dba:	2304      	movs	r3, #4
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	e016      	b.n	8004dee <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d102      	bne.n	8004dcc <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	73fb      	strb	r3, [r7, #15]
 8004dca:	e010      	b.n	8004dee <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d008      	beq.n	8004de4 <LTDC_LayerPixelFormat+0x40>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d005      	beq.n	8004de4 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d002      	beq.n	8004de4 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	d102      	bne.n	8004dea <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 8004de4:	2302      	movs	r3, #2
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	e001      	b.n	8004dee <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 8004e06:	2304      	movs	r3, #4
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e016      	b.n	8004e3a <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d102      	bne.n	8004e18 <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 8004e12:	2303      	movs	r3, #3
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e010      	b.n	8004e3a <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d008      	beq.n	8004e30 <LTDC_LayerPixelFormat+0x8c>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d005      	beq.n	8004e30 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d002      	beq.n	8004e30 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b07      	cmp	r3, #7
 8004e2e:	d102      	bne.n	8004e36 <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8004e30:	2302      	movs	r3, #2
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e001      	b.n	8004e3a <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	041a      	lsls	r2, r3, #16
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	3303      	adds	r3, #3
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	611a      	str	r2, [r3, #16]
    
}
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <LTDC_ITConfig+0x38>)
 8004e78:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <LTDC_ITConfig+0x38>)
 8004e7a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34
 8004e82:	e006      	b.n	8004e92 <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <LTDC_ITConfig+0x38>)
 8004e86:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <LTDC_ITConfig+0x38>)
 8004e88:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	43d2      	mvns	r2, r2
 8004e8e:	400a      	ands	r2, r1
 8004e90:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40016800 	andmi	r6, r1, r0, lsl #16

08004ea0 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <LTDC_GetFlagStatus+0x30>)
 8004eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e001      	b.n	8004ec2 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40016800 	andmi	r6, r1, r0, lsl #16

08004ed4 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <LTDC_ClearFlag+0x18>)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40016800 	andmi	r6, r1, r0, lsl #16

08004ef0 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <LTDC_GetITStatus+0x4c>)
 8004efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e001      	b.n	8004f12 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <LTDC_GetITStatus+0x4c>)
 8004f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <LTDC_GetITStatus+0x3a>
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e001      	b.n	8004f2e <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40016800 	andmi	r6, r1, r0, lsl #16

08004f40 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <LTDC_ClearITPendingBit+0x18>)
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40016800 	andmi	r6, r1, r0, lsl #16

08004f5c <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 8004f6a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	f243 01db 	movw	r1, #12507	; 0x30db
 8004f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f78:	e006      	b.n	8004f88 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 8004f7a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8004f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 8004f88:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	3201      	adds	r2, #1
 8004f90:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <FMC_NORSRAMDeInit+0x54>)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	a0000104 	andge	r0, r0, r4, lsl #2

08004fb4 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8004fc0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 8004fd0:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 8004fd6:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 8004fdc:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 8004fe2:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8004fe8:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 8004fee:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 8004ff4:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 8004ffa:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 8005000:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 8005006:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800500c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 8005012:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d10d      	bne.n	800503c <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005020:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	6800      	ldr	r0, [r0, #0]
 8005030:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005034:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005044:	d124      	bne.n	8005090 <FMC_NORSRAMInit+0xdc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d020      	beq.n	8005090 <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 800504e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005058:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800505a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800505e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005062:	6811      	ldr	r1, [r2, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800506c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005070:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507a:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800507c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005084:	6912      	ldr	r2, [r2, #16]
 8005086:	3a01      	subs	r2, #1
 8005088:	0511      	lsls	r1, r2, #20
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 8005090:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800509e:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050a4:	6849      	ldr	r1, [r1, #4]
 80050a6:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 80050a8:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050ae:	6889      	ldr	r1, [r1, #8]
 80050b0:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 80050b2:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050b8:	68c9      	ldr	r1, [r1, #12]
 80050ba:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 80050bc:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050c2:	6909      	ldr	r1, [r1, #16]
 80050c4:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 80050c6:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050cc:	6949      	ldr	r1, [r1, #20]
 80050ce:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 80050d0:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80050d6:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 80050d8:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 80050da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e6:	d120      	bne.n	800512a <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 80050e8:	4b16      	ldr	r3, [pc, #88]	; (8005144 <FMC_NORSRAMInit+0x190>)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80050f2:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80050f8:	6849      	ldr	r1, [r1, #4]
 80050fa:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 80050fc:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005102:	6889      	ldr	r1, [r1, #8]
 8005104:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 8005106:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800510c:	6909      	ldr	r1, [r1, #16]
 800510e:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 8005110:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005116:	6949      	ldr	r1, [r1, #20]
 8005118:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800511a:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005120:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 8005122:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 8005124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005128:	e006      	b.n	8005138 <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <FMC_NORSRAMInit+0x190>)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	a0000104 	andge	r0, r0, r4, lsl #2

08005148 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2210      	movs	r2, #16
 8005166:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800518c:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005194:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	220f      	movs	r2, #15
 80051ae:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	220f      	movs	r2, #15
 80051b6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	22ff      	movs	r2, #255	; 0xff
 80051be:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	220f      	movs	r2, #15
 80051c6:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	220f      	movs	r2, #15
 80051ce:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	220f      	movs	r2, #15
 80051d6:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	2200      	movs	r2, #0
 80051de:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	220f      	movs	r2, #15
 80051e6:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	220f      	movs	r2, #15
 80051ee:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	220f      	movs	r2, #15
 80051fe:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	220f      	movs	r2, #15
 8005206:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	220f      	movs	r2, #15
 800520e:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	2200      	movs	r2, #0
 8005216:	619a      	str	r2, [r3, #24]
}
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop

08005224 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 8005236:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800523a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005244:	f042 0101 	orr.w	r1, r2, #1
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800524e:	e00b      	b.n	8005268 <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 8005250:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8005254:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <FMC_NORSRAMCmd+0x50>)
 8005260:	400b      	ands	r3, r1
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	000ffffe 	strdeq	pc, [pc], -lr

08005278 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b10      	cmp	r3, #16
 8005284:	d10e      	bne.n	80052a4 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 8005286:	4b11      	ldr	r3, [pc, #68]	; (80052cc <FMC_NANDDeInit+0x54>)
 8005288:	2218      	movs	r2, #24
 800528a:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <FMC_NANDDeInit+0x54>)
 800528e:	2240      	movs	r2, #64	; 0x40
 8005290:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <FMC_NANDDeInit+0x54>)
 8005294:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005298:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800529a:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <FMC_NANDDeInit+0x54>)
 800529c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	e00d      	b.n	80052c0 <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <FMC_NANDDeInit+0x58>)
 80052a6:	2218      	movs	r2, #24
 80052a8:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <FMC_NANDDeInit+0x58>)
 80052ac:	2240      	movs	r2, #64	; 0x40
 80052ae:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <FMC_NANDDeInit+0x58>)
 80052b2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80052b6:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <FMC_NANDDeInit+0x58>)
 80052ba:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80052be:	60da      	str	r2, [r3, #12]
  }  
}
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	a0000060 	andge	r0, r0, r0, rrx
 80052d0:	a0000080 	andge	r0, r0, r0, lsl #1

080052d4 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 80052f0:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 80052f6:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 80052fc:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 8005304:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800530c:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800530e:	f043 0308 	orr.w	r3, r3, #8
 8005312:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005322:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800532c:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 8005348:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 8005352:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b10      	cmp	r3, #16
 8005366:	d109      	bne.n	800537c <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <FMC_NANDInit+0xc4>)
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <FMC_NANDInit+0xc4>)
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <FMC_NANDInit+0xc4>)
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	e008      	b.n	800538e <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <FMC_NANDInit+0xc8>)
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 8005382:	4b06      	ldr	r3, [pc, #24]	; (800539c <FMC_NANDInit+0xc8>)
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <FMC_NANDInit+0xc8>)
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	60da      	str	r2, [r3, #12]
  }
}
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	a0000060 	andge	r0, r0, r0, rrx
 800539c:	a0000080 	andge	r0, r0, r0, lsl #1

080053a0 <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2210      	movs	r2, #16
 80053ac:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2210      	movs	r2, #16
 80053b8:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	22fc      	movs	r2, #252	; 0xfc
 80053d8:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	22fc      	movs	r2, #252	; 0xfc
 80053e0:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	22fc      	movs	r2, #252	; 0xfc
 80053e8:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	22fc      	movs	r2, #252	; 0xfc
 80053f0:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	22fc      	movs	r2, #252	; 0xfc
 80053f8:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	22fc      	movs	r2, #252	; 0xfc
 8005400:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	22fc      	movs	r2, #252	; 0xfc
 8005408:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	22fc      	movs	r2, #252	; 0xfc
 8005410:	60da      	str	r2, [r3, #12]
}
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b10      	cmp	r3, #16
 8005432:	d106      	bne.n	8005442 <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8005434:	4b11      	ldr	r3, [pc, #68]	; (800547c <FMC_NANDCmd+0x60>)
 8005436:	4a11      	ldr	r2, [pc, #68]	; (800547c <FMC_NANDCmd+0x60>)
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	f042 0204 	orr.w	r2, r2, #4
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e016      	b.n	8005470 <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <FMC_NANDCmd+0x64>)
 8005444:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <FMC_NANDCmd+0x64>)
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	f042 0204 	orr.w	r2, r2, #4
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e00f      	b.n	8005470 <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b10      	cmp	r3, #16
 8005454:	d106      	bne.n	8005464 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <FMC_NANDCmd+0x60>)
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <FMC_NANDCmd+0x60>)
 800545a:	6819      	ldr	r1, [r3, #0]
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <FMC_NANDCmd+0x68>)
 800545e:	400b      	ands	r3, r1
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e005      	b.n	8005470 <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8005464:	4a06      	ldr	r2, [pc, #24]	; (8005480 <FMC_NANDCmd+0x64>)
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <FMC_NANDCmd+0x64>)
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	4b06      	ldr	r3, [pc, #24]	; (8005484 <FMC_NANDCmd+0x68>)
 800546c:	400b      	ands	r3, r1
 800546e:	6013      	str	r3, [r2, #0]
    }
  }
}
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	a0000060 	andge	r0, r0, r0, rrx
 8005480:	a0000080 	andge	r0, r0, r0, lsl #1
 8005484:	000ffffb 	strdeq	pc, [pc], -fp

08005488 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d106      	bne.n	80054ae <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 80054a0:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <FMC_NANDECCCmd+0x60>)
 80054a2:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <FMC_NANDECCCmd+0x60>)
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e016      	b.n	80054dc <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <FMC_NANDECCCmd+0x64>)
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <FMC_NANDECCCmd+0x64>)
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e00f      	b.n	80054dc <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d106      	bne.n	80054d0 <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <FMC_NANDECCCmd+0x60>)
 80054c4:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <FMC_NANDECCCmd+0x60>)
 80054c6:	6819      	ldr	r1, [r3, #0]
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <FMC_NANDECCCmd+0x68>)
 80054ca:	400b      	ands	r3, r1
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e005      	b.n	80054dc <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 80054d0:	4a06      	ldr	r2, [pc, #24]	; (80054ec <FMC_NANDECCCmd+0x64>)
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <FMC_NANDECCCmd+0x64>)
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <FMC_NANDECCCmd+0x68>)
 80054d8:	400b      	ands	r3, r1
 80054da:	6013      	str	r3, [r2, #0]
    }
  }
}
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	a0000060 	andge	r0, r0, r0, rrx
 80054ec:	a0000080 	andge	r0, r0, r0, lsl #1
 80054f0:	000fffbf 			; <UNDEFINED> instruction: 0x000fffbf

080054f4 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d103      	bne.n	800550e <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <FMC_GetECC+0x30>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e002      	b.n	8005514 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <FMC_GetECC+0x34>)
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8005514:	68fb      	ldr	r3, [r7, #12]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	a0000060 	andge	r0, r0, r0, rrx
 8005528:	a0000080 	andge	r0, r0, r0, lsl #1

0800552c <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <FMC_PCCARDDeInit+0x30>)
 8005532:	2218      	movs	r2, #24
 8005534:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <FMC_PCCARDDeInit+0x30>)
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <FMC_PCCARDDeInit+0x30>)
 800553e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005542:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <FMC_PCCARDDeInit+0x30>)
 8005546:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800554a:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <FMC_PCCARDDeInit+0x30>)
 800554e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8005552:	611a      	str	r2, [r3, #16]
}
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	a00000a0 	andge	r0, r0, r0, lsr #1

08005560 <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <FMC_PCCARDInit+0xa8>)
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6852      	ldr	r2, [r2, #4]
 8005572:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 8005574:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6892      	ldr	r2, [r2, #8]
 800557a:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800557c:	430a      	orrs	r2, r1
 800557e:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 8005582:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005584:	4b20      	ldr	r3, [pc, #128]	; (8005608 <FMC_PCCARDInit+0xa8>)
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68d2      	ldr	r2, [r2, #12]
 800558a:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68d2      	ldr	r2, [r2, #12]
 8005590:	6852      	ldr	r2, [r2, #4]
 8005592:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 8005594:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	6892      	ldr	r2, [r2, #8]
 800559c:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800559e:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	68d2      	ldr	r2, [r2, #12]
 80055a4:	68d2      	ldr	r2, [r2, #12]
 80055a6:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80055a8:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 80055aa:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <FMC_PCCARDInit+0xa8>)
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6912      	ldr	r2, [r2, #16]
 80055b2:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6912      	ldr	r2, [r2, #16]
 80055b8:	6852      	ldr	r2, [r2, #4]
 80055ba:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80055bc:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6912      	ldr	r2, [r2, #16]
 80055c2:	6892      	ldr	r2, [r2, #8]
 80055c4:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80055c6:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6912      	ldr	r2, [r2, #16]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80055d0:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 80055d2:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <FMC_PCCARDInit+0xa8>)
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6952      	ldr	r2, [r2, #20]
 80055da:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6952      	ldr	r2, [r2, #20]
 80055e0:	6852      	ldr	r2, [r2, #4]
 80055e2:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 80055e4:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6952      	ldr	r2, [r2, #20]
 80055ea:	6892      	ldr	r2, [r2, #8]
 80055ec:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 80055ee:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6952      	ldr	r2, [r2, #20]
 80055f4:	68d2      	ldr	r2, [r2, #12]
 80055f6:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 80055f8:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 80055fa:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	a00000a0 	andge	r0, r0, r0, lsr #1

0800560c <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	22fc      	movs	r2, #252	; 0xfc
 800562c:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	22fc      	movs	r2, #252	; 0xfc
 8005634:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	22fc      	movs	r2, #252	; 0xfc
 800563c:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	22fc      	movs	r2, #252	; 0xfc
 8005644:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	22fc      	movs	r2, #252	; 0xfc
 800564c:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	22fc      	movs	r2, #252	; 0xfc
 8005654:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	22fc      	movs	r2, #252	; 0xfc
 800565c:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	22fc      	movs	r2, #252	; 0xfc
 8005664:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	22fc      	movs	r2, #252	; 0xfc
 800566c:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	22fc      	movs	r2, #252	; 0xfc
 8005674:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	22fc      	movs	r2, #252	; 0xfc
 800567c:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	22fc      	movs	r2, #252	; 0xfc
 8005684:	60da      	str	r2, [r3, #12]
}
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <FMC_PCCARDCmd+0x34>)
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <FMC_PCCARDCmd+0x34>)
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	f042 0204 	orr.w	r2, r2, #4
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e005      	b.n	80056ba <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <FMC_PCCARDCmd+0x34>)
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <FMC_PCCARDCmd+0x34>)
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <FMC_PCCARDCmd+0x38>)
 80056b6:	400b      	ands	r3, r1
 80056b8:	6013      	str	r3, [r2, #0]
  }
}
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	a00000a0 	andge	r0, r0, r0, lsr #1
 80056c8:	000ffffb 	strdeq	pc, [pc], -fp

080056cc <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <FMC_SDRAMDeInit+0x40>)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80056dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <FMC_SDRAMDeInit+0x40>)
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	3202      	adds	r2, #2
 80056e6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80056ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <FMC_SDRAMDeInit+0x40>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <FMC_SDRAMDeInit+0x40>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <FMC_SDRAMDeInit+0x40>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]
}  
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	a0000140 	andge	r0, r0, r0, asr #2

08005710 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8005730:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8005736:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800573c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8005742:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8005748:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800574e:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005754:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005766:	4b40      	ldr	r3, [pc, #256]	; (8005868 <FMC_SDRAMInit+0x158>)
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	6979      	ldr	r1, [r7, #20]
 800576e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005772:	e011      	b.n	8005798 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800577c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <FMC_SDRAMInit+0x158>)
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <FMC_SDRAMInit+0x158>)
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d130      	bne.n	8005802 <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80057b2:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80057be:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80057ca:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80057d6:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	3b01      	subs	r3, #1
 80057e0:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 80057e2:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <FMC_SDRAMInit+0x158>)
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	3202      	adds	r2, #2
 80057fa:	6939      	ldr	r1, [r7, #16]
 80057fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005800:	e02c      	b.n	800585c <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	3b01      	subs	r3, #1
 8005812:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005814:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	3b01      	subs	r3, #1
 800581e:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005820:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	3b01      	subs	r3, #1
 800582a:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	3b01      	subs	r3, #1
 8005838:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	3b01      	subs	r3, #1
 8005842:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005844:	4313      	orrs	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <FMC_SDRAMInit+0x158>)
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <FMC_SDRAMInit+0x158>)
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	3202      	adds	r2, #2
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	a0000140 	andge	r0, r0, r0, asr #2

0800586c <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2210      	movs	r2, #16
 800588a:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2240      	movs	r2, #64	; 0x40
 8005890:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589e:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	2210      	movs	r2, #16
 80058b8:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	2210      	movs	r2, #16
 80058c0:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	2210      	movs	r2, #16
 80058c8:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	2210      	movs	r2, #16
 80058d0:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	2210      	movs	r2, #16
 80058d8:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	2210      	movs	r2, #16
 80058e0:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	2210      	movs	r2, #16
 80058e8:	619a      	str	r2, [r3, #24]
  
}
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8005908:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	3b01      	subs	r3, #1
 8005910:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8005912:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <FMC_SDRAMCmdConfig+0x3c>)
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	611a      	str	r2, [r3, #16]

}
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	a0000140 	andge	r0, r0, r0, asr #2

08005934 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <FMC_GetModeStatus+0x38>)
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f003 0306 	and.w	r3, r3, #6
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e005      	b.n	800595e <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <FMC_GetModeStatus+0x38>)
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f003 0318 	and.w	r3, r3, #24
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	a0000140 	andge	r0, r0, r0, asr #2

08005970 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <FMC_SetRefreshCount+0x20>)
 800597a:	4a05      	ldr	r2, [pc, #20]	; (8005990 <FMC_SetRefreshCount+0x20>)
 800597c:	6951      	ldr	r1, [r2, #20]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	0052      	lsls	r2, r2, #1
 8005982:	430a      	orrs	r2, r1
 8005984:	615a      	str	r2, [r3, #20]
   
}
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	a0000140 	andge	r0, r0, r0, asr #2

08005994 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <FMC_SetAutoRefresh_Number+0x20>)
 800599e:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <FMC_SetAutoRefresh_Number+0x20>)
 80059a0:	6911      	ldr	r1, [r2, #16]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	0152      	lsls	r2, r2, #5
 80059a6:	430a      	orrs	r2, r1
 80059a8:	611a      	str	r2, [r3, #16]
}
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	a0000140 	andge	r0, r0, r0, asr #2

080059b8 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <FMC_SDRAMWriteProtectionConfig+0x48>)
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <FMC_SDRAMWriteProtectionConfig+0x48>)
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80059d4:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80059de:	e00a      	b.n	80059f6 <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 80059e0:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <FMC_SDRAMWriteProtectionConfig+0x48>)
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <FMC_SDRAMWriteProtectionConfig+0x48>)
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80059ea:	f647 53ff 	movw	r3, #32255	; 0x7dff
 80059ee:	400b      	ands	r3, r1
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	a0000140 	andge	r0, r0, r0, asr #2

08005a04 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d026      	beq.n	8005a66 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d106      	bne.n	8005a2c <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 8005a1e:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <FMC_ITConfig+0xc0>)
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <FMC_ITConfig+0xc0>)
 8005a22:	6851      	ldr	r1, [r2, #4]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	e046      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a32:	d106      	bne.n	8005a42 <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <FMC_ITConfig+0xc4>)
 8005a36:	4a24      	ldr	r2, [pc, #144]	; (8005ac8 <FMC_ITConfig+0xc4>)
 8005a38:	6851      	ldr	r1, [r2, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	e03b      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d106      	bne.n	8005a58 <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <FMC_ITConfig+0xc8>)
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <FMC_ITConfig+0xc8>)
 8005a4e:	6851      	ldr	r1, [r2, #4]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	e030      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <FMC_ITConfig+0xcc>)
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <FMC_ITConfig+0xcc>)
 8005a5c:	6951      	ldr	r1, [r2, #20]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	615a      	str	r2, [r3, #20]
 8005a64:	e029      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d107      	bne.n	8005a7c <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 8005a6c:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <FMC_ITConfig+0xc0>)
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <FMC_ITConfig+0xc0>)
 8005a70:	6851      	ldr	r1, [r2, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	43d2      	mvns	r2, r2
 8005a76:	400a      	ands	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	e01e      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d107      	bne.n	8005a94 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <FMC_ITConfig+0xc4>)
 8005a86:	4a10      	ldr	r2, [pc, #64]	; (8005ac8 <FMC_ITConfig+0xc4>)
 8005a88:	6851      	ldr	r1, [r2, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	43d2      	mvns	r2, r2
 8005a8e:	400a      	ands	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	e012      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d107      	bne.n	8005aac <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <FMC_ITConfig+0xc8>)
 8005a9e:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <FMC_ITConfig+0xc8>)
 8005aa0:	6851      	ldr	r1, [r2, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	43d2      	mvns	r2, r2
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	e006      	b.n	8005aba <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 8005aac:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <FMC_ITConfig+0xcc>)
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <FMC_ITConfig+0xcc>)
 8005ab0:	6951      	ldr	r1, [r2, #20]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	43d2      	mvns	r2, r2
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	615a      	str	r2, [r3, #20]
    }
  }
}
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	a0000060 	andge	r0, r0, r0, rrx
 8005ac8:	a0000080 	andge	r0, r0, r0, lsl #1
 8005acc:	a00000a0 	andge	r0, r0, r0, lsr #1
 8005ad0:	a0000140 	andge	r0, r0, r0, asr #2

08005ad4 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d103      	bne.n	8005af4 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 8005aec:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <FMC_GetFlagStatus+0x6c>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	e012      	b.n	8005b1a <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afa:	d103      	bne.n	8005b04 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <FMC_GetFlagStatus+0x70>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	e00a      	b.n	8005b1a <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d103      	bne.n	8005b14 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <FMC_GetFlagStatus+0x74>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	e002      	b.n	8005b1a <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <FMC_GetFlagStatus+0x78>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	401a      	ands	r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d002      	beq.n	8005b2c <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 8005b26:	2300      	movs	r3, #0
 8005b28:	73fb      	strb	r3, [r7, #15]
 8005b2a:	e001      	b.n	8005b30 <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	a0000060 	andge	r0, r0, r0, rrx
 8005b44:	a0000080 	andge	r0, r0, r0, lsl #1
 8005b48:	a00000a0 	andge	r0, r0, r0, lsr #1
 8005b4c:	a0000140 	andge	r0, r0, r0, asr #2

08005b50 <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d107      	bne.n	8005b70 <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 8005b60:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <FMC_ClearFlag+0x68>)
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <FMC_ClearFlag+0x68>)
 8005b64:	6851      	ldr	r1, [r2, #4]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	43d2      	mvns	r2, r2
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	e01e      	b.n	8005bae <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d107      	bne.n	8005b88 <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 8005b78:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <FMC_ClearFlag+0x6c>)
 8005b7a:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <FMC_ClearFlag+0x6c>)
 8005b7c:	6851      	ldr	r1, [r2, #4]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	43d2      	mvns	r2, r2
 8005b82:	400a      	ands	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	e012      	b.n	8005bae <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	d107      	bne.n	8005ba0 <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <FMC_ClearFlag+0x70>)
 8005b92:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <FMC_ClearFlag+0x70>)
 8005b94:	6851      	ldr	r1, [r2, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	43d2      	mvns	r2, r2
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	e006      	b.n	8005bae <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 8005ba0:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <FMC_ClearFlag+0x74>)
 8005ba2:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <FMC_ClearFlag+0x74>)
 8005ba4:	6951      	ldr	r1, [r2, #20]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	43d2      	mvns	r2, r2
 8005baa:	400a      	ands	r2, r1
 8005bac:	615a      	str	r2, [r3, #20]
  }
  
}
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	a0000060 	andge	r0, r0, r0, rrx
 8005bbc:	a0000080 	andge	r0, r0, r0, lsl #1
 8005bc0:	a00000a0 	andge	r0, r0, r0, lsr #1
 8005bc4:	a0000140 	andge	r0, r0, r0, asr #2

08005bc8 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d103      	bne.n	8005bf4 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 8005bec:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <FMC_GetITStatus+0xa4>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e015      	b.n	8005c20 <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfa:	d103      	bne.n	8005c04 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <FMC_GetITStatus+0xa8>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e00d      	b.n	8005c20 <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d103      	bne.n	8005c14 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <FMC_GetITStatus+0xac>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e005      	b.n	8005c20 <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <FMC_GetITStatus+0xb0>)
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 8005c1a:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <FMC_GetITStatus+0xb0>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <FMC_GetITStatus+0x6c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d104      	bne.n	8005c3e <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	e004      	b.n	8005c48 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	08da      	lsrs	r2, r3, #3
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <FMC_GetITStatus+0x92>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 8005c54:	2301      	movs	r3, #1
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e001      	b.n	8005c5e <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 8005c5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3724      	adds	r7, #36	; 0x24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	a0000060 	andge	r0, r0, r0, rrx
 8005c70:	a0000080 	andge	r0, r0, r0, lsl #1
 8005c74:	a00000a0 	andge	r0, r0, r0, lsr #1
 8005c78:	a0000140 	andge	r0, r0, r0, asr #2

08005c7c <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d108      	bne.n	8005c9e <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 8005c8c:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <FMC_ClearITPendingBit+0x6c>)
 8005c8e:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <FMC_ClearITPendingBit+0x6c>)
 8005c90:	6851      	ldr	r1, [r2, #4]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	08d2      	lsrs	r2, r2, #3
 8005c96:	43d2      	mvns	r2, r2
 8005c98:	400a      	ands	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	e01f      	b.n	8005cde <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d108      	bne.n	8005cb8 <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <FMC_ClearITPendingBit+0x70>)
 8005ca8:	4a10      	ldr	r2, [pc, #64]	; (8005cec <FMC_ClearITPendingBit+0x70>)
 8005caa:	6851      	ldr	r1, [r2, #4]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	08d2      	lsrs	r2, r2, #3
 8005cb0:	43d2      	mvns	r2, r2
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	e012      	b.n	8005cde <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	d108      	bne.n	8005cd2 <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <FMC_ClearITPendingBit+0x74>)
 8005cc2:	4a0b      	ldr	r2, [pc, #44]	; (8005cf0 <FMC_ClearITPendingBit+0x74>)
 8005cc4:	6851      	ldr	r1, [r2, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	08d2      	lsrs	r2, r2, #3
 8005cca:	43d2      	mvns	r2, r2
 8005ccc:	400a      	ands	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	e005      	b.n	8005cde <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <FMC_ClearITPendingBit+0x78>)
 8005cd4:	4a07      	ldr	r2, [pc, #28]	; (8005cf4 <FMC_ClearITPendingBit+0x78>)
 8005cd6:	6952      	ldr	r2, [r2, #20]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	615a      	str	r2, [r3, #20]
  }
}
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	a0000060 	andge	r0, r0, r0, rrx
 8005cec:	a0000080 	andge	r0, r0, r0, lsl #1
 8005cf0:	a00000a0 	andge	r0, r0, r0, lsr #1
 8005cf4:	a0000140 	andge	r0, r0, r0, asr #2

08005cf8 <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8005cfc:	2040      	movs	r0, #64	; 0x40
 8005cfe:	2101      	movs	r1, #1
 8005d00:	f7fb fc10 	bl	8001524 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8005d04:	2040      	movs	r0, #64	; 0x40
 8005d06:	2100      	movs	r1, #0
 8005d08:	f7fb fc0c 	bl	8001524 <RCC_AHB2PeriphResetCmd>
}
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop

08005d10 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <RNG_Cmd+0x34>)
 8005d22:	4a08      	ldr	r2, [pc, #32]	; (8005d44 <RNG_Cmd+0x34>)
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	f042 0204 	orr.w	r2, r2, #4
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e005      	b.n	8005d3a <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <RNG_Cmd+0x34>)
 8005d30:	4a04      	ldr	r2, [pc, #16]	; (8005d44 <RNG_Cmd+0x34>)
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	f022 0204 	bic.w	r2, r2, #4
 8005d38:	601a      	str	r2, [r3, #0]
  }
}
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	50060800 	andpl	r0, r6, r0, lsl #16

08005d48 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <RNG_GetRandomNumber+0x14>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	50060800 	andpl	r0, r6, r0, lsl #16

08005d60 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d006      	beq.n	8005d7e <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8005d70:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <RNG_ITConfig+0x34>)
 8005d72:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <RNG_ITConfig+0x34>)
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	f042 0208 	orr.w	r2, r2, #8
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e005      	b.n	8005d8a <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <RNG_ITConfig+0x34>)
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <RNG_ITConfig+0x34>)
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	f022 0208 	bic.w	r2, r2, #8
 8005d88:	601a      	str	r2, [r3, #0]
  }
}
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	50060800 	andpl	r0, r6, r0, lsl #16

08005d98 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <RNG_GetFlagStatus+0x34>)
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
 8005db6:	e001      	b.n	8005dbc <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	50060800 	andpl	r0, r6, r0, lsl #16

08005dd0 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <RNG_ClearFlag+0x20>)
 8005ddc:	79fa      	ldrb	r2, [r7, #7]
 8005dde:	0112      	lsls	r2, r2, #4
 8005de0:	43d2      	mvns	r2, r2
 8005de2:	605a      	str	r2, [r3, #4]
}
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	50060800 	andpl	r0, r6, r0, lsl #16

08005df4 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <RNG_GetITStatus+0x34>)
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
 8005e12:	e001      	b.n	8005e18 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	50060800 	andpl	r0, r6, r0, lsl #16

08005e2c <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <RNG_ClearITPendingBit+0x20>)
 8005e38:	79fa      	ldrb	r2, [r7, #7]
 8005e3a:	43d2      	mvns	r2, r2
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	605a      	str	r2, [r3, #4]
}
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	50060800 	andpl	r0, r6, r0, lsl #16

08005e50 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8005e5a:	79fa      	ldrb	r2, [r7, #7]
 8005e5c:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <STM_EVAL_LEDInit+0x50>)
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	4618      	mov	r0, r3
 8005e64:	2101      	movs	r1, #1
 8005e66:	f7fb faa9 	bl	80013bc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8005e6a:	79fa      	ldrb	r2, [r7, #7]
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <STM_EVAL_LEDInit+0x54>)
 8005e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005e74:	2301      	movs	r3, #1
 8005e76:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005e80:	2302      	movs	r3, #2
 8005e82:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8005e84:	79fa      	ldrb	r2, [r7, #7]
 8005e86:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <STM_EVAL_LEDInit+0x58>)
 8005e88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e8c:	f107 0308 	add.w	r3, r7, #8
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	f7fa fd18 	bl	80008c8 <GPIO_Init>
}
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	08009fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}
 8005ea4:	08009fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}
 8005ea8:	20000024 	andcs	r0, r0, r4, lsr #32

08005eac <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8005eb6:	79fa      	ldrb	r2, [r7, #7]
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <STM_EVAL_LEDOn+0x28>)
 8005eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebe:	79f9      	ldrb	r1, [r7, #7]
 8005ec0:	4a05      	ldr	r2, [pc, #20]	; (8005ed8 <STM_EVAL_LEDOn+0x2c>)
 8005ec2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005ec6:	831a      	strh	r2, [r3, #24]
}
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000024 	andcs	r0, r0, r4, lsr #32
 8005ed8:	08009fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}

08005edc <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8005ee6:	79fa      	ldrb	r2, [r7, #7]
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <STM_EVAL_LEDOff+0x28>)
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	79f9      	ldrb	r1, [r7, #7]
 8005ef0:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <STM_EVAL_LEDOff+0x2c>)
 8005ef2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005ef6:	835a      	strh	r2, [r3, #26]
}
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000024 	andcs	r0, r0, r4, lsr #32
 8005f08:	08009fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}

08005f0c <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8005f16:	79fa      	ldrb	r2, [r7, #7]
 8005f18:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <STM_EVAL_LEDToggle+0x34>)
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	79f9      	ldrb	r1, [r7, #7]
 8005f20:	4a07      	ldr	r2, [pc, #28]	; (8005f40 <STM_EVAL_LEDToggle+0x34>)
 8005f22:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005f26:	6951      	ldr	r1, [r2, #20]
 8005f28:	79f8      	ldrb	r0, [r7, #7]
 8005f2a:	4a06      	ldr	r2, [pc, #24]	; (8005f44 <STM_EVAL_LEDToggle+0x38>)
 8005f2c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8005f30:	404a      	eors	r2, r1
 8005f32:	615a      	str	r2, [r3, #20]
}
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000024 	andcs	r0, r0, r4, lsr #32
 8005f44:	08009fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}

08005f48 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	71fa      	strb	r2, [r7, #7]
 8005f54:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8005f56:	2301      	movs	r3, #1
 8005f58:	4618      	mov	r0, r3
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	f7fb fa2e 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8005f60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005f64:	2101      	movs	r1, #1
 8005f66:	f7fb faa1 	bl	80014ac <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8005f72:	2301      	movs	r3, #1
 8005f74:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8005f76:	79fa      	ldrb	r2, [r7, #7]
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <STM_EVAL_PBInit+0x90>)
 8005f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f7e:	f107 0318 	add.w	r3, r7, #24
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	f7fa fc9f 	bl	80008c8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8005f8a:	79bb      	ldrb	r3, [r7, #6]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d11f      	bne.n	8005fd0 <STM_EVAL_PBInit+0x88>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8005f90:	2200      	movs	r2, #0
 8005f92:	2300      	movs	r3, #0
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	f7fc f944 	bl	8002224 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fd fe91 	bl	8003cd8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8005fb6:	2306      	movs	r3, #6
 8005fb8:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8005fba:	230f      	movs	r3, #15
 8005fbc:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8005fbe:	230f      	movs	r3, #15
 8005fc0:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8005fc6:	f107 030c 	add.w	r3, r7, #12
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fa fb1a 	bl	8000604 <NVIC_Init>
  }
}
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	2000002c 	andcs	r0, r0, ip, lsr #32

08005fdc <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005fe6:	79fa      	ldrb	r2, [r7, #7]
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <STM_EVAL_PBGetState+0x28>)
 8005fea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f7fa fd32 	bl	8000a5c <GPIO_ReadInputDataBit>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	2000002c 	andcs	r0, r0, ip, lsr #32

08006008 <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 800600e:	4826      	ldr	r0, [pc, #152]	; (80060a8 <sEE_LowLevel_DeInit+0xa0>)
 8006010:	2100      	movs	r1, #0
 8006012:	f7fc fa97 	bl	8002544 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 8006016:	4824      	ldr	r0, [pc, #144]	; (80060a8 <sEE_LowLevel_DeInit+0xa0>)
 8006018:	f7fc f97a 	bl	8002310 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 800601c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006020:	2100      	movs	r1, #0
 8006022:	f7fb fa25 	bl	8001470 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8006026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800602a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800602c:	2300      	movs	r3, #0
 800602e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006030:	2300      	movs	r3, #0
 8006032:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8006034:	463b      	mov	r3, r7
 8006036:	481d      	ldr	r0, [pc, #116]	; (80060ac <sEE_LowLevel_DeInit+0xa4>)
 8006038:	4619      	mov	r1, r3
 800603a:	f7fa fc45 	bl	80008c8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800603e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006042:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8006044:	463b      	mov	r3, r7
 8006046:	481a      	ldr	r0, [pc, #104]	; (80060b0 <sEE_LowLevel_DeInit+0xa8>)
 8006048:	4619      	mov	r1, r3
 800604a:	f7fa fc3d 	bl	80008c8 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800604e:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 8006050:	220f      	movs	r2, #15
 8006052:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006054:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 8006056:	2200      	movs	r2, #0
 8006058:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 800605c:	2200      	movs	r2, #0
 800605e:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 8006062:	2200      	movs	r2, #0
 8006064:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8006066:	4813      	ldr	r0, [pc, #76]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 8006068:	f7fa facc 	bl	8000604 <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800606c:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 800606e:	220d      	movs	r2, #13
 8006070:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 8006074:	2200      	movs	r2, #0
 8006076:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 800607a:	2200      	movs	r2, #0
 800607c:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 800607e:	480d      	ldr	r0, [pc, #52]	; (80060b4 <sEE_LowLevel_DeInit+0xac>)
 8006080:	f7fa fac0 	bl	8000604 <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8006084:	480c      	ldr	r0, [pc, #48]	; (80060b8 <sEE_LowLevel_DeInit+0xb0>)
 8006086:	2100      	movs	r1, #0
 8006088:	f7fc ffa4 	bl	8002fd4 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800608c:	480b      	ldr	r0, [pc, #44]	; (80060bc <sEE_LowLevel_DeInit+0xb4>)
 800608e:	2100      	movs	r1, #0
 8006090:	f7fc ffa0 	bl	8002fd4 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8006094:	4808      	ldr	r0, [pc, #32]	; (80060b8 <sEE_LowLevel_DeInit+0xb0>)
 8006096:	f7fc fe3f 	bl	8002d18 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800609a:	4808      	ldr	r0, [pc, #32]	; (80060bc <sEE_LowLevel_DeInit+0xb4>)
 800609c:	f7fc fe3c 	bl	8002d18 <DMA_DeInit>
}
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40005c00 	andmi	r5, r0, r0, lsl #24
 80060ac:	40020000 	andmi	r0, r2, r0
 80060b0:	40020800 	andmi	r0, r2, r0, lsl #16
 80060b4:	2000009c 	mulcs	r0, ip, r0
 80060b8:	40026070 	andmi	r6, r2, r0, ror r0
 80060bc:	40026040 	andmi	r6, r2, r0, asr #32

080060c0 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 80060c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80060ca:	2101      	movs	r1, #1
 80060cc:	f7fb f9d0 	bl	8001470 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 80060d0:	2005      	movs	r0, #5
 80060d2:	2101      	movs	r1, #1
 80060d4:	f7fb f972 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80060d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80060dc:	2101      	movs	r1, #1
 80060de:	f7fb f9e5 	bl	80014ac <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 80060e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80060e6:	2101      	movs	r1, #1
 80060e8:	f7fb fa58 	bl	800159c <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 80060ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80060f0:	2100      	movs	r1, #0
 80060f2:	f7fb fa53 	bl	800159c <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 80060f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80060fc:	2302      	movs	r3, #2
 80060fe:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006100:	2302      	movs	r3, #2
 8006102:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8006104:	2301      	movs	r3, #1
 8006106:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006108:	2300      	movs	r3, #0
 800610a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 800610c:	463b      	mov	r3, r7
 800610e:	4849      	ldr	r0, [pc, #292]	; (8006234 <sEE_LowLevel_Init+0x174>)
 8006110:	4619      	mov	r1, r3
 8006112:	f7fa fbd9 	bl	80008c8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8006116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800611a:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800611c:	463b      	mov	r3, r7
 800611e:	4846      	ldr	r0, [pc, #280]	; (8006238 <sEE_LowLevel_Init+0x178>)
 8006120:	4619      	mov	r1, r3
 8006122:	f7fa fbd1 	bl	80008c8 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 8006126:	4843      	ldr	r0, [pc, #268]	; (8006234 <sEE_LowLevel_Init+0x174>)
 8006128:	2108      	movs	r1, #8
 800612a:	2204      	movs	r2, #4
 800612c:	f7fa fd3a 	bl	8000ba4 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 8006130:	4841      	ldr	r0, [pc, #260]	; (8006238 <sEE_LowLevel_Init+0x178>)
 8006132:	2109      	movs	r1, #9
 8006134:	2204      	movs	r2, #4
 8006136:	f7fa fd35 	bl	8000ba4 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800613a:	4b40      	ldr	r3, [pc, #256]	; (800623c <sEE_LowLevel_Init+0x17c>)
 800613c:	220f      	movs	r2, #15
 800613e:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8006140:	4b3e      	ldr	r3, [pc, #248]	; (800623c <sEE_LowLevel_Init+0x17c>)
 8006142:	2200      	movs	r2, #0
 8006144:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006146:	4b3d      	ldr	r3, [pc, #244]	; (800623c <sEE_LowLevel_Init+0x17c>)
 8006148:	2200      	movs	r2, #0
 800614a:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800614c:	4b3b      	ldr	r3, [pc, #236]	; (800623c <sEE_LowLevel_Init+0x17c>)
 800614e:	2201      	movs	r2, #1
 8006150:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8006152:	483a      	ldr	r0, [pc, #232]	; (800623c <sEE_LowLevel_Init+0x17c>)
 8006154:	f7fa fa56 	bl	8000604 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8006158:	4b38      	ldr	r3, [pc, #224]	; (800623c <sEE_LowLevel_Init+0x17c>)
 800615a:	220d      	movs	r2, #13
 800615c:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800615e:	4b37      	ldr	r3, [pc, #220]	; (800623c <sEE_LowLevel_Init+0x17c>)
 8006160:	2200      	movs	r2, #0
 8006162:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8006164:	4b35      	ldr	r3, [pc, #212]	; (800623c <sEE_LowLevel_Init+0x17c>)
 8006166:	2200      	movs	r2, #0
 8006168:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 800616a:	4834      	ldr	r0, [pc, #208]	; (800623c <sEE_LowLevel_Init+0x17c>)
 800616c:	f7fa fa4a 	bl	8000604 <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8006170:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006174:	2101      	movs	r1, #1
 8006176:	f7fb f921 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 800617a:	4831      	ldr	r0, [pc, #196]	; (8006240 <sEE_LowLevel_Init+0x180>)
 800617c:	4931      	ldr	r1, [pc, #196]	; (8006244 <sEE_LowLevel_Init+0x184>)
 800617e:	f7fd f863 	bl	8003248 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8006182:	482f      	ldr	r0, [pc, #188]	; (8006240 <sEE_LowLevel_Init+0x180>)
 8006184:	2100      	movs	r1, #0
 8006186:	f7fc ff25 	bl	8002fd4 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 800618a:	482d      	ldr	r0, [pc, #180]	; (8006240 <sEE_LowLevel_Init+0x180>)
 800618c:	f7fc fdc4 	bl	8002d18 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 8006190:	4b2d      	ldr	r3, [pc, #180]	; (8006248 <sEE_LowLevel_Init+0x188>)
 8006192:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006196:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 8006198:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <sEE_LowLevel_Init+0x188>)
 800619a:	4a2c      	ldr	r2, [pc, #176]	; (800624c <sEE_LowLevel_Init+0x18c>)
 800619c:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 800619e:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 80061a4:	4b28      	ldr	r3, [pc, #160]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061a6:	2240      	movs	r2, #64	; 0x40
 80061a8:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 80061aa:	4b27      	ldr	r3, [pc, #156]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061b0:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80061b2:	4b25      	ldr	r3, [pc, #148]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80061b8:	4b23      	ldr	r3, [pc, #140]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061be:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80061c0:	4b21      	ldr	r3, [pc, #132]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80061cc:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80061d2:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061dc:	2204      	movs	r2, #4
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80061e0:	4b19      	ldr	r3, [pc, #100]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061e2:	2203      	movs	r2, #3
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80061ec:	4b16      	ldr	r3, [pc, #88]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 80061f2:	4813      	ldr	r0, [pc, #76]	; (8006240 <sEE_LowLevel_Init+0x180>)
 80061f4:	4914      	ldr	r1, [pc, #80]	; (8006248 <sEE_LowLevel_Init+0x188>)
 80061f6:	f7fc fe61 	bl	8002ebc <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 80061fa:	4815      	ldr	r0, [pc, #84]	; (8006250 <sEE_LowLevel_Init+0x190>)
 80061fc:	4915      	ldr	r1, [pc, #84]	; (8006254 <sEE_LowLevel_Init+0x194>)
 80061fe:	f7fd f823 	bl	8003248 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8006202:	4813      	ldr	r0, [pc, #76]	; (8006250 <sEE_LowLevel_Init+0x190>)
 8006204:	2100      	movs	r1, #0
 8006206:	f7fc fee5 	bl	8002fd4 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800620a:	4811      	ldr	r0, [pc, #68]	; (8006250 <sEE_LowLevel_Init+0x190>)
 800620c:	f7fc fd84 	bl	8002d18 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 8006210:	480f      	ldr	r0, [pc, #60]	; (8006250 <sEE_LowLevel_Init+0x190>)
 8006212:	490d      	ldr	r1, [pc, #52]	; (8006248 <sEE_LowLevel_Init+0x188>)
 8006214:	f7fc fe52 	bl	8002ebc <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 8006218:	4809      	ldr	r0, [pc, #36]	; (8006240 <sEE_LowLevel_Init+0x180>)
 800621a:	2110      	movs	r1, #16
 800621c:	2201      	movs	r2, #1
 800621e:	f7fd f841 	bl	80032a4 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 8006222:	480b      	ldr	r0, [pc, #44]	; (8006250 <sEE_LowLevel_Init+0x190>)
 8006224:	2110      	movs	r1, #16
 8006226:	2201      	movs	r2, #1
 8006228:	f7fd f83c 	bl	80032a4 <DMA_ITConfig>
}
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40020000 	andmi	r0, r2, r0
 8006238:	40020800 	andmi	r0, r2, r0, lsl #16
 800623c:	2000009c 	mulcs	r0, ip, r0
 8006240:	40026070 	andmi	r6, r2, r0, ror r0
 8006244:	2000003d 	andcs	r0, r0, sp, lsr r0
 8006248:	20000060 	andcs	r0, r0, r0, rrx
 800624c:	40005c10 	andmi	r5, r0, r0, lsl ip
 8006250:	40026040 	andmi	r6, r2, r0, asr #32
 8006254:	103d0000 	eorsne	r0, sp, r0

08006258 <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10d      	bne.n	8006286 <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800626a:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8006270:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 8006272:	2240      	movs	r2, #64	; 0x40
 8006274:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 800627c:	480b      	ldr	r0, [pc, #44]	; (80062ac <sEE_LowLevel_DMAConfig+0x54>)
 800627e:	490a      	ldr	r1, [pc, #40]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 8006280:	f7fc fe1c 	bl	8002ebc <DMA_Init>
 8006284:	e00c      	b.n	80062a0 <sEE_LowLevel_DMAConfig+0x48>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 8006286:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 800628e:	2200      	movs	r2, #0
 8006290:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8006292:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 8006298:	4805      	ldr	r0, [pc, #20]	; (80062b0 <sEE_LowLevel_DMAConfig+0x58>)
 800629a:	4903      	ldr	r1, [pc, #12]	; (80062a8 <sEE_LowLevel_DMAConfig+0x50>)
 800629c:	f7fc fe0e 	bl	8002ebc <DMA_Init>
  }
}
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000060 	andcs	r0, r0, r0, rrx
 80062ac:	40026070 	andmi	r6, r2, r0, ror r0
 80062b0:	40026040 	andmi	r6, r2, r0, asr #32

080062b4 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b092      	sub	sp, #72	; 0x48
 80062b8:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 80062ba:	f000 f835 	bl	8006328 <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 80062be:	2001      	movs	r0, #1
 80062c0:	2101      	movs	r1, #1
 80062c2:	f7fb f8b7 	bl	8001434 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 80062c6:	2302      	movs	r3, #2
 80062c8:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80062ca:	2307      	movs	r3, #7
 80062cc:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 80062ce:	2304      	movs	r3, #4
 80062d0:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 80062d2:	2307      	movs	r3, #7
 80062d4:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 80062d6:	2302      	movs	r3, #2
 80062d8:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 80062da:	2302      	movs	r3, #2
 80062dc:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 80062de:	2302      	movs	r3, #2
 80062e0:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 80062e2:	2301      	movs	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80062e6:	2300      	movs	r3, #0
 80062e8:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 80062ea:	2304      	movs	r3, #4
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 80062ee:	2310      	movs	r3, #16
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 80062f2:	2340      	movs	r3, #64	; 0x40
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 80062f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80062fa:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 80062fc:	2300      	movs	r3, #0
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8006300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006304:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 8006306:	2300      	movs	r3, #0
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 800630a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800630e:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8006310:	463b      	mov	r3, r7
 8006312:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8006314:	f107 031c 	add.w	r3, r7, #28
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff f9f9 	bl	8005710 <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 800631e:	f000 f90d 	bl	800653c <SDRAM_InitSequence>
  
}
 8006322:	3748      	adds	r7, #72	; 0x48
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 800632e:	207e      	movs	r0, #126	; 0x7e
 8006330:	2101      	movs	r1, #1
 8006332:	f7fb f843 	bl	80013bc <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8006336:	2302      	movs	r3, #2
 8006338:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800633a:	2302      	movs	r3, #2
 800633c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800633e:	2300      	movs	r3, #0
 8006340:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006342:	2300      	movs	r3, #0
 8006344:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 8006346:	4877      	ldr	r0, [pc, #476]	; (8006524 <SDRAM_GPIOConfig+0x1fc>)
 8006348:	2105      	movs	r1, #5
 800634a:	220c      	movs	r2, #12
 800634c:	f7fa fc2a 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8006350:	4874      	ldr	r0, [pc, #464]	; (8006524 <SDRAM_GPIOConfig+0x1fc>)
 8006352:	2106      	movs	r1, #6
 8006354:	220c      	movs	r2, #12
 8006356:	f7fa fc25 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 800635a:	2360      	movs	r3, #96	; 0x60
 800635c:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800635e:	463b      	mov	r3, r7
 8006360:	4870      	ldr	r0, [pc, #448]	; (8006524 <SDRAM_GPIOConfig+0x1fc>)
 8006362:	4619      	mov	r1, r3
 8006364:	f7fa fab0 	bl	80008c8 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8006368:	486f      	ldr	r0, [pc, #444]	; (8006528 <SDRAM_GPIOConfig+0x200>)
 800636a:	2100      	movs	r1, #0
 800636c:	220c      	movs	r2, #12
 800636e:	f7fa fc19 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8006372:	2301      	movs	r3, #1
 8006374:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8006376:	463b      	mov	r3, r7
 8006378:	486b      	ldr	r0, [pc, #428]	; (8006528 <SDRAM_GPIOConfig+0x200>)
 800637a:	4619      	mov	r1, r3
 800637c:	f7fa faa4 	bl	80008c8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8006380:	486a      	ldr	r0, [pc, #424]	; (800652c <SDRAM_GPIOConfig+0x204>)
 8006382:	2100      	movs	r1, #0
 8006384:	220c      	movs	r2, #12
 8006386:	f7fa fc0d 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 800638a:	4868      	ldr	r0, [pc, #416]	; (800652c <SDRAM_GPIOConfig+0x204>)
 800638c:	2101      	movs	r1, #1
 800638e:	220c      	movs	r2, #12
 8006390:	f7fa fc08 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8006394:	4865      	ldr	r0, [pc, #404]	; (800652c <SDRAM_GPIOConfig+0x204>)
 8006396:	2108      	movs	r1, #8
 8006398:	220c      	movs	r2, #12
 800639a:	f7fa fc03 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 800639e:	4863      	ldr	r0, [pc, #396]	; (800652c <SDRAM_GPIOConfig+0x204>)
 80063a0:	2109      	movs	r1, #9
 80063a2:	220c      	movs	r2, #12
 80063a4:	f7fa fbfe 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 80063a8:	4860      	ldr	r0, [pc, #384]	; (800652c <SDRAM_GPIOConfig+0x204>)
 80063aa:	210a      	movs	r1, #10
 80063ac:	220c      	movs	r2, #12
 80063ae:	f7fa fbf9 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 80063b2:	485e      	ldr	r0, [pc, #376]	; (800652c <SDRAM_GPIOConfig+0x204>)
 80063b4:	210e      	movs	r1, #14
 80063b6:	220c      	movs	r2, #12
 80063b8:	f7fa fbf4 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 80063bc:	485b      	ldr	r0, [pc, #364]	; (800652c <SDRAM_GPIOConfig+0x204>)
 80063be:	210f      	movs	r1, #15
 80063c0:	220c      	movs	r2, #12
 80063c2:	f7fa fbef 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 80063c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80063ca:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80063cc:	463b      	mov	r3, r7
 80063ce:	4857      	ldr	r0, [pc, #348]	; (800652c <SDRAM_GPIOConfig+0x204>)
 80063d0:	4619      	mov	r1, r3
 80063d2:	f7fa fa79 	bl	80008c8 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 80063d6:	4856      	ldr	r0, [pc, #344]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 80063d8:	2100      	movs	r1, #0
 80063da:	220c      	movs	r2, #12
 80063dc:	f7fa fbe2 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 80063e0:	4853      	ldr	r0, [pc, #332]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 80063e2:	2101      	movs	r1, #1
 80063e4:	220c      	movs	r2, #12
 80063e6:	f7fa fbdd 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 80063ea:	4851      	ldr	r0, [pc, #324]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 80063ec:	2107      	movs	r1, #7
 80063ee:	220c      	movs	r2, #12
 80063f0:	f7fa fbd8 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 80063f4:	484e      	ldr	r0, [pc, #312]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 80063f6:	2108      	movs	r1, #8
 80063f8:	220c      	movs	r2, #12
 80063fa:	f7fa fbd3 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 80063fe:	484c      	ldr	r0, [pc, #304]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 8006400:	2109      	movs	r1, #9
 8006402:	220c      	movs	r2, #12
 8006404:	f7fa fbce 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 8006408:	4849      	ldr	r0, [pc, #292]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 800640a:	210a      	movs	r1, #10
 800640c:	220c      	movs	r2, #12
 800640e:	f7fa fbc9 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8006412:	4847      	ldr	r0, [pc, #284]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 8006414:	210b      	movs	r1, #11
 8006416:	220c      	movs	r2, #12
 8006418:	f7fa fbc4 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 800641c:	4844      	ldr	r0, [pc, #272]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 800641e:	210c      	movs	r1, #12
 8006420:	220c      	movs	r2, #12
 8006422:	f7fa fbbf 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 8006426:	4842      	ldr	r0, [pc, #264]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 8006428:	210d      	movs	r1, #13
 800642a:	220c      	movs	r2, #12
 800642c:	f7fa fbba 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8006430:	483f      	ldr	r0, [pc, #252]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 8006432:	210e      	movs	r1, #14
 8006434:	220c      	movs	r2, #12
 8006436:	f7fa fbb5 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 800643a:	483d      	ldr	r0, [pc, #244]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 800643c:	210f      	movs	r1, #15
 800643e:	220c      	movs	r2, #12
 8006440:	f7fa fbb0 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8006444:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006448:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800644a:	463b      	mov	r3, r7
 800644c:	4838      	ldr	r0, [pc, #224]	; (8006530 <SDRAM_GPIOConfig+0x208>)
 800644e:	4619      	mov	r1, r3
 8006450:	f7fa fa3a 	bl	80008c8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8006454:	4837      	ldr	r0, [pc, #220]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 8006456:	2100      	movs	r1, #0
 8006458:	220c      	movs	r2, #12
 800645a:	f7fa fba3 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 800645e:	4835      	ldr	r0, [pc, #212]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 8006460:	2101      	movs	r1, #1
 8006462:	220c      	movs	r2, #12
 8006464:	f7fa fb9e 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 8006468:	4832      	ldr	r0, [pc, #200]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 800646a:	2102      	movs	r1, #2
 800646c:	220c      	movs	r2, #12
 800646e:	f7fa fb99 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8006472:	4830      	ldr	r0, [pc, #192]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 8006474:	2103      	movs	r1, #3
 8006476:	220c      	movs	r2, #12
 8006478:	f7fa fb94 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 800647c:	482d      	ldr	r0, [pc, #180]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 800647e:	2104      	movs	r1, #4
 8006480:	220c      	movs	r2, #12
 8006482:	f7fa fb8f 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 8006486:	482b      	ldr	r0, [pc, #172]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 8006488:	2105      	movs	r1, #5
 800648a:	220c      	movs	r2, #12
 800648c:	f7fa fb8a 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 8006490:	4828      	ldr	r0, [pc, #160]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 8006492:	210b      	movs	r1, #11
 8006494:	220c      	movs	r2, #12
 8006496:	f7fa fb85 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 800649a:	4826      	ldr	r0, [pc, #152]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 800649c:	210c      	movs	r1, #12
 800649e:	220c      	movs	r2, #12
 80064a0:	f7fa fb80 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 80064a4:	4823      	ldr	r0, [pc, #140]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 80064a6:	210d      	movs	r1, #13
 80064a8:	220c      	movs	r2, #12
 80064aa:	f7fa fb7b 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 80064ae:	4821      	ldr	r0, [pc, #132]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 80064b0:	210e      	movs	r1, #14
 80064b2:	220c      	movs	r2, #12
 80064b4:	f7fa fb76 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 80064b8:	481e      	ldr	r0, [pc, #120]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 80064ba:	210f      	movs	r1, #15
 80064bc:	220c      	movs	r2, #12
 80064be:	f7fa fb71 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80064c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80064c6:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80064c8:	463b      	mov	r3, r7
 80064ca:	481a      	ldr	r0, [pc, #104]	; (8006534 <SDRAM_GPIOConfig+0x20c>)
 80064cc:	4619      	mov	r1, r3
 80064ce:	f7fa f9fb 	bl	80008c8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 80064d2:	4819      	ldr	r0, [pc, #100]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 80064d4:	2100      	movs	r1, #0
 80064d6:	220c      	movs	r2, #12
 80064d8:	f7fa fb64 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 80064dc:	4816      	ldr	r0, [pc, #88]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 80064de:	2101      	movs	r1, #1
 80064e0:	220c      	movs	r2, #12
 80064e2:	f7fa fb5f 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 80064e6:	4814      	ldr	r0, [pc, #80]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 80064e8:	2104      	movs	r1, #4
 80064ea:	220c      	movs	r2, #12
 80064ec:	f7fa fb5a 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 80064f0:	4811      	ldr	r0, [pc, #68]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 80064f2:	2105      	movs	r1, #5
 80064f4:	220c      	movs	r2, #12
 80064f6:	f7fa fb55 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 80064fa:	480f      	ldr	r0, [pc, #60]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 80064fc:	2108      	movs	r1, #8
 80064fe:	220c      	movs	r2, #12
 8006500:	f7fa fb50 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8006504:	480c      	ldr	r0, [pc, #48]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 8006506:	210f      	movs	r1, #15
 8006508:	220c      	movs	r2, #12
 800650a:	f7fa fb4b 	bl	8000ba4 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 800650e:	f248 1333 	movw	r3, #33075	; 0x8133
 8006512:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8006514:	463b      	mov	r3, r7
 8006516:	4808      	ldr	r0, [pc, #32]	; (8006538 <SDRAM_GPIOConfig+0x210>)
 8006518:	4619      	mov	r1, r3
 800651a:	f7fa f9d5 	bl	80008c8 <GPIO_Init>
}
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40020400 	andmi	r0, r2, r0, lsl #8
 8006528:	40020800 	andmi	r0, r2, r0, lsl #16
 800652c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8006530:	40021000 	andmi	r1, r2, r0
 8006534:	40021400 	andmi	r1, r2, r0, lsl #8
 8006538:	40021800 	andmi	r1, r2, r0, lsl #16

0800653c <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8006546:	2301      	movs	r3, #1
 8006548:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 800654a:	2308      	movs	r3, #8
 800654c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8006556:	bf00      	nop
 8006558:	2001      	movs	r0, #1
 800655a:	2120      	movs	r1, #32
 800655c:	f7ff faba 	bl	8005ad4 <FMC_GetFlagStatus>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f8      	bne.n	8006558 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff f9c3 	bl	80058f4 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 800656e:	200a      	movs	r0, #10
 8006570:	f000 f8aa 	bl	80066c8 <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8006574:	2302      	movs	r3, #2
 8006576:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8006578:	2308      	movs	r3, #8
 800657a:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800657c:	2301      	movs	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8006584:	bf00      	nop
 8006586:	2001      	movs	r0, #1
 8006588:	2120      	movs	r1, #32
 800658a:	f7ff faa3 	bl	8005ad4 <FMC_GetFlagStatus>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f8      	bne.n	8006586 <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff f9ac 	bl	80058f4 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 800659c:	2303      	movs	r3, #3
 800659e:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80065a0:	2308      	movs	r3, #8
 80065a2:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 80065a4:	2304      	movs	r3, #4
 80065a6:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80065ac:	bf00      	nop
 80065ae:	2001      	movs	r0, #1
 80065b0:	2120      	movs	r1, #32
 80065b2:	f7ff fa8f 	bl	8005ad4 <FMC_GetFlagStatus>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f8      	bne.n	80065ae <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff f998 	bl	80058f4 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80065c4:	bf00      	nop
 80065c6:	2001      	movs	r0, #1
 80065c8:	2120      	movs	r1, #32
 80065ca:	f7ff fa83 	bl	8005ad4 <FMC_GetFlagStatus>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f8      	bne.n	80065c6 <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff f98c 	bl	80058f4 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80065dc:	f240 2331 	movw	r3, #561	; 0x231
 80065e0:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 80065e2:	2304      	movs	r3, #4
 80065e4:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80065e6:	2308      	movs	r3, #8
 80065e8:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80065ea:	2301      	movs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80065f2:	bf00      	nop
 80065f4:	2001      	movs	r0, #1
 80065f6:	2120      	movs	r1, #32
 80065f8:	f7ff fa6c 	bl	8005ad4 <FMC_GetFlagStatus>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f8      	bne.n	80065f4 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff f975 	bl	80058f4 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 800660a:	f240 506a 	movw	r0, #1386	; 0x56a
 800660e:	f7ff f9af 	bl	8005970 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8006612:	bf00      	nop
 8006614:	2001      	movs	r0, #1
 8006616:	2120      	movs	r1, #32
 8006618:	f7ff fa5c 	bl	8005ad4 <FMC_GetFlagStatus>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f8      	bne.n	8006614 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8006638:	2001      	movs	r0, #1
 800663a:	2100      	movs	r1, #0
 800663c:	f7ff f9bc 	bl	80059b8 <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8006640:	bf00      	nop
 8006642:	2001      	movs	r0, #1
 8006644:	2120      	movs	r1, #32
 8006646:	f7ff fa45 	bl	8005ad4 <FMC_GetFlagStatus>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f8      	bne.n	8006642 <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8006650:	e00e      	b.n	8006670 <SDRAM_WriteBuffer+0x48>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8006658:	461a      	mov	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1d19      	adds	r1, r3, #4
 800665e:	60f9      	str	r1, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	3304      	adds	r3, #4
 8006668:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3b01      	subs	r3, #1
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ed      	bne.n	8006652 <SDRAM_WriteBuffer+0x2a>

    /* Increment the address*/
    write_pointer += 4;
  }
    
}
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800668c:	bf00      	nop
 800668e:	2001      	movs	r0, #1
 8006690:	2120      	movs	r1, #32
 8006692:	f7ff fa1f 	bl	8005ad4 <FMC_GetFlagStatus>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f8      	bne.n	800668e <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 800669c:	e00d      	b.n	80066ba <SDRAM_ReadBuffer+0x3e>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	60fa      	str	r2, [r7, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	3304      	adds	r3, #4
 80066b2:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ee      	bne.n	800669e <SDRAM_ReadBuffer+0x22>
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
    
   /* Increment the address*/
    write_pointer += 4;
  } 
}
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop

080066c8 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <delay+0x30>)
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e002      	b.n	80066e6 <delay+0x1e>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f9      	bne.n	80066e0 <delay+0x18>
  {
  }
}
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	000186a0 	andeq	r8, r1, r0, lsr #13

080066fc <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(L3GD20_InitTypeDef *L3GD20_InitStruct)
{  
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
 8006708:	2300      	movs	r3, #0
 800670a:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
 800670c:	f000 f984 	bl	8006a18 <L3GD20_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	4313      	orrs	r3, r2
 800671a:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8006720:	4313      	orrs	r3, r2
 8006722:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure the low level interface ---------------------------------------*/
  L3GD20_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
 8006728:	4313      	orrs	r3, r2
 800672a:	b2da      	uxtb	r2, r3
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	4313      	orrs	r3, r2
 8006730:	b2db      	uxtb	r3, r3
 8006732:	73fb      	strb	r3, [r7, #15]
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	791a      	ldrb	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	795b      	ldrb	r3, [r3, #5]
 800673c:	4313      	orrs	r3, r2
 800673e:	b2da      	uxtb	r2, r3
                    L3GD20_InitStruct->Full_Scale);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (L3GD20_InitStruct->Power_Mode | L3GD20_InitStruct->Output_DataRate | \
                    L3GD20_InitStruct->Axes_Enable | L3GD20_InitStruct->Band_Width);
  
  ctrl4 |= (uint8_t) (L3GD20_InitStruct->BlockData_Update | L3GD20_InitStruct->Endianness | \
 8006744:	4313      	orrs	r3, r2
 8006746:	b2da      	uxtb	r2, r3
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	4313      	orrs	r3, r2
 800674c:	b2db      	uxtb	r3, r3
 800674e:	73bb      	strb	r3, [r7, #14]
                    L3GD20_InitStruct->Full_Scale);
                    
  /* Write value to MEMS CTRL_REG1 regsister */
  L3GD20_Write(&ctrl1, L3GD20_CTRL_REG1_ADDR, 1);
 8006750:	f107 030f 	add.w	r3, r7, #15
 8006754:	4618      	mov	r0, r3
 8006756:	2120      	movs	r1, #32
 8006758:	2201      	movs	r2, #1
 800675a:	f000 f8f7 	bl	800694c <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */
  L3GD20_Write(&ctrl4, L3GD20_CTRL_REG4_ADDR, 1);
 800675e:	f107 030e 	add.w	r3, r7, #14
 8006762:	4618      	mov	r0, r3
 8006764:	2123      	movs	r1, #35	; 0x23
 8006766:	2201      	movs	r2, #1
 8006768:	f000 f8f0 	bl	800694c <L3GD20_Write>
}
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop

08006774 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800677a:	1dfb      	adds	r3, r7, #7
 800677c:	4618      	mov	r0, r3
 800677e:	2124      	movs	r1, #36	; 0x24
 8006780:	2201      	movs	r2, #1
 8006782:	f000 f913 	bl	80069ac <L3GD20_Read>
  
  /* Enable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800678c:	b2db      	uxtb	r3, r3
 800678e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	4618      	mov	r0, r3
 8006794:	2124      	movs	r1, #36	; 0x24
 8006796:	2201      	movs	r2, #1
 8006798:	f000 f8d8 	bl	800694c <L3GD20_Write>
}
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop

080067a4 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(L3GD20_InterruptConfigTypeDef *L3GD20_IntConfigStruct)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	2300      	movs	r3, #0
 80067b2:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  L3GD20_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80067b4:	f107 030f 	add.w	r3, r7, #15
 80067b8:	4618      	mov	r0, r3
 80067ba:	2130      	movs	r1, #48	; 0x30
 80067bc:	2201      	movs	r2, #1
 80067be:	f000 f8f5 	bl	80069ac <L3GD20_Read>
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80067c2:	f107 030e 	add.w	r3, r7, #14
 80067c6:	4618      	mov	r0, r3
 80067c8:	2122      	movs	r1, #34	; 0x22
 80067ca:	2201      	movs	r2, #1
 80067cc:	f000 f8ee 	bl	80069ac <L3GD20_Read>
  
  ctrl_cfr &= 0x80;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80067da:	7bbb      	ldrb	r3, [r7, #14]
 80067dc:	f023 0320 	bic.w	r3, r3, #32
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	73bb      	strb	r3, [r7, #14]
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	781a      	ldrb	r2, [r3, #0]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	785b      	ldrb	r3, [r3, #1]
  ctrl_cfr &= 0x80;
  
  ctrl3 &= 0xDF;
  
  /* Configure latch Interrupt request and axe interrupts */                   
  ctrl_cfr |= (uint8_t)(L3GD20_IntConfigStruct->Latch_Request| \
 80067ec:	4313      	orrs	r3, r2
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	73fb      	strb	r3, [r7, #15]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	789a      	ldrb	r2, [r3, #2]
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	4313      	orrs	r3, r2
 8006800:	b2db      	uxtb	r3, r3
 8006802:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  L3GD20_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8006804:	f107 030f 	add.w	r3, r7, #15
 8006808:	4618      	mov	r0, r3
 800680a:	2130      	movs	r1, #48	; 0x30
 800680c:	2201      	movs	r2, #1
 800680e:	f000 f89d 	bl	800694c <L3GD20_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  L3GD20_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8006812:	f107 030e 	add.w	r3, r7, #14
 8006816:	4618      	mov	r0, r3
 8006818:	2122      	movs	r1, #34	; 0x22
 800681a:	2201      	movs	r2, #1
 800681c:	f000 f896 	bl	800694c <L3GD20_Write>
}
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <L3GD20_INT1InterruptCmd>:
  *        @arg L3GD20_INT1INTERRUPT_DISABLE
  *        @arg L3GD20_INT1INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT1InterruptCmd(uint8_t InterruptState)
{  
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006832:	f107 030f 	add.w	r3, r7, #15
 8006836:	4618      	mov	r0, r3
 8006838:	2122      	movs	r1, #34	; 0x22
 800683a:	2201      	movs	r2, #1
 800683c:	f000 f8b6 	bl	80069ac <L3GD20_Read>
                  
  tmpreg &= 0x7F;	
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006846:	b2db      	uxtb	r3, r3
 8006848:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800684a:	7bfa      	ldrb	r2, [r7, #15]
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	4313      	orrs	r3, r2
 8006850:	b2db      	uxtb	r3, r3
 8006852:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006854:	f107 030f 	add.w	r3, r7, #15
 8006858:	4618      	mov	r0, r3
 800685a:	2122      	movs	r1, #34	; 0x22
 800685c:	2201      	movs	r2, #1
 800685e:	f000 f875 	bl	800694c <L3GD20_Write>
}
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <L3GD20_INT2InterruptCmd>:
  *        @arg L3GD20_INT2INTERRUPT_DISABLE
  *        @arg L3GD20_INT2INTERRUPT_ENABLE    
  * @retval None
  */
void L3GD20_INT2InterruptCmd(uint8_t InterruptState)
{  
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006872:	f107 030f 	add.w	r3, r7, #15
 8006876:	4618      	mov	r0, r3
 8006878:	2122      	movs	r1, #34	; 0x22
 800687a:	2201      	movs	r2, #1
 800687c:	f000 f896 	bl	80069ac <L3GD20_Read>
                  
  tmpreg &= 0xF7;	
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	f023 0308 	bic.w	r3, r3, #8
 8006886:	b2db      	uxtb	r3, r3
 8006888:	73fb      	strb	r3, [r7, #15]
  tmpreg |= InterruptState;
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	4313      	orrs	r3, r2
 8006890:	b2db      	uxtb	r3, r3
 8006892:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006894:	f107 030f 	add.w	r3, r7, #15
 8006898:	4618      	mov	r0, r3
 800689a:	2122      	movs	r1, #34	; 0x22
 800689c:	2201      	movs	r2, #1
 800689e:	f000 f855 	bl	800694c <L3GD20_Write>
}
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <L3GD20_FilterConfig>:
  * @param  L3GD20_FilterStruct: pointer to a L3GD20_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(L3GD20_FilterConfigTypeDef *L3GD20_FilterStruct) 
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80068b0:	f107 030f 	add.w	r3, r7, #15
 80068b4:	4618      	mov	r0, r3
 80068b6:	2121      	movs	r1, #33	; 0x21
 80068b8:	2201      	movs	r2, #1
 80068ba:	f000 f877 	bl	80069ac <L3GD20_Read>
  
  tmpreg &= 0xC0;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	781a      	ldrb	r2, [r3, #0]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	785b      	ldrb	r3, [r3, #1]
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= (uint8_t) (L3GD20_FilterStruct->HighPassFilter_Mode_Selection |\
 80068d0:	4313      	orrs	r3, r2
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	73fb      	strb	r3, [r7, #15]
                      L3GD20_FilterStruct->HighPassFilter_CutOff_Frequency);                             

  /* Write value to MEMS CTRL_REG2 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80068dc:	f107 030f 	add.w	r3, r7, #15
 80068e0:	4618      	mov	r0, r3
 80068e2:	2121      	movs	r1, #33	; 0x21
 80068e4:	2201      	movs	r2, #1
 80068e6:	f000 f831 	bl	800694c <L3GD20_Write>
}
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
 {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80068fa:	f107 030f 	add.w	r3, r7, #15
 80068fe:	4618      	mov	r0, r3
 8006900:	2124      	movs	r1, #36	; 0x24
 8006902:	2201      	movs	r2, #1
 8006904:	f000 f852 	bl	80069ac <L3GD20_Read>
                  
  tmpreg &= 0xEF;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	f023 0310 	bic.w	r3, r3, #16
 800690e:	b2db      	uxtb	r3, r3
 8006910:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8006912:	7bfa      	ldrb	r2, [r7, #15]
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	4313      	orrs	r3, r2
 8006918:	b2db      	uxtb	r3, r3
 800691a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 regsister */
  L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800691c:	f107 030f 	add.w	r3, r7, #15
 8006920:	4618      	mov	r0, r3
 8006922:	2124      	movs	r1, #36	; 0x24
 8006924:	2201      	movs	r2, #1
 8006926:	f000 f811 	bl	800694c <L3GD20_Write>
}
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <L3GD20_GetDataStatus>:
  * @brief  Get status for L3GD20 data
  * @param  None         
  * @retval L3GD20 status
  */
uint8_t L3GD20_GetDataStatus(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read STATUS_REG register */
  L3GD20_Read(&tmpreg, L3GD20_STATUS_REG_ADDR, 1);
 8006936:	1dfb      	adds	r3, r7, #7
 8006938:	4618      	mov	r0, r3
 800693a:	2127      	movs	r1, #39	; 0x27
 800693c:	2201      	movs	r2, #1
 800693e:	f000 f835 	bl	80069ac <L3GD20_Read>
                  
  return tmpreg;
 8006942:	79fb      	ldrb	r3, [r7, #7]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <L3GD20_Write>:
  * @param  WriteAddr : L3GD20's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void L3GD20_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	460a      	mov	r2, r1
 8006958:	70fa      	strb	r2, [r7, #3]
 800695a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800695c:	883b      	ldrh	r3, [r7, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d903      	bls.n	800696a <L3GD20_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006968:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 800696a:	480f      	ldr	r0, [pc, #60]	; (80069a8 <L3GD20_Write+0x5c>)
 800696c:	2102      	movs	r1, #2
 800696e:	f7fa f8d3 	bl	8000b18 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f8eb 	bl	8006b50 <L3GD20_SendByte>

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800697a:	e00a      	b.n	8006992 <L3GD20_Write+0x46>
  {
    L3GD20_SendByte(*pBuffer);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 f8e5 	bl	8006b50 <L3GD20_SendByte>
    NumByteToWrite--;
 8006986:	883b      	ldrh	r3, [r7, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3301      	adds	r3, #1
 8006990:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(WriteAddr);

  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8006992:	883b      	ldrh	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f1      	bne.n	800697c <L3GD20_Write+0x30>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 8006998:	4803      	ldr	r0, [pc, #12]	; (80069a8 <L3GD20_Write+0x5c>)
 800699a:	2102      	movs	r1, #2
 800699c:	f7fa f8ae 	bl	8000afc <GPIO_SetBits>
}
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40020800 	andmi	r0, r2, r0, lsl #16

080069ac <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	460a      	mov	r2, r1
 80069b8:	70fa      	strb	r2, [r7, #3]
 80069ba:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80069bc:	883b      	ldrh	r3, [r7, #0]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d904      	bls.n	80069cc <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80069c8:	70fb      	strb	r3, [r7, #3]
 80069ca:	e003      	b.n	80069d4 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069d2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 80069d4:	480f      	ldr	r0, [pc, #60]	; (8006a14 <L3GD20_Read+0x68>)
 80069d6:	2102      	movs	r1, #2
 80069d8:	f7fa f89e 	bl	8000b18 <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f8b6 	bl	8006b50 <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80069e4:	e00c      	b.n	8006a00 <L3GD20_Read+0x54>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 80069e6:	2000      	movs	r0, #0
 80069e8:	f000 f8b2 	bl	8006b50 <L3GD20_SendByte>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80069f4:	883b      	ldrh	r3, [r7, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3301      	adds	r3, #1
 80069fe:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8006a00:	883b      	ldrh	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1ef      	bne.n	80069e6 <L3GD20_Read+0x3a>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 8006a06:	4803      	ldr	r0, [pc, #12]	; (8006a14 <L3GD20_Read+0x68>)
 8006a08:	2102      	movs	r1, #2
 8006a0a:	f7fa f877 	bl	8000afc <GPIO_SetBits>
}  
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40020800 	andmi	r0, r2, r0, lsl #16

08006a18 <L3GD20_LowLevel_Init>:
  * @brief  Initializes the low level interface used to drive the L3GD20
  * @param  None
  * @retval None
  */
static void L3GD20_LowLevel_Init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /* Enable the SPI periph */
  RCC_APB2PeriphClockCmd(L3GD20_SPI_CLK, ENABLE);
 8006a1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a22:	2101      	movs	r1, #1
 8006a24:	f7fa fd42 	bl	80014ac <RCC_APB2PeriphClockCmd>

  /* Enable SCK, MOSI and MISO GPIO clocks */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_SCK_GPIO_CLK | L3GD20_SPI_MISO_GPIO_CLK | L3GD20_SPI_MOSI_GPIO_CLK, ENABLE);
 8006a28:	2020      	movs	r0, #32
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	f7fa fcc6 	bl	80013bc <RCC_AHB1PeriphClockCmd>

  /* Enable CS GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_CS_GPIO_CLK, ENABLE);
 8006a30:	2004      	movs	r0, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	f7fa fcc2 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT1_GPIO_CLK, ENABLE);
 8006a38:	2001      	movs	r0, #1
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	f7fa fcbe 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHB1PeriphClockCmd(L3GD20_SPI_INT2_GPIO_CLK, ENABLE);
 8006a40:	2001      	movs	r0, #1
 8006a42:	2101      	movs	r1, #1
 8006a44:	f7fa fcba 	bl	80013bc <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(L3GD20_SPI_SCK_GPIO_PORT, L3GD20_SPI_SCK_SOURCE, L3GD20_SPI_SCK_AF);
 8006a48:	483d      	ldr	r0, [pc, #244]	; (8006b40 <L3GD20_LowLevel_Init+0x128>)
 8006a4a:	2107      	movs	r1, #7
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	f7fa f8a9 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MISO_GPIO_PORT, L3GD20_SPI_MISO_SOURCE, L3GD20_SPI_MISO_AF);
 8006a52:	483b      	ldr	r0, [pc, #236]	; (8006b40 <L3GD20_LowLevel_Init+0x128>)
 8006a54:	2108      	movs	r1, #8
 8006a56:	2205      	movs	r2, #5
 8006a58:	f7fa f8a4 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(L3GD20_SPI_MOSI_GPIO_PORT, L3GD20_SPI_MOSI_SOURCE, L3GD20_SPI_MOSI_AF);
 8006a5c:	4838      	ldr	r0, [pc, #224]	; (8006b40 <L3GD20_LowLevel_Init+0x128>)
 8006a5e:	2109      	movs	r1, #9
 8006a60:	2205      	movs	r2, #5
 8006a62:	f7fa f89f 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006a66:	2302      	movs	r3, #2
 8006a68:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8006a72:	2301      	movs	r3, #1
 8006a74:	777b      	strb	r3, [r7, #29]

  /* SPI SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_SCK_PIN;
 8006a76:	2380      	movs	r3, #128	; 0x80
 8006a78:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8006a7a:	f107 0318 	add.w	r3, r7, #24
 8006a7e:	4830      	ldr	r0, [pc, #192]	; (8006b40 <L3GD20_LowLevel_Init+0x128>)
 8006a80:	4619      	mov	r1, r3
 8006a82:	f7f9 ff21 	bl	80008c8 <GPIO_Init>

  /* SPI  MOSI pin configuration */
  GPIO_InitStructure.GPIO_Pin =  L3GD20_SPI_MOSI_PIN;
 8006a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8006a8c:	f107 0318 	add.w	r3, r7, #24
 8006a90:	482b      	ldr	r0, [pc, #172]	; (8006b40 <L3GD20_LowLevel_Init+0x128>)
 8006a92:	4619      	mov	r1, r3
 8006a94:	f7f9 ff18 	bl	80008c8 <GPIO_Init>

  /* SPI MISO pin configuration */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_MISO_PIN;
 8006a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a9c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8006a9e:	f107 0318 	add.w	r3, r7, #24
 8006aa2:	4827      	ldr	r0, [pc, #156]	; (8006b40 <L3GD20_LowLevel_Init+0x128>)
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7f9 ff0f 	bl	80008c8 <GPIO_Init>

  /* SPI configuration -------------------------------------------------------*/
  SPI_I2S_DeInit(L3GD20_SPI);
 8006aaa:	4826      	ldr	r0, [pc, #152]	; (8006b44 <L3GD20_LowLevel_Init+0x12c>)
 8006aac:	f7fc fcba 	bl	8003424 <SPI_I2S_DeInit>
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	80bb      	strh	r3, [r7, #4]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8006ab4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ab8:	80fb      	strh	r3, [r7, #6]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8006aba:	2300      	movs	r3, #0
 8006abc:	813b      	strh	r3, [r7, #8]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	817b      	strh	r3, [r7, #10]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8006ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aca:	81fb      	strh	r3, [r7, #14]
     to verify these constraints:
        - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
        - l3gd20 SPI interface max baudrate is 10MHz for write/read
        - PCLK2 frequency is set to 90 MHz 
    */
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8006acc:	2318      	movs	r3, #24
 8006ace:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8006ad4:	2307      	movs	r3, #7
 8006ad6:	82bb      	strh	r3, [r7, #20]
  SPI_Init(L3GD20_SPI, &SPI_InitStructure);
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	481a      	ldr	r0, [pc, #104]	; (8006b44 <L3GD20_LowLevel_Init+0x12c>)
 8006adc:	4619      	mov	r1, r3
 8006ade:	f7fc fd0d 	bl	80034fc <SPI_Init>

  /* Enable L3GD20_SPI  */
  SPI_Cmd(L3GD20_SPI, ENABLE);
 8006ae2:	4818      	ldr	r0, [pc, #96]	; (8006b44 <L3GD20_LowLevel_Init+0x12c>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	f7fc fe65 	bl	80037b4 <SPI_Cmd>
  
  /* Configure GPIO PIN for Lis Chip select */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_CS_PIN;
 8006aea:	2302      	movs	r3, #2
 8006aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8006aee:	2301      	movs	r3, #1
 8006af0:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006af2:	2300      	movs	r3, #0
 8006af4:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8006af6:	2301      	movs	r3, #1
 8006af8:	777b      	strb	r3, [r7, #29]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
 8006afe:	f107 0318 	add.w	r3, r7, #24
 8006b02:	4811      	ldr	r0, [pc, #68]	; (8006b48 <L3GD20_LowLevel_Init+0x130>)
 8006b04:	4619      	mov	r1, r3
 8006b06:	f7f9 fedf 	bl	80008c8 <GPIO_Init>

  /* Deselect : Chip Select high */
  GPIO_SetBits(L3GD20_SPI_CS_GPIO_PORT, L3GD20_SPI_CS_PIN);
 8006b0a:	480f      	ldr	r0, [pc, #60]	; (8006b48 <L3GD20_LowLevel_Init+0x130>)
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	f7f9 fff5 	bl	8000afc <GPIO_SetBits>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT1_PIN;
 8006b12:	2302      	movs	r3, #2
 8006b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006b16:	2300      	movs	r3, #0
 8006b18:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	77fb      	strb	r3, [r7, #31]
  GPIO_Init(L3GD20_SPI_INT1_GPIO_PORT, &GPIO_InitStructure);
 8006b1e:	f107 0318 	add.w	r3, r7, #24
 8006b22:	480a      	ldr	r0, [pc, #40]	; (8006b4c <L3GD20_LowLevel_Init+0x134>)
 8006b24:	4619      	mov	r1, r3
 8006b26:	f7f9 fecf 	bl	80008c8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = L3GD20_SPI_INT2_PIN;
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(L3GD20_SPI_INT2_GPIO_PORT, &GPIO_InitStructure);
 8006b2e:	f107 0318 	add.w	r3, r7, #24
 8006b32:	4806      	ldr	r0, [pc, #24]	; (8006b4c <L3GD20_LowLevel_Init+0x134>)
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7f9 fec7 	bl	80008c8 <GPIO_Init>
}  
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40021400 	andmi	r1, r2, r0, lsl #8
 8006b44:	40015000 	andmi	r5, r1, r0
 8006b48:	40020800 	andmi	r0, r2, r0, lsl #16
 8006b4c:	40020000 	andmi	r0, r2, r0

08006b50 <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 8006b5a:	4b1f      	ldr	r3, [pc, #124]	; (8006bd8 <L3GD20_SendByte+0x88>)
 8006b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b60:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8006b62:	e00b      	b.n	8006b7c <L3GD20_SendByte+0x2c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8006b64:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <L3GD20_SendByte+0x88>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1e59      	subs	r1, r3, #1
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	; (8006bd8 <L3GD20_SendByte+0x88>)
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <L3GD20_SendByte+0x2c>
 8006b72:	f000 f835 	bl	8006be0 <L3GD20_TIMEOUT_UserCallback>
 8006b76:	4603      	mov	r3, r0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e029      	b.n	8006bd0 <L3GD20_SendByte+0x80>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 8006b7c:	4817      	ldr	r0, [pc, #92]	; (8006bdc <L3GD20_SendByte+0x8c>)
 8006b7e:	2102      	movs	r1, #2
 8006b80:	f7fd f80e 	bl	8003ba0 <SPI_I2S_GetFlagStatus>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0ec      	beq.n	8006b64 <L3GD20_SendByte+0x14>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4813      	ldr	r0, [pc, #76]	; (8006bdc <L3GD20_SendByte+0x8c>)
 8006b90:	4619      	mov	r1, r3
 8006b92:	f7fc ff49 	bl	8003a28 <SPI_I2S_SendData>
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <L3GD20_SendByte+0x88>)
 8006b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b9c:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8006b9e:	e00b      	b.n	8006bb8 <L3GD20_SendByte+0x68>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8006ba0:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <L3GD20_SendByte+0x88>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	1e59      	subs	r1, r3, #1
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <L3GD20_SendByte+0x88>)
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <L3GD20_SendByte+0x68>
 8006bae:	f000 f817 	bl	8006be0 <L3GD20_TIMEOUT_UserCallback>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	e00b      	b.n	8006bd0 <L3GD20_SendByte+0x80>
  
  /* Send a Byte through the SPI peripheral */
  SPI_I2S_SendData(L3GD20_SPI, (uint16_t)byte);
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8006bb8:	4808      	ldr	r0, [pc, #32]	; (8006bdc <L3GD20_SendByte+0x8c>)
 8006bba:	2101      	movs	r1, #1
 8006bbc:	f7fc fff0 	bl	8003ba0 <SPI_I2S_GetFlagStatus>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0ec      	beq.n	8006ba0 <L3GD20_SendByte+0x50>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_I2S_ReceiveData(L3GD20_SPI);
 8006bc6:	4805      	ldr	r0, [pc, #20]	; (8006bdc <L3GD20_SendByte+0x8c>)
 8006bc8:	f7fc ff20 	bl	8003a0c <SPI_I2S_ReceiveData>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	b2db      	uxtb	r3, r3
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000030 	andcs	r0, r0, r0, lsr r0
 8006bdc:	40015000 	andmi	r5, r1, r0

08006be0 <L3GD20_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* Block communication and all processes */
  while (1)
  {   
  }
 8006be4:	e7fe      	b.n	8006be4 <L3GD20_TIMEOUT_UserCallback+0x4>
 8006be6:	bf00      	nop

08006be8 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* LCD Display Off */
  LCD_DisplayOff();
 8006bee:	f001 ff9f 	bl	8008b30 <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 8006bf2:	487f      	ldr	r0, [pc, #508]	; (8006df0 <LCD_DeInit+0x208>)
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	f7fc fddd 	bl	80037b4 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 8006bfa:	487d      	ldr	r0, [pc, #500]	; (8006df0 <LCD_DeInit+0x208>)
 8006bfc:	f7fc fc12 	bl	8003424 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 8006c00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c04:	2100      	movs	r1, #0
 8006c06:	f7fa fc51 	bl	80014ac <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8006c16:	463b      	mov	r3, r7
 8006c18:	4876      	ldr	r0, [pc, #472]	; (8006df4 <LCD_DeInit+0x20c>)
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	f7f9 fe54 	bl	80008c8 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8006c24:	463b      	mov	r3, r7
 8006c26:	4874      	ldr	r0, [pc, #464]	; (8006df8 <LCD_DeInit+0x210>)
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f7f9 fe4d 	bl	80008c8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8006c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c32:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8006c34:	463b      	mov	r3, r7
 8006c36:	4870      	ldr	r0, [pc, #448]	; (8006df8 <LCD_DeInit+0x210>)
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7f9 fe45 	bl	80008c8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8006c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c42:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8006c44:	463b      	mov	r3, r7
 8006c46:	486c      	ldr	r0, [pc, #432]	; (8006df8 <LCD_DeInit+0x210>)
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f7f9 fe3d 	bl	80008c8 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 8006c4e:	486b      	ldr	r0, [pc, #428]	; (8006dfc <LCD_DeInit+0x214>)
 8006c50:	2103      	movs	r1, #3
 8006c52:	2200      	movs	r2, #0
 8006c54:	f7f9 ffa6 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 8006c58:	4868      	ldr	r0, [pc, #416]	; (8006dfc <LCD_DeInit+0x214>)
 8006c5a:	2104      	movs	r1, #4
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f7f9 ffa1 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 8006c62:	4866      	ldr	r0, [pc, #408]	; (8006dfc <LCD_DeInit+0x214>)
 8006c64:	2106      	movs	r1, #6
 8006c66:	2200      	movs	r2, #0
 8006c68:	f7f9 ff9c 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 8006c6c:	4863      	ldr	r0, [pc, #396]	; (8006dfc <LCD_DeInit+0x214>)
 8006c6e:	210b      	movs	r1, #11
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7f9 ff97 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 8006c76:	4861      	ldr	r0, [pc, #388]	; (8006dfc <LCD_DeInit+0x214>)
 8006c78:	210c      	movs	r1, #12
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f7f9 ff92 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 8006c80:	f641 0358 	movw	r3, #6232	; 0x1858
 8006c84:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006c86:	2302      	movs	r3, #2
 8006c88:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006c96:	463b      	mov	r3, r7
 8006c98:	4858      	ldr	r0, [pc, #352]	; (8006dfc <LCD_DeInit+0x214>)
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f7f9 fe14 	bl	80008c8 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 8006ca0:	4857      	ldr	r0, [pc, #348]	; (8006e00 <LCD_DeInit+0x218>)
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f7f9 ff7d 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 8006caa:	4855      	ldr	r0, [pc, #340]	; (8006e00 <LCD_DeInit+0x218>)
 8006cac:	2101      	movs	r1, #1
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f7f9 ff78 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8006cb4:	4852      	ldr	r0, [pc, #328]	; (8006e00 <LCD_DeInit+0x218>)
 8006cb6:	2108      	movs	r1, #8
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f7f9 ff73 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 8006cbe:	4850      	ldr	r0, [pc, #320]	; (8006e00 <LCD_DeInit+0x218>)
 8006cc0:	2109      	movs	r1, #9
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f7f9 ff6e 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 8006cc8:	484d      	ldr	r0, [pc, #308]	; (8006e00 <LCD_DeInit+0x218>)
 8006cca:	210a      	movs	r1, #10
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f7f9 ff69 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8006cd2:	484b      	ldr	r0, [pc, #300]	; (8006e00 <LCD_DeInit+0x218>)
 8006cd4:	210b      	movs	r1, #11
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f7f9 ff64 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 8006cdc:	f640 7303 	movw	r3, #3843	; 0xf03
 8006ce0:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006cea:	2300      	movs	r3, #0
 8006cec:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	4842      	ldr	r0, [pc, #264]	; (8006e00 <LCD_DeInit+0x218>)
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f7f9 fde6 	bl	80008c8 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 8006cfc:	483d      	ldr	r0, [pc, #244]	; (8006df4 <LCD_DeInit+0x20c>)
 8006cfe:	2106      	movs	r1, #6
 8006d00:	2200      	movs	r2, #0
 8006d02:	f7f9 ff4f 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 8006d06:	483b      	ldr	r0, [pc, #236]	; (8006df4 <LCD_DeInit+0x20c>)
 8006d08:	2107      	movs	r1, #7
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f7f9 ff4a 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8006d10:	4838      	ldr	r0, [pc, #224]	; (8006df4 <LCD_DeInit+0x20c>)
 8006d12:	210a      	movs	r1, #10
 8006d14:	2200      	movs	r2, #0
 8006d16:	f7f9 ff45 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 8006d1a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006d1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006d20:	2302      	movs	r3, #2
 8006d22:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006d24:	2302      	movs	r3, #2
 8006d26:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8006d30:	463b      	mov	r3, r7
 8006d32:	4830      	ldr	r0, [pc, #192]	; (8006df4 <LCD_DeInit+0x20c>)
 8006d34:	4619      	mov	r1, r3
 8006d36:	f7f9 fdc7 	bl	80008c8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 8006d3a:	4832      	ldr	r0, [pc, #200]	; (8006e04 <LCD_DeInit+0x21c>)
 8006d3c:	2103      	movs	r1, #3
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f7f9 ff30 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 8006d44:	482f      	ldr	r0, [pc, #188]	; (8006e04 <LCD_DeInit+0x21c>)
 8006d46:	2106      	movs	r1, #6
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7f9 ff2b 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 8006d4e:	2348      	movs	r3, #72	; 0x48
 8006d50:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006d52:	2302      	movs	r3, #2
 8006d54:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006d56:	2302      	movs	r3, #2
 8006d58:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 8006d62:	463b      	mov	r3, r7
 8006d64:	4827      	ldr	r0, [pc, #156]	; (8006e04 <LCD_DeInit+0x21c>)
 8006d66:	4619      	mov	r1, r3
 8006d68:	f7f9 fdae 	bl	80008c8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 8006d6c:	4822      	ldr	r0, [pc, #136]	; (8006df8 <LCD_DeInit+0x210>)
 8006d6e:	210a      	movs	r1, #10
 8006d70:	2200      	movs	r2, #0
 8006d72:	f7f9 ff17 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8006d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006d80:	2302      	movs	r3, #2
 8006d82:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006d84:	2300      	movs	r3, #0
 8006d86:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	481a      	ldr	r0, [pc, #104]	; (8006df8 <LCD_DeInit+0x210>)
 8006d90:	4619      	mov	r1, r3
 8006d92:	f7f9 fd99 	bl	80008c8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 8006d96:	481c      	ldr	r0, [pc, #112]	; (8006e08 <LCD_DeInit+0x220>)
 8006d98:	2106      	movs	r1, #6
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f7f9 ff02 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 8006da0:	4819      	ldr	r0, [pc, #100]	; (8006e08 <LCD_DeInit+0x220>)
 8006da2:	2107      	movs	r1, #7
 8006da4:	2200      	movs	r2, #0
 8006da6:	f7f9 fefd 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 8006daa:	4817      	ldr	r0, [pc, #92]	; (8006e08 <LCD_DeInit+0x220>)
 8006dac:	210a      	movs	r1, #10
 8006dae:	2200      	movs	r2, #0
 8006db0:	f7f9 fef8 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8006db4:	4814      	ldr	r0, [pc, #80]	; (8006e08 <LCD_DeInit+0x220>)
 8006db6:	210b      	movs	r1, #11
 8006db8:	2200      	movs	r2, #0
 8006dba:	f7f9 fef3 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 8006dbe:	4812      	ldr	r0, [pc, #72]	; (8006e08 <LCD_DeInit+0x220>)
 8006dc0:	210c      	movs	r1, #12
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 feee 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 8006dc8:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8006dcc:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8006dde:	463b      	mov	r3, r7
 8006de0:	4809      	ldr	r0, [pc, #36]	; (8006e08 <LCD_DeInit+0x220>)
 8006de2:	4619      	mov	r1, r3
 8006de4:	f7f9 fd70 	bl	80008c8 <GPIO_Init>
}
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	40015000 	andmi	r5, r1, r0
 8006df4:	40020800 	andmi	r0, r2, r0, lsl #16
 8006df8:	40021400 	andmi	r1, r2, r0, lsl #8
 8006dfc:	40020000 	andmi	r0, r2, r0
 8006e00:	40020400 	andmi	r0, r2, r0, lsl #8
 8006e04:	40020c00 	andmi	r0, r2, r0, lsl #24
 8006e08:	40021800 	andmi	r1, r2, r0, lsl #16

08006e0c <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b090      	sub	sp, #64	; 0x40
 8006e10:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8006e12:	f001 fe93 	bl	8008b3c <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8006e16:	2000      	movs	r0, #0
 8006e18:	f000 f8ac 	bl	8006f74 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f000 f8a9 	bl	8006f74 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 8006e22:	f001 fec7 	bl	8008bb4 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 8006e26:	f001 fd35 	bl	8008894 <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8006e2a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006e2e:	2101      	movs	r1, #1
 8006e30:	f7fa fb3c 	bl	80014ac <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8006e34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006e38:	2101      	movs	r1, #1
 8006e3a:	f7fa fabf 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8006e3e:	f001 ff23 	bl	8008c88 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8006e42:	f7ff fa37 	bl	80062b4 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8006e46:	2300      	movs	r3, #0
 8006e48:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8006e52:	2300      	movs	r3, #0
 8006e54:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8006e5e:	2300      	movs	r3, #0
 8006e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8006e62:	20c0      	movs	r0, #192	; 0xc0
 8006e64:	2107      	movs	r1, #7
 8006e66:	2204      	movs	r2, #4
 8006e68:	f7fa f808 	bl	8000e7c <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8006e6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006e70:	f7fa fa78 	bl	8001364 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8006e74:	2001      	movs	r0, #1
 8006e76:	f7fa f819 	bl	8000eac <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8006e7a:	bf00      	nop
 8006e7c:	203d      	movs	r0, #61	; 0x3d
 8006e7e:	f7fa fc83 	bl	8001788 <RCC_GetFlagStatus>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f9      	beq.n	8006e7c <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8006e88:	2309      	movs	r3, #9
 8006e8a:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8006e90:	231d      	movs	r3, #29
 8006e92:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8006e94:	2303      	movs	r3, #3
 8006e96:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8006e98:	f240 130d 	movw	r3, #269	; 0x10d
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8006e9e:	f240 1343 	movw	r3, #323	; 0x143
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8006ea4:	f240 1317 	movw	r3, #279	; 0x117
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8006eaa:	f240 1347 	movw	r3, #327	; 0x147
 8006eae:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8006eb0:	1d3b      	adds	r3, r7, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fd fb44 	bl	8004540 <LTDC_Init>
}  
 8006eb8:	3740      	adds	r7, #64	; 0x40
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b090      	sub	sp, #64	; 0x40
 8006ec4:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8006ec6:	231e      	movs	r3, #30
 8006ec8:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8006eca:	f240 130d 	movw	r3, #269	; 0x10d
 8006ece:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8006ed4:	f240 1343 	movw	r3, #323	; 0x143
 8006ed8:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8006eda:	2302      	movs	r3, #2
 8006edc:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8006ede:	23ff      	movs	r3, #255	; 0xff
 8006ee0:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8006eea:	2300      	movs	r3, #0
 8006eec:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8006ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8006ef8:	2305      	movs	r3, #5
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8006efc:	f240 13e3 	movw	r3, #483	; 0x1e3
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8006f02:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8006f08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8006f0e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006f12:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8006f14:	463b      	mov	r3, r7
 8006f16:	4813      	ldr	r0, [pc, #76]	; (8006f64 <LCD_LayerInit+0xa4>)
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f7fd fc6f 	bl	80047fc <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <LCD_LayerInit+0xa8>)
 8006f20:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8006f22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8006f28:	2307      	movs	r3, #7
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	480f      	ldr	r0, [pc, #60]	; (8006f6c <LCD_LayerInit+0xac>)
 8006f30:	4619      	mov	r1, r3
 8006f32:	f7fd fc63 	bl	80047fc <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8006f36:	2001      	movs	r0, #1
 8006f38:	f7fd fc52 	bl	80047e0 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8006f3c:	4809      	ldr	r0, [pc, #36]	; (8006f64 <LCD_LayerInit+0xa4>)
 8006f3e:	2101      	movs	r1, #1
 8006f40:	f7fd fd30 	bl	80049a4 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8006f44:	4809      	ldr	r0, [pc, #36]	; (8006f6c <LCD_LayerInit+0xac>)
 8006f46:	2101      	movs	r1, #1
 8006f48:	f7fd fd2c 	bl	80049a4 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f7fd fc47 	bl	80047e0 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8006f52:	4807      	ldr	r0, [pc, #28]	; (8006f70 <LCD_LayerInit+0xb0>)
 8006f54:	f000 f890 	bl	8007078 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8006f58:	2001      	movs	r0, #1
 8006f5a:	f7fd fbd9 	bl	8004710 <LTDC_DitherCmd>
}
 8006f5e:	3740      	adds	r7, #64	; 0x40
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40016884 	andmi	r6, r1, r4, lsl #17
 8006f68:	d0050000 	andle	r0, r5, r0
 8006f6c:	40016904 	andmi	r6, r1, r4, lsl #18
 8006f70:	20000034 	andcs	r0, r0, r4, lsr r0

08006f74 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8006f84:	4805      	ldr	r0, [pc, #20]	; (8006f9c <LCD_ChipSelect+0x28>)
 8006f86:	2104      	movs	r1, #4
 8006f88:	f7f9 fdc6 	bl	8000b18 <GPIO_ResetBits>
 8006f8c:	e003      	b.n	8006f96 <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 8006f8e:	4803      	ldr	r0, [pc, #12]	; (8006f9c <LCD_ChipSelect+0x28>)
 8006f90:	2104      	movs	r1, #4
 8006f92:	f7f9 fdb3 	bl	8000afc <GPIO_SetBits>
  }
}
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40020800 	andmi	r0, r2, r0, lsl #16

08006fa0 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d107      	bne.n	8006fbe <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 8006fae:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <LCD_SetLayer+0x34>)
 8006fb0:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8006fb4:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8006fb6:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <LCD_SetLayer+0x38>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e005      	b.n	8006fca <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <LCD_SetLayer+0x34>)
 8006fc0:	4a06      	ldr	r2, [pc, #24]	; (8006fdc <LCD_SetLayer+0x3c>)
 8006fc2:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <LCD_SetLayer+0x38>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
  }
}  
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000058 	andcs	r0, r0, r8, asr r0
 8006fd8:	200000a8 	andcs	r0, r0, r8, lsr #1
 8006fdc:	d0050000 	andle	r0, r5, r0

08006fe0 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	80fa      	strh	r2, [r7, #6]
 8006fec:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <LCD_SetColors+0x24>)
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <LCD_SetColors+0x28>)
 8006ff6:	88ba      	ldrh	r2, [r7, #4]
 8006ff8:	801a      	strh	r2, [r3, #0]
}
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	200000a4 	andcs	r0, r0, r4, lsr #1
 8007008:	20000054 	andcs	r0, r0, r4, asr r0

0800700c <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <LCD_GetColors+0x24>)
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <LCD_GetColors+0x28>)
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	801a      	strh	r2, [r3, #0]
}
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	200000a4 	andcs	r0, r0, r4, lsr #1
 8007034:	20000054 	andcs	r0, r0, r4, asr r0

08007038 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8007042:	4b04      	ldr	r3, [pc, #16]	; (8007054 <LCD_SetTextColor+0x1c>)
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	801a      	strh	r2, [r3, #0]
}
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	200000a4 	andcs	r0, r0, r4, lsr #1

08007058 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 8007062:	4b04      	ldr	r3, [pc, #16]	; (8007074 <LCD_SetBackColor+0x1c>)
 8007064:	88fa      	ldrh	r2, [r7, #6]
 8007066:	801a      	strh	r2, [r3, #0]
}
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000054 	andcs	r0, r0, r4, asr r0

08007078 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <LCD_SetFont+0x18>)
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
}
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	200000a0 	andcs	r0, r0, r0, lsr #1

08007094 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 800709e:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <LCD_SetTransparency+0x34>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d105      	bne.n	80070b2 <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	4808      	ldr	r0, [pc, #32]	; (80070cc <LCD_SetTransparency+0x38>)
 80070aa:	4619      	mov	r1, r3
 80070ac:	f7fd fdf8 	bl	8004ca0 <LTDC_LayerAlpha>
 80070b0:	e004      	b.n	80070bc <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	4806      	ldr	r0, [pc, #24]	; (80070d0 <LCD_SetTransparency+0x3c>)
 80070b6:	4619      	mov	r1, r3
 80070b8:	f7fd fdf2 	bl	8004ca0 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 80070bc:	2001      	movs	r0, #1
 80070be:	f7fd fb8f 	bl	80047e0 <LTDC_ReloadConfig>
}
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200000a8 	andcs	r0, r0, r8, lsr #1
 80070cc:	40016884 	andmi	r6, r1, r4, lsl #17
 80070d0:	40016904 	andmi	r6, r1, r4, lsl #18

080070d4 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 80070d8:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <LCD_GetFont+0x14>)
 80070da:	681b      	ldr	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	200000a0 	andcs	r0, r0, r0, lsr #1

080070ec <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 80070fa:	e00c      	b.n	8007116 <LCD_ClearLine+0x2a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 80070fc:	88fa      	ldrh	r2, [r7, #6]
 80070fe:	89fb      	ldrh	r3, [r7, #14]
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	2220      	movs	r2, #32
 8007106:	f000 f93d 	bl	8007384 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <LCD_ClearLine+0x4c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	889a      	ldrh	r2, [r3, #4]
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	4413      	add	r3, r2
 8007114:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8007116:	89fb      	ldrh	r3, [r7, #14]
 8007118:	2bef      	cmp	r3, #239	; 0xef
 800711a:	d80a      	bhi.n	8007132 <LCD_ClearLine+0x46>
 800711c:	89fa      	ldrh	r2, [r7, #14]
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <LCD_ClearLine+0x4c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	889b      	ldrh	r3, [r3, #4]
 8007124:	4413      	add	r3, r2
 8007126:	b29a      	uxth	r2, r3
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <LCD_ClearLine+0x4c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	889b      	ldrh	r3, [r3, #4]
 800712e:	429a      	cmp	r2, r3
 8007130:	dae4      	bge.n	80070fc <LCD_ClearLine+0x10>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
  }
}
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200000a0 	andcs	r0, r0, r0, lsr #1

0800713c <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	e009      	b.n	8007164 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	005a      	lsls	r2, r3, #1
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <LCD_Clear+0x3c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4413      	add	r3, r2
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800716a:	d3f1      	bcc.n	8007150 <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000058 	andcs	r0, r0, r8, asr r0

0800717c <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	80fa      	strh	r2, [r7, #6]
 8007188:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 800718a:	88f9      	ldrh	r1, [r7, #6]
 800718c:	88ba      	ldrh	r2, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	440b      	add	r3, r1
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	461a      	mov	r2, r3
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <LCD_SetCursor+0x34>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4413      	add	r3, r2
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000058 	andcs	r0, r0, r8, asr r0

080071b4 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80071d6:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <LCD_SetColorKeying+0x5c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <LCD_SetColorKeying+0x40>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 80071de:	f107 030c 	add.w	r3, r7, #12
 80071e2:	480c      	ldr	r0, [pc, #48]	; (8007214 <LCD_SetColorKeying+0x60>)
 80071e4:	4619      	mov	r1, r3
 80071e6:	2201      	movs	r2, #1
 80071e8:	f7fd fc40 	bl	8004a6c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 80071ec:	2001      	movs	r0, #1
 80071ee:	f7fd faf7 	bl	80047e0 <LTDC_ReloadConfig>
 80071f2:	e009      	b.n	8007208 <LCD_SetColorKeying+0x54>
  }
  else
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	4807      	ldr	r0, [pc, #28]	; (8007218 <LCD_SetColorKeying+0x64>)
 80071fa:	4619      	mov	r1, r3
 80071fc:	2201      	movs	r2, #1
 80071fe:	f7fd fc35 	bl	8004a6c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007202:	2001      	movs	r0, #1
 8007204:	f7fd faec 	bl	80047e0 <LTDC_ReloadConfig>
  }
}
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200000a8 	andcs	r0, r0, r8, lsr #1
 8007214:	40016884 	andmi	r6, r1, r4, lsl #17
 8007218:	40016904 	andmi	r6, r1, r4, lsl #18

0800721c <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <LCD_ReSetColorKeying+0x3c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 800722a:	1d3b      	adds	r3, r7, #4
 800722c:	480b      	ldr	r0, [pc, #44]	; (800725c <LCD_ReSetColorKeying+0x40>)
 800722e:	4619      	mov	r1, r3
 8007230:	2200      	movs	r2, #0
 8007232:	f7fd fc1b 	bl	8004a6c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007236:	2001      	movs	r0, #1
 8007238:	f7fd fad2 	bl	80047e0 <LTDC_ReloadConfig>
 800723c:	e008      	b.n	8007250 <LCD_ReSetColorKeying+0x34>
  }
  else
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 800723e:	1d3b      	adds	r3, r7, #4
 8007240:	4807      	ldr	r0, [pc, #28]	; (8007260 <LCD_ReSetColorKeying+0x44>)
 8007242:	4619      	mov	r1, r3
 8007244:	2200      	movs	r2, #0
 8007246:	f7fd fc11 	bl	8004a6c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 800724a:	2001      	movs	r0, #1
 800724c:	f7fd fac8 	bl	80047e0 <LTDC_ReloadConfig>
  }
} 
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	200000a8 	andcs	r0, r0, r8, lsr #1
 800725c:	40016884 	andmi	r6, r1, r4, lsl #17
 8007260:	40016904 	andmi	r6, r1, r4, lsl #18

08007264 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	460b      	mov	r3, r1
 800726c:	603a      	str	r2, [r7, #0]
 800726e:	4602      	mov	r2, r0
 8007270:	80fa      	strh	r2, [r7, #6]
 8007272:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	2300      	movs	r3, #0
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	2300      	movs	r3, #0
 800727e:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8007284:	88fa      	ldrh	r2, [r7, #6]
 8007286:	4613      	mov	r3, r2
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	1a9b      	subs	r3, r3, r2
 800728c:	015b      	lsls	r3, r3, #5
 800728e:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8007290:	88bb      	ldrh	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e05c      	b.n	8007358 <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e048      	b.n	8007336 <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <LCD_DrawChar+0x10c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	8899      	ldrh	r1, [r3, #4]
 80072b6:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <LCD_DrawChar+0x110>)
 80072b8:	fba3 0301 	umull	r0, r3, r3, r1
 80072bc:	08db      	lsrs	r3, r3, #3
 80072be:	b29b      	uxth	r3, r3
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	4099      	lsls	r1, r3
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	fa41 f303 	asr.w	r3, r1, r3
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <LCD_DrawChar+0x78>
 80072d2:	4b27      	ldr	r3, [pc, #156]	; (8007370 <LCD_DrawChar+0x10c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	889b      	ldrh	r3, [r3, #4]
 80072d8:	2b0c      	cmp	r3, #12
 80072da:	d911      	bls.n	8007300 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	fa42 f303 	asr.w	r3, r2, r3
 80072ee:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10f      	bne.n	8007316 <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80072f6:	4b1e      	ldr	r3, [pc, #120]	; (8007370 <LCD_DrawChar+0x10c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	889b      	ldrh	r3, [r3, #4]
 80072fc:	2b0c      	cmp	r3, #12
 80072fe:	d90a      	bls.n	8007316 <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	005a      	lsls	r2, r3, #1
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <LCD_DrawChar+0x114>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	441a      	add	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4413      	add	r3, r2
 800730e:	4a1b      	ldr	r2, [pc, #108]	; (800737c <LCD_DrawChar+0x118>)
 8007310:	8812      	ldrh	r2, [r2, #0]
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e009      	b.n	800732a <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	005a      	lsls	r2, r3, #1
 800731a:	4b17      	ldr	r3, [pc, #92]	; (8007378 <LCD_DrawChar+0x114>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	441a      	add	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4413      	add	r3, r2
 8007324:	4a16      	ldr	r2, [pc, #88]	; (8007380 <LCD_DrawChar+0x11c>)
 8007326:	8812      	ldrh	r2, [r2, #0]
 8007328:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	3301      	adds	r3, #1
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <LCD_DrawChar+0x10c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	889b      	ldrh	r3, [r3, #4]
 800733c:	461a      	mov	r2, r3
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d8af      	bhi.n	80072a4 <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8007344:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <LCD_DrawChar+0x10c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	889b      	ldrh	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	33f0      	adds	r3, #240	; 0xf0
 8007350:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	3301      	adds	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <LCD_DrawChar+0x10c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	88db      	ldrh	r3, [r3, #6]
 800735e:	461a      	mov	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	429a      	cmp	r2, r3
 8007364:	d89b      	bhi.n	800729e <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	200000a0 	andcs	r0, r0, r0, lsr #1
 8007374:	aaaaaaab 	bge	6ab1e28 <_Min_Stack_Size+0x6ab1a28>
 8007378:	20000058 	andcs	r0, r0, r8, asr r0
 800737c:	20000054 	andcs	r0, r0, r4, asr r0
 8007380:	200000a4 	andcs	r0, r0, r4, lsr #1

08007384 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	4613      	mov	r3, r2
 800738c:	4602      	mov	r2, r0
 800738e:	80fa      	strh	r2, [r7, #6]
 8007390:	460a      	mov	r2, r1
 8007392:	80ba      	strh	r2, [r7, #4]
 8007394:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	3b20      	subs	r3, #32
 800739a:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <LCD_DisplayChar+0x44>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	4908      	ldr	r1, [pc, #32]	; (80073c8 <LCD_DisplayChar+0x44>)
 80073a6:	6809      	ldr	r1, [r1, #0]
 80073a8:	88c9      	ldrh	r1, [r1, #6]
 80073aa:	fb01 f303 	mul.w	r3, r1, r3
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	88f9      	ldrh	r1, [r7, #6]
 80073b4:	88ba      	ldrh	r2, [r7, #4]
 80073b6:	4608      	mov	r0, r1
 80073b8:	4611      	mov	r1, r2
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7ff ff52 	bl	8007264 <LCD_DrawChar>
}
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200000a0 	andcs	r0, r0, r0, lsr #1

080073cc <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 80073dc:	e011      	b.n	8007402 <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	88f9      	ldrh	r1, [r7, #6]
 80073e4:	89fa      	ldrh	r2, [r7, #14]
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7ff ffca 	bl	8007384 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <LCD_DisplayStringLine+0x74>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	889a      	ldrh	r2, [r3, #4]
 80073f6:	89fb      	ldrh	r3, [r7, #14]
 80073f8:	4413      	add	r3, r2
 80073fa:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	603b      	str	r3, [r7, #0]
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8007402:	89fb      	ldrh	r3, [r7, #14]
 8007404:	2bef      	cmp	r3, #239	; 0xef
 8007406:	d818      	bhi.n	800743a <LCD_DisplayStringLine+0x6e>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	bf0c      	ite	eq
 8007410:	2300      	moveq	r3, #0
 8007412:	2301      	movne	r3, #1
 8007414:	b2da      	uxtb	r2, r3
 8007416:	89f9      	ldrh	r1, [r7, #14]
 8007418:	4b09      	ldr	r3, [pc, #36]	; (8007440 <LCD_DisplayStringLine+0x74>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	889b      	ldrh	r3, [r3, #4]
 800741e:	440b      	add	r3, r1
 8007420:	b299      	uxth	r1, r3
 8007422:	4b07      	ldr	r3, [pc, #28]	; (8007440 <LCD_DisplayStringLine+0x74>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	889b      	ldrh	r3, [r3, #4]
 8007428:	4299      	cmp	r1, r3
 800742a:	bfb4      	ite	lt
 800742c:	2300      	movlt	r3, #0
 800742e:	2301      	movge	r3, #1
 8007430:	b2db      	uxtb	r3, r3
 8007432:	4013      	ands	r3, r2
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1d1      	bne.n	80073de <LCD_DisplayStringLine+0x12>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200000a0 	andcs	r0, r0, r0, lsr #1

08007444 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	80f8      	strh	r0, [r7, #6]
 800744c:	80b9      	strh	r1, [r7, #4]
 800744e:	807a      	strh	r2, [r7, #2]
 8007450:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <LCD_SetDisplayWindow+0x70>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d114      	bne.n	8007484 <LCD_SetDisplayWindow+0x40>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	88bb      	ldrh	r3, [r7, #4]
 800745e:	4816      	ldr	r0, [pc, #88]	; (80074b8 <LCD_SetDisplayWindow+0x74>)
 8007460:	4611      	mov	r1, r2
 8007462:	461a      	mov	r2, r3
 8007464:	f7fd fbae 	bl	8004bc4 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 8007468:	2001      	movs	r0, #1
 800746a:	f7fd f9b9 	bl	80047e0 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 800746e:	883a      	ldrh	r2, [r7, #0]
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	4811      	ldr	r0, [pc, #68]	; (80074b8 <LCD_SetDisplayWindow+0x74>)
 8007474:	4611      	mov	r1, r2
 8007476:	461a      	mov	r2, r3
 8007478:	f7fd fc2e 	bl	8004cd8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 800747c:	2001      	movs	r0, #1
 800747e:	f7fd f9af 	bl	80047e0 <LTDC_ReloadConfig>
 8007482:	e013      	b.n	80074ac <LCD_SetDisplayWindow+0x68>
 }
 else
 {   
    /* reconfigure the layer2 position */
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	88bb      	ldrh	r3, [r7, #4]
 8007488:	480c      	ldr	r0, [pc, #48]	; (80074bc <LCD_SetDisplayWindow+0x78>)
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	f7fd fb99 	bl	8004bc4 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8007492:	2001      	movs	r0, #1
 8007494:	f7fd f9a4 	bl	80047e0 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 8007498:	883a      	ldrh	r2, [r7, #0]
 800749a:	887b      	ldrh	r3, [r7, #2]
 800749c:	4807      	ldr	r0, [pc, #28]	; (80074bc <LCD_SetDisplayWindow+0x78>)
 800749e:	4611      	mov	r1, r2
 80074a0:	461a      	mov	r2, r3
 80074a2:	f7fd fc19 	bl	8004cd8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 80074a6:	2001      	movs	r0, #1
 80074a8:	f7fd f99a 	bl	80047e0 <LTDC_ReloadConfig>
  }
}
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200000a8 	andcs	r0, r0, r8, lsr #1
 80074b8:	40016884 	andmi	r6, r1, r4, lsl #17
 80074bc:	40016904 	andmi	r6, r1, r4, lsl #18

080074c0 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 80074c4:	2000      	movs	r0, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80074cc:	23f0      	movs	r3, #240	; 0xf0
 80074ce:	f7ff ffb9 	bl	8007444 <LCD_SetDisplayWindow>
}
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b090      	sub	sp, #64	; 0x40
 80074d8:	af00      	add	r7, sp, #0
 80074da:	80f8      	strh	r0, [r7, #6]
 80074dc:	80b9      	strh	r1, [r7, #4]
 80074de:	807a      	strh	r2, [r7, #2]
 80074e0:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80074ea:	2300      	movs	r3, #0
 80074ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80074ee:	2300      	movs	r3, #0
 80074f0:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 80074f2:	88ba      	ldrh	r2, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	1a9b      	subs	r3, r3, r2
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	461a      	mov	r2, r3
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	4413      	add	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	461a      	mov	r2, r3
 8007506:	4b23      	ldr	r3, [pc, #140]	; (8007594 <LCD_DrawLine+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4413      	add	r3, r2
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 800750e:	4b22      	ldr	r3, [pc, #136]	; (8007598 <LCD_DrawLine+0xc4>)
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	0adb      	lsrs	r3, r3, #11
 8007514:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <LCD_DrawLine+0xc4>)
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8007520:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <LCD_DrawLine+0xc4>)
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007528:	b29b      	uxth	r3, r3
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 800752e:	f7fc fcb9 	bl	8003ea4 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8007532:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007536:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8007538:	2302      	movs	r3, #2
 800753a:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 800753c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800753e:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8007540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007542:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8007544:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007546:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8007548:	230f      	movs	r3, #15
 800754a:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8007550:	787b      	ldrb	r3, [r7, #1]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8007556:	2300      	movs	r3, #0
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 800755a:	2301      	movs	r3, #1
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 800755e:	887b      	ldrh	r3, [r7, #2]
 8007560:	633b      	str	r3, [r7, #48]	; 0x30
 8007562:	e005      	b.n	8007570 <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8007564:	23ef      	movs	r3, #239	; 0xef
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8007568:	887b      	ldrh	r3, [r7, #2]
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 800756c:	2301      	movs	r3, #1
 800756e:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	4618      	mov	r0, r3
 8007576:	f7fc fca3 	bl	8003ec0 <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 800757a:	f7fc fd77 	bl	800406c <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 800757e:	bf00      	nop
 8007580:	2002      	movs	r0, #2
 8007582:	f7fc ff69 	bl	8004458 <DMA2D_GetFlagStatus>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f9      	beq.n	8007580 <LCD_DrawLine+0xac>
  {
  }
  
}
 800758c:	3740      	adds	r7, #64	; 0x40
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000058 	andcs	r0, r0, r8, asr r0
 8007598:	200000a4 	andcs	r0, r0, r4, lsr #1

0800759c <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	80f8      	strh	r0, [r7, #6]
 80075a4:	80b9      	strh	r1, [r7, #4]
 80075a6:	807a      	strh	r2, [r7, #2]
 80075a8:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 80075aa:	88f9      	ldrh	r1, [r7, #6]
 80075ac:	88ba      	ldrh	r2, [r7, #4]
 80075ae:	883b      	ldrh	r3, [r7, #0]
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	2300      	movs	r3, #0
 80075b8:	f7ff ff8c 	bl	80074d4 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 80075bc:	88ba      	ldrh	r2, [r7, #4]
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	4413      	add	r3, r2
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	88f9      	ldrh	r1, [r7, #6]
 80075c6:	883b      	ldrh	r3, [r7, #0]
 80075c8:	4608      	mov	r0, r1
 80075ca:	4611      	mov	r1, r2
 80075cc:	461a      	mov	r2, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	f7ff ff80 	bl	80074d4 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 80075d4:	88f9      	ldrh	r1, [r7, #6]
 80075d6:	88ba      	ldrh	r2, [r7, #4]
 80075d8:	887b      	ldrh	r3, [r7, #2]
 80075da:	4608      	mov	r0, r1
 80075dc:	4611      	mov	r1, r2
 80075de:	461a      	mov	r2, r3
 80075e0:	2301      	movs	r3, #1
 80075e2:	f7ff ff77 	bl	80074d4 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	883b      	ldrh	r3, [r7, #0]
 80075ea:	4413      	add	r3, r2
 80075ec:	b299      	uxth	r1, r3
 80075ee:	88ba      	ldrh	r2, [r7, #4]
 80075f0:	887b      	ldrh	r3, [r7, #2]
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	461a      	mov	r2, r3
 80075f8:	2301      	movs	r3, #1
 80075fa:	f7ff ff6b 	bl	80074d4 <LCD_DrawLine>
}
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	4613      	mov	r3, r2
 800760c:	4602      	mov	r2, r0
 800760e:	80fa      	strh	r2, [r7, #6]
 8007610:	460a      	mov	r2, r1
 8007612:	80ba      	strh	r2, [r7, #4]
 8007614:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8007616:	887b      	ldrh	r3, [r7, #2]
 8007618:	425b      	negs	r3, r3
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	887a      	ldrh	r2, [r7, #2]
 8007622:	4613      	mov	r3, r2
 8007624:	07db      	lsls	r3, r3, #31
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	3302      	adds	r3, #2
 800762c:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	1ad1      	subs	r1, r2, r3
 8007634:	88ba      	ldrh	r2, [r7, #4]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	441a      	add	r2, r3
 800763a:	4613      	mov	r3, r2
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	440b      	add	r3, r1
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	461a      	mov	r2, r3
 8007648:	4b36      	ldr	r3, [pc, #216]	; (8007724 <LCD_DrawCircle+0x120>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4413      	add	r3, r2
 800764e:	4a36      	ldr	r2, [pc, #216]	; (8007728 <LCD_DrawCircle+0x124>)
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	18d1      	adds	r1, r2, r3
 800765a:	88ba      	ldrh	r2, [r7, #4]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	441a      	add	r2, r3
 8007660:	4613      	mov	r3, r2
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	440b      	add	r3, r1
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	461a      	mov	r2, r3
 800766e:	4b2d      	ldr	r3, [pc, #180]	; (8007724 <LCD_DrawCircle+0x120>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4413      	add	r3, r2
 8007674:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <LCD_DrawCircle+0x124>)
 8007676:	8812      	ldrh	r2, [r2, #0]
 8007678:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	18d1      	adds	r1, r2, r3
 8007680:	88ba      	ldrh	r2, [r7, #4]
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	4613      	mov	r3, r2
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	440b      	add	r3, r1
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	461a      	mov	r2, r3
 8007694:	4b23      	ldr	r3, [pc, #140]	; (8007724 <LCD_DrawCircle+0x120>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4413      	add	r3, r2
 800769a:	4a23      	ldr	r2, [pc, #140]	; (8007728 <LCD_DrawCircle+0x124>)
 800769c:	8812      	ldrh	r2, [r2, #0]
 800769e:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80076a0:	88fa      	ldrh	r2, [r7, #6]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	1ad1      	subs	r1, r2, r3
 80076a6:	88ba      	ldrh	r2, [r7, #4]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	1ad2      	subs	r2, r2, r3
 80076ac:	4613      	mov	r3, r2
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	1a9b      	subs	r3, r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	440b      	add	r3, r1
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	461a      	mov	r2, r3
 80076ba:	4b1a      	ldr	r3, [pc, #104]	; (8007724 <LCD_DrawCircle+0x120>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <LCD_DrawCircle+0x124>)
 80076c2:	8812      	ldrh	r2, [r2, #0]
 80076c4:	801a      	strh	r2, [r3, #0]
      
        e2 = err;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	dc13      	bgt.n	80076fa <LCD_DrawCircle+0xf6>
            err += ++y*2+1;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3301      	adds	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	3301      	adds	r3, #1
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	425a      	negs	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d105      	bne.n	80076fa <LCD_DrawCircle+0xf6>
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	dc01      	bgt.n	80076fa <LCD_DrawCircle+0xf6>
 80076f6:	2300      	movs	r3, #0
 80076f8:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	429a      	cmp	r2, r3
 8007700:	dd08      	ble.n	8007714 <LCD_DrawCircle+0x110>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	3301      	adds	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	3301      	adds	r3, #1
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd89      	ble.n	800762e <LCD_DrawCircle+0x2a>
}
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000058 	andcs	r0, r0, r8, asr r0
 8007728:	200000a4 	andcs	r0, r0, r4, lsr #1

0800772c <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08c      	sub	sp, #48	; 0x30
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	425b      	negs	r3, r3
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007740:	2300      	movs	r3, #0
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	3302      	adds	r3, #2
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	ee07 3a10 	vmov	s14, r3
 800776a:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 800776e:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	ee07 3a10 	vmov	s14, r3
 8007778:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 800777c:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	f340 8094 	ble.w	80078b2 <LCD_DrawFullEllipse+0x186>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 800778a:	ed97 7a06 	vldr	s14, [r7, #24]
 800778e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007792:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007796:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	b29a      	uxth	r2, r3
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	b299      	uxth	r1, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	ee07 3a90 	vmov	s15, r3
 80077b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80077b8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80077bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c0:	ee17 3a90 	vmov	r3, s15
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80077d8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80077dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e0:	ee17 3a90 	vmov	r3, s15
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3301      	adds	r3, #1
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4608      	mov	r0, r1
 80077f0:	4611      	mov	r1, r2
 80077f2:	461a      	mov	r2, r3
 80077f4:	2301      	movs	r3, #1
 80077f6:	f7ff fe6d 	bl	80074d4 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	b29b      	uxth	r3, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	b299      	uxth	r1, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	b29a      	uxth	r2, r3
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007814:	edd7 7a07 	vldr	s15, [r7, #28]
 8007818:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800781c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007820:	ee17 3a90 	vmov	r3, s15
 8007824:	b29b      	uxth	r3, r3
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	b29a      	uxth	r2, r3
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007834:	edd7 7a07 	vldr	s15, [r7, #28]
 8007838:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800783c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007840:	ee17 3a90 	vmov	r3, s15
 8007844:	b29b      	uxth	r3, r3
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	b29b      	uxth	r3, r3
 800784a:	3301      	adds	r3, #1
 800784c:	b29b      	uxth	r3, r3
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	2301      	movs	r3, #1
 8007856:	f7ff fe3d 	bl	80074d4 <LCD_DrawLine>
      
      e2 = err;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	429a      	cmp	r2, r3
 8007864:	dc13      	bgt.n	800788e <LCD_DrawFullEllipse+0x162>
      {
        err += ++y*2+1;
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	3301      	adds	r3, #1
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	3301      	adds	r3, #1
 8007872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007874:	4413      	add	r3, r2
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	425a      	negs	r2, r3
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	429a      	cmp	r2, r3
 8007880:	d105      	bne.n	800788e <LCD_DrawFullEllipse+0x162>
 8007882:	6a3a      	ldr	r2, [r7, #32]
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	dc01      	bgt.n	800788e <LCD_DrawFullEllipse+0x162>
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 800788e:	6a3a      	ldr	r2, [r7, #32]
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	429a      	cmp	r2, r3
 8007894:	dd08      	ble.n	80078a8 <LCD_DrawFullEllipse+0x17c>
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	3301      	adds	r3, #1
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	3301      	adds	r3, #1
 80078a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a4:	4413      	add	r3, r2
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f77f af6d 	ble.w	800778a <LCD_DrawFullEllipse+0x5e>
 80078b0:	e097      	b.n	80079e2 <LCD_DrawFullEllipse+0x2b6>
  }
  else
  {
    y = -Radius2; 
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	425b      	negs	r3, r3
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    do 
    { 
      K = (float)(rad2/rad1);       
 80078bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80078c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80078c4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80078c8:	edc7 7a07 	vstr	s15, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078da:	edd7 7a07 	vldr	s15, [r7, #28]
 80078de:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80078e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e6:	ee17 3a90 	vmov	r3, s15
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	b299      	uxth	r1, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	4413      	add	r3, r2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007906:	edd7 7a07 	vldr	s15, [r7, #28]
 800790a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800790e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007912:	ee17 3a90 	vmov	r3, s15
 8007916:	b29b      	uxth	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b29b      	uxth	r3, r3
 800791c:	3301      	adds	r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	461a      	mov	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	f7ff fdd4 	bl	80074d4 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	b29a      	uxth	r2, r3
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800793a:	edd7 7a07 	vldr	s15, [r7, #28]
 800793e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007946:	ee17 3a90 	vmov	r3, s15
 800794a:	b29b      	uxth	r3, r3
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	b299      	uxth	r1, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	b29a      	uxth	r2, r3
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	b29b      	uxth	r3, r3
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	b29a      	uxth	r2, r3
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007966:	edd7 7a07 	vldr	s15, [r7, #28]
 800796a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800796e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007972:	ee17 3a90 	vmov	r3, s15
 8007976:	b29b      	uxth	r3, r3
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	3301      	adds	r3, #1
 800797e:	b29b      	uxth	r3, r3
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	2300      	movs	r3, #0
 8007988:	f7ff fda4 	bl	80074d4 <LCD_DrawLine>
      
      e2 = err;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 8007990:	6a3a      	ldr	r2, [r7, #32]
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	429a      	cmp	r2, r3
 8007996:	dc13      	bgt.n	80079c0 <LCD_DrawFullEllipse+0x294>
      {
        err += ++x*2+1;
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	3301      	adds	r3, #1
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	3301      	adds	r3, #1
 80079a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a6:	4413      	add	r3, r2
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	425a      	negs	r2, r3
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d105      	bne.n	80079c0 <LCD_DrawFullEllipse+0x294>
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	429a      	cmp	r2, r3
 80079ba:	dc01      	bgt.n	80079c0 <LCD_DrawFullEllipse+0x294>
 80079bc:	2300      	movs	r3, #0
 80079be:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	429a      	cmp	r2, r3
 80079c6:	dd08      	ble.n	80079da <LCD_DrawFullEllipse+0x2ae>
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	3301      	adds	r3, #1
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	3301      	adds	r3, #1
 80079d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d6:	4413      	add	r3, r2
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f77f af6d 	ble.w	80078bc <LCD_DrawFullEllipse+0x190>
  }
}
 80079e2:	3730      	adds	r7, #48	; 0x30
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b08d      	sub	sp, #52	; 0x34
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	425b      	negs	r3, r3
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fc:	2300      	movs	r3, #0
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	07db      	lsls	r3, r3, #31
 8007a06:	1a9b      	subs	r3, r3, r2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	3302      	adds	r3, #2
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	ee07 3a10 	vmov	s14, r3
 8007a26:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8007a2a:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = Radius2;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	ee07 3a10 	vmov	s14, r3
 8007a34:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8007a38:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if (Radius > Radius2)
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	f340 80b6 	ble.w	8007bb2 <LCD_DrawEllipse+0x1ca>
  { 
    do {
      K = (float)(rad1/rad2);
 8007a46:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a4e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	1ad1      	subs	r1, r2, r3
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a66:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a6a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a72:	ee17 3a90 	vmov	r3, s15
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	441a      	add	r2, r3
 8007a7e:	4613      	mov	r3, r2
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	440b      	add	r3, r1
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4ba8      	ldr	r3, [pc, #672]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4413      	add	r3, r2
 8007a92:	4aa8      	ldr	r2, [pc, #672]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007a94:	8812      	ldrh	r2, [r2, #0]
 8007a96:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	18d1      	adds	r1, r2, r3
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8007aac:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab4:	ee17 3a90 	vmov	r3, s15
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	441a      	add	r2, r3
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	440b      	add	r3, r1
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	461a      	mov	r2, r3
 8007ace:	4b98      	ldr	r3, [pc, #608]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	4a97      	ldr	r2, [pc, #604]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007ad6:	8812      	ldrh	r2, [r2, #0]
 8007ad8:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	18d1      	adds	r1, r2, r3
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aea:	edd7 7a07 	vldr	s15, [r7, #28]
 8007aee:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af6:	ee17 3a90 	vmov	r3, s15
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	4613      	mov	r3, r2
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	440b      	add	r3, r1
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4b88      	ldr	r3, [pc, #544]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4413      	add	r3, r2
 8007b14:	4a87      	ldr	r2, [pc, #540]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007b16:	8812      	ldrh	r2, [r2, #0]
 8007b18:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	1ad1      	subs	r1, r2, r3
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007b2e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b36:	ee17 3a90 	vmov	r3, s15
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	4613      	mov	r3, r2
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	440b      	add	r3, r1
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4b78      	ldr	r3, [pc, #480]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4413      	add	r3, r2
 8007b54:	4a77      	ldr	r2, [pc, #476]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007b56:	8812      	ldrh	r2, [r2, #0]
 8007b58:	801a      	strh	r2, [r3, #0]
            
      e2 = err;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 8007b5e:	6a3a      	ldr	r2, [r7, #32]
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	429a      	cmp	r2, r3
 8007b64:	dc13      	bgt.n	8007b8e <LCD_DrawEllipse+0x1a6>
        err += ++y*2+1;
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	3301      	adds	r3, #1
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	3301      	adds	r3, #1
 8007b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b74:	4413      	add	r3, r2
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	425a      	negs	r2, r3
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d105      	bne.n	8007b8e <LCD_DrawEllipse+0x1a6>
 8007b82:	6a3a      	ldr	r2, [r7, #32]
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	429a      	cmp	r2, r3
 8007b88:	dc01      	bgt.n	8007b8e <LCD_DrawEllipse+0x1a6>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	dd08      	ble.n	8007ba8 <LCD_DrawEllipse+0x1c0>
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	3301      	adds	r3, #1
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba4:	4413      	add	r3, r2
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f77f af4b 	ble.w	8007a46 <LCD_DrawEllipse+0x5e>
 8007bb0:	e0b9      	b.n	8007d26 <LCD_DrawEllipse+0x33e>
  }
  else
  {
    y = -Radius2; 
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    do { 
      K = (float)(rad2/rad1);
 8007bbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8007bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8007bc4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007bc8:	edc7 7a07 	vstr	s15, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8007bda:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be2:	ee17 3a90 	vmov	r3, s15
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	1ad1      	subs	r1, r2, r3
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	441a      	add	r2, r3
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	1a9b      	subs	r3, r3, r2
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	440b      	add	r3, r1
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4b4b      	ldr	r3, [pc, #300]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	4a4b      	ldr	r2, [pc, #300]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007c08:	8812      	ldrh	r2, [r2, #0]
 8007c0a:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c1a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c22:	ee17 3a90 	vmov	r3, s15
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	18d1      	adds	r1, r2, r3
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	441a      	add	r2, r3
 8007c34:	4613      	mov	r3, r2
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	440b      	add	r3, r1
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4413      	add	r3, r2
 8007c48:	4a3a      	ldr	r2, [pc, #232]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007c4a:	8812      	ldrh	r2, [r2, #0]
 8007c4c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c58:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c5c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c64:	ee17 3a90 	vmov	r3, s15
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	18d1      	adds	r1, r2, r3
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	1ad2      	subs	r2, r2, r3
 8007c76:	4613      	mov	r3, r2
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	440b      	add	r3, r1
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b2a      	ldr	r3, [pc, #168]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007c8c:	8812      	ldrh	r2, [r2, #0]
 8007c8e:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c9e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca6:	ee17 3a90 	vmov	r3, s15
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	1ad1      	subs	r1, r2, r3
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	440b      	add	r3, r1
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <LCD_DrawEllipse+0x348>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4413      	add	r3, r2
 8007cca:	4a1a      	ldr	r2, [pc, #104]	; (8007d34 <LCD_DrawEllipse+0x34c>)
 8007ccc:	8812      	ldrh	r2, [r2, #0]
 8007cce:	801a      	strh	r2, [r3, #0]
      
      e2 = err;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 8007cd4:	6a3a      	ldr	r2, [r7, #32]
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	dc13      	bgt.n	8007d04 <LCD_DrawEllipse+0x31c>
        err += ++x*2+1;
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	3301      	adds	r3, #1
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	4413      	add	r3, r2
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	425a      	negs	r2, r3
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d105      	bne.n	8007d04 <LCD_DrawEllipse+0x31c>
 8007cf8:	6a3a      	ldr	r2, [r7, #32]
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	dc01      	bgt.n	8007d04 <LCD_DrawEllipse+0x31c>
 8007d00:	2300      	movs	r3, #0
 8007d02:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;     
 8007d04:	6a3a      	ldr	r2, [r7, #32]
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	dd08      	ble.n	8007d1e <LCD_DrawEllipse+0x336>
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	3301      	adds	r3, #1
 8007d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	3301      	adds	r3, #1
 8007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1a:	4413      	add	r3, r2
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f77f af4b 	ble.w	8007bbc <LCD_DrawEllipse+0x1d4>
  }
}
 8007d26:	3734      	adds	r7, #52	; 0x34
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20000058 	andcs	r0, r0, r8, asr r0
 8007d34:	200000a4 	andcs	r0, r0, r4, lsr #1

08007d38 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e022      	b.n	8007d94 <LCD_DrawMonoPict+0x5c>
  {
    for(counter = 0; counter < 32; counter++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	e019      	b.n	8007d88 <LCD_DrawMonoPict+0x50>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2101      	movs	r1, #1
 8007d62:	fa01 f303 	lsl.w	r3, r1, r3
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <LCD_DrawMonoPict+0x40>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <LCD_DrawMonoPict+0x70>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <LCD_DrawMonoPict+0x74>)
 8007d72:	8812      	ldrh	r2, [r2, #0]
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	e004      	b.n	8007d82 <LCD_DrawMonoPict+0x4a>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <LCD_DrawMonoPict+0x70>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a0c      	ldr	r2, [pc, #48]	; (8007db0 <LCD_DrawMonoPict+0x78>)
 8007d7e:	8812      	ldrh	r2, [r2, #0]
 8007d80:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
  {
    for(counter = 0; counter < 32; counter++)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	3301      	adds	r3, #1
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b1f      	cmp	r3, #31
 8007d8c:	d9e2      	bls.n	8007d54 <LCD_DrawMonoPict+0x1c>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8007d9a:	d3d8      	bcc.n	8007d4e <LCD_DrawMonoPict+0x16>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
      }
    }
  }
}
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000058 	andcs	r0, r0, r8, asr r0
 8007dac:	20000054 	andcs	r0, r0, r4, asr r0
 8007db0:	200000a4 	andcs	r0, r0, r4, lsr #1

08007db4 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8007dd8:	4b69      	ldr	r3, [pc, #420]	; (8007f80 <LCD_WriteBMP+0x1cc>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3302      	adds	r3, #2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3304      	adds	r3, #4
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	330a      	adds	r3, #10
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	330c      	adds	r3, #12
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3312      	adds	r3, #18
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3314      	adds	r3, #20
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	041b      	lsls	r3, r3, #16
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3316      	adds	r3, #22
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3318      	adds	r3, #24
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	331c      	adds	r3, #28
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8007e46:	4b4f      	ldr	r3, [pc, #316]	; (8007f84 <LCD_WriteBMP+0x1d0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d127      	bne.n	8007e9e <LCD_WriteBMP+0xea>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 8007e4e:	484e      	ldr	r0, [pc, #312]	; (8007f88 <LCD_WriteBMP+0x1d4>)
 8007e50:	6939      	ldr	r1, [r7, #16]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	f7fc ff40 	bl	8004cd8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 8007e58:	2002      	movs	r0, #2
 8007e5a:	f7fc fcc1 	bl	80047e0 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3b20      	subs	r3, #32
 8007e62:	2b07      	cmp	r3, #7
 8007e64:	d807      	bhi.n	8007e76 <LCD_WriteBMP+0xc2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 8007e66:	4848      	ldr	r0, [pc, #288]	; (8007f88 <LCD_WriteBMP+0x1d4>)
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f7fc ff9b 	bl	8004da4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8007e6e:	2002      	movs	r0, #2
 8007e70:	f7fc fcb6 	bl	80047e0 <LTDC_ReloadConfig>
 8007e74:	e03a      	b.n	8007eec <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3b10      	subs	r3, #16
 8007e7a:	2b07      	cmp	r3, #7
 8007e7c:	d807      	bhi.n	8007e8e <LCD_WriteBMP+0xda>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 8007e7e:	4842      	ldr	r0, [pc, #264]	; (8007f88 <LCD_WriteBMP+0x1d4>)
 8007e80:	2102      	movs	r1, #2
 8007e82:	f7fc ff8f 	bl	8004da4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8007e86:	2002      	movs	r0, #2
 8007e88:	f7fc fcaa 	bl	80047e0 <LTDC_ReloadConfig>
 8007e8c:	e02e      	b.n	8007eec <LCD_WriteBMP+0x138>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 8007e8e:	483e      	ldr	r0, [pc, #248]	; (8007f88 <LCD_WriteBMP+0x1d4>)
 8007e90:	2101      	movs	r1, #1
 8007e92:	f7fc ff87 	bl	8004da4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8007e96:	2002      	movs	r0, #2
 8007e98:	f7fc fca2 	bl	80047e0 <LTDC_ReloadConfig>
 8007e9c:	e026      	b.n	8007eec <LCD_WriteBMP+0x138>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8007e9e:	483b      	ldr	r0, [pc, #236]	; (8007f8c <LCD_WriteBMP+0x1d8>)
 8007ea0:	6939      	ldr	r1, [r7, #16]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	f7fc ff18 	bl	8004cd8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8007ea8:	2002      	movs	r0, #2
 8007eaa:	f7fc fc99 	bl	80047e0 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3b20      	subs	r3, #32
 8007eb2:	2b07      	cmp	r3, #7
 8007eb4:	d807      	bhi.n	8007ec6 <LCD_WriteBMP+0x112>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 8007eb6:	4835      	ldr	r0, [pc, #212]	; (8007f8c <LCD_WriteBMP+0x1d8>)
 8007eb8:	2100      	movs	r1, #0
 8007eba:	f7fc ff73 	bl	8004da4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8007ebe:	2002      	movs	r0, #2
 8007ec0:	f7fc fc8e 	bl	80047e0 <LTDC_ReloadConfig>
 8007ec4:	e012      	b.n	8007eec <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3b10      	subs	r3, #16
 8007eca:	2b07      	cmp	r3, #7
 8007ecc:	d807      	bhi.n	8007ede <LCD_WriteBMP+0x12a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8007ece:	482f      	ldr	r0, [pc, #188]	; (8007f8c <LCD_WriteBMP+0x1d8>)
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	f7fc ff67 	bl	8004da4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8007ed6:	2002      	movs	r0, #2
 8007ed8:	f7fc fc82 	bl	80047e0 <LTDC_ReloadConfig>
 8007edc:	e006      	b.n	8007eec <LCD_WriteBMP+0x138>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8007ede:	482b      	ldr	r0, [pc, #172]	; (8007f8c <LCD_WriteBMP+0x1d8>)
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	f7fc ff5f 	bl	8004da4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 8007ee6:	2002      	movs	r0, #2
 8007ee8:	f7fc fc7a 	bl	80047e0 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	4413      	add	r3, r2
 8007efa:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	08d2      	lsrs	r2, r2, #3
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	6a3a      	ldr	r2, [r7, #32]
 8007f10:	4413      	add	r3, r2
 8007f12:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 8007f14:	2300      	movs	r3, #0
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
 8007f18:	e02a      	b.n	8007f70 <LCD_WriteBMP+0x1bc>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	b2d2      	uxtb	r2, r2
 8007f22:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3301      	adds	r3, #1
 8007f28:	607b      	str	r3, [r7, #4]
    Address++;
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	623b      	str	r3, [r7, #32]
    currentline++;
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	3301      	adds	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	08db      	lsrs	r3, r3, #3
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d111      	bne.n	8007f6a <LCD_WriteBMP+0x1b6>
    {
      if(linenumber < height)
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20d      	bcs.n	8007f6a <LCD_WriteBMP+0x1b6>
      {
        linenumber++;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	3301      	adds	r3, #1
 8007f52:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	08db      	lsrs	r3, r3, #3
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	fb02 f303 	mul.w	r3, r2, r3
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	6a3a      	ldr	r2, [r7, #32]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	623b      	str	r3, [r7, #32]
        currentline = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
  BmpAddress += index;

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
  
  for(index = 0; index < size; index++)
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3d0      	bcc.n	8007f1a <LCD_WriteBMP+0x166>
        Address -=(2*width*(bit_pixel/8));
        currentline = 0;
      }
    }
  }
}
 8007f78:	3728      	adds	r7, #40	; 0x28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000058 	andcs	r0, r0, r8, asr r0
 8007f84:	200000a8 	andcs	r0, r0, r8, lsr #1
 8007f88:	40016884 	andmi	r6, r1, r4, lsl #17
 8007f8c:	40016904 	andmi	r6, r1, r4, lsl #18

08007f90 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b090      	sub	sp, #64	; 0x40
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	80f8      	strh	r0, [r7, #6]
 8007f98:	80b9      	strh	r1, [r7, #4]
 8007f9a:	807a      	strh	r2, [r7, #2]
 8007f9c:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	873b      	strh	r3, [r7, #56]	; 0x38
 8007faa:	2300      	movs	r3, #0
 8007fac:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8007fae:	4b26      	ldr	r3, [pc, #152]	; (8008048 <LCD_DrawFullRect+0xb8>)
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	0adb      	lsrs	r3, r3, #11
 8007fb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8007fb6:	4b24      	ldr	r3, [pc, #144]	; (8008048 <LCD_DrawFullRect+0xb8>)
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	f003 031f 	and.w	r3, r3, #31
 8007fbe:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8007fc0:	4b21      	ldr	r3, [pc, #132]	; (8008048 <LCD_DrawFullRect+0xb8>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8007fce:	88ba      	ldrh	r2, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	461a      	mov	r2, r3
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	4413      	add	r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <LCD_DrawFullRect+0xbc>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8007fea:	f7fb ff5b 	bl	8003ea4 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8007fee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007ff2:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8007ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ffa:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8007ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ffe:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8008000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008002:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8008004:	230f      	movs	r3, #15
 8008006:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 800800c:	887b      	ldrh	r3, [r7, #2]
 800800e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 8008014:	883b      	ldrh	r3, [r7, #0]
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 8008018:	887b      	ldrh	r3, [r7, #2]
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 800801c:	f107 030c 	add.w	r3, r7, #12
 8008020:	4618      	mov	r0, r3
 8008022:	f7fb ff4d 	bl	8003ec0 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 8008026:	f7fc f821 	bl	800406c <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 800802a:	bf00      	nop
 800802c:	2002      	movs	r0, #2
 800802e:	f7fc fa13 	bl	8004458 <DMA2D_GetFlagStatus>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0f9      	beq.n	800802c <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <LCD_DrawFullRect+0xb8>)
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fffb 	bl	8007038 <LCD_SetTextColor>
}
 8008042:	3740      	adds	r7, #64	; 0x40
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200000a4 	andcs	r0, r0, r4, lsr #1
 800804c:	20000058 	andcs	r0, r0, r8, asr r0

08008050 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	4613      	mov	r3, r2
 8008058:	4602      	mov	r2, r0
 800805a:	80fa      	strh	r2, [r7, #6]
 800805c:	460a      	mov	r2, r1
 800805e:	80ba      	strh	r2, [r7, #4]
 8008060:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008062:	887b      	ldrh	r3, [r7, #2]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	f1c3 0303 	rsb	r3, r3, #3
 800806a:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008070:	887b      	ldrh	r3, [r7, #2]
 8008072:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8008074:	e06d      	b.n	8008152 <LCD_DrawFullCircle+0x102>
  {
    if(CurY > 0) 
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d027      	beq.n	80080cc <LCD_DrawFullCircle+0x7c>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	b29b      	uxth	r3, r3
 8008080:	88fa      	ldrh	r2, [r7, #6]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	b299      	uxth	r1, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	b29b      	uxth	r3, r3
 800808a:	88ba      	ldrh	r2, [r7, #4]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	b29b      	uxth	r3, r3
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	b29b      	uxth	r3, r3
 8008098:	4608      	mov	r0, r1
 800809a:	4611      	mov	r1, r2
 800809c:	461a      	mov	r2, r3
 800809e:	2301      	movs	r3, #1
 80080a0:	f7ff fa18 	bl	80074d4 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	4413      	add	r3, r2
 80080ac:	b299      	uxth	r1, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	88ba      	ldrh	r2, [r7, #4]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	b29b      	uxth	r3, r3
 80080c0:	4608      	mov	r0, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	461a      	mov	r2, r3
 80080c6:	2301      	movs	r3, #1
 80080c8:	f7ff fa04 	bl	80074d4 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d027      	beq.n	8008122 <LCD_DrawFullCircle+0xd2>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	b299      	uxth	r1, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	88ba      	ldrh	r2, [r7, #4]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	461a      	mov	r2, r3
 80080f4:	2301      	movs	r3, #1
 80080f6:	f7ff f9ed 	bl	80074d4 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	4413      	add	r3, r2
 8008102:	b299      	uxth	r1, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	b29b      	uxth	r3, r3
 8008108:	88ba      	ldrh	r2, [r7, #4]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	b29a      	uxth	r2, r3
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	b29b      	uxth	r3, r3
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	b29b      	uxth	r3, r3
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	461a      	mov	r2, r3
 800811c:	2301      	movs	r3, #1
 800811e:	f7ff f9d9 	bl	80074d4 <LCD_DrawLine>
    }
    if (D < 0)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	da06      	bge.n	8008136 <LCD_DrawFullCircle+0xe6>
    { 
      D += (CurX << 2) + 6;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	009a      	lsls	r2, r3, #2
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	4413      	add	r3, r2
 8008130:	3306      	adds	r3, #6
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e00a      	b.n	800814c <LCD_DrawFullCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	009a      	lsls	r2, r3, #2
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	330a      	adds	r3, #10
 8008144:	617b      	str	r3, [r7, #20]
      CurY--;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3b01      	subs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	3301      	adds	r3, #1
 8008150:	613b      	str	r3, [r7, #16]
  D = 3 - (Radius << 1);
  
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d98d      	bls.n	8008076 <LCD_DrawFullCircle+0x26>
      CurY--;
    }
    CurX++;
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 800815a:	88f9      	ldrh	r1, [r7, #6]
 800815c:	88ba      	ldrh	r2, [r7, #4]
 800815e:	887b      	ldrh	r3, [r7, #2]
 8008160:	4608      	mov	r0, r1
 8008162:	4611      	mov	r1, r2
 8008164:	461a      	mov	r2, r3
 8008166:	f7ff fa4d 	bl	8007604 <LCD_DrawCircle>
}
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af00      	add	r7, sp, #0
 8008176:	80f8      	strh	r0, [r7, #6]
 8008178:	80b9      	strh	r1, [r7, #4]
 800817a:	807a      	strh	r2, [r7, #2]
 800817c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800817e:	2300      	movs	r3, #0
 8008180:	823b      	strh	r3, [r7, #16]
 8008182:	2300      	movs	r3, #0
 8008184:	81fb      	strh	r3, [r7, #14]
 8008186:	2300      	movs	r3, #0
 8008188:	84fb      	strh	r3, [r7, #38]	; 0x26
 800818a:	2300      	movs	r3, #0
 800818c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800818e:	2300      	movs	r3, #0
 8008190:	847b      	strh	r3, [r7, #34]	; 0x22
 8008192:	2300      	movs	r3, #0
 8008194:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8008196:	2300      	movs	r3, #0
 8008198:	83fb      	strh	r3, [r7, #30]
 800819a:	2300      	movs	r3, #0
 800819c:	83bb      	strh	r3, [r7, #28]
 800819e:	2300      	movs	r3, #0
 80081a0:	837b      	strh	r3, [r7, #26]
 80081a2:	2300      	movs	r3, #0
 80081a4:	833b      	strh	r3, [r7, #24]
 80081a6:	2300      	movs	r3, #0
 80081a8:	82fb      	strh	r3, [r7, #22]
 80081aa:	2300      	movs	r3, #0
 80081ac:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80081b2:	887a      	ldrh	r2, [r7, #2]
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bfb8      	it	lt
 80081bc:	425b      	neglt	r3, r3
 80081be:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80081c0:	883a      	ldrh	r2, [r7, #0]
 80081c2:	88bb      	ldrh	r3, [r7, #4]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	425b      	neglt	r3, r3
 80081cc:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80081d2:	88bb      	ldrh	r3, [r7, #4]
 80081d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80081d6:	887a      	ldrh	r2, [r7, #2]
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d304      	bcc.n	80081e8 <LCD_DrawUniLine+0x78>
  {
    xinc1 = 1;
 80081de:	2301      	movs	r3, #1
 80081e0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80081e2:	2301      	movs	r3, #1
 80081e4:	843b      	strh	r3, [r7, #32]
 80081e6:	e005      	b.n	80081f4 <LCD_DrawUniLine+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80081e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081ec:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80081ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081f2:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80081f4:	883a      	ldrh	r2, [r7, #0]
 80081f6:	88bb      	ldrh	r3, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d304      	bcc.n	8008206 <LCD_DrawUniLine+0x96>
  {
    yinc1 = 1;
 80081fc:	2301      	movs	r3, #1
 80081fe:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8008200:	2301      	movs	r3, #1
 8008202:	83bb      	strh	r3, [r7, #28]
 8008204:	e005      	b.n	8008212 <LCD_DrawUniLine+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8008206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800820a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800820c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008210:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8008212:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800821a:	429a      	cmp	r2, r3
 800821c:	db10      	blt.n	8008240 <LCD_DrawUniLine+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800821e:	2300      	movs	r3, #0
 8008220:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8008222:	2300      	movs	r3, #0
 8008224:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8008226:	8a3b      	ldrh	r3, [r7, #16]
 8008228:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800822a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800822e:	0fda      	lsrs	r2, r3, #31
 8008230:	4413      	add	r3, r2
 8008232:	105b      	asrs	r3, r3, #1
 8008234:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8008236:	89fb      	ldrh	r3, [r7, #14]
 8008238:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800823a:	8a3b      	ldrh	r3, [r7, #16]
 800823c:	82bb      	strh	r3, [r7, #20]
 800823e:	e00f      	b.n	8008260 <LCD_DrawUniLine+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8008240:	2300      	movs	r3, #0
 8008242:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8008244:	2300      	movs	r3, #0
 8008246:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800824c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008250:	0fda      	lsrs	r2, r3, #31
 8008252:	4413      	add	r3, r2
 8008254:	105b      	asrs	r3, r3, #1
 8008256:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8008258:	8a3b      	ldrh	r3, [r7, #16]
 800825a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800825c:	89fb      	ldrh	r3, [r7, #14]
 800825e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8008260:	2300      	movs	r3, #0
 8008262:	827b      	strh	r3, [r7, #18]
 8008264:	e02e      	b.n	80082c4 <LCD_DrawUniLine+0x154>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8008266:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800826a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800826e:	4610      	mov	r0, r2
 8008270:	4619      	mov	r1, r3
 8008272:	f000 fdc5 	bl	8008e00 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8008276:	8b3a      	ldrh	r2, [r7, #24]
 8008278:	8afb      	ldrh	r3, [r7, #22]
 800827a:	4413      	add	r3, r2
 800827c:	b29b      	uxth	r3, r3
 800827e:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8008280:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008288:	429a      	cmp	r2, r3
 800828a:	db0e      	blt.n	80082aa <LCD_DrawUniLine+0x13a>
    {
      num -= den;               /* Calculate the new numerator value */
 800828c:	8b3a      	ldrh	r2, [r7, #24]
 800828e:	8b7b      	ldrh	r3, [r7, #26]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	b29b      	uxth	r3, r3
 8008294:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8008296:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800829a:	4413      	add	r3, r2
 800829c:	b29b      	uxth	r3, r3
 800829e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80082a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082a2:	8bfb      	ldrh	r3, [r7, #30]
 80082a4:	4413      	add	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80082aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082ac:	8c3b      	ldrh	r3, [r7, #32]
 80082ae:	4413      	add	r3, r2
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80082b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082b6:	8bbb      	ldrh	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80082be:	8a7b      	ldrh	r3, [r7, #18]
 80082c0:	3301      	adds	r3, #1
 80082c2:	827b      	strh	r3, [r7, #18]
 80082c4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80082c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	ddca      	ble.n	8008266 <LCD_DrawUniLine+0xf6>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 80082d0:	3728      	adds	r7, #40	; 0x28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop

080082d8 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	81fb      	strh	r3, [r7, #14]
 80082e8:	2300      	movs	r3, #0
 80082ea:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 80082f0:	887b      	ldrh	r3, [r7, #2]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d000      	beq.n	80082f8 <LCD_Triangle+0x20>
  {
    return;
 80082f6:	e027      	b.n	8008348 <LCD_Triangle+0x70>
  }

  while(--PointCount)
 80082f8:	e012      	b.n	8008320 <LCD_Triangle+0x48>
  {
    X = Points->X;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	885b      	ldrh	r3, [r3, #2]
 8008304:	81bb      	strh	r3, [r7, #12]
    Points++;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3304      	adds	r3, #4
 800830a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 800830c:	89f8      	ldrh	r0, [r7, #14]
 800830e:	89b9      	ldrh	r1, [r7, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29a      	uxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	885b      	ldrh	r3, [r3, #2]
 800831a:	b29b      	uxth	r3, r3
 800831c:	f7ff ff28 	bl	8008170 <LCD_DrawUniLine>
  if(PointCount != 3)
  {
    return;
  }

  while(--PointCount)
 8008320:	887b      	ldrh	r3, [r7, #2]
 8008322:	3b01      	subs	r3, #1
 8008324:	807b      	strh	r3, [r7, #2]
 8008326:	887b      	ldrh	r3, [r7, #2]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e6      	bne.n	80082fa <LCD_Triangle+0x22>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b298      	uxth	r0, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	885b      	ldrh	r3, [r3, #2]
 8008336:	b299      	uxth	r1, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f7ff ff14 	bl	8008170 <LCD_DrawUniLine>
}
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop

08008350 <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	80f8      	strh	r0, [r7, #6]
 8008358:	80b9      	strh	r1, [r7, #4]
 800835a:	807a      	strh	r2, [r7, #2]
 800835c:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800835e:	2300      	movs	r3, #0
 8008360:	823b      	strh	r3, [r7, #16]
 8008362:	2300      	movs	r3, #0
 8008364:	81fb      	strh	r3, [r7, #14]
 8008366:	2300      	movs	r3, #0
 8008368:	84fb      	strh	r3, [r7, #38]	; 0x26
 800836a:	2300      	movs	r3, #0
 800836c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800836e:	2300      	movs	r3, #0
 8008370:	847b      	strh	r3, [r7, #34]	; 0x22
 8008372:	2300      	movs	r3, #0
 8008374:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8008376:	2300      	movs	r3, #0
 8008378:	83fb      	strh	r3, [r7, #30]
 800837a:	2300      	movs	r3, #0
 800837c:	83bb      	strh	r3, [r7, #28]
 800837e:	2300      	movs	r3, #0
 8008380:	837b      	strh	r3, [r7, #26]
 8008382:	2300      	movs	r3, #0
 8008384:	833b      	strh	r3, [r7, #24]
 8008386:	2300      	movs	r3, #0
 8008388:	82fb      	strh	r3, [r7, #22]
 800838a:	2300      	movs	r3, #0
 800838c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8008392:	88ba      	ldrh	r2, [r7, #4]
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfb8      	it	lt
 800839c:	425b      	neglt	r3, r3
 800839e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80083a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80083a2:	883b      	ldrh	r3, [r7, #0]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfb8      	it	lt
 80083aa:	425b      	neglt	r3, r3
 80083ac:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80083b2:	883b      	ldrh	r3, [r7, #0]
 80083b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80083b6:	88ba      	ldrh	r2, [r7, #4]
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d304      	bcc.n	80083c8 <LCD_FillTriangle+0x78>
  {
    xinc1 = 1;
 80083be:	2301      	movs	r3, #1
 80083c0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80083c2:	2301      	movs	r3, #1
 80083c4:	843b      	strh	r3, [r7, #32]
 80083c6:	e005      	b.n	80083d4 <LCD_FillTriangle+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80083c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083cc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80083ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083d2:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80083d4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80083d6:	883b      	ldrh	r3, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d304      	bcc.n	80083e6 <LCD_FillTriangle+0x96>
  {
    yinc1 = 1;
 80083dc:	2301      	movs	r3, #1
 80083de:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80083e0:	2301      	movs	r3, #1
 80083e2:	83bb      	strh	r3, [r7, #28]
 80083e4:	e005      	b.n	80083f2 <LCD_FillTriangle+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80083e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083ea:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80083ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083f0:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80083f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80083f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	db10      	blt.n	8008420 <LCD_FillTriangle+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80083fe:	2300      	movs	r3, #0
 8008400:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8008402:	2300      	movs	r3, #0
 8008404:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8008406:	8a3b      	ldrh	r3, [r7, #16]
 8008408:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800840a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800840e:	0fda      	lsrs	r2, r3, #31
 8008410:	4413      	add	r3, r2
 8008412:	105b      	asrs	r3, r3, #1
 8008414:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8008416:	89fb      	ldrh	r3, [r7, #14]
 8008418:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800841a:	8a3b      	ldrh	r3, [r7, #16]
 800841c:	82bb      	strh	r3, [r7, #20]
 800841e:	e00f      	b.n	8008440 <LCD_FillTriangle+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8008420:	2300      	movs	r3, #0
 8008422:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8008424:	2300      	movs	r3, #0
 8008426:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8008428:	89fb      	ldrh	r3, [r7, #14]
 800842a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800842c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008430:	0fda      	lsrs	r2, r3, #31
 8008432:	4413      	add	r3, r2
 8008434:	105b      	asrs	r3, r3, #1
 8008436:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8008438:	8a3b      	ldrh	r3, [r7, #16]
 800843a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800843c:	89fb      	ldrh	r3, [r7, #14]
 800843e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8008440:	2300      	movs	r3, #0
 8008442:	827b      	strh	r3, [r7, #18]
 8008444:	e02c      	b.n	80084a0 <LCD_FillTriangle+0x150>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 8008446:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8008448:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800844a:	887a      	ldrh	r2, [r7, #2]
 800844c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800844e:	f7ff fe8f 	bl	8008170 <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8008452:	8b3a      	ldrh	r2, [r7, #24]
 8008454:	8afb      	ldrh	r3, [r7, #22]
 8008456:	4413      	add	r3, r2
 8008458:	b29b      	uxth	r3, r3
 800845a:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 800845c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008460:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008464:	429a      	cmp	r2, r3
 8008466:	db0e      	blt.n	8008486 <LCD_FillTriangle+0x136>
    {
      num -= den;               /* Calculate the new numerator value */
 8008468:	8b3a      	ldrh	r2, [r7, #24]
 800846a:	8b7b      	ldrh	r3, [r7, #26]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	b29b      	uxth	r3, r3
 8008470:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8008472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008476:	4413      	add	r3, r2
 8008478:	b29b      	uxth	r3, r3
 800847a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 800847c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800847e:	8bfb      	ldrh	r3, [r7, #30]
 8008480:	4413      	add	r3, r2
 8008482:	b29b      	uxth	r3, r3
 8008484:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8008486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008488:	8c3b      	ldrh	r3, [r7, #32]
 800848a:	4413      	add	r3, r2
 800848c:	b29b      	uxth	r3, r3
 800848e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8008490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008492:	8bbb      	ldrh	r3, [r7, #28]
 8008494:	4413      	add	r3, r2
 8008496:	b29b      	uxth	r3, r3
 8008498:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800849a:	8a7b      	ldrh	r3, [r7, #18]
 800849c:	3301      	adds	r3, #1
 800849e:	827b      	strh	r3, [r7, #18]
 80084a0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80084a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	ddcc      	ble.n	8008446 <LCD_FillTriangle+0xf6>
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }  
  
  
}
 80084ac:	3728      	adds	r7, #40	; 0x28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop

080084b4 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	81fb      	strh	r3, [r7, #14]
 80084c4:	2300      	movs	r3, #0
 80084c6:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 80084c8:	887b      	ldrh	r3, [r7, #2]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d800      	bhi.n	80084d0 <LCD_PolyLine+0x1c>
  {
    return;
 80084ce:	e019      	b.n	8008504 <LCD_PolyLine+0x50>
  }

  while(--PointCount)
 80084d0:	e012      	b.n	80084f8 <LCD_PolyLine+0x44>
  {
    X = Points->X;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	885b      	ldrh	r3, [r3, #2]
 80084dc:	81bb      	strh	r3, [r7, #12]
    Points++;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3304      	adds	r3, #4
 80084e2:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 80084e4:	89f8      	ldrh	r0, [r7, #14]
 80084e6:	89b9      	ldrh	r1, [r7, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f7ff fe3c 	bl	8008170 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 80084f8:	887b      	ldrh	r3, [r7, #2]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	807b      	strh	r3, [r7, #2]
 80084fe:	887b      	ldrh	r3, [r7, #2]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <LCD_PolyLine+0x1e>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop

0800850c <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 800850c:	b590      	push	{r4, r7, lr}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	460a      	mov	r2, r1
 8008518:	807a      	strh	r2, [r7, #2]
 800851a:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	81fb      	strh	r3, [r7, #14]
 8008520:	2300      	movs	r3, #0
 8008522:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8008528:	887b      	ldrh	r3, [r7, #2]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d800      	bhi.n	8008530 <LCD_PolyLineRelativeClosed+0x24>
  {
    return;
 800852e:	e03a      	b.n	80085a6 <LCD_PolyLineRelativeClosed+0x9a>
  }  
  X = Points->X;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 800853c:	e020      	b.n	8008580 <LCD_PolyLineRelativeClosed+0x74>
  {
    Points++;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3304      	adds	r3, #4
 8008542:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8008544:	89f8      	ldrh	r0, [r7, #14]
 8008546:	89b9      	ldrh	r1, [r7, #12]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29a      	uxth	r2, r3
 800854e:	89fb      	ldrh	r3, [r7, #14]
 8008550:	4413      	add	r3, r2
 8008552:	b29a      	uxth	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	885b      	ldrh	r3, [r3, #2]
 8008558:	b29c      	uxth	r4, r3
 800855a:	89bb      	ldrh	r3, [r7, #12]
 800855c:	4423      	add	r3, r4
 800855e:	b29b      	uxth	r3, r3
 8008560:	f7ff fe06 	bl	8008170 <LCD_DrawUniLine>
    X = X + Points->X;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29a      	uxth	r2, r3
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	4413      	add	r3, r2
 800856e:	b29b      	uxth	r3, r3
 8008570:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	885b      	ldrh	r3, [r3, #2]
 8008576:	b29a      	uxth	r2, r3
 8008578:	89bb      	ldrh	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	b29b      	uxth	r3, r3
 800857e:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8008580:	887b      	ldrh	r3, [r7, #2]
 8008582:	3b01      	subs	r3, #1
 8008584:	807b      	strh	r3, [r7, #2]
 8008586:	887b      	ldrh	r3, [r7, #2]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1d8      	bne.n	800853e <LCD_PolyLineRelativeClosed+0x32>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 800858c:	883b      	ldrh	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <LCD_PolyLineRelativeClosed+0x9a>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b298      	uxth	r0, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	885b      	ldrh	r3, [r3, #2]
 800859c:	b299      	uxth	r1, r3
 800859e:	89fa      	ldrh	r2, [r7, #14]
 80085a0:	89bb      	ldrh	r3, [r7, #12]
 80085a2:	f7ff fde5 	bl	8008170 <LCD_DrawUniLine>
  }  
}
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd90      	pop	{r4, r7, pc}

080085ac <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 80085b8:	887b      	ldrh	r3, [r7, #2]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4619      	mov	r1, r3
 80085be:	f7ff ff79 	bl	80084b4 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b298      	uxth	r0, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	885b      	ldrh	r3, [r3, #2]
 80085cc:	b299      	uxth	r1, r3
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085d4:	3b01      	subs	r3, #1
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29a      	uxth	r2, r3
 80085e0:	887b      	ldrh	r3, [r7, #2]
 80085e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085e6:	3b01      	subs	r3, #1
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	687c      	ldr	r4, [r7, #4]
 80085ec:	4423      	add	r3, r4
 80085ee:	885b      	ldrh	r3, [r3, #2]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f7ff fdbd 	bl	8008170 <LCD_DrawUniLine>
}
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd90      	pop	{r4, r7, pc}

080085fc <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4619      	mov	r1, r3
 800860e:	2200      	movs	r2, #0
 8008610:	f7ff ff7c 	bl	800850c <LCD_PolyLineRelativeClosed>
}
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop

0800861c <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8008628:	887b      	ldrh	r3, [r7, #2]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4619      	mov	r1, r3
 800862e:	2201      	movs	r2, #1
 8008630:	f7ff ff6c 	bl	800850c <LCD_PolyLineRelativeClosed>
}
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop

0800863c <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 800863c:	b5b0      	push	{r4, r5, r7, lr}
 800863e:	b08c      	sub	sp, #48	; 0x30
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	833b      	strh	r3, [r7, #24]
 800864c:	2300      	movs	r3, #0
 800864e:	82fb      	strh	r3, [r7, #22]
 8008650:	2300      	movs	r3, #0
 8008652:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008654:	2300      	movs	r3, #0
 8008656:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008658:	2300      	movs	r3, #0
 800865a:	82bb      	strh	r3, [r7, #20]
 800865c:	2300      	movs	r3, #0
 800865e:	827b      	strh	r3, [r7, #18]
 8008660:	2300      	movs	r3, #0
 8008662:	823b      	strh	r3, [r7, #16]
 8008664:	2300      	movs	r3, #0
 8008666:	81fb      	strh	r3, [r7, #14]
 8008668:	2300      	movs	r3, #0
 800866a:	81bb      	strh	r3, [r7, #12]
 800866c:	2300      	movs	r3, #0
 800866e:	817b      	strh	r3, [r7, #10]
 8008670:	2300      	movs	r3, #0
 8008672:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 8008674:	2300      	movs	r3, #0
 8008676:	843b      	strh	r3, [r7, #32]
 8008678:	2300      	movs	r3, #0
 800867a:	83fb      	strh	r3, [r7, #30]
 800867c:	2300      	movs	r3, #0
 800867e:	83bb      	strh	r3, [r7, #28]
 8008680:	2300      	movs	r3, #0
 8008682:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	83fb      	strh	r3, [r7, #30]
 800868a:	8bfb      	ldrh	r3, [r7, #30]
 800868c:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	837b      	strh	r3, [r7, #26]
 8008694:	8b7b      	ldrh	r3, [r7, #26]
 8008696:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8008698:	2301      	movs	r3, #1
 800869a:	847b      	strh	r3, [r7, #34]	; 0x22
 800869c:	e02c      	b.n	80086f8 <LCD_FillPolyLine+0xbc>
  {
    pixelX = POLY_X(counter);
 800869e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 80086ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80086b0:	8c3b      	ldrh	r3, [r7, #32]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	da01      	bge.n	80086ba <LCD_FillPolyLine+0x7e>
    {
      IMAGE_LEFT = pixelX;
 80086b6:	89bb      	ldrh	r3, [r7, #12]
 80086b8:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 80086ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80086be:	8bfb      	ldrh	r3, [r7, #30]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	dd01      	ble.n	80086c8 <LCD_FillPolyLine+0x8c>
    {
      IMAGE_RIGHT = pixelX;
 80086c4:	89bb      	ldrh	r3, [r7, #12]
 80086c6:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80086c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 80086d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80086da:	8bbb      	ldrh	r3, [r7, #28]
 80086dc:	429a      	cmp	r2, r3
 80086de:	da01      	bge.n	80086e4 <LCD_FillPolyLine+0xa8>
    { 
      IMAGE_TOP = pixelY;
 80086e0:	897b      	ldrh	r3, [r7, #10]
 80086e2:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 80086e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80086e8:	8b7b      	ldrh	r3, [r7, #26]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	dd01      	ble.n	80086f2 <LCD_FillPolyLine+0xb6>
    {
      IMAGE_BOTTOM = pixelY;
 80086ee:	897b      	ldrh	r3, [r7, #10]
 80086f0:	837b      	strh	r3, [r7, #26]
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(counter = 1; counter < PointCount; counter++)
 80086f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086f4:	3301      	adds	r3, #1
 80086f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80086f8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80086fc:	887b      	ldrh	r3, [r7, #2]
 80086fe:	429a      	cmp	r2, r3
 8008700:	dbcd      	blt.n	800869e <LCD_FillPolyLine+0x62>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }  
  
  if(PointCount < 2)
 8008702:	887b      	ldrh	r3, [r7, #2]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d800      	bhi.n	800870a <LCD_FillPolyLine+0xce>
  {
    return;
 8008708:	e065      	b.n	80087d6 <LCD_FillPolyLine+0x19a>
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 800870a:	8c3a      	ldrh	r2, [r7, #32]
 800870c:	8bfb      	ldrh	r3, [r7, #30]
 800870e:	4413      	add	r3, r2
 8008710:	0fda      	lsrs	r2, r3, #31
 8008712:	4413      	add	r3, r2
 8008714:	105b      	asrs	r3, r3, #1
 8008716:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 8008718:	8b7a      	ldrh	r2, [r7, #26]
 800871a:	8bbb      	ldrh	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	0fda      	lsrs	r2, r3, #31
 8008720:	4413      	add	r3, r2
 8008722:	105b      	asrs	r3, r3, #1
 8008724:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	885b      	ldrh	r3, [r3, #2]
 8008730:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8008732:	e02c      	b.n	800878e <LCD_FillPolyLine+0x152>
  {
    X = Points->X;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	82fb      	strh	r3, [r7, #22]
    Points++;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3304      	adds	r3, #4
 8008744:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	885b      	ldrh	r3, [r3, #2]
 8008750:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8008752:	8b38      	ldrh	r0, [r7, #24]
 8008754:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8008756:	8aba      	ldrh	r2, [r7, #20]
 8008758:	8afb      	ldrh	r3, [r7, #22]
 800875a:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 800875c:	8a7c      	ldrh	r4, [r7, #18]
 800875e:	9500      	str	r5, [sp, #0]
 8008760:	9401      	str	r4, [sp, #4]
 8008762:	f7ff fdf5 	bl	8008350 <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8008766:	8b38      	ldrh	r0, [r7, #24]
 8008768:	8ab9      	ldrh	r1, [r7, #20]
 800876a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800876c:	8afb      	ldrh	r3, [r7, #22]
 800876e:	8a7d      	ldrh	r5, [r7, #18]
 8008770:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8008772:	9500      	str	r5, [sp, #0]
 8008774:	9401      	str	r4, [sp, #4]
 8008776:	f7ff fdeb 	bl	8008350 <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800877a:	8ab8      	ldrh	r0, [r7, #20]
 800877c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800877e:	8b3a      	ldrh	r2, [r7, #24]
 8008780:	8a7b      	ldrh	r3, [r7, #18]
 8008782:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8008784:	8afc      	ldrh	r4, [r7, #22]
 8008786:	9500      	str	r5, [sp, #0]
 8008788:	9401      	str	r4, [sp, #4]
 800878a:	f7ff fde1 	bl	8008350 <LCD_FillTriangle>
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 
  X_first = Points->X;
  Y_first = Points->Y;
  
  while(--PointCount)
 800878e:	887b      	ldrh	r3, [r7, #2]
 8008790:	3b01      	subs	r3, #1
 8008792:	807b      	strh	r3, [r7, #2]
 8008794:	887b      	ldrh	r3, [r7, #2]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1cc      	bne.n	8008734 <LCD_FillPolyLine+0xf8>
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800879a:	8a38      	ldrh	r0, [r7, #16]
 800879c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800879e:	8aba      	ldrh	r2, [r7, #20]
 80087a0:	89fb      	ldrh	r3, [r7, #14]
 80087a2:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80087a4:	8a7c      	ldrh	r4, [r7, #18]
 80087a6:	9500      	str	r5, [sp, #0]
 80087a8:	9401      	str	r4, [sp, #4]
 80087aa:	f7ff fdd1 	bl	8008350 <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80087ae:	8a38      	ldrh	r0, [r7, #16]
 80087b0:	8ab9      	ldrh	r1, [r7, #20]
 80087b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087b4:	89fb      	ldrh	r3, [r7, #14]
 80087b6:	8a7d      	ldrh	r5, [r7, #18]
 80087b8:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80087ba:	9500      	str	r5, [sp, #0]
 80087bc:	9401      	str	r4, [sp, #4]
 80087be:	f7ff fdc7 	bl	8008350 <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 80087c2:	8ab8      	ldrh	r0, [r7, #20]
 80087c4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80087c6:	8a3a      	ldrh	r2, [r7, #16]
 80087c8:	8a7b      	ldrh	r3, [r7, #18]
 80087ca:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80087cc:	89fc      	ldrh	r4, [r7, #14]
 80087ce:	9500      	str	r5, [sp, #0]
 80087d0:	9401      	str	r4, [sp, #4]
 80087d2:	f7ff fdbd 	bl	8008350 <LCD_FillTriangle>
}
 80087d6:	3728      	adds	r7, #40	; 0x28
 80087d8:	46bd      	mov	sp, r7
 80087da:	bdb0      	pop	{r4, r5, r7, pc}

080087dc <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 80087e6:	4812      	ldr	r0, [pc, #72]	; (8008830 <LCD_WriteCommand+0x54>)
 80087e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087ec:	2200      	movs	r2, #0
 80087ee:	f000 f9cf 	bl	8008b90 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 80087f2:	2000      	movs	r0, #0
 80087f4:	f7fe fbbe 	bl	8006f74 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	480d      	ldr	r0, [pc, #52]	; (8008834 <LCD_WriteCommand+0x58>)
 80087fe:	4619      	mov	r1, r3
 8008800:	f7fb f912 	bl	8003a28 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8008804:	bf00      	nop
 8008806:	480b      	ldr	r0, [pc, #44]	; (8008834 <LCD_WriteCommand+0x58>)
 8008808:	2102      	movs	r1, #2
 800880a:	f7fb f9c9 	bl	8003ba0 <SPI_I2S_GetFlagStatus>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f8      	beq.n	8008806 <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8008814:	bf00      	nop
 8008816:	4807      	ldr	r0, [pc, #28]	; (8008834 <LCD_WriteCommand+0x58>)
 8008818:	2180      	movs	r1, #128	; 0x80
 800881a:	f7fb f9c1 	bl	8003ba0 <SPI_I2S_GetFlagStatus>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1f8      	bne.n	8008816 <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8008824:	2001      	movs	r0, #1
 8008826:	f7fe fba5 	bl	8006f74 <LCD_ChipSelect>
}
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40020c00 	andmi	r0, r2, r0, lsl #24
 8008834:	40015000 	andmi	r5, r1, r0

08008838 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 8008842:	4812      	ldr	r0, [pc, #72]	; (800888c <LCD_WriteData+0x54>)
 8008844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008848:	2201      	movs	r2, #1
 800884a:	f000 f9a1 	bl	8008b90 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 800884e:	2000      	movs	r0, #0
 8008850:	f7fe fb90 	bl	8006f74 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	b29b      	uxth	r3, r3
 8008858:	480d      	ldr	r0, [pc, #52]	; (8008890 <LCD_WriteData+0x58>)
 800885a:	4619      	mov	r1, r3
 800885c:	f7fb f8e4 	bl	8003a28 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 8008860:	bf00      	nop
 8008862:	480b      	ldr	r0, [pc, #44]	; (8008890 <LCD_WriteData+0x58>)
 8008864:	2102      	movs	r1, #2
 8008866:	f7fb f99b 	bl	8003ba0 <SPI_I2S_GetFlagStatus>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0f8      	beq.n	8008862 <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8008870:	bf00      	nop
 8008872:	4807      	ldr	r0, [pc, #28]	; (8008890 <LCD_WriteData+0x58>)
 8008874:	2180      	movs	r1, #128	; 0x80
 8008876:	f7fb f993 	bl	8003ba0 <SPI_I2S_GetFlagStatus>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f8      	bne.n	8008872 <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 8008880:	2001      	movs	r0, #1
 8008882:	f7fe fb77 	bl	8006f74 <LCD_ChipSelect>
}
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8008890:	40015000 	andmi	r5, r1, r0

08008894 <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8008898:	20ca      	movs	r0, #202	; 0xca
 800889a:	f7ff ff9f 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 800889e:	20c3      	movs	r0, #195	; 0xc3
 80088a0:	f7ff ffca 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x08);
 80088a4:	2008      	movs	r0, #8
 80088a6:	f7ff ffc7 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x50);
 80088aa:	2050      	movs	r0, #80	; 0x50
 80088ac:	f7ff ffc4 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 80088b0:	20cf      	movs	r0, #207	; 0xcf
 80088b2:	f7ff ff93 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80088b6:	2000      	movs	r0, #0
 80088b8:	f7ff ffbe 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0xC1);
 80088bc:	20c1      	movs	r0, #193	; 0xc1
 80088be:	f7ff ffbb 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x30);
 80088c2:	2030      	movs	r0, #48	; 0x30
 80088c4:	f7ff ffb8 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 80088c8:	20ed      	movs	r0, #237	; 0xed
 80088ca:	f7ff ff87 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x64);
 80088ce:	2064      	movs	r0, #100	; 0x64
 80088d0:	f7ff ffb2 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x03);
 80088d4:	2003      	movs	r0, #3
 80088d6:	f7ff ffaf 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x12);
 80088da:	2012      	movs	r0, #18
 80088dc:	f7ff ffac 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x81);
 80088e0:	2081      	movs	r0, #129	; 0x81
 80088e2:	f7ff ffa9 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 80088e6:	20e8      	movs	r0, #232	; 0xe8
 80088e8:	f7ff ff78 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x85);
 80088ec:	2085      	movs	r0, #133	; 0x85
 80088ee:	f7ff ffa3 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 80088f2:	2000      	movs	r0, #0
 80088f4:	f7ff ffa0 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x78);
 80088f8:	2078      	movs	r0, #120	; 0x78
 80088fa:	f7ff ff9d 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80088fe:	20cb      	movs	r0, #203	; 0xcb
 8008900:	f7ff ff6c 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8008904:	2039      	movs	r0, #57	; 0x39
 8008906:	f7ff ff97 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x2C);
 800890a:	202c      	movs	r0, #44	; 0x2c
 800890c:	f7ff ff94 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 8008910:	2000      	movs	r0, #0
 8008912:	f7ff ff91 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x34);
 8008916:	2034      	movs	r0, #52	; 0x34
 8008918:	f7ff ff8e 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x02);
 800891c:	2002      	movs	r0, #2
 800891e:	f7ff ff8b 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 8008922:	20f7      	movs	r0, #247	; 0xf7
 8008924:	f7ff ff5a 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8008928:	2020      	movs	r0, #32
 800892a:	f7ff ff85 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 800892e:	20ea      	movs	r0, #234	; 0xea
 8008930:	f7ff ff54 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8008934:	2000      	movs	r0, #0
 8008936:	f7ff ff7f 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 800893a:	2000      	movs	r0, #0
 800893c:	f7ff ff7c 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8008940:	20b1      	movs	r0, #177	; 0xb1
 8008942:	f7ff ff4b 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8008946:	2000      	movs	r0, #0
 8008948:	f7ff ff76 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x1B);
 800894c:	201b      	movs	r0, #27
 800894e:	f7ff ff73 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8008952:	20b6      	movs	r0, #182	; 0xb6
 8008954:	f7ff ff42 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8008958:	200a      	movs	r0, #10
 800895a:	f7ff ff6d 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0xA2);
 800895e:	20a2      	movs	r0, #162	; 0xa2
 8008960:	f7ff ff6a 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8008964:	20c0      	movs	r0, #192	; 0xc0
 8008966:	f7ff ff39 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800896a:	2010      	movs	r0, #16
 800896c:	f7ff ff64 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8008970:	20c1      	movs	r0, #193	; 0xc1
 8008972:	f7ff ff33 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8008976:	2010      	movs	r0, #16
 8008978:	f7ff ff5e 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 800897c:	20c5      	movs	r0, #197	; 0xc5
 800897e:	f7ff ff2d 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8008982:	2045      	movs	r0, #69	; 0x45
 8008984:	f7ff ff58 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x15);
 8008988:	2015      	movs	r0, #21
 800898a:	f7ff ff55 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 800898e:	20c7      	movs	r0, #199	; 0xc7
 8008990:	f7ff ff24 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8008994:	2090      	movs	r0, #144	; 0x90
 8008996:	f7ff ff4f 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 800899a:	2036      	movs	r0, #54	; 0x36
 800899c:	f7ff ff1e 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 80089a0:	20c8      	movs	r0, #200	; 0xc8
 80089a2:	f7ff ff49 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 80089a6:	20f2      	movs	r0, #242	; 0xf2
 80089a8:	f7ff ff18 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80089ac:	2000      	movs	r0, #0
 80089ae:	f7ff ff43 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 80089b2:	20b0      	movs	r0, #176	; 0xb0
 80089b4:	f7ff ff12 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 80089b8:	20c2      	movs	r0, #194	; 0xc2
 80089ba:	f7ff ff3d 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80089be:	20b6      	movs	r0, #182	; 0xb6
 80089c0:	f7ff ff0c 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80089c4:	200a      	movs	r0, #10
 80089c6:	f7ff ff37 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0xA7);
 80089ca:	20a7      	movs	r0, #167	; 0xa7
 80089cc:	f7ff ff34 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x27);
 80089d0:	2027      	movs	r0, #39	; 0x27
 80089d2:	f7ff ff31 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x04);
 80089d6:	2004      	movs	r0, #4
 80089d8:	f7ff ff2e 	bl	8008838 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 80089dc:	202a      	movs	r0, #42	; 0x2a
 80089de:	f7ff fefd 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80089e2:	2000      	movs	r0, #0
 80089e4:	f7ff ff28 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 80089e8:	2000      	movs	r0, #0
 80089ea:	f7ff ff25 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 80089ee:	2000      	movs	r0, #0
 80089f0:	f7ff ff22 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0xEF);
 80089f4:	20ef      	movs	r0, #239	; 0xef
 80089f6:	f7ff ff1f 	bl	8008838 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 80089fa:	202b      	movs	r0, #43	; 0x2b
 80089fc:	f7ff feee 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8008a00:	2000      	movs	r0, #0
 8008a02:	f7ff ff19 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 8008a06:	2000      	movs	r0, #0
 8008a08:	f7ff ff16 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x01);
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f7ff ff13 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8008a12:	203f      	movs	r0, #63	; 0x3f
 8008a14:	f7ff ff10 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8008a18:	20f6      	movs	r0, #246	; 0xf6
 8008a1a:	f7ff fedf 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8008a1e:	2001      	movs	r0, #1
 8008a20:	f7ff ff0a 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 8008a24:	2000      	movs	r0, #0
 8008a26:	f7ff ff07 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x06);
 8008a2a:	2006      	movs	r0, #6
 8008a2c:	f7ff ff04 	bl	8008838 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8008a30:	202c      	movs	r0, #44	; 0x2c
 8008a32:	f7ff fed3 	bl	80087dc <LCD_WriteCommand>
  delay(200);
 8008a36:	20c8      	movs	r0, #200	; 0xc8
 8008a38:	f000 fa06 	bl	8008e48 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8008a3c:	2026      	movs	r0, #38	; 0x26
 8008a3e:	f7ff fecd 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8008a42:	2001      	movs	r0, #1
 8008a44:	f7ff fef8 	bl	8008838 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8008a48:	20e0      	movs	r0, #224	; 0xe0
 8008a4a:	f7ff fec7 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8008a4e:	200f      	movs	r0, #15
 8008a50:	f7ff fef2 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x29);
 8008a54:	2029      	movs	r0, #41	; 0x29
 8008a56:	f7ff feef 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x24);
 8008a5a:	2024      	movs	r0, #36	; 0x24
 8008a5c:	f7ff feec 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8008a60:	200c      	movs	r0, #12
 8008a62:	f7ff fee9 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8008a66:	200e      	movs	r0, #14
 8008a68:	f7ff fee6 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x09);
 8008a6c:	2009      	movs	r0, #9
 8008a6e:	f7ff fee3 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8008a72:	204e      	movs	r0, #78	; 0x4e
 8008a74:	f7ff fee0 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x78);
 8008a78:	2078      	movs	r0, #120	; 0x78
 8008a7a:	f7ff fedd 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8008a7e:	203c      	movs	r0, #60	; 0x3c
 8008a80:	f7ff feda 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x09);
 8008a84:	2009      	movs	r0, #9
 8008a86:	f7ff fed7 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x13);
 8008a8a:	2013      	movs	r0, #19
 8008a8c:	f7ff fed4 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x05);
 8008a90:	2005      	movs	r0, #5
 8008a92:	f7ff fed1 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x17);
 8008a96:	2017      	movs	r0, #23
 8008a98:	f7ff fece 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x11);
 8008a9c:	2011      	movs	r0, #17
 8008a9e:	f7ff fecb 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x00);
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f7ff fec8 	bl	8008838 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8008aa8:	20e1      	movs	r0, #225	; 0xe1
 8008aaa:	f7ff fe97 	bl	80087dc <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f7ff fec2 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x16);
 8008ab4:	2016      	movs	r0, #22
 8008ab6:	f7ff febf 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8008aba:	201b      	movs	r0, #27
 8008abc:	f7ff febc 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x04);
 8008ac0:	2004      	movs	r0, #4
 8008ac2:	f7ff feb9 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x11);
 8008ac6:	2011      	movs	r0, #17
 8008ac8:	f7ff feb6 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x07);
 8008acc:	2007      	movs	r0, #7
 8008ace:	f7ff feb3 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x31);
 8008ad2:	2031      	movs	r0, #49	; 0x31
 8008ad4:	f7ff feb0 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x33);
 8008ad8:	2033      	movs	r0, #51	; 0x33
 8008ada:	f7ff fead 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x42);
 8008ade:	2042      	movs	r0, #66	; 0x42
 8008ae0:	f7ff feaa 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x05);
 8008ae4:	2005      	movs	r0, #5
 8008ae6:	f7ff fea7 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8008aea:	200c      	movs	r0, #12
 8008aec:	f7ff fea4 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8008af0:	200a      	movs	r0, #10
 8008af2:	f7ff fea1 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x28);
 8008af6:	2028      	movs	r0, #40	; 0x28
 8008af8:	f7ff fe9e 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8008afc:	202f      	movs	r0, #47	; 0x2f
 8008afe:	f7ff fe9b 	bl	8008838 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8008b02:	200f      	movs	r0, #15
 8008b04:	f7ff fe98 	bl	8008838 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8008b08:	2011      	movs	r0, #17
 8008b0a:	f7ff fe67 	bl	80087dc <LCD_WriteCommand>
  delay(200);
 8008b0e:	20c8      	movs	r0, #200	; 0xc8
 8008b10:	f000 f99a 	bl	8008e48 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8008b14:	2029      	movs	r0, #41	; 0x29
 8008b16:	f7ff fe61 	bl	80087dc <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8008b1a:	202c      	movs	r0, #44	; 0x2c
 8008b1c:	f7ff fe5e 	bl	80087dc <LCD_WriteCommand>
 }
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop

08008b24 <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8008b28:	2029      	movs	r0, #41	; 0x29
 8008b2a:	f7ff fe57 	bl	80087dc <LCD_WriteCommand>
}
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 8008b34:	2028      	movs	r0, #40	; 0x28
 8008b36:	f7ff fe51 	bl	80087dc <LCD_WriteCommand>
}
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 8008b42:	200c      	movs	r0, #12
 8008b44:	2101      	movs	r1, #1
 8008b46:	f7f8 fc39 	bl	80013bc <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8008b52:	2301      	movs	r3, #1
 8008b54:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008b56:	2300      	movs	r3, #0
 8008b58:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8008b5e:	463b      	mov	r3, r7
 8008b60:	4809      	ldr	r0, [pc, #36]	; (8008b88 <LCD_CtrlLinesConfig+0x4c>)
 8008b62:	4619      	mov	r1, r3
 8008b64:	f7f7 feb0 	bl	80008c8 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 8008b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b6c:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8008b6e:	463b      	mov	r3, r7
 8008b70:	4806      	ldr	r0, [pc, #24]	; (8008b8c <LCD_CtrlLinesConfig+0x50>)
 8008b72:	4619      	mov	r1, r3
 8008b74:	f7f7 fea8 	bl	80008c8 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8008b78:	4803      	ldr	r0, [pc, #12]	; (8008b88 <LCD_CtrlLinesConfig+0x4c>)
 8008b7a:	2104      	movs	r1, #4
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f000 f807 	bl	8008b90 <LCD_CtrlLinesWrite>
}
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40020800 	andmi	r0, r2, r0, lsl #16
 8008b8c:	40020c00 	andmi	r0, r2, r0, lsl #24

08008b90 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	460a      	mov	r2, r1
 8008b9c:	807a      	strh	r2, [r7, #2]
 8008b9e:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8008ba0:	887a      	ldrh	r2, [r7, #2]
 8008ba2:	787b      	ldrb	r3, [r7, #1]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f7f7 ffc3 	bl	8000b34 <GPIO_WriteBit>
}
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8008bba:	2020      	movs	r0, #32
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	f7f8 fbfd 	bl	80013bc <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8008bc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	f7f8 fc70 	bl	80014ac <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8008bcc:	2380      	movs	r3, #128	; 0x80
 8008bce:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8008be0:	1d3b      	adds	r3, r7, #4
 8008be2:	4827      	ldr	r0, [pc, #156]	; (8008c80 <LCD_SPIConfig+0xcc>)
 8008be4:	4619      	mov	r1, r3
 8008be6:	f7f7 fe6f 	bl	80008c8 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8008bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bee:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	4823      	ldr	r0, [pc, #140]	; (8008c80 <LCD_SPIConfig+0xcc>)
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	f7f7 fe67 	bl	80008c8 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8008bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfe:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8008c00:	1d3b      	adds	r3, r7, #4
 8008c02:	481f      	ldr	r0, [pc, #124]	; (8008c80 <LCD_SPIConfig+0xcc>)
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7f7 fe5f 	bl	80008c8 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8008c0a:	481d      	ldr	r0, [pc, #116]	; (8008c80 <LCD_SPIConfig+0xcc>)
 8008c0c:	2107      	movs	r1, #7
 8008c0e:	2205      	movs	r2, #5
 8008c10:	f7f7 ffc8 	bl	8000ba4 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8008c14:	481a      	ldr	r0, [pc, #104]	; (8008c80 <LCD_SPIConfig+0xcc>)
 8008c16:	2108      	movs	r1, #8
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f7f7 ffc3 	bl	8000ba4 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8008c1e:	4818      	ldr	r0, [pc, #96]	; (8008c80 <LCD_SPIConfig+0xcc>)
 8008c20:	2109      	movs	r1, #9
 8008c22:	2205      	movs	r2, #5
 8008c24:	f7f7 ffbe 	bl	8000ba4 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8008c28:	4816      	ldr	r0, [pc, #88]	; (8008c84 <LCD_SPIConfig+0xd0>)
 8008c2a:	f7fa fbfb 	bl	8003424 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 8008c2e:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <LCD_SPIConfig+0xd0>)
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11d      	bne.n	8008c78 <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8008c40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008c44:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8008c46:	2300      	movs	r3, #0
 8008c48:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c56:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8008c58:	2318      	movs	r3, #24
 8008c5a:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8008c60:	2307      	movs	r3, #7
 8008c62:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 8008c64:	f107 030c 	add.w	r3, r7, #12
 8008c68:	4806      	ldr	r0, [pc, #24]	; (8008c84 <LCD_SPIConfig+0xd0>)
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	f7fa fc46 	bl	80034fc <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 8008c70:	4804      	ldr	r0, [pc, #16]	; (8008c84 <LCD_SPIConfig+0xd0>)
 8008c72:	2101      	movs	r1, #1
 8008c74:	f7fa fd9e 	bl	80037b4 <SPI_Cmd>
  }
}
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	40021400 	andmi	r1, r2, r0, lsl #8
 8008c84:	40015000 	andmi	r5, r1, r0

08008c88 <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8008c8e:	206f      	movs	r0, #111	; 0x6f
 8008c90:	2101      	movs	r1, #1
 8008c92:	f7f8 fb93 	bl	80013bc <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8008c96:	4854      	ldr	r0, [pc, #336]	; (8008de8 <LCD_AF_GPIOConfig+0x160>)
 8008c98:	2103      	movs	r1, #3
 8008c9a:	220e      	movs	r2, #14
 8008c9c:	f7f7 ff82 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8008ca0:	4851      	ldr	r0, [pc, #324]	; (8008de8 <LCD_AF_GPIOConfig+0x160>)
 8008ca2:	2104      	movs	r1, #4
 8008ca4:	220e      	movs	r2, #14
 8008ca6:	f7f7 ff7d 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8008caa:	484f      	ldr	r0, [pc, #316]	; (8008de8 <LCD_AF_GPIOConfig+0x160>)
 8008cac:	2106      	movs	r1, #6
 8008cae:	220e      	movs	r2, #14
 8008cb0:	f7f7 ff78 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8008cb4:	484c      	ldr	r0, [pc, #304]	; (8008de8 <LCD_AF_GPIOConfig+0x160>)
 8008cb6:	210b      	movs	r1, #11
 8008cb8:	220e      	movs	r2, #14
 8008cba:	f7f7 ff73 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8008cbe:	484a      	ldr	r0, [pc, #296]	; (8008de8 <LCD_AF_GPIOConfig+0x160>)
 8008cc0:	210c      	movs	r1, #12
 8008cc2:	220e      	movs	r2, #14
 8008cc4:	f7f7 ff6e 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8008cc8:	f641 0358 	movw	r3, #6232	; 0x1858
 8008ccc:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cde:	463b      	mov	r3, r7
 8008ce0:	4841      	ldr	r0, [pc, #260]	; (8008de8 <LCD_AF_GPIOConfig+0x160>)
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f7f7 fdf0 	bl	80008c8 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8008ce8:	4840      	ldr	r0, [pc, #256]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008cea:	2100      	movs	r1, #0
 8008cec:	2209      	movs	r2, #9
 8008cee:	f7f7 ff59 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8008cf2:	483e      	ldr	r0, [pc, #248]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	2209      	movs	r2, #9
 8008cf8:	f7f7 ff54 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8008cfc:	483b      	ldr	r0, [pc, #236]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008cfe:	2108      	movs	r1, #8
 8008d00:	220e      	movs	r2, #14
 8008d02:	f7f7 ff4f 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8008d06:	4839      	ldr	r0, [pc, #228]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008d08:	2109      	movs	r1, #9
 8008d0a:	220e      	movs	r2, #14
 8008d0c:	f7f7 ff4a 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8008d10:	4836      	ldr	r0, [pc, #216]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008d12:	210a      	movs	r1, #10
 8008d14:	220e      	movs	r2, #14
 8008d16:	f7f7 ff45 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8008d1a:	4834      	ldr	r0, [pc, #208]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008d1c:	210b      	movs	r1, #11
 8008d1e:	220e      	movs	r2, #14
 8008d20:	f7f7 ff40 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8008d24:	f640 7303 	movw	r3, #3843	; 0xf03
 8008d28:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	482f      	ldr	r0, [pc, #188]	; (8008dec <LCD_AF_GPIOConfig+0x164>)
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f7f7 fdca 	bl	80008c8 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8008d34:	482e      	ldr	r0, [pc, #184]	; (8008df0 <LCD_AF_GPIOConfig+0x168>)
 8008d36:	2106      	movs	r1, #6
 8008d38:	220e      	movs	r2, #14
 8008d3a:	f7f7 ff33 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8008d3e:	482c      	ldr	r0, [pc, #176]	; (8008df0 <LCD_AF_GPIOConfig+0x168>)
 8008d40:	2107      	movs	r1, #7
 8008d42:	220e      	movs	r2, #14
 8008d44:	f7f7 ff2e 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8008d48:	4829      	ldr	r0, [pc, #164]	; (8008df0 <LCD_AF_GPIOConfig+0x168>)
 8008d4a:	210a      	movs	r1, #10
 8008d4c:	220e      	movs	r2, #14
 8008d4e:	f7f7 ff29 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8008d52:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8008d56:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d58:	463b      	mov	r3, r7
 8008d5a:	4825      	ldr	r0, [pc, #148]	; (8008df0 <LCD_AF_GPIOConfig+0x168>)
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f7f7 fdb3 	bl	80008c8 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8008d62:	4824      	ldr	r0, [pc, #144]	; (8008df4 <LCD_AF_GPIOConfig+0x16c>)
 8008d64:	2103      	movs	r1, #3
 8008d66:	220e      	movs	r2, #14
 8008d68:	f7f7 ff1c 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8008d6c:	4821      	ldr	r0, [pc, #132]	; (8008df4 <LCD_AF_GPIOConfig+0x16c>)
 8008d6e:	2106      	movs	r1, #6
 8008d70:	220e      	movs	r2, #14
 8008d72:	f7f7 ff17 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8008d76:	2348      	movs	r3, #72	; 0x48
 8008d78:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	481d      	ldr	r0, [pc, #116]	; (8008df4 <LCD_AF_GPIOConfig+0x16c>)
 8008d7e:	4619      	mov	r1, r3
 8008d80:	f7f7 fda2 	bl	80008c8 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8008d84:	481c      	ldr	r0, [pc, #112]	; (8008df8 <LCD_AF_GPIOConfig+0x170>)
 8008d86:	210a      	movs	r1, #10
 8008d88:	220e      	movs	r2, #14
 8008d8a:	f7f7 ff0b 	bl	8000ba4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8008d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d92:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8008d94:	463b      	mov	r3, r7
 8008d96:	4818      	ldr	r0, [pc, #96]	; (8008df8 <LCD_AF_GPIOConfig+0x170>)
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f7f7 fd95 	bl	80008c8 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8008d9e:	4817      	ldr	r0, [pc, #92]	; (8008dfc <LCD_AF_GPIOConfig+0x174>)
 8008da0:	2106      	movs	r1, #6
 8008da2:	220e      	movs	r2, #14
 8008da4:	f7f7 fefe 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8008da8:	4814      	ldr	r0, [pc, #80]	; (8008dfc <LCD_AF_GPIOConfig+0x174>)
 8008daa:	2107      	movs	r1, #7
 8008dac:	220e      	movs	r2, #14
 8008dae:	f7f7 fef9 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8008db2:	4812      	ldr	r0, [pc, #72]	; (8008dfc <LCD_AF_GPIOConfig+0x174>)
 8008db4:	210a      	movs	r1, #10
 8008db6:	2209      	movs	r2, #9
 8008db8:	f7f7 fef4 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8008dbc:	480f      	ldr	r0, [pc, #60]	; (8008dfc <LCD_AF_GPIOConfig+0x174>)
 8008dbe:	210b      	movs	r1, #11
 8008dc0:	220e      	movs	r2, #14
 8008dc2:	f7f7 feef 	bl	8000ba4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8008dc6:	480d      	ldr	r0, [pc, #52]	; (8008dfc <LCD_AF_GPIOConfig+0x174>)
 8008dc8:	210c      	movs	r1, #12
 8008dca:	2209      	movs	r2, #9
 8008dcc:	f7f7 feea 	bl	8000ba4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8008dd0:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8008dd4:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	4808      	ldr	r0, [pc, #32]	; (8008dfc <LCD_AF_GPIOConfig+0x174>)
 8008dda:	4619      	mov	r1, r3
 8008ddc:	f7f7 fd74 	bl	80008c8 <GPIO_Init>
 
}
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	40020000 	andmi	r0, r2, r0
 8008dec:	40020400 	andmi	r0, r2, r0, lsl #8
 8008df0:	40020800 	andmi	r0, r2, r0, lsl #16
 8008df4:	40020c00 	andmi	r0, r2, r0, lsl #24
 8008df8:	40021400 	andmi	r1, r2, r0, lsl #8
 8008dfc:	40021800 	andmi	r1, r2, r0, lsl #16

08008e00 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	80fa      	strh	r2, [r7, #6]
 8008e0c:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8008e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	db0c      	blt.n	8008e30 <PutPixel+0x30>
 8008e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e1a:	2bef      	cmp	r3, #239	; 0xef
 8008e1c:	dc08      	bgt.n	8008e30 <PutPixel+0x30>
 8008e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	db04      	blt.n	8008e30 <PutPixel+0x30>
 8008e26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008e2a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008e2e:	db00      	blt.n	8008e32 <PutPixel+0x32>
  {
    return;  
 8008e30:	e007      	b.n	8008e42 <PutPixel+0x42>
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	88bb      	ldrh	r3, [r7, #4]
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f7fe fb49 	bl	80074d4 <LCD_DrawLine>
}
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e002      	b.n	8008e60 <delay+0x18>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f9      	bne.n	8008e5a <delay+0x12>
  {
  }
}
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <IOE_Config>:
  *         hardware (GPIOs, APB clocks ..).
  * @param  None
  * @retval IOE_OK if all initializations done correctly. Other value if error.
  */
uint8_t IOE_Config(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
  /* Configure the needed pins */
  IOE_GPIO_Config(); 
 8008e74:	f000 fcfa 	bl	800986c <IOE_GPIO_Config>
  
  /* I2C initialization */
  IOE_I2C_Config();
 8008e78:	f000 fd3e 	bl	80098f8 <IOE_I2C_Config>
    
  /* Read IO Expander ID  */
  if(IOE_IsOperational())
 8008e7c:	f000 f8ae 	bl	8008fdc <IOE_IsOperational>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <IOE_Config+0x1a>
  {
    return IOE_NOT_OPERATIONAL;
 8008e86:	2304      	movs	r3, #4
 8008e88:	e008      	b.n	8008e9c <IOE_Config+0x2c>
  }
  
  /* Generate IO Expander Software reset */
  IOE_Reset(); 
 8008e8a:	f000 f8c1 	bl	8009010 <IOE_Reset>
  
  /* IO Expander configuration */
  /* Touch Panel controller and ADC configuration */
  IOE_FnctCmd(IOE_ADC_FCT, ENABLE);
 8008e8e:	2001      	movs	r0, #1
 8008e90:	2101      	movs	r1, #1
 8008e92:	f000 f8e7 	bl	8009064 <IOE_FnctCmd>
  IOE_TP_Config();
 8008e96:	f000 f957 	bl	8009148 <IOE_TP_Config>

  /* Configuration is OK */
  return IOE_OK; 
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <IOE_TPITConfig>:
  * @brief  Enables the touch Panel interrupt.
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_TPITConfig(void)
{    
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* Enable the Global interrupt */  
  IOE_GITCmd(ENABLE);     
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f000 f905 	bl	80090b4 <IOE_GITCmd>
          
  /* Enable the Global GPIO Interrupt */
  IOE_GITConfig((uint8_t)(IOE_GIT_TOUCH | IOE_GIT_FTH | IOE_GIT_FOV), ENABLE);    
 8008eaa:	2007      	movs	r0, #7
 8008eac:	2101      	movs	r1, #1
 8008eae:	f000 f923 	bl	80090f8 <IOE_GITConfig>
    
  /* Read the GPIO_IT_STA to clear all pending bits if any */
  I2C_ReadDeviceRegister(IOE_REG_GPIO_INT_STA); 
 8008eb2:	200d      	movs	r0, #13
 8008eb4:	f000 fe4a 	bl	8009b4c <I2C_ReadDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 8008ec6:	2040      	movs	r0, #64	; 0x40
 8008ec8:	f000 fe40 	bl	8009b4c <I2C_ReadDeviceRegister>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	4b29      	ldr	r3, [pc, #164]	; (8008f7c <IOE_TP_GetState+0xbc>)
 8008ed6:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 8008ed8:	4b28      	ldr	r3, [pc, #160]	; (8008f7c <IOE_TP_GetState+0xbc>)
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d030      	beq.n	8008f42 <IOE_TP_GetState+0x82>
  {
    x = IOE_TP_Read_X();
 8008ee0:	f000 fc52 	bl	8009788 <IOE_TP_Read_X>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 8008ee8:	f000 fc82 	bl	80097f0 <IOE_TP_Read_Y>
 8008eec:	4603      	mov	r3, r0
 8008eee:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 8008ef0:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <IOE_TP_GetState+0xc0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d904      	bls.n	8008f04 <IOE_TP_GetState+0x44>
 8008efa:	4b21      	ldr	r3, [pc, #132]	; (8008f80 <IOE_TP_GetState+0xc0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	e003      	b.n	8008f0c <IOE_TP_GetState+0x4c>
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <IOE_TP_GetState+0xc0>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 8008f0e:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <IOE_TP_GetState+0xc4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d904      	bls.n	8008f22 <IOE_TP_GetState+0x62>
 8008f18:	4b1a      	ldr	r3, [pc, #104]	; (8008f84 <IOE_TP_GetState+0xc4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	e003      	b.n	8008f2a <IOE_TP_GetState+0x6a>
 8008f22:	4b18      	ldr	r3, [pc, #96]	; (8008f84 <IOE_TP_GetState+0xc4>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	4413      	add	r3, r2
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	d905      	bls.n	8008f42 <IOE_TP_GetState+0x82>
    {
      _x = x;
 8008f36:	4b12      	ldr	r3, [pc, #72]	; (8008f80 <IOE_TP_GetState+0xc0>)
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	601a      	str	r2, [r3, #0]
      _y = y;       
 8008f3c:	4b11      	ldr	r3, [pc, #68]	; (8008f84 <IOE_TP_GetState+0xc4>)
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	601a      	str	r2, [r3, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 8008f42:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <IOE_TP_GetState+0xc0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <IOE_TP_GetState+0xbc>)
 8008f4a:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <IOE_TP_GetState+0xc4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <IOE_TP_GetState+0xbc>)
 8008f54:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 8008f56:	f000 fc75 	bl	8009844 <IOE_TP_Read_Z>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <IOE_TP_GetState+0xbc>)
 8008f60:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8008f62:	204b      	movs	r0, #75	; 0x4b
 8008f64:	2101      	movs	r1, #1
 8008f66:	f000 fd43 	bl	80099f0 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 8008f6a:	204b      	movs	r0, #75	; 0x4b
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f000 fd3f 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 8008f72:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <IOE_TP_GetState+0xbc>)
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200000ac 	andcs	r0, r0, ip, lsr #1
 8008f80:	200000b4 	strhcs	r0, [r0], -r4
 8008f84:	200000b8 	strhcs	r0, [r0], -r8

08008f88 <IOE_GetGITStatus>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt      
  * @retval Status of the checked flag. Could be SET or RESET.
  */
FlagStatus IOE_GetGITStatus(uint8_t Global_IT)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	71fb      	strb	r3, [r7, #7]
  __IO uint8_t tmp = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
 
  /* Get the Interrupt status */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_STA);
 8008f96:	200b      	movs	r0, #11
 8008f98:	f000 fdd8 	bl	8009b4c <I2C_ReadDeviceRegister>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
  
  if ((tmp & (uint8_t)Global_IT) != 0)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <IOE_GetGITStatus+0x2a>
  {
    return SET;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <IOE_GetGITStatus+0x2c>
  }
  else
  {
    return RESET;
 8008fb2:	2300      	movs	r3, #0
  }
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <IOE_ClearGITPending>:
  *   @arg  Global_IT_FTH : Touch Panel Controller FIFO Threshold interrupt   
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_ClearGITPending(uint8_t Global_IT)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	71fb      	strb	r3, [r7, #7]
  /* Write 1 to the bits that have to be cleared */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, Global_IT); 
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	200b      	movs	r0, #11
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f000 fd10 	bl	80099f0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop

08008fdc <IOE_IsOperational>:
  *         communicates correctly ont the I2C bus.
  * @param  None
  * @retval IOE_OK if IOE is operational. Other value if failure.
  */
uint8_t IOE_IsOperational(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
  /* Return Error if the ID is not correct */
  if( IOE_ReadID() != (uint16_t)STMPE811_ID )
 8008fe0:	f000 f826 	bl	8009030 <IOE_ReadID>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f640 0311 	movw	r3, #2065	; 0x811
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d009      	beq.n	8009004 <IOE_IsOperational+0x28>
  {
    /* Check if a Timeout occurred */
    if (IOE_TimeOut == 0)
 8008ff0:	4b06      	ldr	r3, [pc, #24]	; (800900c <IOE_IsOperational+0x30>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d103      	bne.n	8009000 <IOE_IsOperational+0x24>
    {
      return(IOE_TimeoutUserCallback());
 8008ff8:	f000 ff7c 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	e002      	b.n	8009006 <IOE_IsOperational+0x2a>
    }
    else
    {
      return IOE_FAILURE; /* ID is not Correct */
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <IOE_IsOperational+0x2a>
    }
  } 
  else 
  {
    return IOE_OK; /* ID is correct */
 8009004:	2300      	movs	r3, #0
  }
}
 8009006:	4618      	mov	r0, r3
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	2000005c 	andcs	r0, r0, ip, asr r0

08009010 <IOE_Reset>:
  * @brief  Resets the IO Expander by Software (SYS_CTRL1, RESET bit).
  * @param  None
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_Reset(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  /* Power Down the IO_Expander */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x02);
 8009014:	2003      	movs	r0, #3
 8009016:	2102      	movs	r1, #2
 8009018:	f000 fcea 	bl	80099f0 <I2C_WriteDeviceRegister>

  /* wait for a delay to insure registers erasing */
  _delay_(2); 
 800901c:	2002      	movs	r0, #2
 800901e:	f000 ff9f 	bl	8009f60 <delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized*/
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL1, 0x00);
 8009022:	2003      	movs	r0, #3
 8009024:	2100      	movs	r1, #0
 8009026:	f000 fce3 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	bd80      	pop	{r7, pc}

08009030 <IOE_ReadID>:
  * @brief  Reads the IOE device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint16_t IOE_ReadID(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	80fb      	strh	r3, [r7, #6]

  /* Read device ID  */
  tmp = I2C_ReadDeviceRegister(0);
 800903a:	2000      	movs	r0, #0
 800903c:	f000 fd86 	bl	8009b4c <I2C_ReadDeviceRegister>
 8009040:	4603      	mov	r3, r0
 8009042:	80fb      	strh	r3, [r7, #6]
  tmp = (uint32_t)(tmp << 8);
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	80fb      	strh	r3, [r7, #6]
  tmp |= (uint32_t)I2C_ReadDeviceRegister(1);
 800904a:	2001      	movs	r0, #1
 800904c:	f000 fd7e 	bl	8009b4c <I2C_ReadDeviceRegister>
 8009050:	4603      	mov	r3, r0
 8009052:	461a      	mov	r2, r3
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	4313      	orrs	r3, r2
 8009058:	80fb      	strh	r3, [r7, #6]
  
  /* Return the ID */
  return (uint16_t)tmp;
 800905a:	88fb      	ldrh	r3, [r7, #6]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	71fa      	strb	r2, [r7, #7]
 8009070:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 8009076:	2004      	movs	r0, #4
 8009078:	f000 fd68 	bl	8009b4c <I2C_ReadDeviceRegister>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009080:	79bb      	ldrb	r3, [r7, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <IOE_FnctCmd+0x32>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	43db      	mvns	r3, r3
 800908a:	b2da      	uxtb	r2, r3
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	4013      	ands	r3, r2
 8009090:	b2db      	uxtb	r3, r3
 8009092:	73fb      	strb	r3, [r7, #15]
 8009094:	e003      	b.n	800909e <IOE_FnctCmd+0x3a>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 8009096:	7bfa      	ldrb	r2, [r7, #15]
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	4313      	orrs	r3, r2
 800909c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	2004      	movs	r0, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	f000 fca4 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop

080090b4 <IOE_GITCmd>:
  * @brief  Enables or disables the Global interrupt.
  * @param  NewState: could be ENABLE or DISABLE.        
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITCmd(FunctionalState NewState)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_CTRL);
 80090c2:	2009      	movs	r0, #9
 80090c4:	f000 fd42 	bl	8009b4c <I2C_ReadDeviceRegister>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <IOE_GITCmd+0x28>
  {
    /* Set the global interrupts to be Enabled */    
    tmp |= (uint8_t)IOE_GIT_EN;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]
 80090da:	e003      	b.n	80090e4 <IOE_GITCmd+0x30>
  }
  else
  {
    /* Set the global interrupts to be Disabled */    
    tmp &= ~(uint8_t)IOE_GIT_EN;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	f023 0301 	bic.w	r3, r3, #1
 80090e2:	73fb      	strb	r3, [r7, #15]
  }  
  
  /* Write Back the Interrupt Control register */
  I2C_WriteDeviceRegister(IOE_REG_INT_CTRL, tmp);
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2009      	movs	r0, #9
 80090e8:	4619      	mov	r1, r3
 80090ea:	f000 fc81 	bl	80099f0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;     
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <IOE_GITConfig>:
  *   @arg  Global_IT_TOUCH : Touch Panel Controller Touch Detected interrupt 
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_GITConfig(uint8_t Global_IT, FunctionalState NewState)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	71fa      	strb	r2, [r7, #7]
 8009104:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_INT_EN);
 800910a:	200a      	movs	r0, #10
 800910c:	f000 fd1e 	bl	8009b4c <I2C_ReadDeviceRegister>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8009114:	79bb      	ldrb	r3, [r7, #6]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d004      	beq.n	8009124 <IOE_GITConfig+0x2c>
  {
    /* Set the interrupts to be Enabled */    
    tmp |= (uint8_t)Global_IT;  
 800911a:	7bfa      	ldrb	r2, [r7, #15]
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	4313      	orrs	r3, r2
 8009120:	73fb      	strb	r3, [r7, #15]
 8009122:	e006      	b.n	8009132 <IOE_GITConfig+0x3a>
  }
  else
  {
    /* Set the interrupts to be Disabled */    
    tmp &= ~(uint8_t)Global_IT;
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	43db      	mvns	r3, r3
 8009128:	b2da      	uxtb	r2, r3
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	4013      	ands	r3, r2
 800912e:	b2db      	uxtb	r3, r3
 8009130:	73fb      	strb	r3, [r7, #15]
  }
  /* Set the register */
  I2C_WriteDeviceRegister(IOE_REG_INT_EN, tmp);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	200a      	movs	r0, #10
 8009136:	4619      	mov	r1, r3
 8009138:	f000 fc5a 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;  
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 800914c:	2002      	movs	r0, #2
 800914e:	2101      	movs	r1, #1
 8009150:	f7ff ff88 	bl	8009064 <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 8009154:	2020      	movs	r0, #32
 8009156:	2149      	movs	r1, #73	; 0x49
 8009158:	f000 fc4a 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 800915c:	2002      	movs	r0, #2
 800915e:	f000 feff 	bl	8009f60 <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 8009162:	2021      	movs	r0, #33	; 0x21
 8009164:	2101      	movs	r1, #1
 8009166:	f000 fc43 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 800916a:	201e      	movs	r0, #30
 800916c:	2100      	movs	r1, #0
 800916e:	f000 f835 	bl	80091dc <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 8009172:	2041      	movs	r0, #65	; 0x41
 8009174:	219a      	movs	r1, #154	; 0x9a
 8009176:	f000 fc3b 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 800917a:	204a      	movs	r0, #74	; 0x4a
 800917c:	2101      	movs	r1, #1
 800917e:	f000 fc37 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8009182:	204b      	movs	r0, #75	; 0x4b
 8009184:	2101      	movs	r1, #1
 8009186:	f000 fc33 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800918a:	204b      	movs	r0, #75	; 0x4b
 800918c:	2100      	movs	r1, #0
 800918e:	f000 fc2f 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 8009192:	2056      	movs	r0, #86	; 0x56
 8009194:	2101      	movs	r1, #1
 8009196:	f000 fc2b 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 800919a:	2058      	movs	r0, #88	; 0x58
 800919c:	2101      	movs	r1, #1
 800919e:	f000 fc27 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 80091a2:	2040      	movs	r0, #64	; 0x40
 80091a4:	2103      	movs	r1, #3
 80091a6:	f000 fc23 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 80091aa:	200b      	movs	r0, #11
 80091ac:	21ff      	movs	r1, #255	; 0xff
 80091ae:	f000 fc1f 	bl	80099f0 <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <IOE_TP_Config+0x90>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	80da      	strh	r2, [r3, #6]
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <IOE_TP_Config+0x90>)
 80091ba:	88da      	ldrh	r2, [r3, #6]
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <IOE_TP_Config+0x90>)
 80091be:	809a      	strh	r2, [r3, #4]
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <IOE_TP_Config+0x90>)
 80091c2:	889a      	ldrh	r2, [r3, #4]
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <IOE_TP_Config+0x90>)
 80091c6:	805a      	strh	r2, [r3, #2]
 80091c8:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <IOE_TP_Config+0x90>)
 80091ca:	885a      	ldrh	r2, [r3, #2]
 80091cc:	4b02      	ldr	r3, [pc, #8]	; (80091d8 <IOE_TP_Config+0x90>)
 80091ce:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200000ac 	andcs	r0, r0, ip, lsr #1

080091dc <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	71fa      	strb	r2, [r7, #7]
 80091e8:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 80091ee:	2017      	movs	r0, #23
 80091f0:	f000 fcac 	bl	8009b4c <I2C_ReadDeviceRegister>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 80091f8:	79bb      	ldrb	r3, [r7, #6]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <IOE_IOAFConfig+0x2c>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 80091fe:	7bfa      	ldrb	r2, [r7, #15]
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	4313      	orrs	r3, r2
 8009204:	73fb      	strb	r3, [r7, #15]
 8009206:	e006      	b.n	8009216 <IOE_IOAFConfig+0x3a>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	43db      	mvns	r3, r3
 800920c:	b2da      	uxtb	r2, r3
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	4013      	ands	r3, r2
 8009212:	b2db      	uxtb	r3, r3
 8009214:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	2017      	movs	r0, #23
 800921a:	4619      	mov	r1, r3
 800921c:	f000 fbe8 	bl	80099f0 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop

0800922c <I2C_DMA_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_DMA_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	71fa      	strb	r2, [r7, #7]
 8009238:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;  
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
  uint8_t IOE_BufferTX = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	72fb      	strb	r3, [r7, #11]
  
  /* Get Value to be written */
  IOE_BufferTX = RegisterValue;
 8009242:	79bb      	ldrb	r3, [r7, #6]
 8009244:	72fb      	strb	r3, [r7, #11]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_TX, (uint8_t*)(&IOE_BufferTX));
 8009246:	f107 030b 	add.w	r3, r7, #11
 800924a:	2000      	movs	r0, #0
 800924c:	4619      	mov	r1, r3
 800924e:	f000 fb7d 	bl	800994c <IOE_DMA_Config>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009252:	4852      	ldr	r0, [pc, #328]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 8009254:	2101      	movs	r1, #1
 8009256:	f7f9 f9d5 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800925a:	4b51      	ldr	r3, [pc, #324]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 800925c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009260:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 8009262:	e00a      	b.n	800927a <I2C_DMA_WriteDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009264:	4b4e      	ldr	r3, [pc, #312]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	1e59      	subs	r1, r3, #1
 800926a:	4a4d      	ldr	r2, [pc, #308]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 800926c:	6011      	str	r1, [r2, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <I2C_DMA_WriteDeviceRegister+0x4e>
 8009272:	f000 fe3f 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009276:	4603      	mov	r3, r0
 8009278:	e08c      	b.n	8009394 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB) == RESET) 
 800927a:	4848      	ldr	r0, [pc, #288]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 800927c:	4949      	ldr	r1, [pc, #292]	; (80093a4 <I2C_DMA_WriteDeviceRegister+0x178>)
 800927e:	f7f9 fcbd 	bl	8002bfc <I2C_GetFlagStatus>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0ed      	beq.n	8009264 <I2C_DMA_WriteDeviceRegister+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8009288:	4844      	ldr	r0, [pc, #272]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 800928a:	2182      	movs	r1, #130	; 0x82
 800928c:	2200      	movs	r2, #0
 800928e:	f7f9 f9f9 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8009292:	4b43      	ldr	r3, [pc, #268]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009294:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009298:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800929a:	e00a      	b.n	80092b2 <I2C_DMA_WriteDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800929c:	4b40      	ldr	r3, [pc, #256]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	1e59      	subs	r1, r3, #1
 80092a2:	4a3f      	ldr	r2, [pc, #252]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 80092a4:	6011      	str	r1, [r2, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <I2C_DMA_WriteDeviceRegister+0x86>
 80092aa:	f000 fe23 	bl	8009ef4 <IOE_TimeoutUserCallback>
 80092ae:	4603      	mov	r3, r0
 80092b0:	e070      	b.n	8009394 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80092b2:	483a      	ldr	r0, [pc, #232]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 80092b4:	493c      	ldr	r1, [pc, #240]	; (80093a8 <I2C_DMA_WriteDeviceRegister+0x17c>)
 80092b6:	f7f9 fc4f 	bl	8002b58 <I2C_CheckEvent>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0ed      	beq.n	800929c <I2C_DMA_WriteDeviceRegister+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	4836      	ldr	r0, [pc, #216]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 80092c4:	4619      	mov	r1, r3
 80092c6:	f7f9 fb3d 	bl	8002944 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 80092ca:	4b35      	ldr	r3, [pc, #212]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 80092cc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80092d0:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 80092d2:	e00a      	b.n	80092ea <I2C_DMA_WriteDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80092d4:	4b32      	ldr	r3, [pc, #200]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	1e59      	subs	r1, r3, #1
 80092da:	4a31      	ldr	r2, [pc, #196]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <I2C_DMA_WriteDeviceRegister+0xbe>
 80092e2:	f000 fe07 	bl	8009ef4 <IOE_TimeoutUserCallback>
 80092e6:	4603      	mov	r3, r0
 80092e8:	e054      	b.n	8009394 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 80092ea:	482c      	ldr	r0, [pc, #176]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 80092ec:	492f      	ldr	r1, [pc, #188]	; (80093ac <I2C_DMA_WriteDeviceRegister+0x180>)
 80092ee:	f7f9 fc85 	bl	8002bfc <I2C_GetFlagStatus>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <I2C_DMA_WriteDeviceRegister+0xda>
 80092f8:	4828      	ldr	r0, [pc, #160]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 80092fa:	492d      	ldr	r1, [pc, #180]	; (80093b0 <I2C_DMA_WriteDeviceRegister+0x184>)
 80092fc:	f7f9 fc7e 	bl	8002bfc <I2C_GetFlagStatus>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0e6      	beq.n	80092d4 <I2C_DMA_WriteDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 8009306:	4825      	ldr	r0, [pc, #148]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 8009308:	2101      	movs	r1, #1
 800930a:	f7f9 fba9 	bl	8002a60 <I2C_DMACmd>
  
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
 800930e:	4829      	ldr	r0, [pc, #164]	; (80093b4 <I2C_DMA_WriteDeviceRegister+0x188>)
 8009310:	2101      	movs	r1, #1
 8009312:	f7f9 fe5f 	bl	8002fd4 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
 8009316:	4b22      	ldr	r3, [pc, #136]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009318:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800931c:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 800931e:	e00a      	b.n	8009336 <I2C_DMA_WriteDeviceRegister+0x10a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009320:	4b1f      	ldr	r3, [pc, #124]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	1e59      	subs	r1, r3, #1
 8009326:	4a1e      	ldr	r2, [pc, #120]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009328:	6011      	str	r1, [r2, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d103      	bne.n	8009336 <I2C_DMA_WriteDeviceRegister+0x10a>
 800932e:	f000 fde1 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009332:	4603      	mov	r3, r0
 8009334:	e02e      	b.n	8009394 <I2C_DMA_WriteDeviceRegister+0x168>
  /* Enable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG))
 8009336:	481f      	ldr	r0, [pc, #124]	; (80093b4 <I2C_DMA_WriteDeviceRegister+0x188>)
 8009338:	491f      	ldr	r1, [pc, #124]	; (80093b8 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800933a:	f7f9 ff49 	bl	80031d0 <DMA_GetFlagStatus>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d0ed      	beq.n	8009320 <I2C_DMA_WriteDeviceRegister+0xf4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
 8009344:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009346:	4a1d      	ldr	r2, [pc, #116]	; (80093bc <I2C_DMA_WriteDeviceRegister+0x190>)
 8009348:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800934a:	e00a      	b.n	8009362 <I2C_DMA_WriteDeviceRegister+0x136>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 800934c:	4b14      	ldr	r3, [pc, #80]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	1e59      	subs	r1, r3, #1
 8009352:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <I2C_DMA_WriteDeviceRegister+0x174>)
 8009354:	6011      	str	r1, [r2, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d103      	bne.n	8009362 <I2C_DMA_WriteDeviceRegister+0x136>
 800935a:	f000 fdcb 	bl	8009ef4 <IOE_TimeoutUserCallback>
 800935e:	4603      	mov	r3, r0
 8009360:	e018      	b.n	8009394 <I2C_DMA_WriteDeviceRegister+0x168>
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }  
  
  /* Wait until BTF Flag is set before generating STOP */
  IOE_TimeOut = 0xFF * TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8009362:	480e      	ldr	r0, [pc, #56]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 8009364:	4912      	ldr	r1, [pc, #72]	; (80093b0 <I2C_DMA_WriteDeviceRegister+0x184>)
 8009366:	f7f9 fc49 	bl	8002bfc <I2C_GetFlagStatus>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d0ed      	beq.n	800934c <I2C_DMA_WriteDeviceRegister+0x120>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8009370:	480a      	ldr	r0, [pc, #40]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 8009372:	2101      	movs	r1, #1
 8009374:	f7f9 f966 	bl	8002644 <I2C_GenerateSTOP>
  
  /* Disable DMA TX Channel */
  DMA_Cmd(IOE_DMA_TX_STREAM, DISABLE);
 8009378:	480e      	ldr	r0, [pc, #56]	; (80093b4 <I2C_DMA_WriteDeviceRegister+0x188>)
 800937a:	2100      	movs	r1, #0
 800937c:	f7f9 fe2a 	bl	8002fd4 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 8009380:	4806      	ldr	r0, [pc, #24]	; (800939c <I2C_DMA_WriteDeviceRegister+0x170>)
 8009382:	2100      	movs	r1, #0
 8009384:	f7f9 fb6c 	bl	8002a60 <I2C_DMACmd>
  
  /* Clear DMA TX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_TX_STREAM,IOE_DMA_TX_TCFLAG);
 8009388:	480a      	ldr	r0, [pc, #40]	; (80093b4 <I2C_DMA_WriteDeviceRegister+0x188>)
 800938a:	490b      	ldr	r1, [pc, #44]	; (80093b8 <I2C_DMA_WriteDeviceRegister+0x18c>)
 800938c:	f7f9 ff5c 	bl	8003248 <DMA_ClearFlag>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	b2db      	uxtb	r3, r3
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40005c00 	andmi	r5, r0, r0, lsl #24
 80093a0:	2000005c 	andcs	r0, r0, ip, asr r0
 80093a4:	10000001 	andne	r0, r0, r1
 80093a8:	00070082 	andeq	r0, r7, r2, lsl #1
 80093ac:	10000080 	andne	r0, r0, r0, lsl #1
 80093b0:	10000004 	andne	r0, r0, r4
 80093b4:	400260a0 	andmi	r6, r2, r0, lsr #1
 80093b8:	20200000 	eorcs	r0, r0, r0
 80093bc:	002fd000 	eoreq	sp, pc, r0

080093c0 <I2C_DMA_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */
uint8_t I2C_DMA_ReadDeviceRegister(uint8_t RegisterAddr)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 80093ca:	2300      	movs	r3, #0
 80093cc:	733b      	strb	r3, [r7, #12]
 80093ce:	2300      	movs	r3, #0
 80093d0:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 80093d2:	f107 030c 	add.w	r3, r7, #12
 80093d6:	2001      	movs	r0, #1
 80093d8:	4619      	mov	r1, r3
 80093da:	f000 fab7 	bl	800994c <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 80093de:	4864      	ldr	r0, [pc, #400]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 80093e0:	2101      	movs	r1, #1
 80093e2:	f7f9 fb5d 	bl	8002aa0 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 80093e6:	4862      	ldr	r0, [pc, #392]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 80093e8:	2101      	movs	r1, #1
 80093ea:	f7f9 f90b 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 80093ee:	4b61      	ldr	r3, [pc, #388]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80093f0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80093f4:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 80093f6:	e00a      	b.n	800940e <I2C_DMA_ReadDeviceRegister+0x4e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80093f8:	4b5e      	ldr	r3, [pc, #376]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	1e59      	subs	r1, r3, #1
 80093fe:	4a5d      	ldr	r2, [pc, #372]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009400:	6011      	str	r1, [r2, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <I2C_DMA_ReadDeviceRegister+0x4e>
 8009406:	f000 fd75 	bl	8009ef4 <IOE_TimeoutUserCallback>
 800940a:	4603      	mov	r3, r0
 800940c:	e0ac      	b.n	8009568 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800940e:	4858      	ldr	r0, [pc, #352]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 8009410:	4959      	ldr	r1, [pc, #356]	; (8009578 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 8009412:	f7f9 fbf3 	bl	8002bfc <I2C_GetFlagStatus>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0ed      	beq.n	80093f8 <I2C_DMA_ReadDeviceRegister+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 800941c:	4854      	ldr	r0, [pc, #336]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800941e:	2182      	movs	r1, #130	; 0x82
 8009420:	2200      	movs	r2, #0
 8009422:	f7f9 f92f 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 8009426:	4b53      	ldr	r3, [pc, #332]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009428:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800942c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 800942e:	e00a      	b.n	8009446 <I2C_DMA_ReadDeviceRegister+0x86>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009430:	4b50      	ldr	r3, [pc, #320]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	1e59      	subs	r1, r3, #1
 8009436:	4a4f      	ldr	r2, [pc, #316]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d103      	bne.n	8009446 <I2C_DMA_ReadDeviceRegister+0x86>
 800943e:	f000 fd59 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009442:	4603      	mov	r3, r0
 8009444:	e090      	b.n	8009568 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) 
 8009446:	484a      	ldr	r0, [pc, #296]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 8009448:	494c      	ldr	r1, [pc, #304]	; (800957c <I2C_DMA_ReadDeviceRegister+0x1bc>)
 800944a:	f7f9 fb85 	bl	8002b58 <I2C_CheckEvent>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0ed      	beq.n	8009430 <I2C_DMA_ReadDeviceRegister+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	4846      	ldr	r0, [pc, #280]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 8009458:	4619      	mov	r1, r3
 800945a:	f7f9 fa73 	bl	8002944 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 800945e:	4b45      	ldr	r3, [pc, #276]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009460:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009464:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8009466:	e00a      	b.n	800947e <I2C_DMA_ReadDeviceRegister+0xbe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009468:	4b42      	ldr	r3, [pc, #264]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	1e59      	subs	r1, r3, #1
 800946e:	4a41      	ldr	r2, [pc, #260]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009470:	6011      	str	r1, [r2, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d103      	bne.n	800947e <I2C_DMA_ReadDeviceRegister+0xbe>
 8009476:	f000 fd3d 	bl	8009ef4 <IOE_TimeoutUserCallback>
 800947a:	4603      	mov	r3, r0
 800947c:	e074      	b.n	8009568 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800947e:	483c      	ldr	r0, [pc, #240]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 8009480:	493f      	ldr	r1, [pc, #252]	; (8009580 <I2C_DMA_ReadDeviceRegister+0x1c0>)
 8009482:	f7f9 fbbb 	bl	8002bfc <I2C_GetFlagStatus>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <I2C_DMA_ReadDeviceRegister+0xda>
 800948c:	4838      	ldr	r0, [pc, #224]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800948e:	493d      	ldr	r1, [pc, #244]	; (8009584 <I2C_DMA_ReadDeviceRegister+0x1c4>)
 8009490:	f7f9 fbb4 	bl	8002bfc <I2C_GetFlagStatus>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0e6      	beq.n	8009468 <I2C_DMA_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 800949a:	4835      	ldr	r0, [pc, #212]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800949c:	2101      	movs	r1, #1
 800949e:	f7f9 f8b1 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 80094a2:	4b34      	ldr	r3, [pc, #208]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80094a4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80094a8:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 80094aa:	e00a      	b.n	80094c2 <I2C_DMA_ReadDeviceRegister+0x102>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80094ac:	4b31      	ldr	r3, [pc, #196]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	1e59      	subs	r1, r3, #1
 80094b2:	4a30      	ldr	r2, [pc, #192]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80094b4:	6011      	str	r1, [r2, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d103      	bne.n	80094c2 <I2C_DMA_ReadDeviceRegister+0x102>
 80094ba:	f000 fd1b 	bl	8009ef4 <IOE_TimeoutUserCallback>
 80094be:	4603      	mov	r3, r0
 80094c0:	e052      	b.n	8009568 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 80094c2:	482b      	ldr	r0, [pc, #172]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 80094c4:	492c      	ldr	r1, [pc, #176]	; (8009578 <I2C_DMA_ReadDeviceRegister+0x1b8>)
 80094c6:	f7f9 fb99 	bl	8002bfc <I2C_GetFlagStatus>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0ed      	beq.n	80094ac <I2C_DMA_ReadDeviceRegister+0xec>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 80094d0:	4827      	ldr	r0, [pc, #156]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 80094d2:	2182      	movs	r1, #130	; 0x82
 80094d4:	2201      	movs	r2, #1
 80094d6:	f7f9 f8d5 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 80094da:	4b26      	ldr	r3, [pc, #152]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80094dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80094e0:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 80094e2:	e00a      	b.n	80094fa <I2C_DMA_ReadDeviceRegister+0x13a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80094e4:	4b23      	ldr	r3, [pc, #140]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	1e59      	subs	r1, r3, #1
 80094ea:	4a22      	ldr	r2, [pc, #136]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d103      	bne.n	80094fa <I2C_DMA_ReadDeviceRegister+0x13a>
 80094f2:	f000 fcff 	bl	8009ef4 <IOE_TimeoutUserCallback>
 80094f6:	4603      	mov	r3, r0
 80094f8:	e036      	b.n	8009568 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Send IOExpander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 80094fa:	481d      	ldr	r0, [pc, #116]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 80094fc:	4922      	ldr	r1, [pc, #136]	; (8009588 <I2C_DMA_ReadDeviceRegister+0x1c8>)
 80094fe:	f7f9 fb2b 	bl	8002b58 <I2C_CheckEvent>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0ed      	beq.n	80094e4 <I2C_DMA_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
    
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 8009508:	4819      	ldr	r0, [pc, #100]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 800950a:	2101      	movs	r1, #1
 800950c:	f7f9 faa8 	bl	8002a60 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 8009510:	481e      	ldr	r0, [pc, #120]	; (800958c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 8009512:	2101      	movs	r1, #1
 8009514:	f7f9 fd5e 	bl	8002fd4 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 8009518:	4b16      	ldr	r3, [pc, #88]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800951a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800951e:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 8009520:	e00a      	b.n	8009538 <I2C_DMA_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009522:	4b14      	ldr	r3, [pc, #80]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	1e59      	subs	r1, r3, #1
 8009528:	4a12      	ldr	r2, [pc, #72]	; (8009574 <I2C_DMA_ReadDeviceRegister+0x1b4>)
 800952a:	6011      	str	r1, [r2, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d103      	bne.n	8009538 <I2C_DMA_ReadDeviceRegister+0x178>
 8009530:	f000 fce0 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009534:	4603      	mov	r3, r0
 8009536:	e017      	b.n	8009568 <I2C_DMA_ReadDeviceRegister+0x1a8>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG))
 8009538:	4814      	ldr	r0, [pc, #80]	; (800958c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 800953a:	4915      	ldr	r1, [pc, #84]	; (8009590 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 800953c:	f7f9 fe48 	bl	80031d0 <DMA_GetFlagStatus>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0ed      	beq.n	8009522 <I2C_DMA_ReadDeviceRegister+0x162>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8009546:	480a      	ldr	r0, [pc, #40]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 8009548:	2101      	movs	r1, #1
 800954a:	f7f9 f87b 	bl	8002644 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 800954e:	480f      	ldr	r0, [pc, #60]	; (800958c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 8009550:	2100      	movs	r1, #0
 8009552:	f7f9 fd3f 	bl	8002fd4 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 8009556:	4806      	ldr	r0, [pc, #24]	; (8009570 <I2C_DMA_ReadDeviceRegister+0x1b0>)
 8009558:	2100      	movs	r1, #0
 800955a:	f7f9 fa81 	bl	8002a60 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
 DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 800955e:	480b      	ldr	r0, [pc, #44]	; (800958c <I2C_DMA_ReadDeviceRegister+0x1cc>)
 8009560:	490b      	ldr	r1, [pc, #44]	; (8009590 <I2C_DMA_ReadDeviceRegister+0x1d0>)
 8009562:	f7f9 fe71 	bl	8003248 <DMA_ClearFlag>
  
  /* return a pointer to the IOE_Buffer */
  return (uint8_t)IOE_BufferRX[0];
 8009566:	7b3b      	ldrb	r3, [r7, #12]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009574:	2000005c 	andcs	r0, r0, ip, asr r0
 8009578:	10000001 	andne	r0, r0, r1
 800957c:	00070082 	andeq	r0, r7, r2, lsl #1
 8009580:	10000080 	andne	r0, r0, r0, lsl #1
 8009584:	10000004 	andne	r0, r0, r4
 8009588:	00030002 	andeq	r0, r3, r2
 800958c:	40026010 	andmi	r6, r2, r0, lsl r0
 8009590:	10000020 	andne	r0, r0, r0, lsr #32

08009594 <I2C_DMA_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval A pointer to the buffer containing the two returned bytes (in halfword).  
  */
uint16_t I2C_DMA_ReadDataBuffer(uint32_t RegisterAddr)
{ 
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint8_t tmp= 0;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 80095a0:	2300      	movs	r3, #0
 80095a2:	733b      	strb	r3, [r7, #12]
 80095a4:	2300      	movs	r3, #0
 80095a6:	737b      	strb	r3, [r7, #13]
  
  /* Configure DMA Peripheral */
  IOE_DMA_Config(IOE_DMA_RX, (uint8_t*)IOE_BufferRX);
 80095a8:	f107 030c 	add.w	r3, r7, #12
 80095ac:	2001      	movs	r0, #1
 80095ae:	4619      	mov	r1, r3
 80095b0:	f000 f9cc 	bl	800994c <IOE_DMA_Config>
  
  /* Enable DMA NACK automatic generation */
  I2C_DMALastTransferCmd(IOE_I2C, ENABLE);
 80095b4:	486b      	ldr	r0, [pc, #428]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80095b6:	2101      	movs	r1, #1
 80095b8:	f7f9 fa72 	bl	8002aa0 <I2C_DMALastTransferCmd>
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 80095bc:	4869      	ldr	r0, [pc, #420]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80095be:	2101      	movs	r1, #1
 80095c0:	f7f9 f820 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 80095c4:	4b68      	ldr	r3, [pc, #416]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80095c6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80095ca:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 80095cc:	e00a      	b.n	80095e4 <I2C_DMA_ReadDataBuffer+0x50>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80095ce:	4b66      	ldr	r3, [pc, #408]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	1e59      	subs	r1, r3, #1
 80095d4:	4a64      	ldr	r2, [pc, #400]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80095d6:	6011      	str	r1, [r2, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <I2C_DMA_ReadDataBuffer+0x50>
 80095dc:	f000 fc8a 	bl	8009ef4 <IOE_TimeoutUserCallback>
 80095e0:	4603      	mov	r3, r0
 80095e2:	e0ba      	b.n	800975a <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 80095e4:	485f      	ldr	r0, [pc, #380]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80095e6:	4961      	ldr	r1, [pc, #388]	; (800976c <I2C_DMA_ReadDataBuffer+0x1d8>)
 80095e8:	f7f9 fb08 	bl	8002bfc <I2C_GetFlagStatus>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0ed      	beq.n	80095ce <I2C_DMA_ReadDataBuffer+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 80095f2:	485c      	ldr	r0, [pc, #368]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80095f4:	2182      	movs	r1, #130	; 0x82
 80095f6:	2200      	movs	r2, #0
 80095f8:	f7f9 f844 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 80095fc:	4b5a      	ldr	r3, [pc, #360]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80095fe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009602:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8009604:	e00a      	b.n	800961c <I2C_DMA_ReadDataBuffer+0x88>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009606:	4b58      	ldr	r3, [pc, #352]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	1e59      	subs	r1, r3, #1
 800960c:	4a56      	ldr	r2, [pc, #344]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800960e:	6011      	str	r1, [r2, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <I2C_DMA_ReadDataBuffer+0x88>
 8009614:	f000 fc6e 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009618:	4603      	mov	r3, r0
 800961a:	e09e      	b.n	800975a <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800961c:	4851      	ldr	r0, [pc, #324]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800961e:	4954      	ldr	r1, [pc, #336]	; (8009770 <I2C_DMA_ReadDataBuffer+0x1dc>)
 8009620:	f7f9 fa9a 	bl	8002b58 <I2C_CheckEvent>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0ed      	beq.n	8009606 <I2C_DMA_ReadDataBuffer+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	484d      	ldr	r0, [pc, #308]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 8009630:	4619      	mov	r1, r3
 8009632:	f7f9 f987 	bl	8002944 <I2C_SendData>
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
 8009636:	4b4c      	ldr	r3, [pc, #304]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 8009638:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800963c:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 800963e:	e00a      	b.n	8009656 <I2C_DMA_ReadDataBuffer+0xc2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009640:	4b49      	ldr	r3, [pc, #292]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	1e59      	subs	r1, r3, #1
 8009646:	4a48      	ldr	r2, [pc, #288]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 8009648:	6011      	str	r1, [r2, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <I2C_DMA_ReadDataBuffer+0xc2>
 800964e:	f000 fc51 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009652:	4603      	mov	r3, r0
 8009654:	e081      	b.n	800975a <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
  
  /* Test on TXE FLag (data dent) */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_TXE)) && (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_BTF)))  
 8009656:	4843      	ldr	r0, [pc, #268]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 8009658:	4946      	ldr	r1, [pc, #280]	; (8009774 <I2C_DMA_ReadDataBuffer+0x1e0>)
 800965a:	f7f9 facf 	bl	8002bfc <I2C_GetFlagStatus>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <I2C_DMA_ReadDataBuffer+0xde>
 8009664:	483f      	ldr	r0, [pc, #252]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 8009666:	4944      	ldr	r1, [pc, #272]	; (8009778 <I2C_DMA_ReadDataBuffer+0x1e4>)
 8009668:	f7f9 fac8 	bl	8002bfc <I2C_GetFlagStatus>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0e6      	beq.n	8009640 <I2C_DMA_ReadDataBuffer+0xac>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009672:	483c      	ldr	r0, [pc, #240]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 8009674:	2101      	movs	r1, #1
 8009676:	f7f8 ffc5 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 800967a:	4b3b      	ldr	r3, [pc, #236]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800967c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009680:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 8009682:	e00a      	b.n	800969a <I2C_DMA_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009684:	4b38      	ldr	r3, [pc, #224]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	1e59      	subs	r1, r3, #1
 800968a:	4a37      	ldr	r2, [pc, #220]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 800968c:	6011      	str	r1, [r2, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d103      	bne.n	800969a <I2C_DMA_ReadDataBuffer+0x106>
 8009692:	f000 fc2f 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009696:	4603      	mov	r3, r0
 8009698:	e05f      	b.n	800975a <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on SB Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C,I2C_FLAG_SB)) 
 800969a:	4832      	ldr	r0, [pc, #200]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 800969c:	4933      	ldr	r1, [pc, #204]	; (800976c <I2C_DMA_ReadDataBuffer+0x1d8>)
 800969e:	f7f9 faad 	bl	8002bfc <I2C_GetFlagStatus>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0ed      	beq.n	8009684 <I2C_DMA_ReadDataBuffer+0xf0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 80096a8:	482e      	ldr	r0, [pc, #184]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80096aa:	2182      	movs	r1, #130	; 0x82
 80096ac:	2201      	movs	r2, #1
 80096ae:	f7f8 ffe9 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
 80096b2:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80096b4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80096b8:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 80096ba:	e00a      	b.n	80096d2 <I2C_DMA_ReadDataBuffer+0x13e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80096bc:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	1e59      	subs	r1, r3, #1
 80096c2:	4a29      	ldr	r2, [pc, #164]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80096c4:	6011      	str	r1, [r2, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <I2C_DMA_ReadDataBuffer+0x13e>
 80096ca:	f000 fc13 	bl	8009ef4 <IOE_TimeoutUserCallback>
 80096ce:	4603      	mov	r3, r0
 80096d0:	e043      	b.n	800975a <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on ADDR Flag */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_CheckEvent(IOE_I2C, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))   
 80096d2:	4824      	ldr	r0, [pc, #144]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80096d4:	4929      	ldr	r1, [pc, #164]	; (800977c <I2C_DMA_ReadDataBuffer+0x1e8>)
 80096d6:	f7f9 fa3f 	bl	8002b58 <I2C_CheckEvent>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0ed      	beq.n	80096bc <I2C_DMA_ReadDataBuffer+0x128>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Enable I2C DMA request */
  I2C_DMACmd(IOE_I2C,ENABLE);
 80096e0:	4820      	ldr	r0, [pc, #128]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 80096e2:	2101      	movs	r1, #1
 80096e4:	f7f9 f9bc 	bl	8002a60 <I2C_DMACmd>
  
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
 80096e8:	4825      	ldr	r0, [pc, #148]	; (8009780 <I2C_DMA_ReadDataBuffer+0x1ec>)
 80096ea:	2101      	movs	r1, #1
 80096ec:	f7f9 fc72 	bl	8002fd4 <DMA_Cmd>
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
 80096f0:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80096f2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80096f6:	601a      	str	r2, [r3, #0]
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 80096f8:	e00a      	b.n	8009710 <I2C_DMA_ReadDataBuffer+0x17c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 80096fa:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1e59      	subs	r1, r3, #1
 8009700:	4a19      	ldr	r2, [pc, #100]	; (8009768 <I2C_DMA_ReadDataBuffer+0x1d4>)
 8009702:	6011      	str	r1, [r2, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <I2C_DMA_ReadDataBuffer+0x17c>
 8009708:	f000 fbf4 	bl	8009ef4 <IOE_TimeoutUserCallback>
 800970c:	4603      	mov	r3, r0
 800970e:	e024      	b.n	800975a <I2C_DMA_ReadDataBuffer+0x1c6>
  /* Enable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, ENABLE);
  
  /* Wait until DMA Transfer Complete */
  IOE_TimeOut = 2 * TIMEOUT_MAX;
  while (!DMA_GetFlagStatus(IOE_DMA_RX_STREAM, IOE_DMA_RX_TCFLAG))
 8009710:	481b      	ldr	r0, [pc, #108]	; (8009780 <I2C_DMA_ReadDataBuffer+0x1ec>)
 8009712:	491c      	ldr	r1, [pc, #112]	; (8009784 <I2C_DMA_ReadDataBuffer+0x1f0>)
 8009714:	f7f9 fd5c 	bl	80031d0 <DMA_GetFlagStatus>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0ed      	beq.n	80096fa <I2C_DMA_ReadDataBuffer+0x166>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }        
  
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800971e:	4811      	ldr	r0, [pc, #68]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 8009720:	2101      	movs	r1, #1
 8009722:	f7f8 ff8f 	bl	8002644 <I2C_GenerateSTOP>
  
  /* Disable DMA RX Channel */
  DMA_Cmd(IOE_DMA_RX_STREAM, DISABLE);
 8009726:	4816      	ldr	r0, [pc, #88]	; (8009780 <I2C_DMA_ReadDataBuffer+0x1ec>)
 8009728:	2100      	movs	r1, #0
 800972a:	f7f9 fc53 	bl	8002fd4 <DMA_Cmd>
  
  /* Disable I2C DMA request */  
  I2C_DMACmd(IOE_I2C,DISABLE);
 800972e:	480d      	ldr	r0, [pc, #52]	; (8009764 <I2C_DMA_ReadDataBuffer+0x1d0>)
 8009730:	2100      	movs	r1, #0
 8009732:	f7f9 f995 	bl	8002a60 <I2C_DMACmd>
  
  /* Clear DMA RX Transfer Complete Flag */
  DMA_ClearFlag(IOE_DMA_RX_STREAM,IOE_DMA_RX_TCFLAG);
 8009736:	4812      	ldr	r0, [pc, #72]	; (8009780 <I2C_DMA_ReadDataBuffer+0x1ec>)
 8009738:	4912      	ldr	r1, [pc, #72]	; (8009784 <I2C_DMA_ReadDataBuffer+0x1f0>)
 800973a:	f7f9 fd85 	bl	8003248 <DMA_ClearFlag>
  
  /* Reorganize received data */  
  tmp = IOE_BufferRX[0];
 800973e:	7b3b      	ldrb	r3, [r7, #12]
 8009740:	73fb      	strb	r3, [r7, #15]
  IOE_BufferRX[0] = IOE_BufferRX[1];
 8009742:	7b7b      	ldrb	r3, [r7, #13]
 8009744:	733b      	strb	r3, [r7, #12]
  IOE_BufferRX[1] = tmp;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	737b      	strb	r3, [r7, #13]
  
  /* return the data */
  return (uint16_t) ((uint16_t)IOE_BufferRX[0] | (uint16_t)IOE_BufferRX[1]<< 8);
 800974a:	7b3b      	ldrb	r3, [r7, #12]
 800974c:	461a      	mov	r2, r3
 800974e:	7b7b      	ldrb	r3, [r7, #13]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	b29b      	uxth	r3, r3
 8009758:	b29b      	uxth	r3, r3
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009768:	2000005c 	andcs	r0, r0, ip, asr r0
 800976c:	10000001 	andne	r0, r0, r1
 8009770:	00070082 	andeq	r0, r7, r2, lsl #1
 8009774:	10000080 	andne	r0, r0, r0, lsl #1
 8009778:	10000004 	andne	r0, r0, r4
 800977c:	00030002 	andeq	r0, r3, r2
 8009780:	40026010 	andmi	r6, r2, r0, lsl r0
 8009784:	10000020 	andne	r0, r0, r0, lsr #32

08009788 <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 800978e:	204d      	movs	r0, #77	; 0x4d
 8009790:	f000 faca 	bl	8009d28 <I2C_ReadDataBuffer>
 8009794:	4603      	mov	r3, r0
 8009796:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800979e:	429a      	cmp	r2, r3
 80097a0:	dc05      	bgt.n	80097ae <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80097a8:	330e      	adds	r3, #14
 80097aa:	607b      	str	r3, [r7, #4]
 80097ac:	e004      	b.n	80097b8 <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80097b4:	3308      	adds	r3, #8
 80097b6:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a0c      	ldr	r2, [pc, #48]	; (80097ec <IOE_TP_Read_X+0x64>)
 80097bc:	fb82 1203 	smull	r1, r2, r2, r3
 80097c0:	441a      	add	r2, r3
 80097c2:	10d2      	asrs	r2, r2, #3
 80097c4:	17db      	asrs	r3, r3, #31
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dc02      	bgt.n	80097d6 <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	e004      	b.n	80097e0 <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2bf0      	cmp	r3, #240	; 0xf0
 80097da:	dd01      	ble.n	80097e0 <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 80097dc:	23ef      	movs	r3, #239	; 0xef
 80097de:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	b29b      	uxth	r3, r3
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	88888889 	stmhi	r8, {r0, r3, r7, fp, pc}

080097f0 <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 80097f6:	204f      	movs	r0, #79	; 0x4f
 80097f8:	f000 fa96 	bl	8009d28 <I2C_ReadDataBuffer>
 80097fc:	4603      	mov	r3, r0
 80097fe:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009806:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <IOE_TP_Read_Y+0x50>)
 800980c:	fb82 1203 	smull	r1, r2, r2, r3
 8009810:	1052      	asrs	r2, r2, #1
 8009812:	17db      	asrs	r3, r3, #31
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	dc02      	bgt.n	8009824 <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	607b      	str	r3, [r7, #4]
 8009822:	e006      	b.n	8009832 <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800982a:	dd02      	ble.n	8009832 <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 800982c:	f240 133f 	movw	r3, #319	; 0x13f
 8009830:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	b29b      	uxth	r3, r3
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	2e8ba2e9 	cdpcs	2, 8, cr10, cr11, cr9, {7}

08009844 <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 800984a:	2051      	movs	r0, #81	; 0x51
 800984c:	f000 fa6c 	bl	8009d28 <I2C_ReadDataBuffer>
 8009850:	4603      	mov	r3, r0
 8009852:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <IOE_TP_Read_Z+0x1a>
    z = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	b29b      	uxth	r3, r3
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop

0800986c <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 8009872:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009876:	2101      	movs	r1, #1
 8009878:	f7f7 fdfa 	bl	8001470 <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 800987c:	f240 1005 	movw	r0, #261	; 0x105
 8009880:	2101      	movs	r1, #1
 8009882:	f7f7 fd9b 	bl	80013bc <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8009886:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800988a:	2101      	movs	r1, #1
 800988c:	f7f7 fe0e 	bl	80014ac <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 8009890:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009894:	2101      	movs	r1, #1
 8009896:	f7f7 fe81 	bl	800159c <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 800989a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800989e:	2100      	movs	r1, #0
 80098a0:	f7f7 fe7c 	bl	800159c <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 80098a4:	4812      	ldr	r0, [pc, #72]	; (80098f0 <IOE_GPIO_Config+0x84>)
 80098a6:	2108      	movs	r1, #8
 80098a8:	2204      	movs	r2, #4
 80098aa:	f7f7 f97b 	bl	8000ba4 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 80098ae:	4811      	ldr	r0, [pc, #68]	; (80098f4 <IOE_GPIO_Config+0x88>)
 80098b0:	2109      	movs	r1, #9
 80098b2:	2204      	movs	r2, #4
 80098b4:	f7f7 f976 	bl	8000ba4 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 80098b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80098be:	2302      	movs	r3, #2
 80098c0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80098c2:	2302      	movs	r3, #2
 80098c4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80098c6:	2301      	movs	r3, #1
 80098c8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80098ce:	463b      	mov	r3, r7
 80098d0:	4807      	ldr	r0, [pc, #28]	; (80098f0 <IOE_GPIO_Config+0x84>)
 80098d2:	4619      	mov	r1, r3
 80098d4:	f7f6 fff8 	bl	80008c8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 80098d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098dc:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80098de:	463b      	mov	r3, r7
 80098e0:	4804      	ldr	r0, [pc, #16]	; (80098f4 <IOE_GPIO_Config+0x88>)
 80098e2:	4619      	mov	r1, r3
 80098e4:	f7f6 fff0 	bl	80008c8 <GPIO_Init>
  
}
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	40020000 	andmi	r0, r2, r0
 80098f4:	40020800 	andmi	r0, r2, r0, lsl #16

080098f8 <IOE_I2C_Config>:
  * @brief  Configure the I2C Peripheral used to communicate with IO_Expanders.
  * @param  None
  * @retval None
  */
static void IOE_I2C_Config(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  /* If the I2C peripheral is already enabled, don't reconfigure it */
  if ((IOE_I2C->CR1 & I2C_CR1_PE) == 0)
 80098fe:	4b11      	ldr	r3, [pc, #68]	; (8009944 <IOE_I2C_Config+0x4c>)
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d117      	bne.n	800993c <IOE_I2C_Config+0x44>
  {   
    /* IOE_I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800990c:	2300      	movs	r3, #0
 800990e:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8009910:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8009914:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8009916:	2300      	movs	r3, #0
 8009918:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800991a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991e:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8009920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009924:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8009926:	4b08      	ldr	r3, [pc, #32]	; (8009948 <IOE_I2C_Config+0x50>)
 8009928:	603b      	str	r3, [r7, #0]
  
    /* Initialize the I2C peripheral */
    I2C_Init(IOE_I2C, &I2C_InitStructure);
 800992a:	463b      	mov	r3, r7
 800992c:	4805      	ldr	r0, [pc, #20]	; (8009944 <IOE_I2C_Config+0x4c>)
 800992e:	4619      	mov	r1, r3
 8009930:	f7f8 fd28 	bl	8002384 <I2C_Init>
  
    /* Enable the I2C peripheral */
    I2C_Cmd(IOE_I2C, ENABLE);
 8009934:	4803      	ldr	r0, [pc, #12]	; (8009944 <IOE_I2C_Config+0x4c>)
 8009936:	2101      	movs	r1, #1
 8009938:	f7f8 fe04 	bl	8002544 <I2C_Cmd>
  }   
}
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009948:	000186a0 	andeq	r8, r1, r0, lsr #13

0800994c <IOE_DMA_Config>:
  * @brief  Configure the DMA Peripheral used to handle communication via I2C.
  * @param  None
  * @retval None
  */
static void IOE_DMA_Config(IOE_DMADirection_TypeDef Direction, uint8_t* buffer)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b092      	sub	sp, #72	; 0x48
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	6039      	str	r1, [r7, #0]
 8009956:	71fb      	strb	r3, [r7, #7]
  DMA_InitTypeDef DMA_InitStructure;
  
  RCC_AHB1PeriphClockCmd(IOE_DMA_CLK, ENABLE);
 8009958:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800995c:	2101      	movs	r1, #1
 800995e:	f7f7 fd2d 	bl	80013bc <RCC_AHB1PeriphClockCmd>
  
  /* Initialize the DMA_Channel member */
  DMA_InitStructure.DMA_Channel = IOE_DMA_CHANNEL;
 8009962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009966:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStructure.DMA_PeripheralBaseAddr = IOE_I2C_DR;
 8009968:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <IOE_DMA_Config+0x98>)
 800996a:	613b      	str	r3, [r7, #16]
  
  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)buffer;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	617b      	str	r3, [r7, #20]
  
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8009970:	2300      	movs	r3, #0
 8009972:	623b      	str	r3, [r7, #32]
  
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8009974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800997a:	2300      	movs	r3, #0
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800997e:	2300      	movs	r3, #0
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize the DMA_Mode member */
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8009982:	2300      	movs	r3, #0
 8009984:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize the DMA_Priority member */
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 8009986:	2300      	movs	r3, #0
 8009988:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize the DMA_FIFOMode member */
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800998a:	2304      	movs	r3, #4
 800998c:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800998e:	2300      	movs	r3, #0
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8009992:	2300      	movs	r3, #0
 8009994:	643b      	str	r3, [r7, #64]	; 0x40
  
  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8009996:	2300      	movs	r3, #0
 8009998:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* If using DMA for Reception */
  if (Direction == IOE_DMA_RX)
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d10d      	bne.n	80099bc <IOE_DMA_Config+0x70>
  {    
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 2;
 80099a4:	2302      	movs	r3, #2
 80099a6:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_RX_STREAM);
 80099a8:	480f      	ldr	r0, [pc, #60]	; (80099e8 <IOE_DMA_Config+0x9c>)
 80099aa:	f7f9 f9b5 	bl	8002d18 <DMA_DeInit>
    
    DMA_Init(IOE_DMA_RX_STREAM, &DMA_InitStructure);
 80099ae:	f107 030c 	add.w	r3, r7, #12
 80099b2:	480d      	ldr	r0, [pc, #52]	; (80099e8 <IOE_DMA_Config+0x9c>)
 80099b4:	4619      	mov	r1, r3
 80099b6:	f7f9 fa81 	bl	8002ebc <DMA_Init>
 80099ba:	e00f      	b.n	80099dc <IOE_DMA_Config+0x90>
  }
  /* If using DMA for Transmission */
  else if (Direction == IOE_DMA_TX)
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10c      	bne.n	80099dc <IOE_DMA_Config+0x90>
  { 
    /* Initialize the DMA_DIR member */
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80099c2:	2340      	movs	r3, #64	; 0x40
 80099c4:	61bb      	str	r3, [r7, #24]
    
    /* Initialize the DMA_BufferSize member */
    DMA_InitStructure.DMA_BufferSize = 1;
 80099c6:	2301      	movs	r3, #1
 80099c8:	61fb      	str	r3, [r7, #28]
    
    DMA_DeInit(IOE_DMA_TX_STREAM);
 80099ca:	4808      	ldr	r0, [pc, #32]	; (80099ec <IOE_DMA_Config+0xa0>)
 80099cc:	f7f9 f9a4 	bl	8002d18 <DMA_DeInit>
    
    DMA_Init(IOE_DMA_TX_STREAM, &DMA_InitStructure);
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	4805      	ldr	r0, [pc, #20]	; (80099ec <IOE_DMA_Config+0xa0>)
 80099d6:	4619      	mov	r1, r3
 80099d8:	f7f9 fa70 	bl	8002ebc <DMA_Init>
  }
}
 80099dc:	3748      	adds	r7, #72	; 0x48
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	40005c10 	andmi	r5, r0, r0, lsl ip
 80099e8:	40026010 	andmi	r6, r2, r0, lsl r0
 80099ec:	400260a0 	andmi	r6, r2, r0, lsr #1

080099f0 <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	71fa      	strb	r2, [r7, #7]
 80099fc:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009a02:	484c      	ldr	r0, [pc, #304]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009a04:	2101      	movs	r1, #1
 8009a06:	f7f8 fdfd 	bl	8002604 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009a0a:	4b4b      	ldr	r3, [pc, #300]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a0c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009a10:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009a12:	e00a      	b.n	8009a2a <I2C_WriteDeviceRegister+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009a14:	4b48      	ldr	r3, [pc, #288]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	1e59      	subs	r1, r3, #1
 8009a1a:	4a47      	ldr	r2, [pc, #284]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a1c:	6011      	str	r1, [r2, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d103      	bne.n	8009a2a <I2C_WriteDeviceRegister+0x3a>
 8009a22:	f000 fa67 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009a26:	4603      	mov	r3, r0
 8009a28:	e080      	b.n	8009b2c <I2C_WriteDeviceRegister+0x13c>
  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009a2a:	4842      	ldr	r0, [pc, #264]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009a2c:	4943      	ldr	r1, [pc, #268]	; (8009b3c <I2C_WriteDeviceRegister+0x14c>)
 8009a2e:	f7f9 f8e5 	bl	8002bfc <I2C_GetFlagStatus>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0ed      	beq.n	8009a14 <I2C_WriteDeviceRegister+0x24>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8009a38:	483e      	ldr	r0, [pc, #248]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009a3a:	2182      	movs	r1, #130	; 0x82
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f7f8 fe21 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8009a42:	4b3d      	ldr	r3, [pc, #244]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a44:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009a48:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009a4a:	e00a      	b.n	8009a62 <I2C_WriteDeviceRegister+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009a4c:	4b3a      	ldr	r3, [pc, #232]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	1e59      	subs	r1, r3, #1
 8009a52:	4a39      	ldr	r2, [pc, #228]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a54:	6011      	str	r1, [r2, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d103      	bne.n	8009a62 <I2C_WriteDeviceRegister+0x72>
 8009a5a:	f000 fa4b 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	e064      	b.n	8009b2c <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009a62:	4834      	ldr	r0, [pc, #208]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009a64:	4936      	ldr	r1, [pc, #216]	; (8009b40 <I2C_WriteDeviceRegister+0x150>)
 8009a66:	f7f9 f8c9 	bl	8002bfc <I2C_GetFlagStatus>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0ed      	beq.n	8009a4c <I2C_WriteDeviceRegister+0x5c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8009a70:	4b30      	ldr	r3, [pc, #192]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009a72:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009a74:	4b30      	ldr	r3, [pc, #192]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a76:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009a7a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009a7c:	e00a      	b.n	8009a94 <I2C_WriteDeviceRegister+0xa4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009a7e:	4b2e      	ldr	r3, [pc, #184]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1e59      	subs	r1, r3, #1
 8009a84:	4a2c      	ldr	r2, [pc, #176]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009a86:	6011      	str	r1, [r2, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <I2C_WriteDeviceRegister+0xa4>
 8009a8c:	f000 fa32 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009a90:	4603      	mov	r3, r0
 8009a92:	e04b      	b.n	8009b2c <I2C_WriteDeviceRegister+0x13c>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009a94:	4827      	ldr	r0, [pc, #156]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009a96:	492b      	ldr	r1, [pc, #172]	; (8009b44 <I2C_WriteDeviceRegister+0x154>)
 8009a98:	f7f9 f8b0 	bl	8002bfc <I2C_GetFlagStatus>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d0ed      	beq.n	8009a7e <I2C_WriteDeviceRegister+0x8e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	4823      	ldr	r0, [pc, #140]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	f7f8 ff4c 	bl	8002944 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009aac:	4b22      	ldr	r3, [pc, #136]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009aae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009ab2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009ab4:	e00a      	b.n	8009acc <I2C_WriteDeviceRegister+0xdc>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009ab6:	4b20      	ldr	r3, [pc, #128]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	1e59      	subs	r1, r3, #1
 8009abc:	4a1e      	ldr	r2, [pc, #120]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009abe:	6011      	str	r1, [r2, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <I2C_WriteDeviceRegister+0xdc>
 8009ac4:	f000 fa16 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	e02f      	b.n	8009b2c <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009acc:	4819      	ldr	r0, [pc, #100]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009ace:	491d      	ldr	r1, [pc, #116]	; (8009b44 <I2C_WriteDeviceRegister+0x154>)
 8009ad0:	f7f9 f894 	bl	8002bfc <I2C_GetFlagStatus>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0ed      	beq.n	8009ab6 <I2C_WriteDeviceRegister+0xc6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 8009ada:	79bb      	ldrb	r3, [r7, #6]
 8009adc:	4815      	ldr	r0, [pc, #84]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f7f8 ff30 	bl	8002944 <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009ae4:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009ae6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009aea:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8009aec:	e00a      	b.n	8009b04 <I2C_WriteDeviceRegister+0x114>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	1e59      	subs	r1, r3, #1
 8009af4:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <I2C_WriteDeviceRegister+0x148>)
 8009af6:	6011      	str	r1, [r2, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d103      	bne.n	8009b04 <I2C_WriteDeviceRegister+0x114>
 8009afc:	f000 f9fa 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009b00:	4603      	mov	r3, r0
 8009b02:	e013      	b.n	8009b2c <I2C_WriteDeviceRegister+0x13c>
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8009b04:	480b      	ldr	r0, [pc, #44]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009b06:	490f      	ldr	r1, [pc, #60]	; (8009b44 <I2C_WriteDeviceRegister+0x154>)
 8009b08:	f7f9 f878 	bl	8002bfc <I2C_GetFlagStatus>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0ed      	beq.n	8009aee <I2C_WriteDeviceRegister+0xfe>
 8009b12:	4808      	ldr	r0, [pc, #32]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009b14:	490c      	ldr	r1, [pc, #48]	; (8009b48 <I2C_WriteDeviceRegister+0x158>)
 8009b16:	f7f9 f871 	bl	8002bfc <I2C_GetFlagStatus>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0e6      	beq.n	8009aee <I2C_WriteDeviceRegister+0xfe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8009b20:	4804      	ldr	r0, [pc, #16]	; (8009b34 <I2C_WriteDeviceRegister+0x144>)
 8009b22:	2101      	movs	r1, #1
 8009b24:	f7f8 fd8e 	bl	8002644 <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	b2db      	uxtb	r3, r3
  
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009b38:	2000005c 	andcs	r0, r0, ip, asr r0
 8009b3c:	10000001 	andne	r0, r0, r1
 8009b40:	10000002 	andne	r0, r0, r2
 8009b44:	10000080 	andne	r0, r0, r0, lsl #1
 8009b48:	10000004 	andne	r0, r0, r4

08009b4c <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009b5a:	486c      	ldr	r0, [pc, #432]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	f7f8 fd51 	bl	8002604 <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009b62:	4b6b      	ldr	r3, [pc, #428]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009b64:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009b68:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009b6a:	e00a      	b.n	8009b82 <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009b6c:	4b68      	ldr	r3, [pc, #416]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	1e59      	subs	r1, r3, #1
 8009b72:	4a67      	ldr	r2, [pc, #412]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009b74:	6011      	str	r1, [r2, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d103      	bne.n	8009b82 <I2C_ReadDeviceRegister+0x36>
 8009b7a:	f000 f9bb 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	e0c0      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009b82:	4862      	ldr	r0, [pc, #392]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009b84:	4963      	ldr	r1, [pc, #396]	; (8009d14 <I2C_ReadDeviceRegister+0x1c8>)
 8009b86:	f7f9 f839 	bl	8002bfc <I2C_GetFlagStatus>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0ed      	beq.n	8009b6c <I2C_ReadDeviceRegister+0x20>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 8009b90:	485e      	ldr	r0, [pc, #376]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009b92:	2100      	movs	r1, #0
 8009b94:	f7f8 fd94 	bl	80026c0 <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8009b98:	485c      	ldr	r0, [pc, #368]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009b9a:	2182      	movs	r1, #130	; 0x82
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f7f8 fd71 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8009ba2:	4b5b      	ldr	r3, [pc, #364]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009ba4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009ba8:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009baa:	e00a      	b.n	8009bc2 <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009bac:	4b58      	ldr	r3, [pc, #352]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	1e59      	subs	r1, r3, #1
 8009bb2:	4a57      	ldr	r2, [pc, #348]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <I2C_ReadDeviceRegister+0x76>
 8009bba:	f000 f99b 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	e0a0      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009bc2:	4852      	ldr	r0, [pc, #328]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009bc4:	4954      	ldr	r1, [pc, #336]	; (8009d18 <I2C_ReadDeviceRegister+0x1cc>)
 8009bc6:	f7f9 f819 	bl	8002bfc <I2C_GetFlagStatus>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ed      	beq.n	8009bac <I2C_ReadDeviceRegister+0x60>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8009bd0:	4b4e      	ldr	r3, [pc, #312]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009bd2:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009bd4:	4b4e      	ldr	r3, [pc, #312]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009bd6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009bda:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009bdc:	e00a      	b.n	8009bf4 <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009bde:	4b4c      	ldr	r3, [pc, #304]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	1e59      	subs	r1, r3, #1
 8009be4:	4a4a      	ldr	r2, [pc, #296]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009be6:	6011      	str	r1, [r2, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d103      	bne.n	8009bf4 <I2C_ReadDeviceRegister+0xa8>
 8009bec:	f000 f982 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	e087      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009bf4:	4845      	ldr	r0, [pc, #276]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009bf6:	4949      	ldr	r1, [pc, #292]	; (8009d1c <I2C_ReadDeviceRegister+0x1d0>)
 8009bf8:	f7f9 f800 	bl	8002bfc <I2C_GetFlagStatus>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0ed      	beq.n	8009bde <I2C_ReadDeviceRegister+0x92>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	4841      	ldr	r0, [pc, #260]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009c06:	4619      	mov	r1, r3
 8009c08:	f7f8 fe9c 	bl	8002944 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009c0c:	4b40      	ldr	r3, [pc, #256]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c0e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009c12:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8009c14:	e00a      	b.n	8009c2c <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009c16:	4b3e      	ldr	r3, [pc, #248]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	1e59      	subs	r1, r3, #1
 8009c1c:	4a3c      	ldr	r2, [pc, #240]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c1e:	6011      	str	r1, [r2, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d103      	bne.n	8009c2c <I2C_ReadDeviceRegister+0xe0>
 8009c24:	f000 f966 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	e06b      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8009c2c:	4837      	ldr	r0, [pc, #220]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009c2e:	493b      	ldr	r1, [pc, #236]	; (8009d1c <I2C_ReadDeviceRegister+0x1d0>)
 8009c30:	f7f8 ffe4 	bl	8002bfc <I2C_GetFlagStatus>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0ed      	beq.n	8009c16 <I2C_ReadDeviceRegister+0xca>
 8009c3a:	4834      	ldr	r0, [pc, #208]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009c3c:	4938      	ldr	r1, [pc, #224]	; (8009d20 <I2C_ReadDeviceRegister+0x1d4>)
 8009c3e:	f7f8 ffdd 	bl	8002bfc <I2C_GetFlagStatus>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0e6      	beq.n	8009c16 <I2C_ReadDeviceRegister+0xca>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009c48:	4830      	ldr	r0, [pc, #192]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	f7f8 fcda 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009c50:	4b2f      	ldr	r3, [pc, #188]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c52:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009c56:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009c58:	e00a      	b.n	8009c70 <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009c5a:	4b2d      	ldr	r3, [pc, #180]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	1e59      	subs	r1, r3, #1
 8009c60:	4a2b      	ldr	r2, [pc, #172]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c62:	6011      	str	r1, [r2, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <I2C_ReadDeviceRegister+0x124>
 8009c68:	f000 f944 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	e049      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009c70:	4826      	ldr	r0, [pc, #152]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009c72:	4928      	ldr	r1, [pc, #160]	; (8009d14 <I2C_ReadDeviceRegister+0x1c8>)
 8009c74:	f7f8 ffc2 	bl	8002bfc <I2C_GetFlagStatus>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0ed      	beq.n	8009c5a <I2C_ReadDeviceRegister+0x10e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 8009c7e:	4823      	ldr	r0, [pc, #140]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009c80:	2182      	movs	r1, #130	; 0x82
 8009c82:	2201      	movs	r2, #1
 8009c84:	f7f8 fcfe 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009c88:	4b21      	ldr	r3, [pc, #132]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c8a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009c8e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009c90:	e00a      	b.n	8009ca8 <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009c92:	4b1f      	ldr	r3, [pc, #124]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	1e59      	subs	r1, r3, #1
 8009c98:	4a1d      	ldr	r2, [pc, #116]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009c9a:	6011      	str	r1, [r2, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <I2C_ReadDeviceRegister+0x15c>
 8009ca0:	f000 f928 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	e02d      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009ca8:	4818      	ldr	r0, [pc, #96]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009caa:	491b      	ldr	r1, [pc, #108]	; (8009d18 <I2C_ReadDeviceRegister+0x1cc>)
 8009cac:	f7f8 ffa6 	bl	8002bfc <I2C_GetFlagStatus>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0ed      	beq.n	8009c92 <I2C_ReadDeviceRegister+0x146>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8009cb6:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009cb8:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009cba:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009cbc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009cc0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 8009cc2:	e00a      	b.n	8009cda <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009cc4:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	1e59      	subs	r1, r3, #1
 8009cca:	4a11      	ldr	r2, [pc, #68]	; (8009d10 <I2C_ReadDeviceRegister+0x1c4>)
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d103      	bne.n	8009cda <I2C_ReadDeviceRegister+0x18e>
 8009cd2:	f000 f90f 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	e014      	b.n	8009d04 <I2C_ReadDeviceRegister+0x1b8>
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 8009cda:	480c      	ldr	r0, [pc, #48]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009cdc:	4911      	ldr	r1, [pc, #68]	; (8009d24 <I2C_ReadDeviceRegister+0x1d8>)
 8009cde:	f7f8 ff8d 	bl	8002bfc <I2C_GetFlagStatus>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0ed      	beq.n	8009cc4 <I2C_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009cea:	2101      	movs	r1, #1
 8009cec:	f7f8 fcaa 	bl	8002644 <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 8009cf0:	4806      	ldr	r0, [pc, #24]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009cf2:	f7f8 fe37 	bl	8002964 <I2C_ReceiveData>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 8009cfa:	4804      	ldr	r0, [pc, #16]	; (8009d0c <I2C_ReadDeviceRegister+0x1c0>)
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	f7f8 fcdf 	bl	80026c0 <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009d10:	2000005c 	andcs	r0, r0, ip, asr r0
 8009d14:	10000001 	andne	r0, r0, r1
 8009d18:	10000002 	andne	r0, r0, r2
 8009d1c:	10000080 	andne	r0, r0, r0, lsl #1
 8009d20:	10000004 	andne	r0, r0, r4
 8009d24:	10000040 	andne	r0, r0, r0, asr #32

08009d28 <I2C_ReadDataBuffer>:
  * @brief  Reads a buffer of 2 bytes from the device registers.
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 8009d30:	2300      	movs	r3, #0
 8009d32:	733b      	strb	r3, [r7, #12]
 8009d34:	2300      	movs	r3, #0
 8009d36:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009d38:	4868      	ldr	r0, [pc, #416]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	f7f8 fc62 	bl	8002604 <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009d40:	4b67      	ldr	r3, [pc, #412]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009d42:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009d46:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009d48:	e00a      	b.n	8009d60 <I2C_ReadDataBuffer+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009d4a:	4b65      	ldr	r3, [pc, #404]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	1e59      	subs	r1, r3, #1
 8009d50:	4a63      	ldr	r2, [pc, #396]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009d52:	6011      	str	r1, [r2, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d103      	bne.n	8009d60 <I2C_ReadDataBuffer+0x38>
 8009d58:	f000 f8cc 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	e0b9      	b.n	8009ed4 <I2C_ReadDataBuffer+0x1ac>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009d60:	485e      	ldr	r0, [pc, #376]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009d62:	4960      	ldr	r1, [pc, #384]	; (8009ee4 <I2C_ReadDataBuffer+0x1bc>)
 8009d64:	f7f8 ff4a 	bl	8002bfc <I2C_GetFlagStatus>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0ed      	beq.n	8009d4a <I2C_ReadDataBuffer+0x22>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8009d6e:	485b      	ldr	r0, [pc, #364]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009d70:	2182      	movs	r1, #130	; 0x82
 8009d72:	2200      	movs	r2, #0
 8009d74:	f7f8 fc86 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8009d78:	4b59      	ldr	r3, [pc, #356]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009d7a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009d7e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009d80:	e00a      	b.n	8009d98 <I2C_ReadDataBuffer+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009d82:	4b57      	ldr	r3, [pc, #348]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	1e59      	subs	r1, r3, #1
 8009d88:	4a55      	ldr	r2, [pc, #340]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009d8a:	6011      	str	r1, [r2, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <I2C_ReadDataBuffer+0x70>
 8009d90:	f000 f8b0 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009d94:	4603      	mov	r3, r0
 8009d96:	e09d      	b.n	8009ed4 <I2C_ReadDataBuffer+0x1ac>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009d98:	4850      	ldr	r0, [pc, #320]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009d9a:	4953      	ldr	r1, [pc, #332]	; (8009ee8 <I2C_ReadDataBuffer+0x1c0>)
 8009d9c:	f7f8 ff2e 	bl	8002bfc <I2C_GetFlagStatus>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0ed      	beq.n	8009d82 <I2C_ReadDataBuffer+0x5a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8009da6:	4b4d      	ldr	r3, [pc, #308]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009da8:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009daa:	4b4d      	ldr	r3, [pc, #308]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009dac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009db0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009db2:	e00a      	b.n	8009dca <I2C_ReadDataBuffer+0xa2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009db4:	4b4a      	ldr	r3, [pc, #296]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	1e59      	subs	r1, r3, #1
 8009dba:	4a49      	ldr	r2, [pc, #292]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009dbc:	6011      	str	r1, [r2, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <I2C_ReadDataBuffer+0xa2>
 8009dc2:	f000 f897 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	e084      	b.n	8009ed4 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8009dca:	4844      	ldr	r0, [pc, #272]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009dcc:	4947      	ldr	r1, [pc, #284]	; (8009eec <I2C_ReadDataBuffer+0x1c4>)
 8009dce:	f7f8 ff15 	bl	8002bfc <I2C_GetFlagStatus>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0ed      	beq.n	8009db4 <I2C_ReadDataBuffer+0x8c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	483f      	ldr	r0, [pc, #252]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009dde:	4619      	mov	r1, r3
 8009de0:	f7f8 fdb0 	bl	8002944 <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8009de4:	483d      	ldr	r0, [pc, #244]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009de6:	2101      	movs	r1, #1
 8009de8:	f7f8 fc0c 	bl	8002604 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009dec:	4b3c      	ldr	r3, [pc, #240]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009dee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009df2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009df4:	e00a      	b.n	8009e0c <I2C_ReadDataBuffer+0xe4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009df6:	4b3a      	ldr	r3, [pc, #232]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	1e59      	subs	r1, r3, #1
 8009dfc:	4a38      	ldr	r2, [pc, #224]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009dfe:	6011      	str	r1, [r2, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <I2C_ReadDataBuffer+0xe4>
 8009e04:	f000 f876 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	e063      	b.n	8009ed4 <I2C_ReadDataBuffer+0x1ac>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8009e0c:	4833      	ldr	r0, [pc, #204]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e0e:	4935      	ldr	r1, [pc, #212]	; (8009ee4 <I2C_ReadDataBuffer+0x1bc>)
 8009e10:	f7f8 fef4 	bl	8002bfc <I2C_GetFlagStatus>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0ed      	beq.n	8009df6 <I2C_ReadDataBuffer+0xce>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 8009e1a:	4830      	ldr	r0, [pc, #192]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e1c:	2182      	movs	r1, #130	; 0x82
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f7f8 fc30 	bl	8002684 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009e24:	4b2e      	ldr	r3, [pc, #184]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009e26:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009e2a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009e2c:	e00a      	b.n	8009e44 <I2C_ReadDataBuffer+0x11c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009e2e:	4b2c      	ldr	r3, [pc, #176]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	1e59      	subs	r1, r3, #1
 8009e34:	4a2a      	ldr	r2, [pc, #168]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009e36:	6011      	str	r1, [r2, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <I2C_ReadDataBuffer+0x11c>
 8009e3c:	f000 f85a 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009e40:	4603      	mov	r3, r0
 8009e42:	e047      	b.n	8009ed4 <I2C_ReadDataBuffer+0x1ac>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8009e44:	4825      	ldr	r0, [pc, #148]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e46:	4928      	ldr	r1, [pc, #160]	; (8009ee8 <I2C_ReadDataBuffer+0x1c0>)
 8009e48:	f7f8 fed8 	bl	8002bfc <I2C_GetFlagStatus>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0ed      	beq.n	8009e2e <I2C_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 8009e52:	4822      	ldr	r0, [pc, #136]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e54:	2100      	movs	r1, #0
 8009e56:	f7f8 fc33 	bl	80026c0 <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 8009e5a:	4820      	ldr	r0, [pc, #128]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e60:	f7f8 fd10 	bl	8002884 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8009e64:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e66:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009e6a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009e6e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 8009e70:	e00a      	b.n	8009e88 <I2C_ReadDataBuffer+0x160>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8009e72:	4b1b      	ldr	r3, [pc, #108]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	1e59      	subs	r1, r3, #1
 8009e78:	4a19      	ldr	r2, [pc, #100]	; (8009ee0 <I2C_ReadDataBuffer+0x1b8>)
 8009e7a:	6011      	str	r1, [r2, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d103      	bne.n	8009e88 <I2C_ReadDataBuffer+0x160>
 8009e80:	f000 f838 	bl	8009ef4 <IOE_TimeoutUserCallback>
 8009e84:	4603      	mov	r3, r0
 8009e86:	e025      	b.n	8009ed4 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 8009e88:	4814      	ldr	r0, [pc, #80]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e8a:	4919      	ldr	r1, [pc, #100]	; (8009ef0 <I2C_ReadDataBuffer+0x1c8>)
 8009e8c:	f7f8 feb6 	bl	8002bfc <I2C_GetFlagStatus>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0ed      	beq.n	8009e72 <I2C_ReadDataBuffer+0x14a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8009e96:	4811      	ldr	r0, [pc, #68]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009e98:	2101      	movs	r1, #1
 8009e9a:	f7f8 fbd3 	bl	8002644 <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 8009e9e:	480f      	ldr	r0, [pc, #60]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009ea0:	f7f8 fd60 	bl	8002964 <I2C_ReceiveData>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 8009ea8:	480c      	ldr	r0, [pc, #48]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009eaa:	f7f8 fd5b 	bl	8002964 <I2C_ReceiveData>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 8009eb2:	480a      	ldr	r0, [pc, #40]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	f7f8 fc03 	bl	80026c0 <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 8009eba:	4808      	ldr	r0, [pc, #32]	; (8009edc <I2C_ReadDataBuffer+0x1b4>)
 8009ebc:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8009ec0:	f7f8 fce0 	bl	8002884 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 8009ec4:	7b3b      	ldrb	r3, [r7, #12]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	7b7b      	ldrb	r3, [r7, #13]
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	b29b      	uxth	r3, r3
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009ee0:	2000005c 	andcs	r0, r0, ip, asr r0
 8009ee4:	10000001 	andne	r0, r0, r1
 8009ee8:	10000002 	andne	r0, r0, r2
 8009eec:	10000080 	andne	r0, r0, r0, lsl #1
 8009ef0:	10000004 	andne	r0, r0, r4

08009ef4 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8009efa:	4817      	ldr	r0, [pc, #92]	; (8009f58 <IOE_TimeoutUserCallback+0x64>)
 8009efc:	2101      	movs	r1, #1
 8009efe:	f7f8 fba1 	bl	8002644 <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 8009f02:	4815      	ldr	r0, [pc, #84]	; (8009f58 <IOE_TimeoutUserCallback+0x64>)
 8009f04:	2101      	movs	r1, #1
 8009f06:	f7f8 fc5b 	bl	80027c0 <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 8009f0a:	4813      	ldr	r0, [pc, #76]	; (8009f58 <IOE_TimeoutUserCallback+0x64>)
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	f7f8 fc57 	bl	80027c0 <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 8009f12:	f7ff fcab 	bl	800986c <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 8009f16:	4810      	ldr	r0, [pc, #64]	; (8009f58 <IOE_TimeoutUserCallback+0x64>)
 8009f18:	f7f8 f9fa 	bl	8002310 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8009f20:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8009f24:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8009f26:	2300      	movs	r3, #0
 8009f28:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8009f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f2e:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8009f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f34:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <IOE_TimeoutUserCallback+0x68>)
 8009f38:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 8009f3a:	4807      	ldr	r0, [pc, #28]	; (8009f58 <IOE_TimeoutUserCallback+0x64>)
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	f7f8 fb01 	bl	8002544 <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 8009f42:	463b      	mov	r3, r7
 8009f44:	4804      	ldr	r0, [pc, #16]	; (8009f58 <IOE_TimeoutUserCallback+0x64>)
 8009f46:	4619      	mov	r1, r3
 8009f48:	f7f8 fa1c 	bl	8002384 <I2C_Init>
  
  return 0;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40005c00 	andmi	r5, r0, r0, lsl #24
 8009f5c:	000186a0 	andeq	r8, r1, r0, lsr #13

08009f60 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a08      	ldr	r2, [pc, #32]	; (8009f90 <delay+0x30>)
 8009f70:	fb02 f303 	mul.w	r3, r2, r3
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	e002      	b.n	8009f7e <delay+0x1e>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1f9      	bne.n	8009f78 <delay+0x18>
  {
  }
}
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	000186a0 	andeq	r8, r1, r0, lsr #13

Disassembly of section .rodata:

08009f94 <GPIO_PIN-0x24>:
 8009f94:	434c4557 	movtmi	r4, #50519	; 0xc557
 8009f98:	20454d4f 	subcs	r4, r5, pc, asr #26
 8009f9c:	54204f54 	strtpl	r4, [r0], #-3924	; 0xf54
 8009fa0:	0000554b 	andeq	r5, r0, fp, asr #10
 8009fa4:	4c465341 	mcrrmi	3, 4, r5, r6, cr1
 8009fa8:	00000000 	andeq	r0, r0, r0
 8009fac:	00203a58 	eoreq	r3, r0, r8, asr sl
 8009fb0:	00203a59 	eoreq	r3, r0, r9, asr sl
 8009fb4:	00203a5a 	eoreq	r3, r0, sl, asr sl

08009fb8 <GPIO_PIN>:
 8009fb8:	40002000 	andmi	r2, r0, r0

08009fbc <GPIO_CLK>:
 8009fbc:	00000040 	andeq	r0, r0, r0, asr #32
 8009fc0:	00000040 	andeq	r0, r0, r0, asr #32

08009fc4 <BUTTON_PIN>:
 8009fc4:	00000001 	andeq	r0, r0, r1

08009fc8 <BUTTON_CLK>:
 8009fc8:	00000001 	andeq	r0, r0, r1

08009fcc <BUTTON_EXTI_LINE>:
 8009fcc:	00000001 	andeq	r0, r0, r1

08009fd0 <BUTTON_PORT_SOURCE>:
 8009fd0:	00000000 	andeq	r0, r0, r0

08009fd4 <BUTTON_PIN_SOURCE>:
 8009fd4:	00000000 	andeq	r0, r0, r0

08009fd8 <BUTTON_IRQn>:
 8009fd8:	00000006 	andeq	r0, r0, r6

08009fdc <ASCII16x24_Table>:
	...
 800a00c:	01800000 	orreq	r0, r0, r0
 800a010:	01800180 	orreq	r0, r0, r0, lsl #3
 800a014:	01800180 	orreq	r0, r0, r0, lsl #3
 800a018:	01800180 	orreq	r0, r0, r0, lsl #3
 800a01c:	01800180 	orreq	r0, r0, r0, lsl #3
 800a020:	01800180 	orreq	r0, r0, r0, lsl #3
 800a024:	01800180 	orreq	r0, r0, r0, lsl #3
 800a028:	00000000 	andeq	r0, r0, r0
 800a02c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a040:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 800a044:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 800a048:	00cc00cc 	sbceq	r0, ip, ip, asr #1
	...
 800a078:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800a07c:	06300c60 	ldrteq	r0, [r0], -r0, ror #24
 800a080:	1ffe0630 	svcne	0x00fe0630
 800a084:	06301ffe 	shsub8eq	r1, r0, lr
 800a088:	03180738 	tsteq	r8, #56, 14	; 0xe00000
 800a08c:	1ffe1ffe 	svcne	0x00fe1ffe
 800a090:	03180318 	tsteq	r8, #24, 6	; 0x60000000
 800a094:	018c018c 	orreq	r0, ip, ip, lsl #3
 800a098:	0000018c 	andeq	r0, r0, ip, lsl #3
 800a09c:	00800000 	addeq	r0, r0, r0
 800a0a0:	0ff803e0 	svceq	0x00f803e0
 800a0a4:	1c8c0e9c 	stcne	14, cr0, [ip], {156}	; 0x9c
 800a0a8:	008c188c 	addeq	r1, ip, ip, lsl #17
 800a0ac:	01f80098 			; <UNDEFINED> instruction: 0x01f80098
 800a0b0:	0e8007e0 	cdpeq	7, 8, cr0, cr0, cr0, {7}
 800a0b4:	188c1c80 	stmne	ip, {r7, sl, fp, ip}
 800a0b8:	189c188c 	ldmne	ip, {r2, r3, r7, fp, ip}
 800a0bc:	0ff00cb8 	svceq	0x00f00cb8
 800a0c0:	008003e0 	addeq	r0, r0, r0, ror #7
 800a0c4:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800a0d0:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
 800a0d4:	0c110c1b 	ldceq	12, cr0, [r1], {27}
 800a0d8:	06110611 			; <UNDEFINED> instruction: 0x06110611
 800a0dc:	03110311 	tsteq	r1, #1140850688	; 0x44000000
 800a0e0:	018e019b 			; <UNDEFINED> instruction: 0x018e019b
 800a0e4:	6cc038c0 	stclvs	8, cr3, [r0], {192}	; 0xc0
 800a0e8:	44604460 	strbtmi	r4, [r0], #-1120	; 0x460
 800a0ec:	44304430 	ldrtmi	r4, [r0], #-1072	; 0x430
 800a0f0:	6c184418 	cfldrsvs	mvf4, [r8], {24}
 800a0f4:	0000380c 	andeq	r3, r0, ip, lsl #16
 800a0f8:	00000000 	andeq	r0, r0, r0
 800a0fc:	01e00000 	mvneq	r0, r0
 800a100:	073803f0 			; <UNDEFINED> instruction: 0x073803f0
 800a104:	06180618 			; <UNDEFINED> instruction: 0x06180618
 800a108:	01f00330 	mvnseq	r0, r0, lsr r3
 800a10c:	00f800f0 	ldrshteq	r0, [r8], #0
 800a110:	330e319c 	movwcc	r3, #57756	; 0xe19c
 800a114:	1c061e06 	stcne	14, cr1, [r6], {6}
 800a118:	3f061c06 	svccc	0x00061c06
 800a11c:	21f073fc 	ldrshcs	r7, [r0, #60]!	; 0x3c
	...
 800a130:	000c000c 	andeq	r0, ip, ip
 800a134:	000c000c 	andeq	r0, ip, ip
 800a138:	000c000c 	andeq	r0, ip, ip
	...
 800a15c:	02000000 	andeq	r0, r0, #0
 800a160:	01800300 	orreq	r0, r0, r0, lsl #6
 800a164:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800a168:	00600060 	rsbeq	r0, r0, r0, rrx
 800a16c:	00300030 	eorseq	r0, r0, r0, lsr r0
 800a170:	00300030 	eorseq	r0, r0, r0, lsr r0
 800a174:	00300030 	eorseq	r0, r0, r0, lsr r0
 800a178:	00300030 	eorseq	r0, r0, r0, lsr r0
 800a17c:	00600060 	rsbeq	r0, r0, r0, rrx
 800a180:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800a184:	03000180 	movweq	r0, #384	; 0x180
 800a188:	00000200 	andeq	r0, r0, r0, lsl #4
 800a18c:	00200000 	eoreq	r0, r0, r0
 800a190:	00c00060 	sbceq	r0, r0, r0, rrx
 800a194:	01800180 	orreq	r0, r0, r0, lsl #3
 800a198:	03000300 	movweq	r0, #768	; 0x300
 800a19c:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a1a0:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a1a4:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a1a8:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a1ac:	03000300 	movweq	r0, #768	; 0x300
 800a1b0:	01800180 	orreq	r0, r0, r0, lsl #3
 800a1b4:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800a1b8:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 800a1c8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800a1cc:	07f806d8 	ubfxeq	r0, r8, #13, #25
 800a1d0:	033001e0 	teqeq	r0, #224, 2	; 0x38
 800a1d4:	00000738 	andeq	r0, r0, r8, lsr r7
	...
 800a1f8:	01800180 	orreq	r0, r0, r0, lsl #3
 800a1fc:	01800180 	orreq	r0, r0, r0, lsl #3
 800a200:	3ffc0180 	svccc	0x00fc0180
 800a204:	01803ffc 	strdeq	r3, [r0, ip]
 800a208:	01800180 	orreq	r0, r0, r0, lsl #3
 800a20c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a23c:	01800000 	orreq	r0, r0, r0
 800a240:	01000180 	smlabbeq	r0, r0, r1, r0
 800a244:	00800100 	addeq	r0, r0, r0, lsl #2
	...
 800a264:	07e007e0 	strbeq	r0, [r0, r0, ror #15]!
	...
 800a29c:	00c00000 	sbceq	r0, r0, r0
 800a2a0:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800a2ac:	0c000000 	stceq	0, cr0, [r0], {-0}
 800a2b0:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800a2b4:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a2b8:	03000300 	movweq	r0, #768	; 0x300
 800a2bc:	03800300 	orreq	r0, r0, #0, 6
 800a2c0:	01800180 	orreq	r0, r0, r0, lsl #3
 800a2c4:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800a2c8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800a2cc:	00600060 	rsbeq	r0, r0, r0, rrx
	...
 800a2dc:	03e00000 	mvneq	r0, #0
 800a2e0:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800a2e4:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 800a2e8:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a2ec:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a2f0:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a2f4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a2f8:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 800a2fc:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800a30c:	01000000 	mrseq	r0, (UNDEF: 0)
 800a310:	01c00180 	biceq	r0, r0, r0, lsl #3
 800a314:	019801f0 			; <UNDEFINED> instruction: 0x019801f0
 800a318:	01800188 	orreq	r0, r0, r8, lsl #3
 800a31c:	01800180 	orreq	r0, r0, r0, lsl #3
 800a320:	01800180 	orreq	r0, r0, r0, lsl #3
 800a324:	01800180 	orreq	r0, r0, r0, lsl #3
 800a328:	01800180 	orreq	r0, r0, r0, lsl #3
 800a32c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a33c:	03e00000 	mvneq	r0, #0
 800a340:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 800a344:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a348:	18001800 	stmdane	r0, {fp, ip}
 800a34c:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800a350:	01800300 	orreq	r0, r0, r0, lsl #6
 800a354:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800a358:	00180030 	andseq	r0, r8, r0, lsr r0
 800a35c:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 800a36c:	01e00000 	mvneq	r0, r0
 800a370:	0e1807f8 	mrceq	7, 0, r0, cr8, cr8, {7}
 800a374:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800a378:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800a37c:	07c003c0 	strbeq	r0, [r0, r0, asr #7]
 800a380:	18000c00 	stmdane	r0, {sl, fp}
 800a384:	180c1800 	stmdane	ip, {fp, ip}
 800a388:	0c18180c 	ldceq	8, cr1, [r8], {12}
 800a38c:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 800a39c:	0c000000 	stceq	0, cr0, [r0], {-0}
 800a3a0:	0f000e00 	svceq	0x00000e00
 800a3a4:	0d800f00 	stceq	15, cr0, [r0]
 800a3a8:	0c600cc0 	stcleq	12, cr0, [r0], #-768	; 0xfffffd00
 800a3ac:	0c300c60 	ldceq	12, cr0, [r0], #-384	; 0xfffffe80
 800a3b0:	0c0c0c18 	stceq	12, cr0, [ip], {24}
 800a3b4:	3ffc3ffc 	svccc	0x00fc3ffc
 800a3b8:	0c000c00 	stceq	12, cr0, [r0], {-0}
 800a3bc:	0c000c00 	stceq	12, cr0, [r0], {-0}
	...
 800a3cc:	0ff80000 	svceq	0x00f80000
 800a3d0:	00180ff8 			; <UNDEFINED> instruction: 0x00180ff8
 800a3d4:	000c0018 	andeq	r0, ip, r8, lsl r0
 800a3d8:	07fc03ec 	ldrbeq	r0, [ip, ip, ror #7]!
 800a3dc:	1c000e1c 	stcne	14, cr0, [r0], {28}
 800a3e0:	18001800 	stmdane	r0, {fp, ip}
 800a3e4:	180c1800 	stmdane	ip, {fp, ip}
 800a3e8:	0e180c1c 	mrceq	12, 0, r0, cr8, cr12, {0}
 800a3ec:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 800a3fc:	07c00000 	strbeq	r0, [r0, r0]
 800a400:	1c380ff0 	ldcne	15, cr0, [r8], #-960	; 0xfffffc40
 800a404:	00181818 	andseq	r1, r8, r8, lsl r8
 800a408:	03cc000c 	biceq	r0, ip, #12
 800a40c:	0e3c0fec 	cdpeq	15, 3, cr0, cr12, cr12, {7}
 800a410:	180c1c1c 	stmdane	ip, {r2, r3, r4, sl, fp, ip}
 800a414:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a418:	0e381c18 	mrceq	12, 1, r1, cr8, cr8, {0}
 800a41c:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800a42c:	1ffc0000 	svcne	0x00fc0000
 800a430:	0c001ffc 	stceq	15, cr1, [r0], {252}	; 0xfc
 800a434:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a438:	03800300 	orreq	r0, r0, #0, 6
 800a43c:	01c00180 	biceq	r0, r0, r0, lsl #3
 800a440:	00e000c0 	rsceq	r0, r0, r0, asr #1
 800a444:	00600060 	rsbeq	r0, r0, r0, rrx
 800a448:	00300070 	eorseq	r0, r0, r0, ror r0
 800a44c:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 800a45c:	03e00000 	mvneq	r0, #0
 800a460:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800a464:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800a468:	06380c18 			; <UNDEFINED> instruction: 0x06380c18
 800a46c:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800a470:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 800a474:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a478:	0c38180c 	ldceq	8, cr1, [r8], #-48	; 0xffffffd0
 800a47c:	03e00ff8 	mvneq	r0, #248, 30	; 0x3e0
	...
 800a48c:	03e00000 	mvneq	r0, #0
 800a490:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 800a494:	180c0c1c 	stmdane	ip, {r2, r3, r4, sl, fp}
 800a498:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a49c:	1e381c1c 	mrcne	12, 1, r1, cr8, cr12, {0}
 800a4a0:	19e01bf8 	stmibne	r0!, {r3, r4, r5, r6, r7, r8, r9, fp, ip}^
 800a4a4:	0c001800 	stceq	8, cr1, [r0], {-0}
 800a4a8:	0e1c0c00 	cdpeq	12, 1, cr0, cr12, cr0, {0}
 800a4ac:	01f007f8 	ldrsheq	r0, [r0, #120]!	; 0x78
	...
 800a4c8:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a4dc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a4f8:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a50c:	01800180 	orreq	r0, r0, r0, lsl #3
 800a510:	01000100 	mrseq	r0, (UNDEF: 16)
 800a514:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800a52c:	1c001000 	stcne	0, cr1, [r0], {-0}
 800a530:	03e00f80 	mvneq	r0, #128, 30	; 0x200
 800a534:	001800f8 	ldrsheq	r0, [r8], -r8
 800a538:	03e000f8 	mvneq	r0, #248	; 0xf8
 800a53c:	1c000f80 	stcne	15, cr0, [r0], {128}	; 0x80
 800a540:	00001000 	andeq	r1, r0, r0
	...
 800a55c:	00001ff8 	strdeq	r1, [r0], -r8
 800a560:	00000000 	andeq	r0, r0, r0
 800a564:	00001ff8 	strdeq	r1, [r0], -r8
	...
 800a58c:	00380008 	eorseq	r0, r8, r8
 800a590:	07c001f0 			; <UNDEFINED> instruction: 0x07c001f0
 800a594:	18001f00 	stmdane	r0, {r8, r9, sl, fp, ip}
 800a598:	07c01f00 	strbeq	r1, [r0, r0, lsl #30]
 800a59c:	003801f0 	ldrshteq	r0, [r8], -r0
 800a5a0:	00000008 	andeq	r0, r0, r8
	...
 800a5ac:	03e00000 	mvneq	r0, #0
 800a5b0:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 800a5b4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a5b8:	0c001800 	stceq	8, cr1, [r0], {-0}
 800a5bc:	03000600 	movweq	r0, #1536	; 0x600
 800a5c0:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800a5c4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800a5c8:	00000000 	andeq	r0, r0, r0
 800a5cc:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800a5e0:	181807e0 	ldmdane	r8, {r5, r6, r7, r8, r9, sl}
 800a5e4:	29c22004 	stmibcs	r2, {r2, sp}^
 800a5e8:	44114a22 	ldrmi	r4, [r1], #-2594	; 0xa22
 800a5ec:	44094409 	strmi	r4, [r9], #-1033	; 0x409
 800a5f0:	22094409 	andcs	r4, r9, #150994944	; 0x9000000
 800a5f4:	0ce21311 	stcleq	3, cr1, [r2], #68	; 0x44
 800a5f8:	20044002 	andcs	r4, r4, r2
 800a5fc:	07e01818 			; <UNDEFINED> instruction: 0x07e01818
	...
 800a60c:	03800000 	orreq	r0, r0, #0
 800a610:	06c00380 	strbeq	r0, [r0], r0, lsl #7
 800a614:	06c006c0 	strbeq	r0, [r0], r0, asr #13
 800a618:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800a61c:	18301830 	ldmdane	r0!, {r4, r5, fp, ip}
 800a620:	3ff81830 	svccc	0x00f81830
 800a624:	701c3ff8 			; <UNDEFINED> instruction: 0x701c3ff8
 800a628:	600c600c 	andvs	r6, ip, ip
 800a62c:	c006c006 	andgt	ip, r6, r6
	...
 800a63c:	03fc0000 	mvnseq	r0, #0
 800a640:	0c0c0ffc 	stceq	15, cr0, [ip], {252}	; 0xfc
 800a644:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a648:	0c0c180c 	stceq	8, cr1, [ip], {12}
 800a64c:	0ffc07fc 	svceq	0x00fc07fc
 800a650:	300c180c 	andcc	r1, ip, ip, lsl #16
 800a654:	300c300c 	andcc	r3, ip, ip
 800a658:	180c300c 	stmdane	ip, {r2, r3, ip, sp}
 800a65c:	07fc1ffc 			; <UNDEFINED> instruction: 0x07fc1ffc
	...
 800a66c:	07c00000 	strbeq	r0, [r0, r0]
 800a670:	38381ff0 	ldmdacc	r8!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a674:	700c301c 	andvc	r3, ip, ip, lsl r0
 800a678:	00066006 	andeq	r6, r6, r6
 800a67c:	00060006 	andeq	r0, r6, r6
 800a680:	00060006 	andeq	r0, r6, r6
 800a684:	60060006 	andvs	r0, r6, r6
 800a688:	301c700c 	andscc	r7, ip, ip
 800a68c:	07e01ff0 			; <UNDEFINED> instruction: 0x07e01ff0
	...
 800a69c:	03fe0000 	mvnseq	r0, #0
 800a6a0:	0e060ffe 	mcreq	15, 0, r0, cr6, cr14, {7}
 800a6a4:	18061806 	stmdane	r6, {r1, r2, fp, ip}
 800a6a8:	30063006 	andcc	r3, r6, r6
 800a6ac:	30063006 	andcc	r3, r6, r6
 800a6b0:	30063006 	andcc	r3, r6, r6
 800a6b4:	18063006 	stmdane	r6, {r1, r2, ip, sp}
 800a6b8:	0e061806 	cdpeq	8, 0, cr1, cr6, cr6, {0}
 800a6bc:	03fe0ffe 	mvnseq	r0, #1016	; 0x3f8
	...
 800a6cc:	3ffc0000 	svccc	0x00fc0000
 800a6d0:	000c3ffc 	strdeq	r3, [ip], -ip
 800a6d4:	000c000c 	andeq	r0, ip, ip
 800a6d8:	000c000c 	andeq	r0, ip, ip
 800a6dc:	1ffc1ffc 	svcne	0x00fc1ffc
 800a6e0:	000c000c 	andeq	r0, ip, ip
 800a6e4:	000c000c 	andeq	r0, ip, ip
 800a6e8:	000c000c 	andeq	r0, ip, ip
 800a6ec:	3ffc3ffc 	svccc	0x00fc3ffc
	...
 800a6fc:	3ff80000 	svccc	0x00f80000
 800a700:	00183ff8 			; <UNDEFINED> instruction: 0x00183ff8
 800a704:	00180018 	andseq	r0, r8, r8, lsl r0
 800a708:	00180018 	andseq	r0, r8, r8, lsl r0
 800a70c:	1ff81ff8 	svcne	0x00f81ff8
 800a710:	00180018 	andseq	r0, r8, r8, lsl r0
 800a714:	00180018 	andseq	r0, r8, r8, lsl r0
 800a718:	00180018 	andseq	r0, r8, r8, lsl r0
 800a71c:	00180018 	andseq	r0, r8, r8, lsl r0
	...
 800a72c:	0fe00000 	svceq	0x00e00000
 800a730:	783c3ff8 	ldmdavc	ip!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 800a734:	e006600e 	and	r6, r6, lr
 800a738:	0003c007 	andeq	ip, r3, r7
 800a73c:	fe030003 	cdp2	0, 0, cr0, cr3, cr3, {0}
 800a740:	c003fe03 	andgt	pc, r3, r3, lsl #28
 800a744:	c006c007 	andgt	ip, r6, r7
 800a748:	f03cc00e 			; <UNDEFINED> instruction: 0xf03cc00e
 800a74c:	0fe03ff8 	svceq	0x00e03ff8
	...
 800a75c:	300c0000 	andcc	r0, ip, r0
 800a760:	300c300c 	andcc	r3, ip, ip
 800a764:	300c300c 	andcc	r3, ip, ip
 800a768:	300c300c 	andcc	r3, ip, ip
 800a76c:	3ffc3ffc 	svccc	0x00fc3ffc
 800a770:	300c300c 	andcc	r3, ip, ip
 800a774:	300c300c 	andcc	r3, ip, ip
 800a778:	300c300c 	andcc	r3, ip, ip
 800a77c:	300c300c 	andcc	r3, ip, ip
	...
 800a78c:	01800000 	orreq	r0, r0, r0
 800a790:	01800180 	orreq	r0, r0, r0, lsl #3
 800a794:	01800180 	orreq	r0, r0, r0, lsl #3
 800a798:	01800180 	orreq	r0, r0, r0, lsl #3
 800a79c:	01800180 	orreq	r0, r0, r0, lsl #3
 800a7a0:	01800180 	orreq	r0, r0, r0, lsl #3
 800a7a4:	01800180 	orreq	r0, r0, r0, lsl #3
 800a7a8:	01800180 	orreq	r0, r0, r0, lsl #3
 800a7ac:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a7bc:	06000000 	streq	r0, [r0], -r0
 800a7c0:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a7c4:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a7c8:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a7cc:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a7d0:	06000600 	streq	r0, [r0], -r0, lsl #12
 800a7d4:	06180600 	ldreq	r0, [r8], -r0, lsl #12
 800a7d8:	07380618 			; <UNDEFINED> instruction: 0x07380618
 800a7dc:	01e003f0 	strdeq	r0, [r0, #48]!	; 0x30
	...
 800a7ec:	30060000 	andcc	r0, r6, r0
 800a7f0:	0c061806 	stceq	8, cr1, [r6], {6}
 800a7f4:	03060606 	movweq	r0, #26118	; 0x6606
 800a7f8:	00c60186 	sbceq	r0, r6, r6, lsl #3
 800a7fc:	00760066 	rsbseq	r0, r6, r6, rrx
 800a800:	018e00de 	ldrdeq	r0, [lr, lr]
 800a804:	06060306 	streq	r0, [r6], -r6, lsl #6
 800a808:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 800a80c:	60063006 	andvs	r3, r6, r6
	...
 800a81c:	00180000 	andseq	r0, r8, r0
 800a820:	00180018 	andseq	r0, r8, r8, lsl r0
 800a824:	00180018 	andseq	r0, r8, r8, lsl r0
 800a828:	00180018 	andseq	r0, r8, r8, lsl r0
 800a82c:	00180018 	andseq	r0, r8, r8, lsl r0
 800a830:	00180018 	andseq	r0, r8, r8, lsl r0
 800a834:	00180018 	andseq	r0, r8, r8, lsl r0
 800a838:	00180018 	andseq	r0, r8, r8, lsl r0
 800a83c:	1ff81ff8 	svcne	0x00f81ff8
	...
 800a84c:	e00e0000 	and	r0, lr, r0
 800a850:	f01ef01e 			; <UNDEFINED> instruction: 0xf01ef01e
 800a854:	d836f01e 	ldmdale	r6!, {r1, r2, r3, r4, ip, sp, lr, pc}
 800a858:	d836d836 	ldmdale	r6!, {r1, r2, r4, r5, fp, ip, lr, pc}
 800a85c:	cc66d836 	stclgt	8, cr13, [r6], #-216	; 0xffffff28
 800a860:	cc66cc66 	stclgt	12, cr12, [r6], #-408	; 0xfffffe68
 800a864:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 800a868:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 800a86c:	c386c386 	orrgt	ip, r6, #402653186	; 0x18000002
	...
 800a87c:	300c0000 	andcc	r0, ip, r0
 800a880:	303c301c 	eorscc	r3, ip, ip, lsl r0
 800a884:	306c303c 	rsbcc	r3, ip, ip, lsr r0
 800a888:	30cc306c 	sbccc	r3, ip, ip, rrx
 800a88c:	318c30cc 	orrcc	r3, ip, ip, asr #1
 800a890:	330c330c 	movwcc	r3, #49932	; 0xc30c
 800a894:	360c360c 	strcc	r3, [ip], -ip, lsl #12
 800a898:	3c0c3c0c 	stccc	12, cr3, [ip], {12}
 800a89c:	300c380c 	andcc	r3, ip, ip, lsl #16
	...
 800a8ac:	07e00000 	strbeq	r0, [r0, r0]!
 800a8b0:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a8b4:	6006700e 	andvs	r7, r6, lr
 800a8b8:	c003c003 	andgt	ip, r3, r3
 800a8bc:	c003c003 	andgt	ip, r3, r3
 800a8c0:	c003c003 	andgt	ip, r3, r3
 800a8c4:	6006c003 	andvs	ip, r6, r3
 800a8c8:	381c700e 	ldmdacc	ip, {r1, r2, r3, ip, sp, lr}
 800a8cc:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 800a8dc:	0ffc0000 	svceq	0x00fc0000
 800a8e0:	380c1ffc 	stmdacc	ip, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a8e4:	300c300c 	andcc	r3, ip, ip
 800a8e8:	300c300c 	andcc	r3, ip, ip
 800a8ec:	1ffc180c 	svcne	0x00fc180c
 800a8f0:	000c07fc 	strdeq	r0, [ip], -ip
 800a8f4:	000c000c 	andeq	r0, ip, ip
 800a8f8:	000c000c 	andeq	r0, ip, ip
 800a8fc:	000c000c 	andeq	r0, ip, ip
	...
 800a90c:	07e00000 	strbeq	r0, [r0, r0]!
 800a910:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a914:	6006700e 	andvs	r7, r6, lr
 800a918:	c003e003 	andgt	lr, r3, r3
 800a91c:	c003c003 	andgt	ip, r3, r3
 800a920:	c003c003 	andgt	ip, r3, r3
 800a924:	6306e007 	movwvs	lr, #24583	; 0x6007
 800a928:	3c1c3f0e 	ldccc	15, cr3, [ip], {14}
 800a92c:	f7e03ff8 			; <UNDEFINED> instruction: 0xf7e03ff8
 800a930:	0000c000 	andeq	ip, r0, r0
	...
 800a93c:	0ffe0000 	svceq	0x00fe0000
 800a940:	38061ffe 	stmdacc	r6, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800a944:	30063006 	andcc	r3, r6, r6
 800a948:	38063006 	stmdacc	r6, {r1, r2, ip, sp}
 800a94c:	07fe1ffe 			; <UNDEFINED> instruction: 0x07fe1ffe
 800a950:	06060306 	streq	r0, [r6], -r6, lsl #6
 800a954:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 800a958:	30061806 	andcc	r1, r6, r6, lsl #16
 800a95c:	60063006 	andvs	r3, r6, r6
	...
 800a96c:	03e00000 	mvneq	r0, #0
 800a970:	0c1c0ff8 	ldceq	15, cr0, [ip], {248}	; 0xf8
 800a974:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800a978:	001c000c 	andseq	r0, ip, ip
 800a97c:	0fe003f8 	svceq	0x00e003f8
 800a980:	38001e00 	stmdacc	r0, {r9, sl, fp, ip}
 800a984:	30063006 	andcc	r3, r6, r6
 800a988:	1c1c300e 	ldcne	0, cr3, [ip], {14}
 800a98c:	07e00ff8 			; <UNDEFINED> instruction: 0x07e00ff8
	...
 800a99c:	7ffe0000 	svcvc	0x00fe0000
 800a9a0:	01807ffe 	strdeq	r7, [r0, lr]
 800a9a4:	01800180 	orreq	r0, r0, r0, lsl #3
 800a9a8:	01800180 	orreq	r0, r0, r0, lsl #3
 800a9ac:	01800180 	orreq	r0, r0, r0, lsl #3
 800a9b0:	01800180 	orreq	r0, r0, r0, lsl #3
 800a9b4:	01800180 	orreq	r0, r0, r0, lsl #3
 800a9b8:	01800180 	orreq	r0, r0, r0, lsl #3
 800a9bc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800a9cc:	300c0000 	andcc	r0, ip, r0
 800a9d0:	300c300c 	andcc	r3, ip, ip
 800a9d4:	300c300c 	andcc	r3, ip, ip
 800a9d8:	300c300c 	andcc	r3, ip, ip
 800a9dc:	300c300c 	andcc	r3, ip, ip
 800a9e0:	300c300c 	andcc	r3, ip, ip
 800a9e4:	300c300c 	andcc	r3, ip, ip
 800a9e8:	1818300c 	ldmdane	r8, {r2, r3, ip, sp}
 800a9ec:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 800a9fc:	60030000 	andvs	r0, r3, r0
 800aa00:	30063006 	andcc	r3, r6, r6
 800aa04:	180c3006 	stmdane	ip, {r1, r2, ip, sp}
 800aa08:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 800aa0c:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800aa10:	06300e38 			; <UNDEFINED> instruction: 0x06300e38
 800aa14:	07700630 			; <UNDEFINED> instruction: 0x07700630
 800aa18:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800aa1c:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 800aa2c:	60030000 	andvs	r0, r3, r0
 800aa30:	61c361c3 	bicvs	r6, r3, r3, asr #3
 800aa34:	336661c3 	cmncc	r6, #-1073741776	; 0xc0000030
 800aa38:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 800aa3c:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 800aa40:	1b6c3366 	blne	9b177e0 <_siccmram+0x1b0add4>
 800aa44:	1b6c1b6c 	blne	9b117fc <_siccmram+0x1b04df0>
 800aa48:	1e3c1a2c 	vaddne.f32	s2, s24, s25
 800aa4c:	0e380e38 	mrceq	14, 1, r0, cr8, cr8, {1}
	...
 800aa5c:	e00f0000 	and	r0, pc, r0
 800aa60:	3018700c 	andscc	r7, r8, ip
 800aa64:	0c701830 	ldcleq	8, cr1, [r0], #-192	; 0xffffff40
 800aa68:	07c00e60 	strbeq	r0, [r0, r0, ror #28]
 800aa6c:	03800380 	orreq	r0, r0, #128, 6
 800aa70:	06e003c0 	strbteq	r0, [r0], r0, asr #7
 800aa74:	1c300c70 	ldcne	12, cr0, [r0], #-448	; 0xfffffe40
 800aa78:	300c1818 	andcc	r1, ip, r8, lsl r8
 800aa7c:	e007600e 	and	r6, r7, lr
	...
 800aa8c:	c0030000 	andgt	r0, r3, r0
 800aa90:	300c6006 	andcc	r6, ip, r6
 800aa94:	1838381c 	ldmdane	r8!, {r2, r3, r4, fp, ip, sp}
 800aa98:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 800aa9c:	03c007e0 	biceq	r0, r0, #224, 14	; 0x3800000
 800aaa0:	01800180 	orreq	r0, r0, r0, lsl #3
 800aaa4:	01800180 	orreq	r0, r0, r0, lsl #3
 800aaa8:	01800180 	orreq	r0, r0, r0, lsl #3
 800aaac:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 800aabc:	7ffc0000 	svcvc	0x00fc0000
 800aac0:	60007ffc 	strdvs	r7, [r0], -ip
 800aac4:	18003000 	stmdane	r0, {ip, sp}
 800aac8:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800aacc:	01800300 	orreq	r0, r0, r0, lsl #6
 800aad0:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800aad4:	00180030 	andseq	r0, r8, r0, lsr r0
 800aad8:	0006000c 	andeq	r0, r6, ip
 800aadc:	7ffe7ffe 	svcvc	0x00fe7ffe
	...
 800aaec:	03e00000 	mvneq	r0, #0
 800aaf0:	006003e0 	rsbeq	r0, r0, r0, ror #7
 800aaf4:	00600060 	rsbeq	r0, r0, r0, rrx
 800aaf8:	00600060 	rsbeq	r0, r0, r0, rrx
 800aafc:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab00:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab04:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab08:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab0c:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab10:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab14:	03e00060 	mvneq	r0, #96	; 0x60
 800ab18:	000003e0 	andeq	r0, r0, r0, ror #7
 800ab1c:	00300000 	eorseq	r0, r0, r0
 800ab20:	00600030 	rsbeq	r0, r0, r0, lsr r0
 800ab24:	00600060 	rsbeq	r0, r0, r0, rrx
 800ab28:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ab2c:	01c000c0 	biceq	r0, r0, r0, asr #1
 800ab30:	01800180 	orreq	r0, r0, r0, lsl #3
 800ab34:	03000180 	movweq	r0, #384	; 0x180
 800ab38:	03000300 	movweq	r0, #768	; 0x300
 800ab3c:	06000600 	streq	r0, [r0], -r0, lsl #12
	...
 800ab4c:	03e00000 	mvneq	r0, #0
 800ab50:	030003e0 	movweq	r0, #992	; 0x3e0
 800ab54:	03000300 	movweq	r0, #768	; 0x300
 800ab58:	03000300 	movweq	r0, #768	; 0x300
 800ab5c:	03000300 	movweq	r0, #768	; 0x300
 800ab60:	03000300 	movweq	r0, #768	; 0x300
 800ab64:	03000300 	movweq	r0, #768	; 0x300
 800ab68:	03000300 	movweq	r0, #768	; 0x300
 800ab6c:	03000300 	movweq	r0, #768	; 0x300
 800ab70:	03000300 	movweq	r0, #768	; 0x300
 800ab74:	03e00300 	mvneq	r0, #0, 6
 800ab78:	000003e0 	andeq	r0, r0, r0, ror #7
 800ab7c:	00000000 	andeq	r0, r0, r0
 800ab80:	01c001c0 	biceq	r0, r0, r0, asr #3
 800ab84:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800ab88:	06300360 	ldrteq	r0, [r0], -r0, ror #6
 800ab8c:	0c180630 	ldceq	6, cr0, [r8], {48}	; 0x30
 800ab90:	00000c18 	andeq	r0, r0, r8, lsl ip
	...
 800abcc:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 800abd0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
 800abdc:	000c0000 	andeq	r0, ip, r0
 800abe0:	000c000c 	andeq	r0, ip, ip
 800abe4:	000c000c 	andeq	r0, ip, ip
 800abe8:	0000000c 	andeq	r0, r0, ip
	...
 800ac18:	07f803f0 			; <UNDEFINED> instruction: 0x07f803f0
 800ac1c:	0c0c0c1c 	stceq	12, cr0, [ip], {28}
 800ac20:	0ff00f00 	svceq	0x00f00f00
 800ac24:	0c0c0cf8 	stceq	12, cr0, [ip], {248}	; 0xf8
 800ac28:	0f1c0c0c 	svceq	0x001c0c0c
 800ac2c:	18f00ff8 	ldmne	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}^
	...
 800ac3c:	00180000 	andseq	r0, r8, r0
 800ac40:	00180018 	andseq	r0, r8, r8, lsl r0
 800ac44:	00180018 	andseq	r0, r8, r8, lsl r0
 800ac48:	0ff803d8 	svceq	0x00f803d8
 800ac4c:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 800ac50:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ac54:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ac58:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 800ac5c:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
	...
 800ac78:	07f003c0 	ldrbeq	r0, [r0, r0, asr #7]!
 800ac7c:	0c180e30 	ldceq	14, cr0, [r8], {48}	; 0x30
 800ac80:	00180018 	andseq	r0, r8, r8, lsl r0
 800ac84:	00180018 	andseq	r0, r8, r8, lsl r0
 800ac88:	0e300c18 	mrceq	12, 1, r0, cr0, cr8, {0}
 800ac8c:	03c007f0 	biceq	r0, r0, #240, 14	; 0x3c00000
	...
 800ac9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800aca0:	18001800 	stmdane	r0, {fp, ip}
 800aca4:	18001800 	stmdane	r0, {fp, ip}
 800aca8:	1ff01bc0 	svcne	0x00f01bc0
 800acac:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 800acb0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800acb4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800acb8:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 800acbc:	1bc01ff0 	blne	7012c84 <_Min_Stack_Size+0x7012884>
	...
 800acd8:	0ff003c0 	svceq	0x00f003c0
 800acdc:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 800ace0:	1ff81ff8 	svcne	0x00f81ff8
 800ace4:	00180018 	andseq	r0, r8, r8, lsl r0
 800ace8:	1c301838 	ldcne	8, cr1, [r0], #-224	; 0xffffff20
 800acec:	07c00ff0 			; <UNDEFINED> instruction: 0x07c00ff0
	...
 800acfc:	0f800000 	svceq	0x00800000
 800ad00:	00c00fc0 	sbceq	r0, r0, r0, asr #31
 800ad04:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ad08:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800ad0c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ad10:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ad14:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ad18:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ad1c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800ad38:	0ff80de0 	svceq	0x00f80de0
 800ad3c:	0c0c0e18 	stceq	14, cr0, [ip], {24}
 800ad40:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800ad44:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800ad48:	0e180c0c 	cdpeq	12, 1, cr0, cr8, cr12, {0}
 800ad4c:	0de00ff8 	stcleq	15, cr0, [r0, #992]!	; 0x3e0
 800ad50:	0c0c0c00 	stceq	12, cr0, [ip], {-0}
 800ad54:	07f8061c 			; <UNDEFINED> instruction: 0x07f8061c
 800ad58:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800ad5c:	00180000 	andseq	r0, r8, r0
 800ad60:	00180018 	andseq	r0, r8, r8, lsl r0
 800ad64:	00180018 	andseq	r0, r8, r8, lsl r0
 800ad68:	0ff807d8 	svceq	0x00f807d8
 800ad6c:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 800ad70:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ad74:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ad78:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ad7c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 800ad8c:	00c00000 	sbceq	r0, r0, r0
 800ad90:	000000c0 	andeq	r0, r0, r0, asr #1
 800ad94:	00000000 	andeq	r0, r0, r0
 800ad98:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ad9c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ada0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ada4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ada8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800adac:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800adbc:	00c00000 	sbceq	r0, r0, r0
 800adc0:	000000c0 	andeq	r0, r0, r0, asr #1
 800adc4:	00000000 	andeq	r0, r0, r0
 800adc8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800adcc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800add0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800add4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800add8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800addc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ade0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ade4:	00f800c0 	rscseq	r0, r8, r0, asr #1
 800ade8:	00000078 	andeq	r0, r0, r8, ror r0
 800adec:	000c0000 	andeq	r0, ip, r0
 800adf0:	000c000c 	andeq	r0, ip, ip
 800adf4:	000c000c 	andeq	r0, ip, ip
 800adf8:	060c0c0c 	streq	r0, [ip], -ip, lsl #24
 800adfc:	018c030c 	orreq	r0, ip, ip, lsl #6
 800ae00:	006c00cc 	rsbeq	r0, ip, ip, asr #1
 800ae04:	019c00fc 	ldrsheq	r0, [ip, ip]
 800ae08:	030c038c 	movweq	r0, #50060	; 0xc38c
 800ae0c:	0c0c060c 	stceq	6, cr0, [ip], {12}
	...
 800ae1c:	00c00000 	sbceq	r0, r0, r0
 800ae20:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae24:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae28:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae2c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae30:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae34:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae38:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800ae3c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 800ae58:	7eff3c7c 	mrcvc	12, 7, r3, cr15, cr12, {3}
 800ae5c:	c183e3c7 	orrgt	lr, r3, r7, asr #7
 800ae60:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800ae64:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800ae68:	c183c183 	orrgt	ip, r3, r3, lsl #3
 800ae6c:	c183c183 	orrgt	ip, r3, r3, lsl #3
	...
 800ae88:	0ff80798 	svceq	0x00f80798
 800ae8c:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 800ae90:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ae94:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ae98:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ae9c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 800aeb8:	0ff003c0 	svceq	0x00f003c0
 800aebc:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 800aec0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800aec4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800aec8:	0c301818 	ldceq	8, cr1, [r0], #-96	; 0xffffffa0
 800aecc:	03c00ff0 	biceq	r0, r0, #240, 30	; 0x3c0
	...
 800aee8:	0ff803d8 	svceq	0x00f803d8
 800aeec:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 800aef0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800aef4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800aef8:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 800aefc:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
 800af00:	00180018 	andseq	r0, r8, r8, lsl r0
 800af04:	00180018 	andseq	r0, r8, r8, lsl r0
 800af08:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 800af18:	1ff01bc0 	svcne	0x00f01bc0
 800af1c:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 800af20:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800af24:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800af28:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 800af2c:	1bc01ff0 	blne	7012ef4 <_Min_Stack_Size+0x7012af4>
 800af30:	18001800 	stmdane	r0, {fp, ip}
 800af34:	18001800 	stmdane	r0, {fp, ip}
 800af38:	00001800 	andeq	r1, r0, r0, lsl #16
	...
 800af48:	03f007b0 	mvnseq	r0, #176, 14	; 0x2c00000
 800af4c:	00300070 	eorseq	r0, r0, r0, ror r0
 800af50:	00300030 	eorseq	r0, r0, r0, lsr r0
 800af54:	00300030 	eorseq	r0, r0, r0, lsr r0
 800af58:	00300030 	eorseq	r0, r0, r0, lsr r0
 800af5c:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 800af78:	03f003e0 	mvnseq	r0, #224, 6	; 0x80000003
 800af7c:	0c180e38 	ldceq	14, cr0, [r8], {56}	; 0x38
 800af80:	03f00038 	mvnseq	r0, #56	; 0x38
 800af84:	0c0007c0 	stceq	7, cr0, [r0], {192}	; 0xc0
 800af88:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 800af8c:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 800afa0:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800afa4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800afa8:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 800afac:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800afb0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800afb4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800afb8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800afbc:	078007c0 	streq	r0, [r0, r0, asr #15]
	...
 800afd8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800afdc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800afe0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800afe4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800afe8:	1c381818 	ldcne	8, cr1, [r8], #-96	; 0xffffffa0
 800afec:	19e01ff0 	stmibne	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}^
	...
 800b008:	0c18180c 	ldceq	8, cr1, [r8], {12}
 800b00c:	0c180c18 	ldceq	12, cr0, [r8], {24}
 800b010:	06300630 			; <UNDEFINED> instruction: 0x06300630
 800b014:	03600630 	cmneq	r0, #48, 12	; 0x3000000
 800b018:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800b01c:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 800b038:	41c141c1 	bicmi	r4, r1, r1, asr #3
 800b03c:	636361c3 	cmnvs	r3, #-1073741776	; 0xc0000030
 800b040:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800b044:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800b048:	1c1c3636 	ldcne	6, cr3, [ip], {54}	; 0x36
 800b04c:	1c1c1c1c 	ldcne	12, cr1, [ip], {28}
	...
 800b068:	1c38381c 	ldcne	8, cr3, [r8], #-112	; 0xffffff90
 800b06c:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 800b070:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800b074:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 800b078:	0c300660 	ldceq	6, cr0, [r0], #-384	; 0xfffffe80
 800b07c:	381c1c38 	ldmdacc	ip, {r3, r4, r5, sl, fp, ip}
	...
 800b098:	18303018 	ldmdane	r0!, {r3, r4, ip, sp}
 800b09c:	18701830 	ldmdane	r0!, {r4, r5, fp, ip}^
 800b0a0:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 800b0a4:	06c00ce0 	strbeq	r0, [r0], r0, ror #25
 800b0a8:	038006c0 	orreq	r0, r0, #192, 12	; 0xc000000
 800b0ac:	03800380 	orreq	r0, r0, #128, 6
 800b0b0:	01800180 	orreq	r0, r0, r0, lsl #3
 800b0b4:	00f001c0 	rscseq	r0, r0, r0, asr #3
 800b0b8:	00000070 	andeq	r0, r0, r0, ror r0
	...
 800b0c8:	1ffc1ffc 	svcne	0x00fc1ffc
 800b0cc:	06000c00 	streq	r0, [r0], -r0, lsl #24
 800b0d0:	01800300 	orreq	r0, r0, r0, lsl #6
 800b0d4:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800b0d8:	00180030 	andseq	r0, r8, r0, lsr r0
 800b0dc:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 800b0ec:	03000000 	movweq	r0, #0
 800b0f0:	00c00180 	sbceq	r0, r0, r0, lsl #3
 800b0f4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800b0f8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800b0fc:	006000c0 	rsbeq	r0, r0, r0, asr #1
 800b100:	00300060 	eorseq	r0, r0, r0, rrx
 800b104:	00400060 	subeq	r0, r0, r0, rrx
 800b108:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800b10c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800b110:	00c000c0 	sbceq	r0, r0, r0, asr #1
 800b114:	03000180 	movweq	r0, #384	; 0x180
 800b118:	00000000 	andeq	r0, r0, r0
 800b11c:	01800000 	orreq	r0, r0, r0
 800b120:	01800180 	orreq	r0, r0, r0, lsl #3
 800b124:	01800180 	orreq	r0, r0, r0, lsl #3
 800b128:	01800180 	orreq	r0, r0, r0, lsl #3
 800b12c:	01800180 	orreq	r0, r0, r0, lsl #3
 800b130:	01800180 	orreq	r0, r0, r0, lsl #3
 800b134:	01800180 	orreq	r0, r0, r0, lsl #3
 800b138:	01800180 	orreq	r0, r0, r0, lsl #3
 800b13c:	01800180 	orreq	r0, r0, r0, lsl #3
 800b140:	01800180 	orreq	r0, r0, r0, lsl #3
 800b144:	01800180 	orreq	r0, r0, r0, lsl #3
 800b148:	00000180 	andeq	r0, r0, r0, lsl #3
 800b14c:	00600000 	rsbeq	r0, r0, r0
 800b150:	01c000c0 	biceq	r0, r0, r0, asr #1
 800b154:	01800180 	orreq	r0, r0, r0, lsl #3
 800b158:	01800180 	orreq	r0, r0, r0, lsl #3
 800b15c:	03000180 	movweq	r0, #384	; 0x180
 800b160:	06000300 	streq	r0, [r0], -r0, lsl #6
 800b164:	01000300 	mrseq	r0, LR_irq
 800b168:	01800180 	orreq	r0, r0, r0, lsl #3
 800b16c:	01800180 	orreq	r0, r0, r0, lsl #3
 800b170:	01800180 	orreq	r0, r0, r0, lsl #3
 800b174:	006000c0 	rsbeq	r0, r0, r0, asr #1
	...
 800b18c:	1ff810f0 	svcne	0x00f810f0
 800b190:	00000f08 	andeq	r0, r0, r8, lsl #30
	...

0800b1ac <ASCII12x12_Table>:
	...
 800b1c4:	20000000 	andcs	r0, r0, r0
 800b1c8:	20002000 	andcs	r2, r0, r0
 800b1cc:	20002000 	andcs	r2, r0, r0
 800b1d0:	20002000 	andcs	r2, r0, r0
 800b1d4:	20000000 	andcs	r0, r0, r0
 800b1d8:	00000000 	andeq	r0, r0, r0
 800b1dc:	50000000 	andpl	r0, r0, r0
 800b1e0:	50005000 	andpl	r5, r0, r0
	...
 800b1f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 800b1f8:	12000900 	andne	r0, r0, #0, 18
 800b1fc:	12007f00 	andne	r7, r0, #0, 30
 800b200:	12007f00 	andne	r7, r0, #0, 30
 800b204:	24002400 	strcs	r2, [r0], #-1024	; 0x400
 800b208:	00000000 	andeq	r0, r0, r0
 800b20c:	38001000 	stmdacc	r0, {ip}
 800b210:	50005400 	andpl	r5, r0, r0, lsl #8
 800b214:	38005000 	stmdacc	r0, {ip, lr}
 800b218:	54001400 	strpl	r1, [r0], #-1024	; 0x400
 800b21c:	38005400 	stmdacc	r0, {sl, ip, lr}
 800b220:	00001000 	andeq	r1, r0, r0
 800b224:	30800000 	addcc	r0, r0, r0
 800b228:	49004900 	stmdbmi	r0, {r8, fp, lr}
 800b22c:	32c04a00 	sbccc	r4, r0, #0, 20
 800b230:	09200520 	stmdbeq	r0!, {r5, r8, sl}
 800b234:	10c00920 	sbcne	r0, r0, r0, lsr #18
 800b238:	00000000 	andeq	r0, r0, r0
 800b23c:	0c000000 	stceq	0, cr0, [r0], {-0}
 800b240:	12001200 	andne	r1, r0, #0, 4
 800b244:	18001400 	stmdane	r0, {sl, ip}
 800b248:	23002500 	movwcs	r2, #1280	; 0x500
 800b24c:	1d802300 	stcne	3, cr2, [r0]
 800b250:	00000000 	andeq	r0, r0, r0
 800b254:	40000000 	andmi	r0, r0, r0
 800b258:	40004000 	andmi	r4, r0, r0
	...
 800b26c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800b270:	10001000 	andne	r1, r0, r0
 800b274:	20002000 	andcs	r2, r0, r0
 800b278:	20002000 	andcs	r2, r0, r0
 800b27c:	20002000 	andcs	r2, r0, r0
 800b280:	10001000 	andne	r1, r0, r0
 800b284:	40000000 	andmi	r0, r0, r0
 800b288:	20002000 	andcs	r2, r0, r0
 800b28c:	10001000 	andne	r1, r0, r0
 800b290:	10001000 	andne	r1, r0, r0
 800b294:	10001000 	andne	r1, r0, r0
 800b298:	20002000 	andcs	r2, r0, r0
 800b29c:	20000000 	andcs	r0, r0, r0
 800b2a0:	20007000 	andcs	r7, r0, r0
 800b2a4:	00005000 	andeq	r5, r0, r0
	...
 800b2b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800b2bc:	7f000800 	svcvc	0x00000800
 800b2c0:	08000800 	stmdaeq	r0, {fp}
	...
 800b2dc:	20000000 	andcs	r0, r0, r0
 800b2e0:	40002000 	andmi	r2, r0, r0
	...
 800b2f0:	00007000 	andeq	r7, r0, r0
	...
 800b30c:	20000000 	andcs	r0, r0, r0
 800b310:	00000000 	andeq	r0, r0, r0
 800b314:	10000000 	andne	r0, r0, r0
 800b318:	10001000 	andne	r1, r0, r0
 800b31c:	20002000 	andcs	r2, r0, r0
 800b320:	20002000 	andcs	r2, r0, r0
 800b324:	40004000 	andmi	r4, r0, r0
 800b328:	00000000 	andeq	r0, r0, r0
 800b32c:	10000000 	andne	r0, r0, r0
 800b330:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800b334:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b338:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b33c:	10002800 	andne	r2, r0, r0, lsl #16
 800b340:	00000000 	andeq	r0, r0, r0
 800b344:	10000000 	andne	r0, r0, r0
 800b348:	50003000 	andpl	r3, r0, r0
 800b34c:	10001000 	andne	r1, r0, r0
 800b350:	10001000 	andne	r1, r0, r0
 800b354:	10001000 	andne	r1, r0, r0
 800b358:	00000000 	andeq	r0, r0, r0
 800b35c:	30000000 	andcc	r0, r0, r0
 800b360:	44004800 	strmi	r4, [r0], #-2048	; 0x800
 800b364:	08000400 	stmdaeq	r0, {sl}
 800b368:	20001000 	andcs	r1, r0, r0
 800b36c:	7c004000 	stcvc	0, cr4, [r0], {-0}
 800b370:	00000000 	andeq	r0, r0, r0
 800b374:	30000000 	andcc	r0, r0, r0
 800b378:	04004800 	streq	r4, [r0], #-2048	; 0x800
 800b37c:	10000800 	andne	r0, r0, r0, lsl #16
 800b380:	44000800 	strmi	r0, [r0], #-2048	; 0x800
 800b384:	30004800 	andcc	r4, r0, r0, lsl #16
 800b388:	00000000 	andeq	r0, r0, r0
 800b38c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800b390:	18001800 	stmdane	r0, {fp, ip}
 800b394:	28002800 	stmdacs	r0, {fp, sp}
 800b398:	7c004800 	stcvc	8, cr4, [r0], {-0}
 800b39c:	08000800 	stmdaeq	r0, {fp}
 800b3a0:	00000000 	andeq	r0, r0, r0
 800b3a4:	3c000000 	stccc	0, cr0, [r0], {-0}
 800b3a8:	40002000 	andmi	r2, r0, r0
 800b3ac:	48007000 	stmdami	r0, {ip, sp, lr}
 800b3b0:	44000400 	strmi	r0, [r0], #-1024	; 0x400
 800b3b4:	30004800 	andcc	r4, r0, r0, lsl #16
 800b3b8:	00000000 	andeq	r0, r0, r0
 800b3bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800b3c0:	40002400 	andmi	r2, r0, r0, lsl #8
 800b3c4:	68005000 	stmdavs	r0, {ip, lr}
 800b3c8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b3cc:	10002800 	andne	r2, r0, r0, lsl #16
 800b3d0:	00000000 	andeq	r0, r0, r0
 800b3d4:	7c000000 	stcvc	0, cr0, [r0], {-0}
 800b3d8:	08000400 	stmdaeq	r0, {sl}
 800b3dc:	10001000 	andne	r1, r0, r0
 800b3e0:	20001000 	andcs	r1, r0, r0
 800b3e4:	20002000 	andcs	r2, r0, r0
 800b3e8:	00000000 	andeq	r0, r0, r0
 800b3ec:	10000000 	andne	r0, r0, r0
 800b3f0:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800b3f4:	10002800 	andne	r2, r0, r0, lsl #16
 800b3f8:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800b3fc:	10002800 	andne	r2, r0, r0, lsl #16
 800b400:	00000000 	andeq	r0, r0, r0
 800b404:	10000000 	andne	r0, r0, r0
 800b408:	44002800 	strmi	r2, [r0], #-2048	; 0x800
 800b40c:	2c004400 	cfstrscs	mvf4, [r0], {-0}
 800b410:	04001400 	streq	r1, [r0], #-1024	; 0x400
 800b414:	30004800 	andcc	r4, r0, r0, lsl #16
	...
 800b420:	20000000 	andcs	r0, r0, r0
	...
 800b42c:	20000000 	andcs	r0, r0, r0
	...
 800b438:	20000000 	andcs	r0, r0, r0
	...
 800b444:	20000000 	andcs	r0, r0, r0
 800b448:	40002000 	andmi	r2, r0, r0
 800b44c:	00000000 	andeq	r0, r0, r0
 800b450:	08000400 	stmdaeq	r0, {sl}
 800b454:	40003000 	andmi	r3, r0, r0
 800b458:	08003000 	stmdaeq	r0, {ip, sp}
 800b45c:	00000400 	andeq	r0, r0, r0, lsl #8
	...
 800b468:	7c000000 	stcvc	0, cr0, [r0], {-0}
 800b46c:	00000000 	andeq	r0, r0, r0
 800b470:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
 800b480:	20004000 	andcs	r4, r0, r0
 800b484:	04001800 	streq	r1, [r0], #-2048	; 0x800
 800b488:	20001800 	andcs	r1, r0, r0, lsl #16
 800b48c:	00004000 	andeq	r4, r0, r0
 800b490:	00000000 	andeq	r0, r0, r0
 800b494:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800b498:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800b49c:	08000400 	stmdaeq	r0, {sl}
 800b4a0:	10001000 	andne	r1, r0, r0
 800b4a4:	10000000 	andne	r0, r0, r0
 800b4a8:	00000000 	andeq	r0, r0, r0
 800b4ac:	0f800000 	svceq	0x00800000
 800b4b0:	2ea01040 	cdpcs	0, 10, cr1, cr0, cr0, {2}
 800b4b4:	512051a0 	teqpl	r0, r0, lsr #3
 800b4b8:	51205120 	teqpl	r0, r0, lsr #2
 800b4bc:	4dc05320 	stclmi	3, cr5, [r0, #128]	; 0x80
 800b4c0:	10402020 	subne	r2, r0, r0, lsr #32
 800b4c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800b4c8:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800b4cc:	22001400 	andcs	r1, r0, #0, 8
 800b4d0:	22003e00 	andcs	r3, r0, #0, 28
 800b4d4:	41004100 	mrsmi	r4, (UNDEF: 16)
 800b4d8:	00000000 	andeq	r0, r0, r0
 800b4dc:	3c000000 	stccc	0, cr0, [r0], {-0}
 800b4e0:	22002200 	andcs	r2, r0, #0, 4
 800b4e4:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800b4e8:	22002200 	andcs	r2, r0, #0, 4
 800b4ec:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800b4f0:	00000000 	andeq	r0, r0, r0
 800b4f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 800b4f8:	21001100 	mrscs	r1, (UNDEF: 16)
 800b4fc:	20002000 	andcs	r2, r0, r0
 800b500:	21002000 	mrscs	r2, (UNDEF: 0)
 800b504:	0e001100 	adfeqs	f1, f0, f0
 800b508:	00000000 	andeq	r0, r0, r0
 800b50c:	3c000000 	stccc	0, cr0, [r0], {-0}
 800b510:	21002200 	mrscs	r2, R8_usr
 800b514:	21002100 	mrscs	r2, (UNDEF: 16)
 800b518:	21002100 	mrscs	r2, (UNDEF: 16)
 800b51c:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800b520:	00000000 	andeq	r0, r0, r0
 800b524:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800b528:	20002000 	andcs	r2, r0, r0
 800b52c:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800b530:	20002000 	andcs	r2, r0, r0
 800b534:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800b538:	00000000 	andeq	r0, r0, r0
 800b53c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800b540:	20002000 	andcs	r2, r0, r0
 800b544:	3c002000 	stccc	0, cr2, [r0], {-0}
 800b548:	20002000 	andcs	r2, r0, r0
 800b54c:	20002000 	andcs	r2, r0, r0
 800b550:	00000000 	andeq	r0, r0, r0
 800b554:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 800b558:	21001100 	mrscs	r1, (UNDEF: 16)
 800b55c:	27002000 	strcs	r2, [r0, -r0]
 800b560:	21002100 	mrscs	r2, (UNDEF: 16)
 800b564:	0e001100 	adfeqs	f1, f0, f0
 800b568:	00000000 	andeq	r0, r0, r0
 800b56c:	21000000 	mrscs	r0, (UNDEF: 0)
 800b570:	21002100 	mrscs	r2, (UNDEF: 16)
 800b574:	3f002100 	svccc	0x00002100
 800b578:	21002100 	mrscs	r2, (UNDEF: 16)
 800b57c:	21002100 	mrscs	r2, (UNDEF: 16)
 800b580:	00000000 	andeq	r0, r0, r0
 800b584:	20000000 	andcs	r0, r0, r0
 800b588:	20002000 	andcs	r2, r0, r0
 800b58c:	20002000 	andcs	r2, r0, r0
 800b590:	20002000 	andcs	r2, r0, r0
 800b594:	20002000 	andcs	r2, r0, r0
 800b598:	00000000 	andeq	r0, r0, r0
 800b59c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 800b5a0:	08000800 	stmdaeq	r0, {fp}
 800b5a4:	08000800 	stmdaeq	r0, {fp}
 800b5a8:	48000800 	stmdami	r0, {fp}
 800b5ac:	30004800 	andcc	r4, r0, r0, lsl #16
 800b5b0:	00000000 	andeq	r0, r0, r0
 800b5b4:	22000000 	andcs	r0, r0, #0
 800b5b8:	28002400 	stmdacs	r0, {sl, sp}
 800b5bc:	38002800 	stmdacc	r0, {fp, sp}
 800b5c0:	24002800 	strcs	r2, [r0], #-2048	; 0x800
 800b5c4:	22002400 	andcs	r2, r0, #0, 8
 800b5c8:	00000000 	andeq	r0, r0, r0
 800b5cc:	20000000 	andcs	r0, r0, r0
 800b5d0:	20002000 	andcs	r2, r0, r0
 800b5d4:	20002000 	andcs	r2, r0, r0
 800b5d8:	20002000 	andcs	r2, r0, r0
 800b5dc:	3e002000 	cdpcc	0, 0, cr2, cr0, cr0, {0}
 800b5e0:	00000000 	andeq	r0, r0, r0
 800b5e4:	20800000 	addcs	r0, r0, r0
 800b5e8:	31803180 	orrcc	r3, r0, r0, lsl #3
 800b5ec:	2a803180 	bcs	6017bf4 <_Min_Stack_Size+0x60177f4>
 800b5f0:	2a802a80 	bcs	6015ff8 <_Min_Stack_Size+0x6015bf8>
 800b5f4:	24802a80 	strcs	r2, [r0], #2688	; 0xa80
 800b5f8:	00000000 	andeq	r0, r0, r0
 800b5fc:	21000000 	mrscs	r0, (UNDEF: 0)
 800b600:	31003100 	mrscc	r3, (UNDEF: 16)
 800b604:	29002900 	stmdbcs	r0, {r8, fp, sp}
 800b608:	23002500 	movwcs	r2, #1280	; 0x500
 800b60c:	21002300 	mrscs	r2, LR_irq
 800b610:	00000000 	andeq	r0, r0, r0
 800b614:	0c000000 	stceq	0, cr0, [r0], {-0}
 800b618:	21001200 	mrscs	r1, R8_usr
 800b61c:	21002100 	mrscs	r2, (UNDEF: 16)
 800b620:	21002100 	mrscs	r2, (UNDEF: 16)
 800b624:	0c001200 	sfmeq	f1, 4, [r0], {-0}
 800b628:	00000000 	andeq	r0, r0, r0
 800b62c:	3c000000 	stccc	0, cr0, [r0], {-0}
 800b630:	22002200 	andcs	r2, r0, #0, 4
 800b634:	3c002200 	sfmcc	f2, 4, [r0], {-0}
 800b638:	20002000 	andcs	r2, r0, r0
 800b63c:	20002000 	andcs	r2, r0, r0
 800b640:	00000000 	andeq	r0, r0, r0
 800b644:	0c000000 	stceq	0, cr0, [r0], {-0}
 800b648:	21001200 	mrscs	r1, R8_usr
 800b64c:	21002100 	mrscs	r2, (UNDEF: 16)
 800b650:	21002100 	mrscs	r2, (UNDEF: 16)
 800b654:	0d001600 	stceq	6, cr1, [r0, #-0]
 800b658:	00000100 	andeq	r0, r0, r0, lsl #2
 800b65c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800b660:	21002100 	mrscs	r2, (UNDEF: 16)
 800b664:	3e002100 	adfccs	f2, f0, f0
 800b668:	22002400 	andcs	r2, r0, #0, 8
 800b66c:	20802100 	addcs	r2, r0, r0, lsl #2
 800b670:	00000000 	andeq	r0, r0, r0
 800b674:	1c000000 	stcne	0, cr0, [r0], {-0}
 800b678:	22002200 	andcs	r2, r0, #0, 4
 800b67c:	1c002000 	stcne	0, cr2, [r0], {-0}
 800b680:	22000200 	andcs	r0, r0, #0, 4
 800b684:	1c002200 	sfmne	f2, 4, [r0], {-0}
 800b688:	00000000 	andeq	r0, r0, r0
 800b68c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
 800b690:	08000800 	stmdaeq	r0, {fp}
 800b694:	08000800 	stmdaeq	r0, {fp}
 800b698:	08000800 	stmdaeq	r0, {fp}
 800b69c:	08000800 	stmdaeq	r0, {fp}
 800b6a0:	00000000 	andeq	r0, r0, r0
 800b6a4:	21000000 	mrscs	r0, (UNDEF: 0)
 800b6a8:	21002100 	mrscs	r2, (UNDEF: 16)
 800b6ac:	21002100 	mrscs	r2, (UNDEF: 16)
 800b6b0:	21002100 	mrscs	r2, (UNDEF: 16)
 800b6b4:	0c001200 	sfmeq	f1, 4, [r0], {-0}
 800b6b8:	00000000 	andeq	r0, r0, r0
 800b6bc:	41000000 	mrsmi	r0, (UNDEF: 0)
 800b6c0:	22004100 	andcs	r4, r0, #0, 2
 800b6c4:	22002200 	andcs	r2, r0, #0, 4
 800b6c8:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800b6cc:	08001400 	stmdaeq	r0, {sl, ip}
 800b6d0:	00000000 	andeq	r0, r0, r0
 800b6d4:	44400000 	strbmi	r0, [r0], #-0
 800b6d8:	2a404a40 	bcs	901dfe0 <_siccmram+0x10115d4>
 800b6dc:	2a802a80 	bcs	60160e4 <_Min_Stack_Size+0x6015ce4>
 800b6e0:	2a802a80 	bcs	60160e8 <_Min_Stack_Size+0x6015ce8>
 800b6e4:	11002a80 	smlabbne	r0, r0, sl, r2
 800b6e8:	00000000 	andeq	r0, r0, r0
 800b6ec:	41000000 	mrsmi	r0, (UNDEF: 0)
 800b6f0:	14002200 	strne	r2, [r0], #-512	; 0x200
 800b6f4:	08001400 	stmdaeq	r0, {sl, ip}
 800b6f8:	14001400 	strne	r1, [r0], #-1024	; 0x400
 800b6fc:	41002200 	mrsmi	r2, R8_usr
 800b700:	00000000 	andeq	r0, r0, r0
 800b704:	41000000 	mrsmi	r0, (UNDEF: 0)
 800b708:	22002200 	andcs	r2, r0, #0, 4
 800b70c:	08001400 	stmdaeq	r0, {sl, ip}
 800b710:	08000800 	stmdaeq	r0, {fp}
 800b714:	08000800 	stmdaeq	r0, {fp}
 800b718:	00000000 	andeq	r0, r0, r0
 800b71c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 800b720:	04000200 	streq	r0, [r0], #-512	; 0x200
 800b724:	10000800 	andne	r0, r0, r0, lsl #16
 800b728:	20001000 	andcs	r1, r0, r0
 800b72c:	7e004000 	cdpvc	0, 0, cr4, cr0, cr0, {0}
 800b730:	00000000 	andeq	r0, r0, r0
 800b734:	30000000 	andcc	r0, r0, r0
 800b738:	20002000 	andcs	r2, r0, r0
 800b73c:	20002000 	andcs	r2, r0, r0
 800b740:	20002000 	andcs	r2, r0, r0
 800b744:	20002000 	andcs	r2, r0, r0
 800b748:	20002000 	andcs	r2, r0, r0
 800b74c:	40000000 	andmi	r0, r0, r0
 800b750:	20004000 	andcs	r4, r0, r0
 800b754:	20002000 	andcs	r2, r0, r0
 800b758:	20002000 	andcs	r2, r0, r0
 800b75c:	10001000 	andne	r1, r0, r0
 800b760:	00000000 	andeq	r0, r0, r0
 800b764:	60000000 	andvs	r0, r0, r0
 800b768:	20002000 	andcs	r2, r0, r0
 800b76c:	20002000 	andcs	r2, r0, r0
 800b770:	20002000 	andcs	r2, r0, r0
 800b774:	20002000 	andcs	r2, r0, r0
 800b778:	20002000 	andcs	r2, r0, r0
 800b77c:	10000000 	andne	r0, r0, r0
 800b780:	28002800 	stmdacs	r0, {fp, sp}
 800b784:	44002800 	strmi	r2, [r0], #-2048	; 0x800
	...
 800b7a8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
 800b7ac:	20004000 	andcs	r4, r0, r0
	...
 800b7c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800b7cc:	04004400 	streq	r4, [r0], #-1024	; 0x400
 800b7d0:	44003c00 	strmi	r3, [r0], #-3072	; 0xc00
 800b7d4:	3c004400 	cfstrscc	mvf4, [r0], {-0}
 800b7d8:	00000000 	andeq	r0, r0, r0
 800b7dc:	40000000 	andmi	r0, r0, r0
 800b7e0:	58004000 	stmdapl	r0, {lr}
 800b7e4:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800b7e8:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b7ec:	58006400 	stmdapl	r0, {sl, sp, lr}
	...
 800b7f8:	30000000 	andcc	r0, r0, r0
 800b7fc:	40004800 	andmi	r4, r0, r0, lsl #16
 800b800:	40004000 	andmi	r4, r0, r0
 800b804:	30004800 	andcc	r4, r0, r0, lsl #16
 800b808:	00000000 	andeq	r0, r0, r0
 800b80c:	04000000 	streq	r0, [r0], #-0
 800b810:	34000400 	strcc	r0, [r0], #-1024	; 0x400
 800b814:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800b818:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b81c:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
	...
 800b828:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800b82c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b830:	40007c00 	andmi	r7, r0, r0, lsl #24
 800b834:	38004400 	stmdacc	r0, {sl, lr}
 800b838:	00000000 	andeq	r0, r0, r0
 800b83c:	60000000 	andvs	r0, r0, r0
 800b840:	e0004000 	and	r4, r0, r0
 800b844:	40004000 	andmi	r4, r0, r0
 800b848:	40004000 	andmi	r4, r0, r0
 800b84c:	40004000 	andmi	r4, r0, r0
	...
 800b858:	34000000 	strcc	r0, [r0], #-0
 800b85c:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800b860:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b864:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
 800b868:	44000400 	strmi	r0, [r0], #-1024	; 0x400
 800b86c:	40000000 	andmi	r0, r0, r0
 800b870:	58004000 	stmdapl	r0, {lr}
 800b874:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800b878:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b87c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b880:	00000000 	andeq	r0, r0, r0
 800b884:	40000000 	andmi	r0, r0, r0
 800b888:	40000000 	andmi	r0, r0, r0
 800b88c:	40004000 	andmi	r4, r0, r0
 800b890:	40004000 	andmi	r4, r0, r0
 800b894:	40004000 	andmi	r4, r0, r0
 800b898:	00000000 	andeq	r0, r0, r0
 800b89c:	40000000 	andmi	r0, r0, r0
 800b8a0:	40000000 	andmi	r0, r0, r0
 800b8a4:	40004000 	andmi	r4, r0, r0
 800b8a8:	40004000 	andmi	r4, r0, r0
 800b8ac:	40004000 	andmi	r4, r0, r0
 800b8b0:	40004000 	andmi	r4, r0, r0
 800b8b4:	40000000 	andmi	r0, r0, r0
 800b8b8:	48004000 	stmdami	r0, {lr}
 800b8bc:	60005000 	andvs	r5, r0, r0
 800b8c0:	50005000 	andpl	r5, r0, r0
 800b8c4:	48004800 	stmdami	r0, {fp, lr}
 800b8c8:	00000000 	andeq	r0, r0, r0
 800b8cc:	40000000 	andmi	r0, r0, r0
 800b8d0:	40004000 	andmi	r4, r0, r0
 800b8d4:	40004000 	andmi	r4, r0, r0
 800b8d8:	40004000 	andmi	r4, r0, r0
 800b8dc:	40004000 	andmi	r4, r0, r0
	...
 800b8e8:	52000000 	andpl	r0, r0, #0
 800b8ec:	49006d00 	stmdbmi	r0, {r8, sl, fp, sp, lr}
 800b8f0:	49004900 	stmdbmi	r0, {r8, fp, lr}
 800b8f4:	49004900 	stmdbmi	r0, {r8, fp, lr}
	...
 800b900:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 800b904:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800b908:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b90c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
	...
 800b918:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
 800b91c:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b920:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b924:	38004400 	stmdacc	r0, {sl, lr}
	...
 800b930:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 800b934:	44006400 	strmi	r6, [r0], #-1024	; 0x400
 800b938:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b93c:	58006400 	stmdapl	r0, {sl, sp, lr}
 800b940:	40004000 	andmi	r4, r0, r0
 800b944:	00000000 	andeq	r0, r0, r0
 800b948:	34000000 	strcc	r0, [r0], #-0
 800b94c:	44004c00 	strmi	r4, [r0], #-3072	; 0xc00
 800b950:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b954:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
 800b958:	04000400 	streq	r0, [r0], #-1024	; 0x400
 800b95c:	00000000 	andeq	r0, r0, r0
 800b960:	50000000 	andpl	r0, r0, r0
 800b964:	40006000 	andmi	r6, r0, r0
 800b968:	40004000 	andmi	r4, r0, r0
 800b96c:	40004000 	andmi	r4, r0, r0
	...
 800b978:	30000000 	andcc	r0, r0, r0
 800b97c:	40004800 	andmi	r4, r0, r0, lsl #16
 800b980:	08003000 	stmdaeq	r0, {ip, sp}
 800b984:	30004800 	andcc	r4, r0, r0, lsl #16
 800b988:	00000000 	andeq	r0, r0, r0
 800b98c:	40000000 	andmi	r0, r0, r0
 800b990:	e0004000 	and	r4, r0, r0
 800b994:	40004000 	andmi	r4, r0, r0
 800b998:	40004000 	andmi	r4, r0, r0
 800b99c:	60004000 	andvs	r4, r0, r0
	...
 800b9a8:	44000000 	strmi	r0, [r0], #-0
 800b9ac:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b9b0:	44004400 	strmi	r4, [r0], #-1024	; 0x400
 800b9b4:	34004c00 	strcc	r4, [r0], #-3072	; 0xc00
	...
 800b9c0:	44000000 	strmi	r0, [r0], #-0
 800b9c4:	28004400 	stmdacs	r0, {sl, lr}
 800b9c8:	28002800 	stmdacs	r0, {fp, sp}
 800b9cc:	10002800 	andne	r2, r0, r0, lsl #16
	...
 800b9d8:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
 800b9dc:	55004900 	strpl	r4, [r0, #-2304]	; 0x900
 800b9e0:	55005500 	strpl	r5, [r0, #-1280]	; 0x500
 800b9e4:	22005500 	andcs	r5, r0, #0, 10
	...
 800b9f0:	44000000 	strmi	r0, [r0], #-0
 800b9f4:	28002800 	stmdacs	r0, {fp, sp}
 800b9f8:	28001000 	stmdacs	r0, {ip}
 800b9fc:	44002800 	strmi	r2, [r0], #-2048	; 0x800
	...
 800ba08:	44000000 	strmi	r0, [r0], #-0
 800ba0c:	28004400 	stmdacs	r0, {sl, lr}
 800ba10:	28002800 	stmdacs	r0, {fp, sp}
 800ba14:	10001000 	andne	r1, r0, r0
 800ba18:	10001000 	andne	r1, r0, r0
 800ba1c:	00000000 	andeq	r0, r0, r0
 800ba20:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 800ba24:	10000800 	andne	r0, r0, r0, lsl #16
 800ba28:	20002000 	andcs	r2, r0, r0
 800ba2c:	78004000 	stmdavc	r0, {lr}
 800ba30:	00000000 	andeq	r0, r0, r0
 800ba34:	10000000 	andne	r0, r0, r0
 800ba38:	20002000 	andcs	r2, r0, r0
 800ba3c:	20002000 	andcs	r2, r0, r0
 800ba40:	20004000 	andcs	r4, r0, r0
 800ba44:	20002000 	andcs	r2, r0, r0
 800ba48:	20002000 	andcs	r2, r0, r0
 800ba4c:	20000000 	andcs	r0, r0, r0
 800ba50:	20002000 	andcs	r2, r0, r0
 800ba54:	20002000 	andcs	r2, r0, r0
 800ba58:	20002000 	andcs	r2, r0, r0
 800ba5c:	20002000 	andcs	r2, r0, r0
 800ba60:	20002000 	andcs	r2, r0, r0
 800ba64:	40000000 	andmi	r0, r0, r0
 800ba68:	20002000 	andcs	r2, r0, r0
 800ba6c:	20002000 	andcs	r2, r0, r0
 800ba70:	20001000 	andcs	r1, r0, r0
 800ba74:	20002000 	andcs	r2, r0, r0
 800ba78:	20002000 	andcs	r2, r0, r0
	...
 800ba84:	58007400 	stmdapl	r0, {sl, ip, sp, lr}
	...
 800ba98:	50007000 	andpl	r7, r0, r0
 800ba9c:	50005000 	andpl	r5, r0, r0
 800baa0:	50005000 	andpl	r5, r0, r0
 800baa4:	70005000 	andvc	r5, r0, r0
 800baa8:	00000000 	andeq	r0, r0, r0

0800baac <ASCII8x12_Table>:
	...
 800bac8:	00100000 	andseq	r0, r0, r0
 800bacc:	00100010 	andseq	r0, r0, r0, lsl r0
 800bad0:	00100010 	andseq	r0, r0, r0, lsl r0
 800bad4:	00000010 	andeq	r0, r0, r0, lsl r0
 800bad8:	00000010 	andeq	r0, r0, r0, lsl r0
 800badc:	00000000 	andeq	r0, r0, r0
 800bae0:	00280000 	eoreq	r0, r8, r0
 800bae4:	00280028 	eoreq	r0, r8, r8, lsr #32
	...
 800baf8:	00140000 	andseq	r0, r4, r0
 800bafc:	003e0014 	eorseq	r0, lr, r4, lsl r0
 800bb00:	00280014 	eoreq	r0, r8, r4, lsl r0
 800bb04:	0028007c 	eoreq	r0, r8, ip, ror r0
 800bb08:	00000028 	andeq	r0, r0, r8, lsr #32
 800bb0c:	00000000 	andeq	r0, r0, r0
 800bb10:	00380010 	eorseq	r0, r8, r0, lsl r0
 800bb14:	00500054 	subseq	r0, r0, r4, asr r0
 800bb18:	00140038 	andseq	r0, r4, r8, lsr r0
 800bb1c:	00540014 	subseq	r0, r4, r4, lsl r0
 800bb20:	00100038 	andseq	r0, r0, r8, lsr r0
 800bb24:	00000000 	andeq	r0, r0, r0
 800bb28:	00440000 	subeq	r0, r4, r0
 800bb2c:	00a800a8 	adceq	r0, r8, r8, lsr #1
 800bb30:	00140050 	andseq	r0, r4, r0, asr r0
 800bb34:	002a001a 	eoreq	r0, sl, sl, lsl r0
 800bb38:	00000024 	andeq	r0, r0, r4, lsr #32
 800bb3c:	00000000 	andeq	r0, r0, r0
 800bb40:	00200000 	eoreq	r0, r0, r0
 800bb44:	00500050 	subseq	r0, r0, r0, asr r0
 800bb48:	00e80020 	rsceq	r0, r8, r0, lsr #32
 800bb4c:	00980098 	umullseq	r0, r8, r8, r0
 800bb50:	00000060 	andeq	r0, r0, r0, rrx
 800bb54:	00000000 	andeq	r0, r0, r0
 800bb58:	00800000 	addeq	r0, r0, r0
 800bb5c:	00800080 	addeq	r0, r0, r0, lsl #1
	...
 800bb70:	00400000 	subeq	r0, r0, r0
 800bb74:	00800080 	addeq	r0, r0, r0, lsl #1
 800bb78:	00800080 	addeq	r0, r0, r0, lsl #1
 800bb7c:	00800080 	addeq	r0, r0, r0, lsl #1
 800bb80:	00800080 	addeq	r0, r0, r0, lsl #1
 800bb84:	00000000 	andeq	r0, r0, r0
 800bb88:	00800000 	addeq	r0, r0, r0
 800bb8c:	00400040 	subeq	r0, r0, r0, asr #32
 800bb90:	00400040 	subeq	r0, r0, r0, asr #32
 800bb94:	00400040 	subeq	r0, r0, r0, asr #32
 800bb98:	00400040 	subeq	r0, r0, r0, asr #32
 800bb9c:	00000000 	andeq	r0, r0, r0
 800bba0:	00400000 	subeq	r0, r0, r0
 800bba4:	004000e0 	subeq	r0, r0, r0, ror #1
 800bba8:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800bbbc:	00200000 	eoreq	r0, r0, r0
 800bbc0:	00f80020 	rscseq	r0, r8, r0, lsr #32
 800bbc4:	00200020 	eoreq	r0, r0, r0, lsr #32
	...
 800bbe0:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800bbf4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800bc10:	00000040 	andeq	r0, r0, r0, asr #32
 800bc14:	00000000 	andeq	r0, r0, r0
 800bc18:	00200000 	eoreq	r0, r0, r0
 800bc1c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bc20:	00400040 	subeq	r0, r0, r0, asr #32
 800bc24:	00800080 	addeq	r0, r0, r0, lsl #1
 800bc28:	00000080 	andeq	r0, r0, r0, lsl #1
 800bc2c:	00000000 	andeq	r0, r0, r0
 800bc30:	00600000 	rsbeq	r0, r0, r0
 800bc34:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bc38:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bc3c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bc40:	00000060 	andeq	r0, r0, r0, rrx
 800bc44:	00000000 	andeq	r0, r0, r0
 800bc48:	00200000 	eoreq	r0, r0, r0
 800bc4c:	00a00060 	adceq	r0, r0, r0, rrx
 800bc50:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bc54:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bc58:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc5c:	00000000 	andeq	r0, r0, r0
 800bc60:	00600000 	rsbeq	r0, r0, r0
 800bc64:	00100090 	mulseq	r0, r0, r0
 800bc68:	00200010 	eoreq	r0, r0, r0, lsl r0
 800bc6c:	00800040 	addeq	r0, r0, r0, asr #32
 800bc70:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800bc74:	00000000 	andeq	r0, r0, r0
 800bc78:	00600000 	rsbeq	r0, r0, r0
 800bc7c:	00100090 	mulseq	r0, r0, r0
 800bc80:	00100060 	andseq	r0, r0, r0, rrx
 800bc84:	00900010 	addseq	r0, r0, r0, lsl r0
 800bc88:	00000060 	andeq	r0, r0, r0, rrx
 800bc8c:	00000000 	andeq	r0, r0, r0
 800bc90:	00100000 	andseq	r0, r0, r0
 800bc94:	00500030 	subseq	r0, r0, r0, lsr r0
 800bc98:	00900050 	addseq	r0, r0, r0, asr r0
 800bc9c:	001000f8 	ldrsheq	r0, [r0], -r8
 800bca0:	00000010 	andeq	r0, r0, r0, lsl r0
 800bca4:	00000000 	andeq	r0, r0, r0
 800bca8:	00700000 	rsbseq	r0, r0, r0
 800bcac:	00800040 	addeq	r0, r0, r0, asr #32
 800bcb0:	001000e0 	andseq	r0, r0, r0, ror #1
 800bcb4:	00900010 	addseq	r0, r0, r0, lsl r0
 800bcb8:	00000060 	andeq	r0, r0, r0, rrx
 800bcbc:	00000000 	andeq	r0, r0, r0
 800bcc0:	00600000 	rsbeq	r0, r0, r0
 800bcc4:	00800090 	umulleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bcc8:	00d000a0 	sbcseq	r0, r0, r0, lsr #1
 800bccc:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bcd0:	00000060 	andeq	r0, r0, r0, rrx
 800bcd4:	00000000 	andeq	r0, r0, r0
 800bcd8:	00f00000 	rscseq	r0, r0, r0
 800bcdc:	00200010 	eoreq	r0, r0, r0, lsl r0
 800bce0:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bce4:	00400040 	subeq	r0, r0, r0, asr #32
 800bce8:	00000040 	andeq	r0, r0, r0, asr #32
 800bcec:	00000000 	andeq	r0, r0, r0
 800bcf0:	00600000 	rsbeq	r0, r0, r0
 800bcf4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bcf8:	00900060 	addseq	r0, r0, r0, rrx
 800bcfc:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bd00:	00000060 	andeq	r0, r0, r0, rrx
 800bd04:	00000000 	andeq	r0, r0, r0
 800bd08:	00600000 	rsbeq	r0, r0, r0
 800bd0c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bd10:	005000b0 	ldrheq	r0, [r0], #-0
 800bd14:	00900010 	addseq	r0, r0, r0, lsl r0
 800bd18:	00000060 	andeq	r0, r0, r0, rrx
	...
 800bd24:	00400000 	subeq	r0, r0, r0
	...
 800bd30:	00000040 	andeq	r0, r0, r0, asr #32
	...
 800bd3c:	00400000 	subeq	r0, r0, r0
	...
 800bd48:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800bd54:	00100000 	andseq	r0, r0, r0
 800bd58:	00800060 	addeq	r0, r0, r0, rrx
 800bd5c:	00100060 	andseq	r0, r0, r0, rrx
	...
 800bd70:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800bd74:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 800bd84:	00800000 	addeq	r0, r0, r0
 800bd88:	00100060 	andseq	r0, r0, r0, rrx
 800bd8c:	00800060 	addeq	r0, r0, r0, rrx
	...
 800bd98:	00600000 	rsbeq	r0, r0, r0
 800bd9c:	00100090 	mulseq	r0, r0, r0
 800bda0:	00400020 	subeq	r0, r0, r0, lsr #32
 800bda4:	00000040 	andeq	r0, r0, r0, asr #32
 800bda8:	00000040 	andeq	r0, r0, r0, asr #32
 800bdac:	00000000 	andeq	r0, r0, r0
 800bdb0:	001c0000 	andseq	r0, ip, r0
 800bdb4:	005b0022 	subseq	r0, fp, r2, lsr #32
 800bdb8:	00a500a5 	adceq	r0, r5, r5, lsr #1
 800bdbc:	00a500a5 	adceq	r0, r5, r5, lsr #1
 800bdc0:	0041009e 	umaaleq	r0, r1, lr, r0
 800bdc4:	00000000 	andeq	r0, r0, r0
 800bdc8:	00200000 	eoreq	r0, r0, r0
 800bdcc:	00500050 	subseq	r0, r0, r0, asr r0
 800bdd0:	00500050 	subseq	r0, r0, r0, asr r0
 800bdd4:	00880070 	addeq	r0, r8, r0, ror r0
 800bdd8:	00000088 	andeq	r0, r0, r8, lsl #1
 800bddc:	00000000 	andeq	r0, r0, r0
 800bde0:	00f00000 	rscseq	r0, r0, r0
 800bde4:	00880088 	addeq	r0, r8, r8, lsl #1
 800bde8:	008800f0 	strdeq	r0, [r8], r0	; <UNPREDICTABLE>
 800bdec:	00880088 	addeq	r0, r8, r8, lsl #1
 800bdf0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800bdf4:	00000000 	andeq	r0, r0, r0
 800bdf8:	00380000 	eorseq	r0, r8, r0
 800bdfc:	00840044 	addeq	r0, r4, r4, asr #32
 800be00:	00800080 	addeq	r0, r0, r0, lsl #1
 800be04:	00440084 	subeq	r0, r4, r4, lsl #1
 800be08:	00000038 	andeq	r0, r0, r8, lsr r0
 800be0c:	00000000 	andeq	r0, r0, r0
 800be10:	00e00000 	rsceq	r0, r0, r0
 800be14:	00880090 	umulleq	r0, r8, r0, r0
 800be18:	00880088 	addeq	r0, r8, r8, lsl #1
 800be1c:	00900088 	addseq	r0, r0, r8, lsl #1
 800be20:	000000e0 	andeq	r0, r0, r0, ror #1
 800be24:	00000000 	andeq	r0, r0, r0
 800be28:	00f80000 	rscseq	r0, r8, r0
 800be2c:	00800080 	addeq	r0, r0, r0, lsl #1
 800be30:	008000f8 	strdeq	r0, [r0], r8
 800be34:	00800080 	addeq	r0, r0, r0, lsl #1
 800be38:	000000f8 	strdeq	r0, [r0], -r8
 800be3c:	00000000 	andeq	r0, r0, r0
 800be40:	00780000 	rsbseq	r0, r8, r0
 800be44:	00400040 	subeq	r0, r0, r0, asr #32
 800be48:	00400070 	subeq	r0, r0, r0, ror r0
 800be4c:	00400040 	subeq	r0, r0, r0, asr #32
 800be50:	00000040 	andeq	r0, r0, r0, asr #32
 800be54:	00000000 	andeq	r0, r0, r0
 800be58:	00380000 	eorseq	r0, r8, r0
 800be5c:	00840044 	addeq	r0, r4, r4, asr #32
 800be60:	009c0080 	addseq	r0, ip, r0, lsl #1
 800be64:	00440084 	subeq	r0, r4, r4, lsl #1
 800be68:	00000038 	andeq	r0, r0, r8, lsr r0
 800be6c:	00000000 	andeq	r0, r0, r0
 800be70:	00880000 	addeq	r0, r8, r0
 800be74:	00880088 	addeq	r0, r8, r8, lsl #1
 800be78:	008800f8 	strdeq	r0, [r8], r8
 800be7c:	00880088 	addeq	r0, r8, r8, lsl #1
 800be80:	00000088 	andeq	r0, r0, r8, lsl #1
 800be84:	00000000 	andeq	r0, r0, r0
 800be88:	00800000 	addeq	r0, r0, r0
 800be8c:	00800080 	addeq	r0, r0, r0, lsl #1
 800be90:	00800080 	addeq	r0, r0, r0, lsl #1
 800be94:	00800080 	addeq	r0, r0, r0, lsl #1
 800be98:	00000080 	andeq	r0, r0, r0, lsl #1
 800be9c:	00000000 	andeq	r0, r0, r0
 800bea0:	00100000 	andseq	r0, r0, r0
 800bea4:	00100010 	andseq	r0, r0, r0, lsl r0
 800bea8:	00100010 	andseq	r0, r0, r0, lsl r0
 800beac:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800beb0:	00000060 	andeq	r0, r0, r0, rrx
 800beb4:	00000000 	andeq	r0, r0, r0
 800beb8:	00880000 	addeq	r0, r8, r0
 800bebc:	00a00090 	umlaleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bec0:	00a000e0 	adceq	r0, r0, r0, ror #1
 800bec4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800bec8:	00000088 	andeq	r0, r0, r8, lsl #1
 800becc:	00000000 	andeq	r0, r0, r0
 800bed0:	00800000 	addeq	r0, r0, r0
 800bed4:	00800080 	addeq	r0, r0, r0, lsl #1
 800bed8:	00800080 	addeq	r0, r0, r0, lsl #1
 800bedc:	00800080 	addeq	r0, r0, r0, lsl #1
 800bee0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800bee4:	00000000 	andeq	r0, r0, r0
 800bee8:	00820000 	addeq	r0, r2, r0
 800beec:	00c600c6 	sbceq	r0, r6, r6, asr #1
 800bef0:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800bef4:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800bef8:	00000092 	muleq	r0, r2, r0
 800befc:	00000000 	andeq	r0, r0, r0
 800bf00:	00840000 	addeq	r0, r4, r0
 800bf04:	00a400c4 	adceq	r0, r4, r4, asr #1
 800bf08:	009400a4 	addseq	r0, r4, r4, lsr #1
 800bf0c:	008c0094 	umulleq	r0, ip, r4, r0
 800bf10:	00000084 	andeq	r0, r0, r4, lsl #1
 800bf14:	00000000 	andeq	r0, r0, r0
 800bf18:	00300000 	eorseq	r0, r0, r0
 800bf1c:	00840048 	addeq	r0, r4, r8, asr #32
 800bf20:	00840084 	addeq	r0, r4, r4, lsl #1
 800bf24:	00480084 	subeq	r0, r8, r4, lsl #1
 800bf28:	00000030 	andeq	r0, r0, r0, lsr r0
 800bf2c:	00000000 	andeq	r0, r0, r0
 800bf30:	00f00000 	rscseq	r0, r0, r0
 800bf34:	00880088 	addeq	r0, r8, r8, lsl #1
 800bf38:	00f00088 	rscseq	r0, r0, r8, lsl #1
 800bf3c:	00800080 	addeq	r0, r0, r0, lsl #1
 800bf40:	00000080 	andeq	r0, r0, r0, lsl #1
 800bf44:	00000000 	andeq	r0, r0, r0
 800bf48:	00300000 	eorseq	r0, r0, r0
 800bf4c:	00840048 	addeq	r0, r4, r8, asr #32
 800bf50:	00840084 	addeq	r0, r4, r4, lsl #1
 800bf54:	00580084 	subseq	r0, r8, r4, lsl #1
 800bf58:	00040034 	andeq	r0, r4, r4, lsr r0
 800bf5c:	00000000 	andeq	r0, r0, r0
 800bf60:	00780000 	rsbseq	r0, r8, r0
 800bf64:	00440044 	subeq	r0, r4, r4, asr #32
 800bf68:	00500078 	subseq	r0, r0, r8, ror r0
 800bf6c:	00440048 	subeq	r0, r4, r8, asr #32
 800bf70:	00000042 	andeq	r0, r0, r2, asr #32
 800bf74:	00000000 	andeq	r0, r0, r0
 800bf78:	00700000 	rsbseq	r0, r0, r0
 800bf7c:	00800088 	addeq	r0, r0, r8, lsl #1
 800bf80:	00080070 	andeq	r0, r8, r0, ror r0
 800bf84:	00880088 	addeq	r0, r8, r8, lsl #1
 800bf88:	00000070 	andeq	r0, r0, r0, ror r0
 800bf8c:	00000000 	andeq	r0, r0, r0
 800bf90:	00f80000 	rscseq	r0, r8, r0
 800bf94:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bf98:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bf9c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800bfa0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bfa4:	00000000 	andeq	r0, r0, r0
 800bfa8:	00840000 	addeq	r0, r4, r0
 800bfac:	00840084 	addeq	r0, r4, r4, lsl #1
 800bfb0:	00840084 	addeq	r0, r4, r4, lsl #1
 800bfb4:	00480084 	subeq	r0, r8, r4, lsl #1
 800bfb8:	00000030 	andeq	r0, r0, r0, lsr r0
 800bfbc:	00000000 	andeq	r0, r0, r0
 800bfc0:	00880000 	addeq	r0, r8, r0
 800bfc4:	00500088 	subseq	r0, r0, r8, lsl #1
 800bfc8:	00500050 	subseq	r0, r0, r0, asr r0
 800bfcc:	00500050 	subseq	r0, r0, r0, asr r0
 800bfd0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bfd4:	00000000 	andeq	r0, r0, r0
 800bfd8:	00920000 	addseq	r0, r2, r0
 800bfdc:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800bfe0:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800bfe4:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800bfe8:	00000044 	andeq	r0, r0, r4, asr #32
 800bfec:	00000000 	andeq	r0, r0, r0
 800bff0:	00840000 	addeq	r0, r4, r0
 800bff4:	00480048 	subeq	r0, r8, r8, asr #32
 800bff8:	00300030 	eorseq	r0, r0, r0, lsr r0
 800bffc:	00480048 	subeq	r0, r8, r8, asr #32
 800c000:	00000084 	andeq	r0, r0, r4, lsl #1
 800c004:	00000000 	andeq	r0, r0, r0
 800c008:	00880000 	addeq	r0, r8, r0
 800c00c:	00500050 	subseq	r0, r0, r0, asr r0
 800c010:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c014:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c018:	00000020 	andeq	r0, r0, r0, lsr #32
 800c01c:	00000000 	andeq	r0, r0, r0
 800c020:	00f80000 	rscseq	r0, r8, r0
 800c024:	00100008 	andseq	r0, r0, r8
 800c028:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c02c:	00800040 	addeq	r0, r0, r0, asr #32
 800c030:	000000f8 	strdeq	r0, [r0], -r8
 800c034:	00000000 	andeq	r0, r0, r0
 800c038:	00c00000 	sbceq	r0, r0, r0
 800c03c:	00800080 	addeq	r0, r0, r0, lsl #1
 800c040:	00800080 	addeq	r0, r0, r0, lsl #1
 800c044:	00800080 	addeq	r0, r0, r0, lsl #1
 800c048:	00800080 	addeq	r0, r0, r0, lsl #1
 800c04c:	00000000 	andeq	r0, r0, r0
 800c050:	00800000 	addeq	r0, r0, r0
 800c054:	00400080 	subeq	r0, r0, r0, lsl #1
 800c058:	00400040 	subeq	r0, r0, r0, asr #32
 800c05c:	00200040 	eoreq	r0, r0, r0, asr #32
 800c060:	00000020 	andeq	r0, r0, r0, lsr #32
 800c064:	00000000 	andeq	r0, r0, r0
 800c068:	00c00000 	sbceq	r0, r0, r0
 800c06c:	00400040 	subeq	r0, r0, r0, asr #32
 800c070:	00400040 	subeq	r0, r0, r0, asr #32
 800c074:	00400040 	subeq	r0, r0, r0, asr #32
 800c078:	00400040 	subeq	r0, r0, r0, asr #32
 800c07c:	00000000 	andeq	r0, r0, r0
 800c080:	00400000 	subeq	r0, r0, r0
 800c084:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800c088:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800c0a8:	00f80000 	rscseq	r0, r8, r0
 800c0ac:	00000000 	andeq	r0, r0, r0
 800c0b0:	00800000 	addeq	r0, r0, r0
 800c0b4:	00000040 	andeq	r0, r0, r0, asr #32
	...
 800c0cc:	00e00000 	rsceq	r0, r0, r0
 800c0d0:	00700010 	rsbseq	r0, r0, r0, lsl r0
 800c0d4:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c0d8:	00000070 	andeq	r0, r0, r0, ror r0
 800c0dc:	00000000 	andeq	r0, r0, r0
 800c0e0:	00800000 	addeq	r0, r0, r0
 800c0e4:	00a00080 	adceq	r0, r0, r0, lsl #1
 800c0e8:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800c0ec:	00d00090 	smullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c0f0:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800c0fc:	00600000 	rsbeq	r0, r0, r0
 800c100:	00800090 	umulleq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c104:	00900080 	addseq	r0, r0, r0, lsl #1
 800c108:	00000060 	andeq	r0, r0, r0, rrx
 800c10c:	00000000 	andeq	r0, r0, r0
 800c110:	00100000 	andseq	r0, r0, r0
 800c114:	00500010 	subseq	r0, r0, r0, lsl r0
 800c118:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800c11c:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c120:	00000050 	andeq	r0, r0, r0, asr r0
	...
 800c12c:	00600000 	rsbeq	r0, r0, r0
 800c130:	00f00090 	smlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c134:	00900080 	addseq	r0, r0, r0, lsl #1
 800c138:	00000060 	andeq	r0, r0, r0, rrx
 800c13c:	00000000 	andeq	r0, r0, r0
 800c140:	00c00000 	sbceq	r0, r0, r0
 800c144:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800c148:	00800080 	addeq	r0, r0, r0, lsl #1
 800c14c:	00800080 	addeq	r0, r0, r0, lsl #1
 800c150:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800c15c:	00500000 	subseq	r0, r0, r0
 800c160:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800c164:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c168:	00100050 	andseq	r0, r0, r0, asr r0
 800c16c:	00000000 	andeq	r0, r0, r0
 800c170:	00800000 	addeq	r0, r0, r0
 800c174:	00a00080 	adceq	r0, r0, r0, lsl #1
 800c178:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800c17c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c180:	00000090 	muleq	r0, r0, r0
 800c184:	00000000 	andeq	r0, r0, r0
 800c188:	00800000 	addeq	r0, r0, r0
 800c18c:	00800000 	addeq	r0, r0, r0
 800c190:	00800080 	addeq	r0, r0, r0, lsl #1
 800c194:	00800080 	addeq	r0, r0, r0, lsl #1
 800c198:	00000080 	andeq	r0, r0, r0, lsl #1
 800c19c:	00000000 	andeq	r0, r0, r0
 800c1a0:	00800000 	addeq	r0, r0, r0
 800c1a4:	00800000 	addeq	r0, r0, r0
 800c1a8:	00800080 	addeq	r0, r0, r0, lsl #1
 800c1ac:	00800080 	addeq	r0, r0, r0, lsl #1
 800c1b0:	00800080 	addeq	r0, r0, r0, lsl #1
 800c1b4:	00000000 	andeq	r0, r0, r0
 800c1b8:	00800000 	addeq	r0, r0, r0
 800c1bc:	00900080 	addseq	r0, r0, r0, lsl #1
 800c1c0:	00c000a0 	sbceq	r0, r0, r0, lsr #1
 800c1c4:	009000a0 	addseq	r0, r0, r0, lsr #1
 800c1c8:	00000090 	muleq	r0, r0, r0
 800c1cc:	00000000 	andeq	r0, r0, r0
 800c1d0:	00800000 	addeq	r0, r0, r0
 800c1d4:	00800080 	addeq	r0, r0, r0, lsl #1
 800c1d8:	00800080 	addeq	r0, r0, r0, lsl #1
 800c1dc:	00800080 	addeq	r0, r0, r0, lsl #1
 800c1e0:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800c1ec:	00a60000 	adceq	r0, r6, r0
 800c1f0:	009200da 	ldrsbeq	r0, [r2], sl
 800c1f4:	00920092 	umullseq	r0, r2, r2, r0
 800c1f8:	00000092 	muleq	r0, r2, r0
	...
 800c204:	00a00000 	adceq	r0, r0, r0
 800c208:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800c20c:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c210:	00000090 	muleq	r0, r0, r0
	...
 800c21c:	00600000 	rsbeq	r0, r0, r0
 800c220:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c224:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c228:	00000060 	andeq	r0, r0, r0, rrx
	...
 800c234:	00a00000 	adceq	r0, r0, r0
 800c238:	009000d0 	ldrsbeq	r0, [r0], r0	; <UNPREDICTABLE>
 800c23c:	00d00090 	smullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c240:	008000a0 	addeq	r0, r0, r0, lsr #1
	...
 800c24c:	00500000 	subseq	r0, r0, r0
 800c250:	009000b0 	ldrheq	r0, [r0], r0	; <UNPREDICTABLE>
 800c254:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c258:	00100050 	andseq	r0, r0, r0, asr r0
	...
 800c264:	00a00000 	adceq	r0, r0, r0
 800c268:	008000c0 	addeq	r0, r0, r0, asr #1
 800c26c:	00800080 	addeq	r0, r0, r0, lsl #1
 800c270:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 800c27c:	00e00000 	rsceq	r0, r0, r0
 800c280:	00400090 	umaaleq	r0, r0, r0, r0
 800c284:	00900020 	addseq	r0, r0, r0, lsr #32
 800c288:	00000060 	andeq	r0, r0, r0, rrx
 800c28c:	00000000 	andeq	r0, r0, r0
 800c290:	00800000 	addeq	r0, r0, r0
 800c294:	00c00080 	sbceq	r0, r0, r0, lsl #1
 800c298:	00800080 	addeq	r0, r0, r0, lsl #1
 800c29c:	00800080 	addeq	r0, r0, r0, lsl #1
 800c2a0:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 800c2ac:	00900000 	addseq	r0, r0, r0
 800c2b0:	00900090 	umullseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c2b4:	00b00090 	umlalseq	r0, r0, r0, r0	; <UNPREDICTABLE>
 800c2b8:	00000050 	andeq	r0, r0, r0, asr r0
	...
 800c2c4:	00880000 	addeq	r0, r8, r0
 800c2c8:	00500088 	subseq	r0, r0, r8, lsl #1
 800c2cc:	00500050 	subseq	r0, r0, r0, asr r0
 800c2d0:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 800c2dc:	00920000 	addseq	r0, r2, r0
 800c2e0:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800c2e4:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800c2e8:	00000044 	andeq	r0, r0, r4, asr #32
	...
 800c2f4:	00880000 	addeq	r0, r8, r0
 800c2f8:	00200050 	eoreq	r0, r0, r0, asr r0
 800c2fc:	00500020 	subseq	r0, r0, r0, lsr #32
 800c300:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 800c30c:	00880000 	addeq	r0, r8, r0
 800c310:	00500050 	subseq	r0, r0, r0, asr r0
 800c314:	00200050 	eoreq	r0, r0, r0, asr r0
 800c318:	00200020 	eoreq	r0, r0, r0, lsr #32
	...
 800c324:	00f00000 	rscseq	r0, r0, r0
 800c328:	00200010 	eoreq	r0, r0, r0, lsl r0
 800c32c:	00800040 	addeq	r0, r0, r0, asr #32
 800c330:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800c334:	00000000 	andeq	r0, r0, r0
 800c338:	00c00000 	sbceq	r0, r0, r0
 800c33c:	00800080 	addeq	r0, r0, r0, lsl #1
 800c340:	00000080 	andeq	r0, r0, r0, lsl #1
 800c344:	00800080 	addeq	r0, r0, r0, lsl #1
 800c348:	00800080 	addeq	r0, r0, r0, lsl #1
 800c34c:	00000000 	andeq	r0, r0, r0
 800c350:	00800000 	addeq	r0, r0, r0
 800c354:	00800080 	addeq	r0, r0, r0, lsl #1
 800c358:	00800080 	addeq	r0, r0, r0, lsl #1
 800c35c:	00800080 	addeq	r0, r0, r0, lsl #1
 800c360:	00800080 	addeq	r0, r0, r0, lsl #1
 800c364:	00000000 	andeq	r0, r0, r0
 800c368:	00c00000 	sbceq	r0, r0, r0
 800c36c:	00400040 	subeq	r0, r0, r0, asr #32
 800c370:	00200040 	eoreq	r0, r0, r0, asr #32
 800c374:	00400040 	subeq	r0, r0, r0, asr #32
 800c378:	00400040 	subeq	r0, r0, r0, asr #32
	...
 800c388:	00b000e8 	adcseq	r0, r0, r8, ror #1
	...
 800c39c:	00a000e0 	adceq	r0, r0, r0, ror #1
 800c3a0:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800c3a4:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800c3a8:	000000e0 	andeq	r0, r0, r0, ror #1

0800c3ac <ASCII8x8_Table>:
	...
 800c3bc:	00400040 	subeq	r0, r0, r0, asr #32
 800c3c0:	00400040 	subeq	r0, r0, r0, asr #32
 800c3c4:	00400040 	subeq	r0, r0, r0, asr #32
 800c3c8:	00400000 	subeq	r0, r0, r0
 800c3cc:	00a000a0 	adceq	r0, r0, r0, lsr #1
 800c3d0:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
 800c3dc:	00240000 	eoreq	r0, r4, r0
 800c3e0:	00fe0024 	rscseq	r0, lr, r4, lsr #32
 800c3e4:	00fc0048 	rscseq	r0, ip, r8, asr #32
 800c3e8:	00480048 	subeq	r0, r8, r8, asr #32
 800c3ec:	00540038 	subseq	r0, r4, r8, lsr r0
 800c3f0:	00380050 	eorseq	r0, r8, r0, asr r0
 800c3f4:	00140014 	andseq	r0, r4, r4, lsl r0
 800c3f8:	00380054 	eorseq	r0, r8, r4, asr r0
 800c3fc:	00a80044 	adceq	r0, r8, r4, asr #32
 800c400:	005000a8 	subseq	r0, r0, r8, lsr #1
 800c404:	001a0014 	andseq	r0, sl, r4, lsl r0
 800c408:	0024002a 	eoreq	r0, r4, sl, lsr #32
 800c40c:	00280010 	eoreq	r0, r8, r0, lsl r0
 800c410:	00100028 	andseq	r0, r0, r8, lsr #32
 800c414:	004c0074 	subeq	r0, ip, r4, ror r0
 800c418:	0030004c 	eorseq	r0, r0, ip, asr #32
 800c41c:	00100010 	andseq	r0, r0, r0, lsl r0
 800c420:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800c42c:	00100008 	andseq	r0, r0, r8
 800c430:	00100010 	andseq	r0, r0, r0, lsl r0
 800c434:	00100010 	andseq	r0, r0, r0, lsl r0
 800c438:	00080010 	andeq	r0, r8, r0, lsl r0
 800c43c:	00080010 	andeq	r0, r8, r0, lsl r0
 800c440:	00080008 	andeq	r0, r8, r8
 800c444:	00080008 	andeq	r0, r8, r8
 800c448:	00100008 	andseq	r0, r0, r8
 800c44c:	00000000 	andeq	r0, r0, r0
 800c450:	00180024 	andseq	r0, r8, r4, lsr #32
 800c454:	0018003c 	andseq	r0, r8, ip, lsr r0
 800c458:	00000024 	andeq	r0, r0, r4, lsr #32
 800c45c:	00000000 	andeq	r0, r0, r0
 800c460:	00100010 	andseq	r0, r0, r0, lsl r0
 800c464:	0010007c 	andseq	r0, r0, ip, ror r0
 800c468:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800c474:	00080000 	andeq	r0, r8, r0
 800c478:	00100008 	andseq	r0, r0, r8
	...
 800c484:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
 800c498:	00180018 	andseq	r0, r8, r8, lsl r0
 800c49c:	00080008 	andeq	r0, r8, r8
 800c4a0:	00100008 	andseq	r0, r0, r8
 800c4a4:	00200010 	eoreq	r0, r0, r0, lsl r0
 800c4a8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c4ac:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c4b0:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c4b4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c4b8:	00180024 	andseq	r0, r8, r4, lsr #32
 800c4bc:	00180008 	andseq	r0, r8, r8
 800c4c0:	00080028 	andeq	r0, r8, r8, lsr #32
 800c4c4:	00080008 	andeq	r0, r8, r8
 800c4c8:	00080008 	andeq	r0, r8, r8
 800c4cc:	00440038 	subeq	r0, r4, r8, lsr r0
 800c4d0:	00040000 	andeq	r0, r4, r0
 800c4d4:	00100008 	andseq	r0, r0, r8
 800c4d8:	007c0020 	rsbseq	r0, ip, r0, lsr #32
 800c4dc:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c4e0:	00180004 	andseq	r0, r8, r4
 800c4e4:	00040004 	andeq	r0, r4, r4
 800c4e8:	00180024 	andseq	r0, r8, r4, lsr #32
 800c4ec:	000c0004 	andeq	r0, ip, r4
 800c4f0:	00240014 	eoreq	r0, r4, r4, lsl r0
 800c4f4:	007e0044 	rsbseq	r0, lr, r4, asr #32
 800c4f8:	00040004 	andeq	r0, r4, r4
 800c4fc:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800c500:	00380020 	eorseq	r0, r8, r0, lsr #32
 800c504:	00040004 	andeq	r0, r4, r4
 800c508:	00180024 	andseq	r0, r8, r4, lsr #32
 800c50c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c510:	00380020 	eorseq	r0, r8, r0, lsr #32
 800c514:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c518:	00180024 	andseq	r0, r8, r4, lsr #32
 800c51c:	0004003c 	andeq	r0, r4, ip, lsr r0
 800c520:	00080008 	andeq	r0, r8, r8
 800c524:	00100008 	andseq	r0, r0, r8
 800c528:	00100010 	andseq	r0, r0, r0, lsl r0
 800c52c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c530:	00180024 	andseq	r0, r8, r4, lsr #32
 800c534:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c538:	00180024 	andseq	r0, r8, r4, lsr #32
 800c53c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c540:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c544:	0004001c 	andeq	r0, r4, ip, lsl r0
 800c548:	00180024 	andseq	r0, r8, r4, lsr #32
 800c54c:	00000000 	andeq	r0, r0, r0
 800c550:	00000010 	andeq	r0, r0, r0, lsl r0
 800c554:	00100000 	andseq	r0, r0, r0
	...
 800c560:	00000008 	andeq	r0, r0, r8
 800c564:	00080000 	andeq	r0, r8, r0
 800c568:	00000010 	andeq	r0, r0, r0, lsl r0
 800c56c:	00000000 	andeq	r0, r0, r0
 800c570:	00180004 	andseq	r0, r8, r4
 800c574:	00180020 	andseq	r0, r8, r0, lsr #32
 800c578:	00000004 	andeq	r0, r0, r4
 800c57c:	00000000 	andeq	r0, r0, r0
 800c580:	003c0000 	eorseq	r0, ip, r0
 800c584:	003c0000 	eorseq	r0, ip, r0
	...
 800c590:	00180020 	andseq	r0, r8, r0, lsr #32
 800c594:	00180004 	andseq	r0, r8, r4
 800c598:	00000020 	andeq	r0, r0, r0, lsr #32
 800c59c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c5a0:	00080004 	andeq	r0, r8, r4
 800c5a4:	00100010 	andseq	r0, r0, r0, lsl r0
 800c5a8:	00100000 	andseq	r0, r0, r0
 800c5ac:	0042003c 	subeq	r0, r2, ip, lsr r0
 800c5b0:	00a50099 	umlaleq	r0, r5, r9, r0
 800c5b4:	009d00a5 	addseq	r0, sp, r5, lsr #1
 800c5b8:	00380042 	eorseq	r0, r8, r2, asr #32
 800c5bc:	00440038 	subeq	r0, r4, r8, lsr r0
 800c5c0:	00440044 	subeq	r0, r4, r4, asr #32
 800c5c4:	0044007c 	subeq	r0, r4, ip, ror r0
 800c5c8:	00440044 	subeq	r0, r4, r4, asr #32
 800c5cc:	00440078 	subeq	r0, r4, r8, ror r0
 800c5d0:	00780044 	rsbseq	r0, r8, r4, asr #32
 800c5d4:	00440044 	subeq	r0, r4, r4, asr #32
 800c5d8:	00780044 	rsbseq	r0, r8, r4, asr #32
 800c5dc:	0022001c 	eoreq	r0, r2, ip, lsl r0
 800c5e0:	00400042 	subeq	r0, r0, r2, asr #32
 800c5e4:	00420040 	subeq	r0, r2, r0, asr #32
 800c5e8:	001c0022 	andseq	r0, ip, r2, lsr #32
 800c5ec:	00480070 	subeq	r0, r8, r0, ror r0
 800c5f0:	00440044 	subeq	r0, r4, r4, asr #32
 800c5f4:	00440044 	subeq	r0, r4, r4, asr #32
 800c5f8:	00700048 	rsbseq	r0, r0, r8, asr #32
 800c5fc:	0040007c 	subeq	r0, r0, ip, ror r0
 800c600:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800c604:	00400040 	subeq	r0, r0, r0, asr #32
 800c608:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800c60c:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800c610:	00380020 	eorseq	r0, r8, r0, lsr #32
 800c614:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c618:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c61c:	0022001c 	eoreq	r0, r2, ip, lsl r0
 800c620:	00400042 	subeq	r0, r0, r2, asr #32
 800c624:	0042004e 	subeq	r0, r2, lr, asr #32
 800c628:	001c0022 	andseq	r0, ip, r2, lsr #32
 800c62c:	00440044 	subeq	r0, r4, r4, asr #32
 800c630:	007c0044 	rsbseq	r0, ip, r4, asr #32
 800c634:	00440044 	subeq	r0, r4, r4, asr #32
 800c638:	00440044 	subeq	r0, r4, r4, asr #32
 800c63c:	00100010 	andseq	r0, r0, r0, lsl r0
 800c640:	00100010 	andseq	r0, r0, r0, lsl r0
 800c644:	00100010 	andseq	r0, r0, r0, lsl r0
 800c648:	00100010 	andseq	r0, r0, r0, lsl r0
 800c64c:	00040004 	andeq	r0, r4, r4
 800c650:	00040004 	andeq	r0, r4, r4
 800c654:	00240004 	eoreq	r0, r4, r4
 800c658:	00180024 	andseq	r0, r8, r4, lsr #32
 800c65c:	00480044 	subeq	r0, r8, r4, asr #32
 800c660:	00700050 	rsbseq	r0, r0, r0, asr r0
 800c664:	00480050 	subeq	r0, r8, r0, asr r0
 800c668:	00440048 	subeq	r0, r4, r8, asr #32
 800c66c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c670:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c674:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c678:	003c0020 	eorseq	r0, ip, r0, lsr #32
 800c67c:	00c60082 	sbceq	r0, r6, r2, lsl #1
 800c680:	00aa00c6 	adceq	r0, sl, r6, asr #1
 800c684:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800c688:	009200aa 	addseq	r0, r2, sl, lsr #1
 800c68c:	00620042 	rsbeq	r0, r2, r2, asr #32
 800c690:	00520052 	subseq	r0, r2, r2, asr r0
 800c694:	004a004a 	subeq	r0, sl, sl, asr #32
 800c698:	00420046 	subeq	r0, r2, r6, asr #32
 800c69c:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c6a0:	00420042 	subeq	r0, r2, r2, asr #32
 800c6a4:	00420042 	subeq	r0, r2, r2, asr #32
 800c6a8:	00180024 	andseq	r0, r8, r4, lsr #32
 800c6ac:	00440078 	subeq	r0, r4, r8, ror r0
 800c6b0:	00440044 	subeq	r0, r4, r4, asr #32
 800c6b4:	00400078 	subeq	r0, r0, r8, ror r0
 800c6b8:	00400040 	subeq	r0, r0, r0, asr #32
 800c6bc:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c6c0:	00420042 	subeq	r0, r2, r2, asr #32
 800c6c4:	00420042 	subeq	r0, r2, r2, asr #32
 800c6c8:	001a002c 	andseq	r0, sl, ip, lsr #32
 800c6cc:	00440078 	subeq	r0, r4, r8, ror r0
 800c6d0:	00780044 	rsbseq	r0, r8, r4, asr #32
 800c6d4:	00480050 	subeq	r0, r8, r0, asr r0
 800c6d8:	00420044 	subeq	r0, r2, r4, asr #32
 800c6dc:	00440038 	subeq	r0, r4, r8, lsr r0
 800c6e0:	00380040 	eorseq	r0, r8, r0, asr #32
 800c6e4:	00440004 	subeq	r0, r4, r4
 800c6e8:	00380044 	eorseq	r0, r8, r4, asr #32
 800c6ec:	0010007c 	andseq	r0, r0, ip, ror r0
 800c6f0:	00100010 	andseq	r0, r0, r0, lsl r0
 800c6f4:	00100010 	andseq	r0, r0, r0, lsl r0
 800c6f8:	00100010 	andseq	r0, r0, r0, lsl r0
 800c6fc:	00420042 	subeq	r0, r2, r2, asr #32
 800c700:	00420042 	subeq	r0, r2, r2, asr #32
 800c704:	00420042 	subeq	r0, r2, r2, asr #32
 800c708:	00180024 	andseq	r0, r8, r4, lsr #32
 800c70c:	00440044 	subeq	r0, r4, r4, asr #32
 800c710:	00280028 	eoreq	r0, r8, r8, lsr #32
 800c714:	00280028 	eoreq	r0, r8, r8, lsr #32
 800c718:	00100028 	andseq	r0, r0, r8, lsr #32
 800c71c:	00aa0092 	umlaleq	r0, sl, r2, r0
 800c720:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800c724:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800c728:	004400aa 	subeq	r0, r4, sl, lsr #1
 800c72c:	00240042 	eoreq	r0, r4, r2, asr #32
 800c730:	00180024 	andseq	r0, r8, r4, lsr #32
 800c734:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c738:	00420024 	subeq	r0, r2, r4, lsr #32
 800c73c:	00280044 	eoreq	r0, r8, r4, asr #32
 800c740:	00100028 	andseq	r0, r0, r8, lsr #32
 800c744:	00100010 	andseq	r0, r0, r0, lsl r0
 800c748:	00100010 	andseq	r0, r0, r0, lsl r0
 800c74c:	0004007c 	andeq	r0, r4, ip, ror r0
 800c750:	00100008 	andseq	r0, r0, r8
 800c754:	00200010 	eoreq	r0, r0, r0, lsl r0
 800c758:	007c0040 	rsbseq	r0, ip, r0, asr #32
 800c75c:	0010001c 	andseq	r0, r0, ip, lsl r0
 800c760:	00100010 	andseq	r0, r0, r0, lsl r0
 800c764:	00100010 	andseq	r0, r0, r0, lsl r0
 800c768:	001c0010 	andseq	r0, ip, r0, lsl r0
 800c76c:	00100010 	andseq	r0, r0, r0, lsl r0
 800c770:	00080008 	andeq	r0, r8, r8
 800c774:	00080008 	andeq	r0, r8, r8
 800c778:	00040004 	andeq	r0, r4, r4
 800c77c:	0004001c 	andeq	r0, r4, ip, lsl r0
 800c780:	00040004 	andeq	r0, r4, r4
 800c784:	00040004 	andeq	r0, r4, r4
 800c788:	001c0004 	andseq	r0, ip, r4
 800c78c:	00280010 	eoreq	r0, r8, r0, lsl r0
 800c790:	00000044 	andeq	r0, r0, r4, asr #32
	...
 800c7ac:	00100020 	andseq	r0, r0, r0, lsr #32
 800c7b0:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 800c7c0:	00040018 	andeq	r0, r4, r8, lsl r0
 800c7c4:	0024001c 	eoreq	r0, r4, ip, lsl r0
 800c7c8:	001c0024 	andseq	r0, ip, r4, lsr #32
 800c7cc:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c7d0:	00340028 	eorseq	r0, r4, r8, lsr #32
 800c7d4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c7d8:	00280034 	eoreq	r0, r8, r4, lsr r0
 800c7dc:	00000000 	andeq	r0, r0, r0
 800c7e0:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c7e4:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c7e8:	00180024 	andseq	r0, r8, r4, lsr #32
 800c7ec:	00040004 	andeq	r0, r4, r4
 800c7f0:	002c0014 	eoreq	r0, ip, r4, lsl r0
 800c7f4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c7f8:	0014002c 	andseq	r0, r4, ip, lsr #32
 800c7fc:	00000000 	andeq	r0, r0, r0
 800c800:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c804:	0020003c 	eoreq	r0, r0, ip, lsr r0
 800c808:	00180024 	andseq	r0, r8, r4, lsr #32
 800c80c:	00180000 	andseq	r0, r8, r0
 800c810:	00100010 	andseq	r0, r0, r0, lsl r0
 800c814:	00100018 	andseq	r0, r0, r8, lsl r0
 800c818:	00100010 	andseq	r0, r0, r0, lsl r0
 800c81c:	00180000 	andseq	r0, r8, r0
 800c820:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c824:	00040018 	andeq	r0, r4, r8, lsl r0
 800c828:	00180024 	andseq	r0, r8, r4, lsr #32
 800c82c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c830:	00340028 	eorseq	r0, r4, r8, lsr #32
 800c834:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c838:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c83c:	00000010 	andeq	r0, r0, r0, lsl r0
 800c840:	00100010 	andseq	r0, r0, r0, lsl r0
 800c844:	00100010 	andseq	r0, r0, r0, lsl r0
 800c848:	00100010 	andseq	r0, r0, r0, lsl r0
 800c84c:	00000008 	andeq	r0, r0, r8
 800c850:	00080008 	andeq	r0, r8, r8
 800c854:	00080008 	andeq	r0, r8, r8
 800c858:	00100028 	andseq	r0, r0, r8, lsr #32
 800c85c:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c860:	00280024 	eoreq	r0, r8, r4, lsr #32
 800c864:	00280030 	eoreq	r0, r8, r0, lsr r0
 800c868:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c86c:	00100010 	andseq	r0, r0, r0, lsl r0
 800c870:	00100010 	andseq	r0, r0, r0, lsl r0
 800c874:	00100010 	andseq	r0, r0, r0, lsl r0
 800c878:	00100010 	andseq	r0, r0, r0, lsl r0
 800c87c:	00000000 	andeq	r0, r0, r0
 800c880:	00da00a6 	sbcseq	r0, sl, r6, lsr #1
 800c884:	00920092 	umullseq	r0, r2, r2, r0
 800c888:	00920092 	umullseq	r0, r2, r2, r0
 800c88c:	00000000 	andeq	r0, r0, r0
 800c890:	00340028 	eorseq	r0, r4, r8, lsr #32
 800c894:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c898:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c89c:	00000000 	andeq	r0, r0, r0
 800c8a0:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c8a4:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c8a8:	00180024 	andseq	r0, r8, r4, lsr #32
 800c8ac:	00280000 	eoreq	r0, r8, r0
 800c8b0:	00240034 	eoreq	r0, r4, r4, lsr r0
 800c8b4:	00200038 	eoreq	r0, r0, r8, lsr r0
 800c8b8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c8bc:	00140000 	andseq	r0, r4, r0
 800c8c0:	0024002c 	eoreq	r0, r4, ip, lsr #32
 800c8c4:	0004001c 	andeq	r0, r4, ip, lsl r0
 800c8c8:	00040004 	andeq	r0, r4, r4
 800c8cc:	00000000 	andeq	r0, r0, r0
 800c8d0:	0030002c 	eorseq	r0, r0, ip, lsr #32
 800c8d4:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c8d8:	00200020 	eoreq	r0, r0, r0, lsr #32
 800c8dc:	00000000 	andeq	r0, r0, r0
 800c8e0:	00240018 	eoreq	r0, r4, r8, lsl r0
 800c8e4:	00080010 	andeq	r0, r8, r0, lsl r0
 800c8e8:	00180024 	andseq	r0, r8, r4, lsr #32
 800c8ec:	00100000 	andseq	r0, r0, r0
 800c8f0:	00100038 	andseq	r0, r0, r8, lsr r0
 800c8f4:	00100010 	andseq	r0, r0, r0, lsl r0
 800c8f8:	00180010 	andseq	r0, r8, r0, lsl r0
 800c8fc:	00000000 	andeq	r0, r0, r0
 800c900:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c904:	00240024 	eoreq	r0, r4, r4, lsr #32
 800c908:	0014002c 	andseq	r0, r4, ip, lsr #32
 800c90c:	00000000 	andeq	r0, r0, r0
 800c910:	00440044 	subeq	r0, r4, r4, asr #32
 800c914:	00280028 	eoreq	r0, r8, r8, lsr #32
 800c918:	00100028 	andseq	r0, r0, r8, lsr #32
 800c91c:	00000000 	andeq	r0, r0, r0
 800c920:	00aa0092 	umlaleq	r0, sl, r2, r0
 800c924:	00aa00aa 	adceq	r0, sl, sl, lsr #1
 800c928:	004400aa 	subeq	r0, r4, sl, lsr #1
 800c92c:	00000000 	andeq	r0, r0, r0
 800c930:	00280044 	eoreq	r0, r8, r4, asr #32
 800c934:	00100010 	andseq	r0, r0, r0, lsl r0
 800c938:	00440028 	subeq	r0, r4, r8, lsr #32
 800c93c:	00280000 	eoreq	r0, r8, r0
 800c940:	00280028 	eoreq	r0, r8, r8, lsr #32
 800c944:	00100010 	andseq	r0, r0, r0, lsl r0
 800c948:	00100010 	andseq	r0, r0, r0, lsl r0
 800c94c:	00000000 	andeq	r0, r0, r0
 800c950:	0004003c 	andeq	r0, r4, ip, lsr r0
 800c954:	00100008 	andseq	r0, r0, r8
 800c958:	003c0020 	eorseq	r0, ip, r0, lsr #32
 800c95c:	00080000 	andeq	r0, r8, r0
 800c960:	00100010 	andseq	r0, r0, r0, lsl r0
 800c964:	00100020 	andseq	r0, r0, r0, lsr #32
 800c968:	00080010 	andeq	r0, r8, r0, lsl r0
 800c96c:	00100010 	andseq	r0, r0, r0, lsl r0
 800c970:	00100010 	andseq	r0, r0, r0, lsl r0
 800c974:	00100010 	andseq	r0, r0, r0, lsl r0
 800c978:	00100010 	andseq	r0, r0, r0, lsl r0
 800c97c:	00100000 	andseq	r0, r0, r0
 800c980:	00080008 	andeq	r0, r8, r8
 800c984:	00080004 	andeq	r0, r8, r4
 800c988:	00100008 	andseq	r0, r0, r8
 800c98c:	00000000 	andeq	r0, r0, r0
 800c990:	00600000 	rsbeq	r0, r0, r0
 800c994:	000c0092 	muleq	ip, r2, r0
 800c998:	00000000 	andeq	r0, r0, r0
 800c99c:	00ff00ff 	ldrshteq	r0, [pc], #15
 800c9a0:	00ff00ff 	ldrshteq	r0, [pc], #15
 800c9a4:	00ff00ff 	ldrshteq	r0, [pc], #15
 800c9a8:	00ff00ff 	ldrshteq	r0, [pc], #15

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	08f0d180 	ldmeq	r0!, {r7, r8, ip, lr, pc}^

20000004 <AHBPrescTable>:
	...
2000000c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000010:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000014 <APBAHBPrescTable>:
20000014:	00000000 	andeq	r0, r0, r0
20000018:	04030201 	streq	r0, [r3], #-513	; 0x201
2000001c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000020:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000024 <GPIO_PORT>:
20000024:	40021800 	andmi	r1, r2, r0, lsl #16
20000028:	40021800 	andmi	r1, r2, r0, lsl #16

2000002c <BUTTON_PORT>:
2000002c:	40020000 	andmi	r0, r2, r0

20000030 <L3GD20Timeout>:
20000030:	00001000 	andeq	r1, r0, r0

20000034 <Font16x24>:
20000034:	08009fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}
20000038:	00180010 	andseq	r0, r8, r0, lsl r0

2000003c <Font12x12>:
2000003c:	0800b1ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp, pc}
20000040:	000c000c 	andeq	r0, ip, ip

20000044 <Font8x12>:
20000044:	0800baac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp, pc}
20000048:	000c0008 	andeq	r0, ip, r8

2000004c <Font8x8>:
2000004c:	0800c3ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr, pc}
20000050:	00080008 	andeq	r0, r8, r8

20000054 <CurrentBackColor>:
20000054:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000058 <CurrentFrameBuffer>:
20000058:	d0000000 	andle	r0, r0, r0

2000005c <IOE_TimeOut>:
2000005c:	00003000 	andeq	r3, r0, r0

Disassembly of section .bss:

20000060 <__bss_start__>:
	...

2000009c <NVIC_InitStructure>:
2000009c:	00000000 	andeq	r0, r0, r0

200000a0 <LCD_Currentfonts>:
200000a0:	00000000 	andeq	r0, r0, r0

200000a4 <CurrentTextColor>:
200000a4:	00000000 	andeq	r0, r0, r0

200000a8 <CurrentLayer>:
200000a8:	00000000 	andeq	r0, r0, r0

200000ac <TP_State>:
	...

200000b4 <_x.7853>:
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <_y.7854>:
200000b8:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

200000bc <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600344d 	streq	r3, [r0], -sp, asr #8
  1c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
  20:	12060a02 	andne	r0, r6, #8192	; 0x2000
  24:	18011704 	stmdane	r1, {r2, r8, r9, sl, ip}
  28:	1b011a01 	blne	46834 <_Min_Stack_Size+0x46434>
  2c:	22061e03 	andcs	r1, r6, #3, 28	; 0x30
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000416 	andeq	r0, r0, r6, lsl r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000012a 	andeq	r0, r0, sl, lsr #2
      10:	00049d01 	andeq	r9, r4, r1, lsl #26
      14:	00036900 	andeq	r6, r3, r0, lsl #18
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000002a6 	andeq	r0, r0, r6, lsr #5
      2c:	00023303 	andeq	r3, r2, r3, lsl #6
      30:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
      34:	02000000 	andeq	r0, r0, #0
      38:	02a40801 	adceq	r0, r4, #65536	; 0x10000
      3c:	02020000 	andeq	r0, r2, #0
      40:	00003a05 	andeq	r3, r0, r5, lsl #20
      44:	007c0300 	rsbseq	r0, ip, r0, lsl #6
      48:	2b020000 	blcs	80050 <_Min_Stack_Size+0x7fc50>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	4b070202 	blmi	1c0860 <_Min_Stack_Size+0x1c0460>
      54:	03000003 	movweq	r0, #3
      58:	00000445 	andeq	r0, r0, r5, asr #8
      5c:	00623f02 	rsbeq	r3, r2, r2, lsl #30
      60:	04020000 	streq	r0, [r2], #-0
      64:	00010005 	andeq	r0, r1, r5
      68:	00600300 	rsbeq	r0, r0, r0, lsl #6
      6c:	41020000 	mrsmi	r0, (UNDEF: 2)
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	f5070402 			; <UNDEFINED> instruction: 0xf5070402
      78:	02000002 	andeq	r0, r0, #2
      7c:	00fb0508 	rscseq	r0, fp, r8, lsl #10
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	0002f007 	andeq	pc, r2, r7
      88:	05040400 	streq	r0, [r4, #-1024]	; 0x400
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	fa070402 	blx	1c10a0 <_Min_Stack_Size+0x1c0ca0>
      94:	03000002 	movweq	r0, #2
      98:	00000235 	andeq	r0, r0, r5, lsr r2
      9c:	002c2a03 	eoreq	r2, ip, r3, lsl #20
      a0:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
      a4:	03000000 	movweq	r0, #0
      a8:	00004536 	andeq	r4, r0, r6, lsr r5
      ac:	04470300 	strbeq	r0, [r7], #-768	; 0x300
      b0:	41030000 	mrsmi	r0, (UNDEF: 3)
      b4:	00000057 	andeq	r0, r0, r7, asr r0
      b8:	00006203 	andeq	r6, r0, r3, lsl #4
      bc:	69420300 	stmdbvs	r2, {r8, r9}^
      c0:	02000000 	andeq	r0, r0, #0
      c4:	00440704 	subeq	r0, r4, r4, lsl #14
      c8:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
      cc:	06000000 	streq	r0, [r0], -r0
      d0:	000000b8 	strheq	r0, [r0], -r8
      d4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      d8:	0000c307 	andeq	ip, r0, r7, lsl #6
      dc:	05000100 	streq	r0, [r0, #-256]	; 0x100
      e0:	000000a2 	andeq	r0, r0, r2, lsr #1
      e4:	0000ad05 	andeq	sl, r0, r5, lsl #26
      e8:	00a20800 	adceq	r0, r2, r0, lsl #16
      ec:	01090000 	mrseq	r0, (UNDEF: 9)
      f0:	0401f904 	streq	pc, [r1], #-2308	; 0x904
      f4:	0a000001 	beq	100 <_Min_Heap_Size+0x100>
      f8:	0000039d 	muleq	r0, sp, r3
      fc:	00b20a00 	adcseq	r0, r2, r0, lsl #20
     100:	00010000 	andeq	r0, r1, r0
     104:	d404280b 	strle	r2, [r4], #-2059	; 0x80b
     108:	00019003 	andeq	r9, r1, r3
     10c:	022d0c00 	eoreq	r0, sp, #0, 24
     110:	d6040000 	strle	r0, [r4], -r0
     114:	0000ca03 	andeq	ip, r0, r3, lsl #20
     118:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
     11c:	04000000 	streq	r0, [r0], #-0
     120:	00ca03d7 	ldrdeq	r0, [sl], #55	; 0x37
     124:	0c040000 	stceq	0, cr0, [r4], {-0}
     128:	000003eb 	andeq	r0, r0, fp, ror #7
     12c:	ca03d804 	bgt	f6144 <_Min_Stack_Size+0xf5d44>
     130:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     134:	0001170c 	andeq	r1, r1, ip, lsl #14
     138:	03d90400 	bicseq	r0, r9, #0, 8
     13c:	000000ca 	andeq	r0, r0, sl, asr #1
     140:	44490d0c 	strbmi	r0, [r9], #-3340	; 0xd0c
     144:	da040052 	ble	100294 <_Min_Stack_Size+0xffe94>
     148:	0000ca03 	andeq	ip, r0, r3, lsl #20
     14c:	4f0d1000 	svcmi	0x000d1000
     150:	04005244 	streq	r5, [r0], #-580	; 0x244
     154:	00ca03db 	ldrdeq	r0, [sl], #59	; 0x3b
     158:	0c140000 	ldceq	0, cr0, [r4], {-0}
     15c:	00000492 	muleq	r0, r2, r4
     160:	df03dc04 	svcle	0x0003dc04
     164:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     168:	0002150c 	andeq	r1, r2, ip, lsl #10
     16c:	03dd0400 	bicseq	r0, sp, #0, 8
     170:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     174:	04980c1a 	ldreq	r0, [r8], #3098	; 0xc1a
     178:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
     17c:	0000ca03 	andeq	ip, r0, r3, lsl #20
     180:	410d1c00 	tstmi	sp, r0, lsl #24
     184:	04005246 	streq	r5, [r0], #-582	; 0x246
     188:	019003df 			; <UNDEFINED> instruction: 0x019003df
     18c:	00200000 	eoreq	r0, r0, r0
     190:	0000cf05 	andeq	ip, r0, r5, lsl #30
     194:	00000e00 	andeq	r0, r0, r0, lsl #28
     198:	e0040000 	and	r0, r4, r0
     19c:	00010403 	andeq	r0, r1, r3, lsl #8
     1a0:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     1a4:	0001c242 	andeq	ip, r1, r2, asr #4
     1a8:	011d0a00 	tsteq	sp, r0, lsl #20
     1ac:	0a000000 	beq	1b4 <_Min_Heap_Size+0x1b4>
     1b0:	00000109 	andeq	r0, r0, r9, lsl #2
     1b4:	00920a01 	addseq	r0, r2, r1, lsl #20
     1b8:	0a020000 	beq	801c0 <_Min_Stack_Size+0x7fdc0>
     1bc:	000000c4 	andeq	r0, r0, r4, asr #1
     1c0:	1c030003 	stcne	0, cr0, [r3], {3}
     1c4:	05000000 	streq	r0, [r0, #-0]
     1c8:	0001a147 	andeq	sl, r1, r7, asr #2
     1cc:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     1d0:	0001e24f 	andeq	lr, r1, pc, asr #4
     1d4:	027d0a00 	rsbseq	r0, sp, #0, 20
     1d8:	0a000000 	beq	1e0 <_Min_Heap_Size+0x1e0>
     1dc:	0000004d 	andeq	r0, r0, sp, asr #32
     1e0:	d7030001 	strle	r0, [r3, -r1]
     1e4:	05000000 	streq	r0, [r0, #-0]
     1e8:	0001cd52 	andeq	ip, r1, r2, asr sp
     1ec:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     1f0:	00020e5a 	andeq	r0, r2, sl, asr lr
     1f4:	03ca0a00 	biceq	r0, sl, #0, 20
     1f8:	0a000000 	beq	200 <_Min_Heap_Size+0x200>
     1fc:	000003d9 	ldrdeq	r0, [r0], -r9
     200:	038d0a01 	orreq	r0, sp, #4096	; 0x1000
     204:	0a020000 	beq	8020c <_Min_Stack_Size+0x7fe0c>
     208:	0000023d 	andeq	r0, r0, sp, lsr r2
     20c:	8b030003 	blhi	c0220 <_Min_Stack_Size+0xbfe20>
     210:	05000002 	streq	r0, [r0, #-2]
     214:	0001ed5f 	andeq	lr, r1, pc, asr sp
     218:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     21c:	0002346e 	andeq	r3, r2, lr, ror #8
     220:	04210a00 	strteq	r0, [r1], #-2560	; 0xa00
     224:	0a000000 	beq	22c <_Min_Heap_Size+0x22c>
     228:	0000002d 	andeq	r0, r0, sp, lsr #32
     22c:	04050a01 	streq	r0, [r5], #-2561	; 0xa01
     230:	00020000 	andeq	r0, r2, r0
     234:	00046603 	andeq	r6, r4, r3, lsl #12
     238:	19720500 	ldmdbne	r2!, {r8, sl}^
     23c:	10000002 	andne	r0, r0, r2
     240:	84840508 	strhi	r0, [r4], #1288	; 0x508
     244:	11000002 	tstne	r0, r2
     248:	0000000d 	andeq	r0, r0, sp
     24c:	00b88605 	adcseq	r8, r8, r5, lsl #12
     250:	11000000 	mrsne	r0, (UNDEF: 0)
     254:	000004a8 	andeq	r0, r0, r8, lsr #9
     258:	01c28905 	biceq	r8, r2, r5, lsl #18
     25c:	11040000 	mrsne	r0, (UNDEF: 4)
     260:	000000b9 	strheq	r0, [r0], -r9
     264:	020e8c05 	andeq	r8, lr, #1280	; 0x500
     268:	11050000 	mrsne	r0, (UNDEF: 5)
     26c:	00000087 	andeq	r0, r0, r7, lsl #1
     270:	01e28f05 	mvneq	r8, r5, lsl #30
     274:	11060000 	mrsne	r0, (UNDEF: 6)
     278:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     27c:	02349205 	eorseq	r9, r4, #1342177280	; 0x50000000
     280:	00070000 	andeq	r0, r7, r0
     284:	00031a03 	andeq	r1, r3, r3, lsl #20
     288:	3f940500 	svccc	0x00940500
     28c:	10000002 	andne	r0, r0, r2
     290:	ec400607 	mcrr	6, 0, r0, r0, cr7
     294:	11000002 	tstne	r0, r2
     298:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     29c:	00974206 	addseq	r4, r7, r6, lsl #4
     2a0:	11000000 	mrsne	r0, (UNDEF: 0)
     2a4:	000003a5 	andeq	r0, r0, r5, lsr #7
     2a8:	00974306 	addseq	r4, r7, r6, lsl #6
     2ac:	11010000 	mrsne	r0, (UNDEF: 1)
     2b0:	0000045a 	andeq	r0, r0, sl, asr r4
     2b4:	00974406 	addseq	r4, r7, r6, lsl #8
     2b8:	11020000 	mrsne	r0, (UNDEF: 2)
     2bc:	000003fa 	strdeq	r0, [r0], -sl
     2c0:	00974506 	addseq	r4, r7, r6, lsl #10
     2c4:	11030000 	mrsne	r0, (UNDEF: 3)
     2c8:	0000006b 	andeq	r0, r0, fp, rrx
     2cc:	00974606 	addseq	r4, r7, r6, lsl #12
     2d0:	11040000 	mrsne	r0, (UNDEF: 4)
     2d4:	0000035e 	andeq	r0, r0, lr, asr r3
     2d8:	00974706 	addseq	r4, r7, r6, lsl #14
     2dc:	11050000 	mrsne	r0, (UNDEF: 5)
     2e0:	0000044f 	andeq	r0, r0, pc, asr #8
     2e4:	00974806 	addseq	r4, r7, r6, lsl #16
     2e8:	00060000 	andeq	r0, r6, r0
     2ec:	00009f03 	andeq	r9, r0, r3, lsl #30
     2f0:	8f490600 	svchi	0x00490600
     2f4:	10000002 	andne	r0, r0, r2
     2f8:	184c0602 	stmdane	ip, {r1, r9, sl}^
     2fc:	11000003 	tstne	r0, r3
     300:	000002d2 	ldrdeq	r0, [r0], -r2
     304:	00974e06 	addseq	r4, r7, r6, lsl #28
     308:	11000000 	mrsne	r0, (UNDEF: 0)
     30c:	0000032b 	andeq	r0, r0, fp, lsr #6
     310:	00974f06 	addseq	r4, r7, r6, lsl #30
     314:	00010000 	andeq	r0, r1, r0
     318:	00024d03 	andeq	r4, r2, r3, lsl #26
     31c:	f7500600 			; <UNDEFINED> instruction: 0xf7500600
     320:	12000002 	andne	r0, r0, #2
     324:	0000029d 	muleq	r0, sp, r2
     328:	543a0708 	ldrtpl	r0, [sl], #-1800	; 0x708
     32c:	11000003 	tstne	r0, r3
     330:	000000d1 	ldrdeq	r0, [r0], -r1
     334:	03543c07 	cmpeq	r4, #1792	; 0x700
     338:	11000000 	mrsne	r0, (UNDEF: 0)
     33c:	000031b5 			; <UNDEFINED> instruction: 0x000031b5
     340:	00a23d07 	adceq	r3, r2, r7, lsl #26
     344:	11040000 	mrsne	r0, (UNDEF: 4)
     348:	000003f3 	strdeq	r0, [r0], -r3
     34c:	00a23e07 	adceq	r3, r2, r7, lsl #28
     350:	00060000 	andeq	r0, r6, r0
     354:	00e90413 	rsceq	r0, r9, r3, lsl r4
     358:	16030000 	strne	r0, [r3], -r0
     35c:	07000000 	streq	r0, [r0, -r0]
     360:	00032340 	andeq	r2, r3, r0, asr #6
     364:	021b1400 	andseq	r1, fp, #0, 8
     368:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     36c:	080001c0 	stmdaeq	r0, {r6, r7, r8}
     370:	0000000e 	andeq	r0, r0, lr
     374:	07159c01 	ldreq	r9, [r5, -r1, lsl #24]
     378:	01000003 	tsteq	r0, r3
     37c:	0001d00f 	andeq	sp, r1, pc
     380:	00003008 	andeq	r3, r0, r8
     384:	9a9c0100 	bls	fe70078c <_estack+0xde6d078c>
     388:	16000003 	strne	r0, [r0], -r3
     38c:	00000432 	andeq	r0, r0, r2, lsr r4
     390:	02841301 	addeq	r1, r4, #67108864	; 0x4000000
     394:	91020000 	mrsls	r0, (UNDEF: 2)
     398:	68150070 	ldmdavs	r5, {r4, r5, r6}
     39c:	01000002 	tsteq	r0, r2
     3a0:	0002001c 	andeq	r0, r2, ip, lsl r0
     3a4:	00004208 	andeq	r4, r0, r8, lsl #4
     3a8:	cc9c0100 	ldfgts	f0, [ip], {0}
     3ac:	16000003 	strne	r0, [r0], -r3
     3b0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     3b4:	02ec1f01 	rsceq	r1, ip, #1, 30
     3b8:	91020000 	mrsls	r0, (UNDEF: 2)
     3bc:	04771670 	ldrbteq	r1, [r7], #-1648	; 0x670
     3c0:	2a010000 	bcs	403c8 <_Min_Stack_Size+0x3ffc8>
     3c4:	00000318 	andeq	r0, r0, r8, lsl r3
     3c8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     3cc:	0002bc14 	andeq	fp, r2, r4, lsl ip
     3d0:	44310100 	ldrtmi	r0, [r1], #-256	; 0x100
     3d4:	ac080002 	stcge	0, cr0, [r8], {2}
     3d8:	01000000 	mrseq	r0, (UNDEF: 0)
     3dc:	005b179c 			; <UNDEFINED> instruction: 0x005b179c
     3e0:	4d010000 	stcmi	0, cr0, [r1, #-0]
     3e4:	00000089 	andeq	r0, r0, r9, lsl #1
     3e8:	080002f0 	stmdaeq	r0, {r4, r5, r6, r7, r9}
     3ec:	00000054 	andeq	r0, r0, r4, asr r0
     3f0:	040d9c01 	streq	r9, [sp], #-3073	; 0xc01
     3f4:	24180000 	ldrcs	r0, [r8], #-0
     3f8:	14080003 	strne	r0, [r8], #-3
     3fc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     400:	5d010069 	stcpl	0, cr0, [r1, #-420]	; 0xfffffe5c
     404:	00000089 	andeq	r0, r0, r9, lsl #1
     408:	00749102 	rsbseq	r9, r4, r2, lsl #2
     40c:	04141a00 	ldreq	r1, [r4], #-2560	; 0xa00
     410:	a7080000 	strge	r0, [r8, -r0]
     414:	0000e406 	andeq	lr, r0, r6, lsl #8
     418:	00760000 	rsbseq	r0, r6, r0
     41c:	00020000 	andeq	r0, r2, r0
     420:	00000166 	andeq	r0, r0, r6, ror #2
     424:	025d0104 	subseq	r0, sp, #4, 2
     428:	00300000 	eorseq	r0, r0, r0
     42c:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     430:	4f432f62 	svcmi	0x00432f62
     434:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     438:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     43c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     440:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     444:	6174732f 	cmnvs	r4, pc, lsr #6
     448:	70757472 	rsbsvc	r7, r5, r2, ror r4
     44c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     450:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     454:	345f3932 	ldrbcc	r3, [pc], #-2354	; 45c <_Min_Stack_Size+0x5c>
     458:	78783933 	ldmdavc	r8!, {r0, r1, r4, r5, r8, fp, ip, sp}^
     45c:	2f00732e 	svccs	0x0000732e
     460:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     464:	6968632f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r8, r9, sp, lr}^
     468:	532f6865 	teqpl	pc, #6619136	; 0x650000
     46c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     470:	69443446 	stmdbvs	r4, {r1, r2, r6, sl, ip, sp}^
     474:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     478:	2f797265 	svccs	0x00797265
     47c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
     480:	47003032 	smladxmi	r0, r2, r0, r3
     484:	4120554e 	teqmi	r0, lr, asr #10
     488:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
     48c:	352e3432 	strcc	r3, [lr, #-1074]!	; 0x432
     490:	80010031 	andhi	r0, r1, r1, lsr r0
     494:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
     498:	01780004 	cmneq	r8, r4
     49c:	01040000 	mrseq	r0, (UNDEF: 4)
     4a0:	0000012a 	andeq	r0, r0, sl, lsr #2
     4a4:	00050a01 	andeq	r0, r5, r1, lsl #20
     4a8:	00036900 	andeq	r6, r3, r0, lsl #18
     4ac:	00005000 	andeq	r5, r0, r0
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	0002e900 	andeq	lr, r2, r0, lsl #18
     4b8:	06010200 	streq	r0, [r1], -r0, lsl #4
     4bc:	000002a6 	andeq	r0, r0, r6, lsr #5
     4c0:	00023303 	andeq	r3, r2, r3, lsl #6
     4c4:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
     4c8:	02000000 	andeq	r0, r0, #0
     4cc:	02a40801 	adceq	r0, r4, #65536	; 0x10000
     4d0:	02020000 	andeq	r0, r2, #0
     4d4:	00003a05 	andeq	r3, r0, r5, lsl #20
     4d8:	007c0300 	rsbseq	r0, ip, r0, lsl #6
     4dc:	2b020000 	blcs	804e4 <_Min_Stack_Size+0x800e4>
     4e0:	00000050 	andeq	r0, r0, r0, asr r0
     4e4:	4b070202 	blmi	1c0cf4 <_Min_Stack_Size+0x1c08f4>
     4e8:	03000003 	movweq	r0, #3
     4ec:	00000445 	andeq	r0, r0, r5, asr #8
     4f0:	00623f02 	rsbeq	r3, r2, r2, lsl #30
     4f4:	04020000 	streq	r0, [r2], #-0
     4f8:	00010005 	andeq	r0, r1, r5
     4fc:	00600300 	rsbeq	r0, r0, r0, lsl #6
     500:	41020000 	mrsmi	r0, (UNDEF: 2)
     504:	00000074 	andeq	r0, r0, r4, ror r0
     508:	f5070402 			; <UNDEFINED> instruction: 0xf5070402
     50c:	02000002 	andeq	r0, r0, #2
     510:	00fb0508 	rscseq	r0, fp, r8, lsl #10
     514:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     518:	0002f007 	andeq	pc, r2, r7
     51c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     520:	00746e69 	rsbseq	r6, r4, r9, ror #28
     524:	fa070402 	blx	1c1534 <_Min_Stack_Size+0x1c1134>
     528:	03000002 	movweq	r0, #2
     52c:	00000235 	andeq	r0, r0, r5, lsr r2
     530:	002c2a03 	eoreq	r2, ip, r3, lsl #20
     534:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
     538:	03000000 	movweq	r0, #0
     53c:	00004536 	andeq	r4, r0, r6, lsr r5
     540:	04470300 	strbeq	r0, [r7], #-768	; 0x300
     544:	41030000 	mrsmi	r0, (UNDEF: 3)
     548:	00000057 	andeq	r0, r0, r7, asr r0
     54c:	00006203 	andeq	r6, r0, r3, lsl #4
     550:	69420300 	stmdbvs	r2, {r8, r9}^
     554:	02000000 	andeq	r0, r0, #0
     558:	00440704 	subeq	r0, r4, r4, lsl #14
     55c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
     560:	06000000 	streq	r0, [r0], -r0
     564:	0170048c 	cmneq	r0, ip, lsl #9
     568:	000001ea 	andeq	r0, r0, sl, ror #3
     56c:	00053c07 	andeq	r3, r5, r7, lsl #24
     570:	01720400 	cmneq	r2, r0, lsl #8
     574:	000001ea 	andeq	r0, r0, sl, ror #3
     578:	05780700 	ldrbeq	r0, [r8, #-1792]!	; 0x700
     57c:	73040000 	movwvc	r0, #16384	; 0x4000
     580:	0000ca01 	andeq	ip, r0, r1, lsl #20
     584:	22070400 	andcs	r0, r7, #0, 8
     588:	04000006 	streq	r0, [r0], #-6
     58c:	00ca0174 	sbceq	r0, sl, r4, ror r1
     590:	07080000 	streq	r0, [r8, -r0]
     594:	000005c7 	andeq	r0, r0, r7, asr #11
     598:	ca017504 	bgt	5d9b0 <_Min_Stack_Size+0x5d5b0>
     59c:	0c000000 	stceq	0, cr0, [r0], {-0}
     5a0:	52435308 	subpl	r5, r3, #8, 6	; 0x20000000
     5a4:	01760400 	cmneq	r6, r0, lsl #8
     5a8:	000000ca 	andeq	r0, r0, sl, asr #1
     5ac:	43430810 	movtmi	r0, #14352	; 0x3810
     5b0:	77040052 	smlsdvc	r4, r2, r0, r0
     5b4:	0000ca01 	andeq	ip, r0, r1, lsl #20
     5b8:	53081400 	movwpl	r1, #33792	; 0x8400
     5bc:	04005048 	streq	r5, [r0], #-72	; 0x48
     5c0:	01ff0178 	mvnseq	r0, r8, ror r1
     5c4:	07180000 	ldreq	r0, [r8, -r0]
     5c8:	000005e4 	andeq	r0, r0, r4, ror #11
     5cc:	ca017904 	bgt	5e9e4 <_Min_Stack_Size+0x5e5e4>
     5d0:	24000000 	strcs	r0, [r0], #-0
     5d4:	00059f07 	andeq	r9, r5, r7, lsl #30
     5d8:	017a0400 	cmneq	sl, r0, lsl #8
     5dc:	000000ca 	andeq	r0, r0, sl, asr #1
     5e0:	06410728 	strbeq	r0, [r1], -r8, lsr #14
     5e4:	7b040000 	blvc	1005ec <_Min_Stack_Size+0x1001ec>
     5e8:	0000ca01 	andeq	ip, r0, r1, lsl #20
     5ec:	2c072c00 	stccs	12, cr2, [r7], {-0}
     5f0:	04000006 	streq	r0, [r0], #-6
     5f4:	00ca017c 	sbceq	r0, sl, ip, ror r1
     5f8:	07300000 	ldreq	r0, [r0, -r0]!
     5fc:	00000600 	andeq	r0, r0, r0, lsl #12
     600:	ca017d04 	bgt	5fa18 <_Min_Stack_Size+0x5f618>
     604:	34000000 	strcc	r0, [r0], #-0
     608:	00058507 	andeq	r8, r5, r7, lsl #10
     60c:	017e0400 	cmneq	lr, r0, lsl #8
     610:	000000ca 	andeq	r0, r0, sl, asr #1
     614:	06a50738 			; <UNDEFINED> instruction: 0x06a50738
     618:	7f040000 	svcvc	0x00040000
     61c:	0000ca01 	andeq	ip, r0, r1, lsl #20
     620:	50083c00 	andpl	r3, r8, r0, lsl #24
     624:	04005246 	streq	r5, [r0], #-582	; 0x246
     628:	02140180 	andseq	r0, r4, #128, 2
     62c:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     630:	00524644 	subseq	r4, r2, r4, asr #12
     634:	ea018104 	b	60a4c <_Min_Stack_Size+0x6064c>
     638:	48000001 	stmdami	r0, {r0}
     63c:	52444108 	subpl	r4, r4, #8, 2
     640:	01820400 	orreq	r0, r2, r0, lsl #8
     644:	000001ea 	andeq	r0, r0, sl, ror #3
     648:	0650074c 	ldrbeq	r0, [r0], -ip, asr #14
     64c:	83040000 	movwhi	r0, #16384	; 0x4000
     650:	00022e01 	andeq	r2, r2, r1, lsl #28
     654:	27075000 	strcs	r5, [r7, -r0]
     658:	04000006 	streq	r0, [r0], #-6
     65c:	02480184 	subeq	r0, r8, #132, 2	; 0x21
     660:	07600000 	strbeq	r0, [r0, -r0]!
     664:	00000655 	andeq	r0, r0, r5, asr r6
     668:	38018504 	stmdacc	r1, {r2, r8, sl, pc}
     66c:	74000002 	strvc	r0, [r0], #-2
     670:	0006cc07 	andeq	ip, r6, r7, lsl #24
     674:	01860400 	orreq	r0, r6, r0, lsl #8
     678:	000000ca 	andeq	r0, r0, sl, asr #1
     67c:	ca090088 	bgt	2408a4 <_Min_Stack_Size+0x2404a4>
     680:	0a000000 	beq	688 <_Min_Stack_Size+0x288>
     684:	00000097 	muleq	r0, r7, r0
     688:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     68c:	0000c30b 	andeq	ip, r0, fp, lsl #6
     690:	05000b00 	streq	r0, [r0, #-2816]	; 0xb00
     694:	000001ef 	andeq	r0, r0, pc, ror #3
     698:	0000b80a 	andeq	fp, r0, sl, lsl #16
     69c:	00021400 	andeq	r1, r2, r0, lsl #8
     6a0:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     6a4:	00010000 	andeq	r0, r1, r0
     6a8:	00021909 	andeq	r1, r2, r9, lsl #18
     6ac:	02040500 	andeq	r0, r4, #0, 10
     6b0:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     6b4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     6b8:	0b000002 	bleq	6c8 <_Min_Stack_Size+0x2c8>
     6bc:	000000c3 	andeq	r0, r0, r3, asr #1
     6c0:	33090003 	movwcc	r0, #36867	; 0x9003
     6c4:	05000002 	streq	r0, [r0, #-2]
     6c8:	0000021e 	andeq	r0, r0, lr, lsl r2
     6cc:	0000b80a 	andeq	fp, r0, sl, lsl #16
     6d0:	00024800 	andeq	r4, r2, r0, lsl #16
     6d4:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     6d8:	00040000 	andeq	r0, r4, r0
     6dc:	00024d09 	andeq	r4, r2, r9, lsl #26
     6e0:	02380500 	eorseq	r0, r8, #0, 10
     6e4:	5f0c0000 	svcpl	0x000c0000
     6e8:	04000005 	streq	r0, [r0], #-5
     6ec:	00cf0187 	sbceq	r0, pc, r7, lsl #3
     6f0:	ad050000 	stcge	0, cr0, [r5, #-0]
     6f4:	0d000000 	stceq	0, cr0, [r0, #-0]
     6f8:	01f70501 	mvnseq	r0, r1, lsl #10
     6fc:	00000279 	andeq	r0, r0, r9, ror r2
     700:	0009180e 	andeq	r1, r9, lr, lsl #16
     704:	530f0000 	movwpl	r0, #61440	; 0xf000
     708:	01005445 	tsteq	r0, r5, asr #8
     70c:	051c0600 	ldreq	r0, [ip, #-1536]	; 0x600
     710:	02dc033e 	sbcseq	r0, ip, #-134217728	; 0xf8000000
     714:	41080000 	mrsmi	r0, (UNDEF: 8)
     718:	05005243 	streq	r5, [r0, #-579]	; 0x243
     71c:	00ca0340 	sbceq	r0, sl, r0, asr #6
     720:	07000000 	streq	r0, [r0, -r0]
     724:	00000580 	andeq	r0, r0, r0, lsl #11
     728:	ca034105 	bgt	d0b44 <_Min_Stack_Size+0xd0744>
     72c:	04000000 	streq	r0, [r0], #-0
     730:	00057d07 	andeq	r7, r5, r7, lsl #26
     734:	03420500 	movteq	r0, #9472	; 0x2500
     738:	000000ca 	andeq	r0, r0, sl, asr #1
     73c:	52530808 	subspl	r0, r3, #8, 16	; 0x80000
     740:	03430500 	movteq	r0, #13568	; 0x3500
     744:	000000ca 	andeq	r0, r0, sl, asr #1
     748:	5243080c 	subpl	r0, r3, #12, 16	; 0xc0000
     74c:	03440500 	movteq	r0, #17664	; 0x4500
     750:	000000ca 	andeq	r0, r0, sl, asr #1
     754:	06dc0710 			; <UNDEFINED> instruction: 0x06dc0710
     758:	45050000 	strmi	r0, [r5, #-0]
     75c:	0000ca03 	andeq	ip, r0, r3, lsl #20
     760:	a4071400 	strge	r1, [r7], #-1024	; 0x400
     764:	05000005 	streq	r0, [r0, #-5]
     768:	00ca0346 	sbceq	r0, sl, r6, asr #6
     76c:	00180000 	andseq	r0, r8, r0
     770:	0006b30c 	andeq	fp, r6, ip, lsl #6
     774:	03470500 	movteq	r0, #29952	; 0x7500
     778:	00000279 	andeq	r0, r0, r9, ror r2
     77c:	4b050806 	blmi	14279c <_Min_Stack_Size+0x14239c>
     780:	00030b04 	andeq	r0, r3, r4, lsl #22
     784:	52430800 	subpl	r0, r3, #0, 16
     788:	044d0500 	strbeq	r0, [sp], #-1280	; 0x500
     78c:	000000ca 	andeq	r0, r0, sl, asr #1
     790:	53430800 	movtpl	r0, #14336	; 0x3800
     794:	4e050052 	mcrmi	0, 0, r0, cr5, cr2, {2}
     798:	0000ca04 	andeq	ip, r0, r4, lsl #20
     79c:	0c000400 	cfstrseq	mvf0, [r0], {-0}
     7a0:	000004ee 	andeq	r0, r0, lr, ror #9
     7a4:	e8044f05 	stmda	r4, {r0, r2, r8, r9, sl, fp, lr}
     7a8:	06000002 	streq	r0, [r0], -r2
     7ac:	04550590 	ldrbeq	r0, [r5], #-1424	; 0x590
     7b0:	000004c0 	andeq	r0, r0, r0, asr #9
     7b4:	00524308 	subseq	r4, r2, r8, lsl #6
     7b8:	ca045705 	bgt	1163d4 <_Min_Stack_Size+0x115fd4>
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	0004bc07 	andeq	fp, r4, r7, lsl #24
     7c4:	04580500 	ldrbeq	r0, [r8], #-1280	; 0x500
     7c8:	000000ca 	andeq	r0, r0, sl, asr #1
     7cc:	06c70704 	strbeq	r0, [r7], r4, lsl #14
     7d0:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
     7d4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     7d8:	43080800 	movwmi	r0, #34816	; 0x8800
     7dc:	05005249 	streq	r5, [r0, #-585]	; 0x249
     7e0:	00ca045a 	sbceq	r0, sl, sl, asr r4
     7e4:	070c0000 	streq	r0, [ip, -r0]
     7e8:	00000542 	andeq	r0, r0, r2, asr #10
     7ec:	ca045b05 	bgt	117408 <_Min_Stack_Size+0x117008>
     7f0:	10000000 	andne	r0, r0, r0
     7f4:	0004d507 	andeq	sp, r4, r7, lsl #10
     7f8:	045c0500 	ldrbeq	r0, [ip], #-1280	; 0x500
     7fc:	000000ca 	andeq	r0, r0, sl, asr #1
     800:	06aa0714 	ssateq	r0, #11, r4, lsl #14
     804:	5d050000 	stcpl	0, cr0, [r5, #-0]
     808:	0000ca04 	andeq	ip, r0, r4, lsl #20
     80c:	55071800 	strpl	r1, [r7, #-2048]	; 0x800
     810:	05000006 	streq	r0, [r0, #-6]
     814:	00b8045e 	adcseq	r0, r8, lr, asr r4
     818:	071c0000 	ldreq	r0, [ip, -r0]
     81c:	000004c4 	andeq	r0, r0, r4, asr #9
     820:	ca045f05 	bgt	11843c <_Min_Stack_Size+0x11803c>
     824:	20000000 	andcs	r0, r0, r0
     828:	00059607 	andeq	r9, r5, r7, lsl #12
     82c:	04600500 	strbteq	r0, [r0], #-1280	; 0x500
     830:	000000ca 	andeq	r0, r0, sl, asr #1
     834:	065f0724 	ldrbeq	r0, [pc], -r4, lsr #14
     838:	61050000 	mrsvs	r0, (UNDEF: 5)
     83c:	00020404 	andeq	r0, r2, r4, lsl #8
     840:	9d072800 	stcls	8, cr2, [r7, #-0]
     844:	05000006 	streq	r0, [r0, #-6]
     848:	00ca0462 	sbceq	r0, sl, r2, ror #8
     84c:	07300000 	ldreq	r0, [r0, -r0]!
     850:	000004cd 	andeq	r0, r0, sp, asr #9
     854:	ca046305 	bgt	119470 <_Min_Stack_Size+0x119070>
     858:	34000000 	strcc	r0, [r0], #-0
     85c:	0005b507 	andeq	fp, r5, r7, lsl #10
     860:	04640500 	strbteq	r0, [r4], #-1280	; 0x500
     864:	000000ca 	andeq	r0, r0, sl, asr #1
     868:	06690738 			; <UNDEFINED> instruction: 0x06690738
     86c:	65050000 	strvs	r0, [r5, #-0]
     870:	0000b804 	andeq	fp, r0, r4, lsl #16
     874:	68073c00 	stmdavs	r7, {sl, fp, ip, sp}
     878:	05000005 	streq	r0, [r0, #-5]
     87c:	00ca0466 	sbceq	r0, sl, r6, ror #8
     880:	07400000 	strbeq	r0, [r0, -r0]
     884:	000005cd 	andeq	r0, r0, sp, asr #11
     888:	ca046705 	bgt	11a4a4 <_Min_Stack_Size+0x11a0a4>
     88c:	44000000 	strmi	r0, [r0], #-0
     890:	00055507 	andeq	r5, r5, r7, lsl #10
     894:	04680500 	strbteq	r0, [r8], #-1280	; 0x500
     898:	00000204 	andeq	r0, r0, r4, lsl #4
     89c:	04b20748 	ldrteq	r0, [r2], #1864	; 0x748
     8a0:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     8a4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     8a8:	46075000 	strmi	r5, [r7], -r0
     8ac:	05000006 	streq	r0, [r0, #-6]
     8b0:	00ca046a 	sbceq	r0, sl, sl, ror #8
     8b4:	07540000 	ldrbeq	r0, [r4, -r0]
     8b8:	0000054b 	andeq	r0, r0, fp, asr #10
     8bc:	ca046b05 	bgt	11b4d8 <_Min_Stack_Size+0x11b0d8>
     8c0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     8c4:	00067f07 	andeq	r7, r6, r7, lsl #30
     8c8:	046c0500 	strbteq	r0, [ip], #-1280	; 0x500
     8cc:	000000b8 	strheq	r0, [r0], -r8
     8d0:	0611075c 			; <UNDEFINED> instruction: 0x0611075c
     8d4:	6d050000 	stcvs	0, cr0, [r5, #-0]
     8d8:	0000ca04 	andeq	ip, r0, r4, lsl #20
     8dc:	d2076000 	andle	r6, r7, #0
     8e0:	05000006 	streq	r0, [r0, #-6]
     8e4:	00ca046e 	sbceq	r0, sl, lr, ror #8
     8e8:	07640000 	strbeq	r0, [r4, -r0]!
     8ec:	00000689 	andeq	r0, r0, r9, lsl #13
     8f0:	04046f05 	streq	r6, [r4], #-3845	; 0xf05
     8f4:	68000002 	stmdavs	r0, {r1}
     8f8:	0004de07 	andeq	sp, r4, r7, lsl #28
     8fc:	04700500 	ldrbteq	r0, [r0], #-1280	; 0x500
     900:	000000ca 	andeq	r0, r0, sl, asr #1
     904:	53430870 	movtpl	r0, #14448	; 0x3870
     908:	71050052 	qaddvc	r0, r2, r5
     90c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     910:	93077400 	movwls	r7, #29696	; 0x7400
     914:	05000006 	streq	r0, [r0, #-6]
     918:	02040472 	andeq	r0, r4, #1912602624	; 0x72000000
     91c:	07780000 	ldrbeq	r0, [r8, -r0]!
     920:	000004fa 	strdeq	r0, [r0], -sl
     924:	ca047305 	bgt	11d540 <_Min_Stack_Size+0x11d140>
     928:	80000000 	andhi	r0, r0, r0
     92c:	0004e307 	andeq	lr, r4, r7, lsl #6
     930:	04740500 	ldrbteq	r0, [r4], #-1280	; 0x500
     934:	000000ca 	andeq	r0, r0, sl, asr #1
     938:	06c10784 	strbeq	r0, [r1], r4, lsl #15
     93c:	75050000 	strvc	r0, [r5, #-0]
     940:	0000ca04 	andeq	ip, r0, r4, lsl #20
     944:	70078800 	andvc	r8, r7, r0, lsl #16
     948:	05000005 	streq	r0, [r0, #-5]
     94c:	00ca0476 	sbceq	r0, sl, r6, ror r4
     950:	008c0000 	addeq	r0, ip, r0
     954:	00058a0c 	andeq	r8, r5, ip, lsl #20
     958:	04780500 	ldrbteq	r0, [r8], #-1280	; 0x500
     95c:	00000317 	andeq	r0, r0, r7, lsl r3
     960:	00060610 	andeq	r0, r6, r0, lsl r6
     964:	8cd00100 	ldfhie	f0, [r0], {0}
     968:	68080003 	stmdavs	r8, {r0, r1}
     96c:	01000000 	mrseq	r0, (UNDEF: 0)
     970:	05ea119c 	strbeq	r1, [sl, #412]!	; 0x19c
     974:	1d010000 	stcne	0, cr0, [r1, #-0]
     978:	0003f401 	andeq	pc, r3, r1, lsl #8
     97c:	0000f808 	andeq	pc, r0, r8, lsl #16
     980:	3f9c0100 	svccc	0x009c0100
     984:	12000005 	andne	r0, r0, #5
     988:	00706d74 	rsbseq	r6, r0, r4, ror sp
     98c:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     990:	02000000 	andeq	r0, r0, #0
     994:	1b137091 	blne	4dcbe0 <_Min_Stack_Size+0x4dc7e0>
     998:	01000006 	tsteq	r0, r6
     99c:	00b8011f 	adcseq	r0, r8, pc, lsl r1
     9a0:	91020000 	mrsls	r0, (UNDEF: 2)
     9a4:	05c21374 	strbeq	r1, [r2, #884]	; 0x374
     9a8:	1f010000 	svcne	0x00010000
     9ac:	0000b801 	andeq	fp, r0, r1, lsl #16
     9b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     9b4:	0005ab13 	andeq	sl, r5, r3, lsl fp
     9b8:	011f0100 	tsteq	pc, r0, lsl #2
     9bc:	000000b8 	strheq	r0, [r0], -r8
     9c0:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     9c4:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     9c8:	b8011f01 	stmdalt	r1, {r0, r8, r9, sl, fp, ip}
     9cc:	02000000 	andeq	r0, r0, #0
     9d0:	14006491 	strne	r6, [r0], #-1169	; 0x491
     9d4:	00000673 	andeq	r0, r0, r3, ror r6
     9d8:	ec015501 	cfstr32	mvfx5, [r1], {1}
     9dc:	f4080004 	vst4.8	{d0-d3}, [r8], r4
     9e0:	01000000 	mrseq	r0, (UNDEF: 0)
     9e4:	0005749c 	muleq	r5, ip, r4
     9e8:	05d51300 	ldrbeq	r1, [r5, #768]	; 0x300
     9ec:	5a010000 	bpl	409f4 <_Min_Stack_Size+0x405f4>
     9f0:	0000ca01 	andeq	ip, r0, r1, lsl #20
     9f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9f8:	00050013 	andeq	r0, r5, r3, lsl r0
     9fc:	015a0100 	cmpeq	sl, r0, lsl #2
     a00:	000000ca 	andeq	r0, r0, sl, asr #1
     a04:	00709102 	rsbseq	r9, r0, r2, lsl #2
     a08:	00041415 	andeq	r1, r4, r5, lsl r4
     a0c:	06a70400 	strteq	r0, [r7], r0, lsl #8
     a10:	0000025e 	andeq	r0, r0, lr, asr r2
     a14:	00063116 	andeq	r3, r6, r6, lsl r1
     a18:	b8b00100 	ldmlt	r0!, {r8}
     a1c:	05000000 	streq	r0, [r0, #-0]
     a20:	00000003 	andeq	r0, r0, r3
     a24:	00970a20 	addseq	r0, r7, r0, lsr #20
     a28:	05a10000 	streq	r0, [r1, #0]!
     a2c:	c30b0000 	movwgt	r0, #45056	; 0xb000
     a30:	0f000000 	svceq	0x00000000
     a34:	0cac1600 	stceq	6, cr1, [ip]
     a38:	b2010000 	andlt	r0, r1, #0
     a3c:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     a40:	00040305 	andeq	r0, r4, r5, lsl #6
     a44:	b7092000 	strlt	r2, [r9, -r0]
     a48:	05000005 	streq	r0, [r0, #-5]
     a4c:	00000591 	muleq	r0, r1, r5
     a50:	00053d00 	andeq	r3, r5, r0, lsl #26
     a54:	b0000400 	andlt	r0, r0, r0, lsl #8
     a58:	04000002 	streq	r0, [r0], #-2
     a5c:	00012a01 	andeq	r2, r1, r1, lsl #20
     a60:	084e0100 	stmdaeq	lr, {r8}^
     a64:	03690000 	cmneq	r9, #0
     a68:	00700000 	rsbseq	r0, r0, r0
     a6c:	00000000 	andeq	r0, r0, r0
     a70:	049a0000 	ldreq	r0, [sl], #0
     a74:	01020000 	mrseq	r0, (UNDEF: 2)
     a78:	0002a606 	andeq	sl, r2, r6, lsl #12
     a7c:	02330300 	eorseq	r0, r3, #0, 6
     a80:	1d020000 	stcne	0, cr0, [r2, #-0]
     a84:	00000037 	andeq	r0, r0, r7, lsr r0
     a88:	a4080102 	strge	r0, [r8], #-258	; 0x102
     a8c:	02000002 	andeq	r0, r0, #2
     a90:	003a0502 	eorseq	r0, sl, r2, lsl #10
     a94:	02020000 	andeq	r0, r2, #0
     a98:	00034b07 	andeq	r4, r3, r7, lsl #22
     a9c:	04450300 	strbeq	r0, [r5], #-768	; 0x300
     aa0:	3f020000 	svccc	0x00020000
     aa4:	00000057 	andeq	r0, r0, r7, asr r0
     aa8:	00050402 	andeq	r0, r5, r2, lsl #8
     aac:	03000001 	movweq	r0, #1
     ab0:	00000060 	andeq	r0, r0, r0, rrx
     ab4:	00694102 	rsbeq	r4, r9, r2, lsl #2
     ab8:	04020000 	streq	r0, [r2], #-0
     abc:	0002f507 	andeq	pc, r2, r7, lsl #10
     ac0:	05080200 	streq	r0, [r8, #-512]	; 0x200
     ac4:	000000fb 	strdeq	r0, [r0], -fp
     ac8:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
     acc:	04000002 	streq	r0, [r0], #-2
     ad0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     ad4:	04020074 	streq	r0, [r2], #-116	; 0x74
     ad8:	0002fa07 	andeq	pc, r2, r7, lsl #20
     adc:	02350300 	eorseq	r0, r5, #0, 6
     ae0:	2a030000 	bcs	c0ae8 <_Min_Stack_Size+0xc06e8>
     ae4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ae8:	00044703 	andeq	r4, r4, r3, lsl #14
     aec:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
     af0:	03000000 	movweq	r0, #0
     af4:	00000062 	andeq	r0, r0, r2, rrx
     af8:	005e4203 	subseq	r4, lr, r3, lsl #4
     afc:	04050000 	streq	r0, [r5], #-0
     b00:	0150040e 	cmpeq	r0, lr, lsl #8
     b04:	00000169 	andeq	r0, r0, r9, ror #2
     b08:	00075106 	andeq	r5, r7, r6, lsl #2
     b0c:	01520400 	cmpeq	r2, r0, lsl #8
     b10:	00000180 	andeq	r0, r0, r0, lsl #3
     b14:	06550600 	ldrbeq	r0, [r5], -r0, lsl #12
     b18:	53040000 	movwpl	r0, #16384	; 0x4000
     b1c:	00018501 	andeq	r8, r1, r1, lsl #10
     b20:	91062000 	mrsls	r2, (UNDEF: 6)
     b24:	04000007 	streq	r0, [r0], #-7
     b28:	01950154 	orrseq	r0, r5, r4, asr r1
     b2c:	06800000 	streq	r0, [r0], r0
     b30:	00000764 	andeq	r0, r0, r4, ror #14
     b34:	85015504 	strhi	r5, [r1, #-1284]	; 0x504
     b38:	a0000001 	andge	r0, r0, r1
     b3c:	0007e207 	andeq	lr, r7, r7, lsl #4
     b40:	01560400 	cmpeq	r6, r0, lsl #8
     b44:	0000019a 	muleq	r0, sl, r1
     b48:	69070100 	stmdbvs	r7, {r8}
     b4c:	04000006 	streq	r0, [r0], #-6
     b50:	01850157 	orreq	r0, r5, r7, asr r1
     b54:	01200000 	teqeq	r0, r0
     b58:	00078607 	andeq	r8, r7, r7, lsl #12
     b5c:	01580400 	cmpeq	r8, r0, lsl #8
     b60:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     b64:	55070180 	strpl	r0, [r7, #-384]	; 0x180
     b68:	04000005 	streq	r0, [r0], #-5
     b6c:	01850159 	orreq	r0, r5, r9, asr r1
     b70:	01a00000 	moveq	r0, r0
     b74:	0006e207 	andeq	lr, r6, r7, lsl #4
     b78:	015a0400 	cmpeq	sl, r0, lsl #8
     b7c:	000001a4 	andeq	r0, r0, r4, lsr #3
     b80:	7f070200 	svcvc	0x00070200
     b84:	04000006 	streq	r0, [r0], #-6
     b88:	01a9015b 			; <UNDEFINED> instruction: 0x01a9015b
     b8c:	02200000 	eoreq	r0, r0, #0
     b90:	00504908 	subseq	r4, r0, r8, lsl #18
     b94:	c9015c04 	stmdbgt	r1, {r2, sl, fp, ip, lr}
     b98:	00000001 	andeq	r0, r0, r1
     b9c:	06890703 	streq	r0, [r9], r3, lsl #14
     ba0:	5d040000 	stcpl	0, cr0, [r4, #-0]
     ba4:	0001ce01 	andeq	ip, r1, r1, lsl #28
     ba8:	0703f000 	streq	pc, [r3, -r0]
     bac:	0000075f 	andeq	r0, r0, pc, asr r7
     bb0:	df015e04 	svcle	0x00015e04
     bb4:	00000001 	andeq	r0, r0, r1
     bb8:	a209000e 	andge	r0, r9, #14
     bbc:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
     bc0:	0a000001 	beq	bcc <_Min_Stack_Size+0x7cc>
     bc4:	00000179 	andeq	r0, r0, r9, ror r1
     bc8:	04020007 	streq	r0, [r2], #-7
     bcc:	00004407 	andeq	r4, r0, r7, lsl #8
     bd0:	01690b00 	cmneq	r9, r0, lsl #22
     bd4:	a2090000 	andge	r0, r9, #0
     bd8:	95000000 	strls	r0, [r0, #-0]
     bdc:	0a000001 	beq	be8 <_Min_Stack_Size+0x7e8>
     be0:	00000179 	andeq	r0, r0, r9, ror r1
     be4:	690b0017 	stmdbvs	fp, {r0, r1, r2, r4}
     be8:	0b000001 	bleq	bf4 <_Min_Stack_Size+0x7f4>
     bec:	00000169 	andeq	r0, r0, r9, ror #2
     bf0:	0001690b 	andeq	r6, r1, fp, lsl #18
     bf4:	01690b00 	cmneq	r9, r0, lsl #22
     bf8:	a2090000 	andge	r0, r9, #0
     bfc:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
     c00:	0a000001 	beq	c0c <_Min_Stack_Size+0x80c>
     c04:	00000179 	andeq	r0, r0, r9, ror r1
     c08:	8c090037 	stchi	0, cr0, [r9], {55}	; 0x37
     c0c:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
     c10:	0a000001 	beq	c1c <_Min_Stack_Size+0x81c>
     c14:	00000179 	andeq	r0, r0, r9, ror r1
     c18:	b90b00ef 	stmdblt	fp, {r0, r1, r2, r3, r5, r6, r7}
     c1c:	09000001 	stmdbeq	r0, {r0}
     c20:	000000a2 	andeq	r0, r0, r2, lsr #1
     c24:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c28:	0001790c 	andeq	r7, r1, ip, lsl #18
     c2c:	00028300 	andeq	r8, r2, r0, lsl #6
     c30:	0000a20b 	andeq	sl, r0, fp, lsl #4
     c34:	08120d00 	ldmdaeq	r2, {r8, sl, fp}
     c38:	5f040000 	svcpl	0x00040000
     c3c:	0000ad01 	andeq	sl, r0, r1, lsl #26
     c40:	048c0e00 	streq	r0, [ip], #3584	; 0xe00
     c44:	030b0170 	movweq	r0, #45424	; 0xb170
     c48:	3c060000 	stccc	0, cr0, [r6], {-0}
     c4c:	04000005 	streq	r0, [r0], #-5
     c50:	030b0172 	movweq	r0, #45426	; 0xb172
     c54:	06000000 	streq	r0, [r0], -r0
     c58:	00000578 	andeq	r0, r0, r8, ror r5
     c5c:	df017304 	svcle	0x00017304
     c60:	04000001 	streq	r0, [r0], #-1
     c64:	00062206 	andeq	r2, r6, r6, lsl #4
     c68:	01740400 	cmneq	r4, r0, lsl #8
     c6c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c70:	05c70608 	strbeq	r0, [r7, #1544]	; 0x608
     c74:	75040000 	strvc	r0, [r4, #-0]
     c78:	0001df01 	andeq	sp, r1, r1, lsl #30
     c7c:	530f0c00 	movwpl	r0, #64512	; 0xfc00
     c80:	04005243 	streq	r5, [r0], #-579	; 0x243
     c84:	01df0176 	bicseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
     c88:	0f100000 	svceq	0x00100000
     c8c:	00524343 	subseq	r4, r2, r3, asr #6
     c90:	df017704 	svcle	0x00017704
     c94:	14000001 	strne	r0, [r0], #-1
     c98:	5048530f 	subpl	r5, r8, pc, lsl #6
     c9c:	01780400 	cmneq	r8, r0, lsl #8
     ca0:	00000320 	andeq	r0, r0, r0, lsr #6
     ca4:	05e40618 	strbeq	r0, [r4, #1560]!	; 0x618
     ca8:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     cac:	0001df01 	andeq	sp, r1, r1, lsl #30
     cb0:	9f062400 	svcls	0x00062400
     cb4:	04000005 	streq	r0, [r0], #-5
     cb8:	01df017a 	bicseq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
     cbc:	06280000 	strteq	r0, [r8], -r0
     cc0:	00000641 	andeq	r0, r0, r1, asr #12
     cc4:	df017b04 	svcle	0x00017b04
     cc8:	2c000001 	stccs	0, cr0, [r0], {1}
     ccc:	00062c06 	andeq	r2, r6, r6, lsl #24
     cd0:	017c0400 	cmneq	ip, r0, lsl #8
     cd4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     cd8:	06000630 			; <UNDEFINED> instruction: 0x06000630
     cdc:	7d040000 	stcvc	0, cr0, [r4, #-0]
     ce0:	0001df01 	andeq	sp, r1, r1, lsl #30
     ce4:	85063400 	strhi	r3, [r6, #-1024]	; 0x400
     ce8:	04000005 	streq	r0, [r0], #-5
     cec:	01df017e 	bicseq	r0, pc, lr, ror r1	; <UNPREDICTABLE>
     cf0:	06380000 	ldrteq	r0, [r8], -r0
     cf4:	000006a5 	andeq	r0, r0, r5, lsr #13
     cf8:	df017f04 	svcle	0x00017f04
     cfc:	3c000001 	stccc	0, cr0, [r0], {1}
     d00:	5246500f 	subpl	r5, r6, #15
     d04:	01800400 	orreq	r0, r0, r0, lsl #8
     d08:	00000335 	andeq	r0, r0, r5, lsr r3
     d0c:	46440f40 	strbmi	r0, [r4], -r0, asr #30
     d10:	81040052 	qaddhi	r0, r2, r4
     d14:	00030b01 	andeq	r0, r3, r1, lsl #22
     d18:	410f4800 	tstmi	pc, r0, lsl #16
     d1c:	04005244 	streq	r5, [r0], #-580	; 0x244
     d20:	030b0182 	movweq	r0, #45442	; 0xb182
     d24:	064c0000 	strbeq	r0, [ip], -r0
     d28:	00000650 	andeq	r0, r0, r0, asr r6
     d2c:	4f018304 	svcmi	0x00018304
     d30:	50000003 	andpl	r0, r0, r3
     d34:	00062706 	andeq	r2, r6, r6, lsl #14
     d38:	01840400 	orreq	r0, r4, r0, lsl #8
     d3c:	00000369 	andeq	r0, r0, r9, ror #6
     d40:	06550660 	ldrbeq	r0, [r5], -r0, ror #12
     d44:	85040000 	strhi	r0, [r4, #-0]
     d48:	00035901 	andeq	r5, r3, r1, lsl #18
     d4c:	cc067400 	cfstrsgt	mvf7, [r6], {-0}
     d50:	04000006 	streq	r0, [r0], #-6
     d54:	01df0186 	bicseq	r0, pc, r6, lsl #3
     d58:	00880000 	addeq	r0, r8, r0
     d5c:	0001df10 	andeq	sp, r1, r0, lsl pc
     d60:	008c0900 	addeq	r0, ip, r0, lsl #18
     d64:	03200000 	teqeq	r0, #0
     d68:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
     d6c:	0b000001 	bleq	d78 <_Min_Stack_Size+0x978>
     d70:	03100b00 	tsteq	r0, #0, 22
     d74:	a2090000 	andge	r0, r9, #0
     d78:	35000000 	strcc	r0, [r0, #-0]
     d7c:	0a000003 	beq	d90 <_Min_Stack_Size+0x990>
     d80:	00000179 	andeq	r0, r0, r9, ror r1
     d84:	3a100001 	bcc	400d90 <_Min_Stack_Size+0x400990>
     d88:	0b000003 	bleq	d9c <_Min_Stack_Size+0x99c>
     d8c:	00000325 	andeq	r0, r0, r5, lsr #6
     d90:	0000a209 	andeq	sl, r0, r9, lsl #4
     d94:	00034f00 	andeq	r4, r3, r0, lsl #30
     d98:	01790a00 	cmneq	r9, r0, lsl #20
     d9c:	00030000 	andeq	r0, r3, r0
     da0:	00035410 	andeq	r5, r3, r0, lsl r4
     da4:	033f0b00 	teqeq	pc, #0, 22
     da8:	a2090000 	andge	r0, r9, #0
     dac:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
     db0:	0a000003 	beq	dc4 <_Min_Stack_Size+0x9c4>
     db4:	00000179 	andeq	r0, r0, r9, ror r1
     db8:	6e100004 	cdpvs	0, 1, cr0, cr0, cr4, {0}
     dbc:	0b000003 	bleq	dd0 <_Min_Stack_Size+0x9d0>
     dc0:	00000359 	andeq	r0, r0, r9, asr r3
     dc4:	00055f0d 	andeq	r5, r5, sp, lsl #30
     dc8:	01870400 	orreq	r0, r7, r0, lsl #8
     dcc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     dd0:	6f04100e 	svcvs	0x0004100e
     dd4:	0003bd02 	andeq	fp, r3, r2, lsl #26
     dd8:	076d0600 	strbeq	r0, [sp, -r0, lsl #12]!
     ddc:	71040000 	mrsvc	r0, (UNDEF: 4)
     de0:	0001df02 	andeq	sp, r1, r2, lsl #30
     de4:	a2060000 	andge	r0, r6, #0
     de8:	04000008 	streq	r0, [r0], #-8
     dec:	01df0272 	bicseq	r0, pc, r2, ror r2	; <UNPREDICTABLE>
     df0:	0f040000 	svceq	0x00040000
     df4:	004c4156 	subeq	r4, ip, r6, asr r1
     df8:	df027304 	svcle	0x00027304
     dfc:	08000001 	stmdaeq	r0, {r0}
     e00:	00078b06 	andeq	r8, r7, r6, lsl #22
     e04:	02740400 	rsbseq	r0, r4, #0, 8
     e08:	0000030b 	andeq	r0, r0, fp, lsl #6
     e0c:	c90d000c 	stmdbgt	sp, {r2, r3}
     e10:	04000007 	streq	r0, [r0], #-7
     e14:	037f0275 	cmneq	pc, #1342177287	; 0x50000007
     e18:	970b0000 	strls	r0, [fp, -r0]
     e1c:	11000000 	mrsne	r0, (UNDEF: 0)
     e20:	01f90501 	mvnseq	r0, r1, lsl #10
     e24:	000003e4 	andeq	r0, r0, r4, ror #7
     e28:	00039d12 	andeq	r9, r3, r2, lsl sp
     e2c:	b2120000 	andslt	r0, r2, #0
     e30:	01000000 	mrseq	r0, (UNDEF: 0)
     e34:	083e0d00 	ldmdaeq	lr!, {r8, sl, fp}
     e38:	f9050000 			; <UNDEFINED> instruction: 0xf9050000
     e3c:	0003ce01 	andeq	ip, r3, r1, lsl #28
     e40:	06041300 	streq	r1, [r4], -r0, lsl #6
     e44:	00042936 	andeq	r2, r4, r6, lsr r9
     e48:	07e71400 	strbeq	r1, [r7, r0, lsl #8]!
     e4c:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
     e50:	0000008c 	andeq	r0, r0, ip, lsl #1
     e54:	081c1400 	ldmdaeq	ip, {sl, ip}
     e58:	3d060000 	stccc	0, cr0, [r6, #-0]
     e5c:	0000008c 	andeq	r0, r0, ip, lsl #1
     e60:	07f71401 	ldrbeq	r1, [r7, r1, lsl #8]!
     e64:	42060000 	andmi	r0, r6, #0
     e68:	0000008c 	andeq	r0, r0, ip, lsl #1
     e6c:	06f81402 	ldrbteq	r1, [r8], r2, lsl #8
     e70:	47060000 	strmi	r0, [r6, -r0]
     e74:	000003e4 	andeq	r0, r0, r4, ror #7
     e78:	e7030003 	str	r0, [r3, -r3]
     e7c:	06000006 	streq	r0, [r0], -r6
     e80:	0003f04a 	andeq	pc, r3, sl, asr #32
     e84:	08b41500 	ldmeq	r4!, {r8, sl, ip}
     e88:	76010000 	strvc	r0, [r1], -r0
     e8c:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
     e90:	00000024 	andeq	r0, r0, r4, lsr #32
     e94:	04589c01 	ldrbeq	r9, [r8], #-3073	; 0xc01
     e98:	2d160000 	ldccs	0, cr0, [r6, #-0]
     e9c:	01000007 	tsteq	r0, r7
     ea0:	0000a276 	andeq	sl, r0, r6, ror r2
     ea4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ea8:	07401500 	strbeq	r1, [r0, -r0, lsl #10]
     eac:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     eb0:	08000604 	stmdaeq	r0, {r2, r9, sl}
     eb4:	000000bc 	strheq	r0, [r0], -ip
     eb8:	04a69c01 	strteq	r9, [r6], #3073	; 0xc01
     ebc:	1d160000 	ldcne	0, cr0, [r6, #-0]
     ec0:	01000007 	tsteq	r0, r7
     ec4:	0004a688 	andeq	sl, r4, r8, lsl #13
     ec8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     ecc:	0007d617 	andeq	sp, r7, r7, lsl r6
     ed0:	8c8a0100 	stfhis	f0, [sl], {0}
     ed4:	02000000 	andeq	r0, r0, #0
     ed8:	4a177791 	bmi	5ded24 <_Min_Stack_Size+0x5de924>
     edc:	01000007 	tsteq	r0, r7
     ee0:	00008c8a 	andeq	r8, r0, sl, lsl #25
     ee4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     ee8:	00079617 	andeq	r9, r7, r7, lsl r6
     eec:	8c8a0100 	stfhis	f0, [sl], {0}
     ef0:	02000000 	andeq	r0, r0, #0
     ef4:	18007591 	stmdane	r0, {r0, r4, r7, r8, sl, ip, sp, lr}
     ef8:	00042904 	andeq	r2, r4, r4, lsl #18
     efc:	07721500 	ldrbeq	r1, [r2, -r0, lsl #10]!
     f00:	b4010000 	strlt	r0, [r1], #-0
     f04:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     f08:	0000002c 	andeq	r0, r0, ip, lsr #32
     f0c:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
     f10:	95160000 	ldrls	r0, [r6, #-0]
     f14:	01000008 	tsteq	r0, r8
     f18:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
     f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f20:	00294a16 	eoreq	r4, r9, r6, lsl sl
     f24:	a2b40100 	adcsge	r0, r4, #0, 2
     f28:	02000000 	andeq	r0, r0, #0
     f2c:	15007091 	strne	r7, [r0, #-145]	; 0x91
     f30:	0000079d 	muleq	r0, sp, r7
     f34:	06ecc701 	strbteq	ip, [ip], r1, lsl #14
     f38:	00400800 	subeq	r0, r0, r0, lsl #16
     f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f40:	00000510 	andeq	r0, r0, r0, lsl r5
     f44:	0008a716 	andeq	sl, r8, r6, lsl r7
     f48:	8cc70100 	stfhie	f0, [r7], {0}
     f4c:	02000000 	andeq	r0, r0, #0
     f50:	56167791 			; <UNDEFINED> instruction: 0x56167791
     f54:	01000007 	tsteq	r0, r7
     f58:	0003e4c7 	andeq	lr, r3, r7, asr #9
     f5c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     f60:	07b11500 	ldreq	r1, [r1, r0, lsl #10]!
     f64:	df010000 	svcle	0x00010000
     f68:	0800072c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl}
     f6c:	00000038 	andeq	r0, r0, r8, lsr r0
     f70:	05349c01 	ldreq	r9, [r4, #-3073]!	; 0xc01
     f74:	0b160000 	bleq	580f7c <_Min_Stack_Size+0x580b7c>
     f78:	01000007 	tsteq	r0, r7
     f7c:	0000a2df 	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
     f80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f84:	04141900 	ldreq	r1, [r4], #-2304	; 0x900
     f88:	a7040000 	strge	r0, [r4, -r0]
     f8c:	0003c906 	andeq	ip, r3, r6, lsl #18
     f90:	06050000 	streq	r0, [r5], -r0
     f94:	00040000 	andeq	r0, r4, r0
     f98:	000003f7 	strdeq	r0, [r0], -r7
     f9c:	012a0104 	teqeq	sl, r4, lsl #2
     fa0:	02010000 	andeq	r0, r1, #0
     fa4:	6900000a 	stmdbvs	r0, {r1, r3}
     fa8:	a0000003 	andge	r0, r0, r3
     fac:	00000000 	andeq	r0, r0, r0
     fb0:	96000000 	strls	r0, [r0], -r0
     fb4:	02000006 	andeq	r0, r0, #6
     fb8:	02a60601 	adceq	r0, r6, #1048576	; 0x100000
     fbc:	33030000 	movwcc	r0, #12288	; 0x3000
     fc0:	02000002 	andeq	r0, r0, #2
     fc4:	0000371d 	andeq	r3, r0, sp, lsl r7
     fc8:	08010200 	stmdaeq	r1, {r9}
     fcc:	000002a4 	andeq	r0, r0, r4, lsr #5
     fd0:	3a050202 	bcc	1417e0 <_Min_Stack_Size+0x1413e0>
     fd4:	03000000 	movweq	r0, #0
     fd8:	0000007c 	andeq	r0, r0, ip, ror r0
     fdc:	00502b02 	subseq	r2, r0, r2, lsl #22
     fe0:	02020000 	andeq	r0, r2, #0
     fe4:	00034b07 	andeq	r4, r3, r7, lsl #22
     fe8:	04450300 	strbeq	r0, [r5], #-768	; 0x300
     fec:	3f020000 	svccc	0x00020000
     ff0:	00000062 	andeq	r0, r0, r2, rrx
     ff4:	00050402 	andeq	r0, r5, r2, lsl #8
     ff8:	03000001 	movweq	r0, #1
     ffc:	00000060 	andeq	r0, r0, r0, rrx
    1000:	00744102 	rsbseq	r4, r4, r2, lsl #2
    1004:	04020000 	streq	r0, [r2], #-0
    1008:	0002f507 	andeq	pc, r2, r7, lsl #10
    100c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    1010:	000000fb 	strdeq	r0, [r0], -fp
    1014:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
    1018:	04000002 	streq	r0, [r0], #-2
    101c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1020:	04020074 	streq	r0, [r2], #-116	; 0x74
    1024:	0002fa07 	andeq	pc, r2, r7, lsl #20
    1028:	02350300 	eorseq	r0, r5, #0, 6
    102c:	2a030000 	bcs	c1034 <_Min_Stack_Size+0xc0c34>
    1030:	0000002c 	andeq	r0, r0, ip, lsr #32
    1034:	00007e03 	andeq	r7, r0, r3, lsl #28
    1038:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    103c:	03000000 	movweq	r0, #0
    1040:	00000447 	andeq	r0, r0, r7, asr #8
    1044:	00574103 	subseq	r4, r7, r3, lsl #2
    1048:	62030000 	andvs	r0, r3, #0
    104c:	03000000 	movweq	r0, #0
    1050:	00006942 	andeq	r6, r0, r2, asr #18
    1054:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1058:	00000044 	andeq	r0, r0, r4, asr #32
    105c:	0000b805 	andeq	fp, r0, r5, lsl #16
    1060:	00b80600 	adcseq	r0, r8, r0, lsl #12
    1064:	00df0000 	sbcseq	r0, pc, r0
    1068:	c3070000 	movwgt	r0, #28672	; 0x7000
    106c:	01000000 	mrseq	r0, (UNDEF: 0)
    1070:	00a20500 	adceq	r0, r2, r0, lsl #10
    1074:	ad050000 	stcge	0, cr0, [r5, #-0]
    1078:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    107c:	01f90401 	mvnseq	r0, r1, lsl #8
    1080:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1084:	00039d09 	andeq	r9, r3, r9, lsl #26
    1088:	b2090000 	andlt	r0, r9, #0
    108c:	01000000 	mrseq	r0, (UNDEF: 0)
    1090:	04280a00 	strteq	r0, [r8], #-2560	; 0xa00
    1094:	018b03d4 	ldrdeq	r0, [fp, r4]
    1098:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    109c:	04000002 	streq	r0, [r0], #-2
    10a0:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
    10a4:	0b000000 	bleq	10ac <_Min_Stack_Size+0xcac>
    10a8:	000000e9 	andeq	r0, r0, r9, ror #1
    10ac:	ca03d704 	bgt	f6cc4 <_Min_Stack_Size+0xf68c4>
    10b0:	04000000 	streq	r0, [r0], #-0
    10b4:	0003eb0b 	andeq	lr, r3, fp, lsl #22
    10b8:	03d80400 	bicseq	r0, r8, #0, 8
    10bc:	000000ca 	andeq	r0, r0, sl, asr #1
    10c0:	01170b08 	tsteq	r7, r8, lsl #22
    10c4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    10c8:	0000ca03 	andeq	ip, r0, r3, lsl #20
    10cc:	490c0c00 	stmdbmi	ip, {sl, fp}
    10d0:	04005244 	streq	r5, [r0], #-580	; 0x244
    10d4:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
    10d8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    10dc:	0052444f 	subseq	r4, r2, pc, asr #8
    10e0:	ca03db04 	bgt	f7cf8 <_Min_Stack_Size+0xf78f8>
    10e4:	14000000 	strne	r0, [r0], #-0
    10e8:	0004920b 	andeq	r9, r4, fp, lsl #4
    10ec:	03dc0400 	bicseq	r0, ip, #0, 8
    10f0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    10f4:	02150b18 	andseq	r0, r5, #24, 22	; 0x6000
    10f8:	dd040000 	stcle	0, cr0, [r4, #-0]
    10fc:	0000df03 	andeq	sp, r0, r3, lsl #30
    1100:	980b1a00 	stmdals	fp, {r9, fp, ip}
    1104:	04000004 	streq	r0, [r0], #-4
    1108:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
    110c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    1110:	00524641 	subseq	r4, r2, r1, asr #12
    1114:	8b03df04 	blhi	f8d2c <_Min_Stack_Size+0xf892c>
    1118:	20000001 	andcs	r0, r0, r1
    111c:	00cf0500 	sbceq	r0, pc, r0, lsl #10
    1120:	000d0000 	andeq	r0, sp, r0
    1124:	04000000 	streq	r0, [r0], #-0
    1128:	00ff03e0 	rscseq	r0, pc, r0, ror #7
    112c:	010e0000 	mrseq	r0, (UNDEF: 14)
    1130:	01bd4205 			; <UNDEFINED> instruction: 0x01bd4205
    1134:	1d090000 	stcne	0, cr0, [r9, #-0]
    1138:	00000001 	andeq	r0, r0, r1
    113c:	00010909 	andeq	r0, r1, r9, lsl #18
    1140:	92090100 	andls	r0, r9, #0, 2
    1144:	02000000 	andeq	r0, r0, #0
    1148:	0000c409 	andeq	ip, r0, r9, lsl #8
    114c:	03000300 	movweq	r0, #768	; 0x300
    1150:	0000001c 	andeq	r0, r0, ip, lsl r0
    1154:	019c4705 	orrseq	r4, ip, r5, lsl #14
    1158:	010e0000 	mrseq	r0, (UNDEF: 14)
    115c:	01dd4f05 	bicseq	r4, sp, r5, lsl #30
    1160:	7d090000 	stcvc	0, cr0, [r9, #-0]
    1164:	00000002 	andeq	r0, r0, r2
    1168:	00004d09 	andeq	r4, r0, r9, lsl #26
    116c:	03000100 	movweq	r0, #256	; 0x100
    1170:	000000d7 	ldrdeq	r0, [r0], -r7
    1174:	01c85205 	biceq	r5, r8, r5, lsl #4
    1178:	010e0000 	mrseq	r0, (UNDEF: 14)
    117c:	02095a05 	andeq	r5, r9, #20480	; 0x5000
    1180:	ca090000 	bgt	241188 <_Min_Stack_Size+0x240d88>
    1184:	00000003 	andeq	r0, r0, r3
    1188:	0003d909 	andeq	sp, r3, r9, lsl #18
    118c:	8d090100 	stfhis	f0, [r9, #-0]
    1190:	02000003 	andeq	r0, r0, #3
    1194:	00023d09 	andeq	r3, r2, r9, lsl #26
    1198:	03000300 	movweq	r0, #768	; 0x300
    119c:	0000028b 	andeq	r0, r0, fp, lsl #5
    11a0:	01e85f05 	mvneq	r5, r5, lsl #30
    11a4:	010e0000 	mrseq	r0, (UNDEF: 14)
    11a8:	022f6e05 	eoreq	r6, pc, #5, 28	; 0x50
    11ac:	21090000 	mrscs	r0, (UNDEF: 9)
    11b0:	00000004 	andeq	r0, r0, r4
    11b4:	00002d09 	andeq	r2, r0, r9, lsl #26
    11b8:	05090100 	streq	r0, [r9, #-256]	; 0x100
    11bc:	02000004 	andeq	r0, r0, #4
    11c0:	04660300 	strbteq	r0, [r6], #-768	; 0x300
    11c4:	72050000 	andvc	r0, r5, #0
    11c8:	00000214 	andeq	r0, r0, r4, lsl r2
    11cc:	7a05010e 	bvc	14160c <_Min_Stack_Size+0x14120c>
    11d0:	0000024f 	andeq	r0, r0, pc, asr #4
    11d4:	00091409 	andeq	r1, r9, r9, lsl #8
    11d8:	d4090000 	strle	r0, [r9], #-0
    11dc:	01000008 	tsteq	r0, r8
    11e0:	09cb0300 	stmibeq	fp, {r8, r9}^
    11e4:	7d050000 	stcvc	0, cr0, [r5, #-0]
    11e8:	0000023a 	andeq	r0, r0, sl, lsr r2
    11ec:	8405080f 	strhi	r0, [r5], #-2063	; 0x80f
    11f0:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    11f4:	00000d10 	andeq	r0, r0, r0, lsl sp
    11f8:	b8860500 	stmlt	r6, {r8, sl}
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	0004a810 	andeq	sl, r4, r0, lsl r8
    1204:	bd890500 	cfstr32lt	mvfx0, [r9]
    1208:	04000001 	streq	r0, [r0], #-1
    120c:	0000b910 	andeq	fp, r0, r0, lsl r9
    1210:	098c0500 	stmibeq	ip, {r8, sl}
    1214:	05000002 	streq	r0, [r0, #-2]
    1218:	00008710 	andeq	r8, r0, r0, lsl r7
    121c:	dd8f0500 	cfstr32le	mvfx0, [pc]	; 1224 <_Min_Stack_Size+0xe24>
    1220:	06000001 	streq	r0, [r0], -r1
    1224:	0002b210 	andeq	fp, r2, r0, lsl r2
    1228:	2f920500 	svccs	0x00920500
    122c:	07000002 	streq	r0, [r0, -r2]
    1230:	031a0300 	tsteq	sl, #0, 6
    1234:	94050000 	strls	r0, [r5], #-0
    1238:	0000025a 	andeq	r0, r0, sl, asr r2
    123c:	00095211 	andeq	r5, r9, r1, lsl r2
    1240:	647f0100 	ldrbtvs	r0, [pc], #-256	; 1248 <_Min_Stack_Size+0xe48>
    1244:	64080007 	strvs	r0, [r8], #-7
    1248:	01000001 	tsteq	r0, r1
    124c:	0002ce9c 	muleq	r2, ip, lr
    1250:	16c91200 	strbne	r1, [r9], r0, lsl #4
    1254:	7f010000 	svcvc	0x00010000
    1258:	000002ce 	andeq	r0, r0, lr, asr #5
    125c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1260:	01900413 	orrseq	r0, r0, r3, lsl r4
    1264:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    1268:	01000009 	tsteq	r0, r9
    126c:	0008c8ca 	andeq	ip, r8, sl, asr #17
    1270:	00011a08 	andeq	r1, r1, r8, lsl #20
    1274:	309c0100 	addscc	r0, ip, r0, lsl #2
    1278:	12000003 	andne	r0, r0, #3
    127c:	000016c9 	andeq	r1, r0, r9, asr #13
    1280:	02ceca01 	sbceq	ip, lr, #4096	; 0x1000
    1284:	91020000 	mrsls	r0, (UNDEF: 2)
    1288:	097e1264 	ldmdbeq	lr!, {r2, r5, r6, r9, ip}^
    128c:	ca010000 	bgt	41294 <_Min_Stack_Size+0x40e94>
    1290:	00000330 	andeq	r0, r0, r0, lsr r3
    1294:	15609102 	strbne	r9, [r0, #-258]!	; 0x102
    1298:	000008cd 	andeq	r0, r0, sp, asr #17
    129c:	00b8cc01 	adcseq	ip, r8, r1, lsl #24
    12a0:	91020000 	mrsls	r0, (UNDEF: 2)
    12a4:	6f701674 	svcvs	0x00701674
    12a8:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    12ac:	000000b8 	strheq	r0, [r0], -r8
    12b0:	15709102 	ldrbne	r9, [r0, #-258]!	; 0x102
    12b4:	000009d5 	ldrdeq	r0, [r0], -r5
    12b8:	00b8cc01 	adcseq	ip, r8, r1, lsl #24
    12bc:	91020000 	mrsls	r0, (UNDEF: 2)
    12c0:	0413006c 	ldreq	r0, [r3], #-108	; 0x6c
    12c4:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    12c8:	0008fd14 	andeq	pc, r8, r4, lsl sp	; <UNPREDICTABLE>
    12cc:	e4fe0100 	ldrbt	r0, [lr], #256	; 0x100
    12d0:	32080009 	andcc	r0, r8, #9
    12d4:	01000000 	mrseq	r0, (UNDEF: 0)
    12d8:	00035a9c 	muleq	r3, ip, sl
    12dc:	097e1200 	ldmdbeq	lr!, {r9, ip}^
    12e0:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    12e4:	00000330 	andeq	r0, r0, r0, lsr r3
    12e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12ec:	0009b817 	andeq	fp, r9, r7, lsl r8
    12f0:	01150100 	tsteq	r5, r0, lsl #2
    12f4:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
    12f8:	00000042 	andeq	r0, r0, r2, asr #32
    12fc:	039e9c01 	orrseq	r9, lr, #256	; 0x100
    1300:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    1304:	01000016 	tsteq	r0, r6, lsl r0
    1308:	02ce0115 	sbceq	r0, lr, #1073741829	; 0x40000005
    130c:	91020000 	mrsls	r0, (UNDEF: 2)
    1310:	000d186c 	andeq	r1, sp, ip, ror #16
    1314:	15010000 	strne	r0, [r1, #-0]
    1318:	0000a201 	andeq	sl, r0, r1, lsl #4
    131c:	6a910200 	bvs	fe441b24 <_estack+0xde411b24>
    1320:	706d7419 	rsbvc	r7, sp, r9, lsl r4
    1324:	01170100 	tsteq	r7, r0, lsl #2
    1328:	000000ca 	andeq	r0, r0, sl, asr #1
    132c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1330:	00095e1a 	andeq	r5, r9, sl, lsl lr
    1334:	01430100 	mrseq	r0, (UNDEF: 83)
    1338:	00000097 	muleq	r0, r7, r0
    133c:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
    1340:	00000034 	andeq	r0, r0, r4, lsr r0
    1344:	03e69c01 	mvneq	r9, #256	; 0x100
    1348:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    134c:	01000016 	tsteq	r0, r6, lsl r0
    1350:	02ce0143 	sbceq	r0, lr, #-1073741808	; 0xc0000010
    1354:	91020000 	mrsls	r0, (UNDEF: 2)
    1358:	000d186c 	andeq	r1, sp, ip, ror #16
    135c:	43010000 	movwmi	r0, #4096	; 0x1000
    1360:	0000a201 	andeq	sl, r0, r1, lsl #4
    1364:	6a910200 	bvs	fe441b6c <_estack+0xde411b6c>
    1368:	0009741b 	andeq	r7, r9, fp, lsl r4
    136c:	01450100 	mrseq	r0, (UNDEF: 85)
    1370:	00000097 	muleq	r0, r7, r0
    1374:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1378:	0009a51a 	andeq	sl, r9, sl, lsl r5
    137c:	015d0100 	cmpeq	sp, r0, lsl #2
    1380:	000000a2 	andeq	r0, r0, r2, lsr #1
    1384:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
    1388:	0000001a 	andeq	r0, r0, sl, lsl r0
    138c:	04109c01 	ldreq	r9, [r0], #-3073	; 0xc01
    1390:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    1394:	01000016 	tsteq	r0, r6, lsl r0
    1398:	02ce015d 	sbceq	r0, lr, #1073741847	; 0x40000017
    139c:	91020000 	mrsls	r0, (UNDEF: 2)
    13a0:	641a0074 	ldrvs	r0, [sl], #-116	; 0x74
    13a4:	0100000a 	tsteq	r0, sl
    13a8:	0097016e 	addseq	r0, r7, lr, ror #2
    13ac:	0aac0000 	beq	feb013b4 <_estack+0xdead13b4>
    13b0:	00340800 	eorseq	r0, r4, r0, lsl #16
    13b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    13b8:	00000458 	andeq	r0, r0, r8, asr r4
    13bc:	0016c918 	andseq	ip, r6, r8, lsl r9
    13c0:	016e0100 	cmneq	lr, r0, lsl #2
    13c4:	000002ce 	andeq	r0, r0, lr, asr #5
    13c8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    13cc:	0000000d 	andeq	r0, r0, sp
    13d0:	a2016e01 	andge	r6, r1, #1, 28
    13d4:	02000000 	andeq	r0, r0, #0
    13d8:	741b6a91 	ldrvc	r6, [fp], #-2705	; 0xa91
    13dc:	01000009 	tsteq	r0, r9
    13e0:	00970170 	addseq	r0, r7, r0, ror r1
    13e4:	91020000 	mrsls	r0, (UNDEF: 2)
    13e8:	dc1a0077 	ldcle	0, cr0, [sl], {119}	; 0x77
    13ec:	01000008 	tsteq	r0, r8
    13f0:	00a20188 	adceq	r0, r2, r8, lsl #3
    13f4:	0ae00000 	beq	ff8013fc <_estack+0xdf7d13fc>
    13f8:	001a0800 	andseq	r0, sl, r0, lsl #16
    13fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1400:	00000482 	andeq	r0, r0, r2, lsl #9
    1404:	0016c918 	andseq	ip, r6, r8, lsl r9
    1408:	01880100 	orreq	r0, r8, r0, lsl #2
    140c:	000002ce 	andeq	r0, r0, lr, asr #5
    1410:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1414:	00092c17 	andeq	r2, r9, r7, lsl ip
    1418:	019c0100 	orrseq	r0, ip, r0, lsl #2
    141c:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
    1420:	0000001c 	andeq	r0, r0, ip, lsl r0
    1424:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    1428:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    142c:	01000016 	tsteq	r0, r6, lsl r0
    1430:	02ce019c 	sbceq	r0, lr, #156, 2	; 0x27
    1434:	91020000 	mrsls	r0, (UNDEF: 2)
    1438:	000d1874 	andeq	r1, sp, r4, ror r8
    143c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1440:	0000a201 	andeq	sl, r0, r1, lsl #4
    1444:	72910200 	addsvc	r0, r1, #0, 4
    1448:	09431700 	stmdbeq	r3, {r8, r9, sl, ip}^
    144c:	b1010000 	mrslt	r0, (UNDEF: 1)
    1450:	000b1801 	andeq	r1, fp, r1, lsl #16
    1454:	00001c08 	andeq	r1, r0, r8, lsl #24
    1458:	ec9c0100 	ldfs	f0, [ip], {0}
    145c:	18000004 	stmdane	r0, {r2}
    1460:	000016c9 	andeq	r1, r0, r9, asr #13
    1464:	ce01b101 	mvfgts	f3, f1
    1468:	02000002 	andeq	r0, r0, #2
    146c:	0d187491 	cfldrseq	mvf7, [r8, #-580]	; 0xfffffdbc
    1470:	01000000 	mrseq	r0, (UNDEF: 0)
    1474:	00a201b1 	strhteq	r0, [r2], r1
    1478:	91020000 	mrsls	r0, (UNDEF: 2)
    147c:	1e170072 	mrcne	0, 0, r0, cr7, cr2, {3}
    1480:	01000009 	tsteq	r0, r9
    1484:	0b3401c7 	bleq	d01ba8 <_Min_Stack_Size+0xd017a8>
    1488:	002e0800 	eoreq	r0, lr, r0, lsl #16
    148c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1490:	00000530 	andeq	r0, r0, r0, lsr r5
    1494:	0016c918 	andseq	ip, r6, r8, lsl r9
    1498:	01c70100 	biceq	r0, r7, r0, lsl #2
    149c:	000002ce 	andeq	r0, r0, lr, asr #5
    14a0:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    14a4:	0000000d 	andeq	r0, r0, sp
    14a8:	a201c701 	andge	ip, r1, #262144	; 0x40000
    14ac:	02000000 	andeq	r0, r0, #0
    14b0:	0d187291 	lfmeq	f7, 4, [r8, #-580]	; 0xfffffdbc
    14b4:	01000009 	tsteq	r0, r9
    14b8:	024f01c7 	subeq	r0, pc, #-1073741775	; 0xc0000031
    14bc:	91020000 	mrsls	r0, (UNDEF: 2)
    14c0:	e0170071 	ands	r0, r7, r1, ror r0
    14c4:	01000009 	tsteq	r0, r9
    14c8:	0b6401e0 	bleq	1901c50 <_Min_Stack_Size+0x1901850>
    14cc:	001c0800 	andseq	r0, ip, r0, lsl #16
    14d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    14d4:	00000565 	andeq	r0, r0, r5, ror #10
    14d8:	0016c918 	andseq	ip, r6, r8, lsl r9
    14dc:	01e00100 	mvneq	r0, r0, lsl #2
    14e0:	000002ce 	andeq	r0, r0, lr, asr #5
    14e4:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    14e8:	0000098e 	andeq	r0, r0, lr, lsl #19
    14ec:	a201e001 	andge	lr, r1, #1
    14f0:	02000000 	andeq	r0, r0, #0
    14f4:	17007291 			; <UNDEFINED> instruction: 0x17007291
    14f8:	000009eb 	andeq	r0, r0, fp, ror #19
    14fc:	8001f001 	andhi	pc, r1, r1
    1500:	2208000b 	andcs	r0, r8, #11
    1504:	01000000 	mrseq	r0, (UNDEF: 0)
    1508:	00059a9c 	muleq	r5, ip, sl
    150c:	16c91800 	strbne	r1, [r9], r0, lsl #16
    1510:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1514:	0002ce01 	andeq	ip, r2, r1, lsl #28
    1518:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    151c:	00000d18 	andeq	r0, r0, r8, lsl sp
    1520:	01f00100 	mvnseq	r0, r0, lsl #2
    1524:	000000a2 	andeq	r0, r0, r2, lsr #1
    1528:	00729102 	rsbseq	r9, r2, r2, lsl #2
    152c:	000a5317 	andeq	r5, sl, r7, lsl r3
    1530:	02430100 	subeq	r0, r3, #0, 2
    1534:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
    1538:	0000008c 	andeq	r0, r0, ip, lsl #1
    153c:	05fc9c01 	ldrbeq	r9, [ip, #3073]!	; 0xc01
    1540:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    1544:	01000016 	tsteq	r0, r6, lsl r0
    1548:	02ce0243 	sbceq	r0, lr, #805306372	; 0x30000004
    154c:	91020000 	mrsls	r0, (UNDEF: 2)
    1550:	0996186c 	ldmibeq	r6, {r2, r3, r5, r6, fp, ip}
    1554:	43010000 	movwmi	r0, #4096	; 0x1000
    1558:	0000a202 	andeq	sl, r0, r2, lsl #4
    155c:	6a910200 	bvs	fe441d64 <_estack+0xde411d64>
    1560:	0008f018 	andeq	pc, r8, r8, lsl r0	; <UNPREDICTABLE>
    1564:	02430100 	subeq	r0, r3, #0, 2
    1568:	00000097 	muleq	r0, r7, r0
    156c:	1b699102 	blne	1a6597c <_Min_Stack_Size+0x1a6557c>
    1570:	000008f8 	strdeq	r0, [r0], -r8
    1574:	b8024501 	stmdalt	r2, {r0, r8, sl, lr}
    1578:	02000000 	andeq	r0, r0, #0
    157c:	fb1b7491 	blx	6de7ca <_Min_Stack_Size+0x6de3ca>
    1580:	01000009 	tsteq	r0, r9
    1584:	00b80246 	adcseq	r0, r8, r6, asr #4
    1588:	91020000 	mrsls	r0, (UNDEF: 2)
    158c:	141c0070 	ldrne	r0, [ip], #-112	; 0x70
    1590:	06000004 	streq	r0, [r0], -r4
    1594:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    1598:	11000000 	mrsne	r0, (UNDEF: 0)
    159c:	0400000e 	streq	r0, [r0], #-14
    15a0:	00059c00 	andeq	r9, r5, r0, lsl #24
    15a4:	2a010400 	bcs	425ac <_Min_Stack_Size+0x421ac>
    15a8:	01000001 	tsteq	r0, r1
    15ac:	00000f57 	andeq	r0, r0, r7, asr pc
    15b0:	00000369 	andeq	r0, r0, r9, ror #6
    15b4:	00000118 	andeq	r0, r0, r8, lsl r1
    15b8:	00000000 	andeq	r0, r0, r0
    15bc:	00000992 	muleq	r0, r2, r9
    15c0:	a6060102 	strge	r0, [r6], -r2, lsl #2
    15c4:	03000002 	movweq	r0, #2
    15c8:	00000233 	andeq	r0, r0, r3, lsr r2
    15cc:	00371d02 	eorseq	r1, r7, r2, lsl #26
    15d0:	01020000 	mrseq	r0, (UNDEF: 2)
    15d4:	0002a408 	andeq	sl, r2, r8, lsl #8
    15d8:	05020200 	streq	r0, [r2, #-512]	; 0x200
    15dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    15e0:	00007c03 	andeq	r7, r0, r3, lsl #24
    15e4:	502b0200 	eorpl	r0, fp, r0, lsl #4
    15e8:	02000000 	andeq	r0, r0, #0
    15ec:	034b0702 	movteq	r0, #46850	; 0xb702
    15f0:	45030000 	strmi	r0, [r3, #-0]
    15f4:	02000004 	andeq	r0, r0, #4
    15f8:	0000623f 	andeq	r6, r0, pc, lsr r2
    15fc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1600:	00000100 	andeq	r0, r0, r0, lsl #2
    1604:	00006003 	andeq	r6, r0, r3
    1608:	74410200 	strbvc	r0, [r1], #-512	; 0x200
    160c:	02000000 	andeq	r0, r0, #0
    1610:	02f50704 	rscseq	r0, r5, #4, 14	; 0x100000
    1614:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1618:	0000fb05 	andeq	pc, r0, r5, lsl #22
    161c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1620:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1624:	69050404 	stmdbvs	r5, {r2, sl}
    1628:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    162c:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    1630:	35030000 	strcc	r0, [r3, #-0]
    1634:	03000002 	movweq	r0, #2
    1638:	00002c2a 	andeq	r2, r0, sl, lsr #24
    163c:	007e0300 	rsbseq	r0, lr, r0, lsl #6
    1640:	36030000 	strcc	r0, [r3], -r0
    1644:	00000045 	andeq	r0, r0, r5, asr #32
    1648:	00044703 	andeq	r4, r4, r3, lsl #14
    164c:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    1650:	03000000 	movweq	r0, #0
    1654:	00000062 	andeq	r0, r0, r2, rrx
    1658:	00694203 	rsbeq	r4, r9, r3, lsl #4
    165c:	04020000 	streq	r0, [r2], #-0
    1660:	00004407 	andeq	r4, r0, r7, lsl #8
    1664:	00b80500 	adcseq	r0, r8, r0, lsl #10
    1668:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    166c:	df000000 	svcle	0x00000000
    1670:	07000000 	streq	r0, [r0, -r0]
    1674:	000000c3 	andeq	r0, r0, r3, asr #1
    1678:	ad050001 	stcge	0, cr0, [r5, #-4]
    167c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1680:	01f70401 	mvnseq	r0, r1, lsl #8
    1684:	000000fa 	strdeq	r0, [r0], -sl
    1688:	00091809 	andeq	r1, r9, r9, lsl #16
    168c:	530a0000 	movwpl	r0, #40960	; 0xa000
    1690:	01005445 	tsteq	r0, r5, asr #8
    1694:	1d990b00 	vldrne	d0, [r9]
    1698:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    169c:	0000e401 	andeq	lr, r0, r1, lsl #8
    16a0:	4d4e0b00 	vstrmi	d16, [lr, #-0]
    16a4:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    16a8:	0000e401 	andeq	lr, r0, r1, lsl #8
    16ac:	04010800 	streq	r0, [r1], #-2048	; 0x800
    16b0:	012801f9 	strdeq	r0, [r8, -r9]!
    16b4:	9d090000 	stcls	0, cr0, [r9, #-0]
    16b8:	00000003 	andeq	r0, r0, r3
    16bc:	0000b209 	andeq	fp, r0, r9, lsl #4
    16c0:	0b000100 	bleq	1ac8 <_Min_Stack_Size+0x16c8>
    16c4:	0000083e 	andeq	r0, r0, lr, lsr r8
    16c8:	1201f904 	andne	pc, r1, #4, 18	; 0x10000
    16cc:	08000001 	stmdaeq	r0, {r0}
    16d0:	01fc0401 	mvnseq	r0, r1, lsl #8
    16d4:	0000014a 	andeq	r0, r0, sl, asr #2
    16d8:	004ef509 	subeq	pc, lr, r9, lsl #10
    16dc:	ca090000 	bgt	2416e4 <_Min_Stack_Size+0x2412e4>
    16e0:	01000010 	tsteq	r0, r0, lsl r0
    16e4:	0c560b00 	mrrceq	11, 0, r0, r6, cr0
    16e8:	fc040000 	stc2	0, cr0, [r4], {-0}
    16ec:	00013401 	andeq	r3, r1, r1, lsl #8
    16f0:	04900c00 	ldreq	r0, [r0], #3072	; 0xc00
    16f4:	02ff0455 	rscseq	r0, pc, #1426063360	; 0x55000000
    16f8:	430d0000 	movwmi	r0, #53248	; 0xd000
    16fc:	57040052 	smlsdpl	r4, r2, r0, r0
    1700:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1704:	bc0e0000 	stclt	0, cr0, [lr], {-0}
    1708:	04000004 	streq	r0, [r0], #-4
    170c:	00ca0458 	sbceq	r0, sl, r8, asr r4
    1710:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1714:	000006c7 	andeq	r0, r0, r7, asr #13
    1718:	ca045904 	bgt	117b30 <_Min_Stack_Size+0x117730>
    171c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1720:	5249430d 	subpl	r4, r9, #872415232	; 0x34000000
    1724:	045a0400 	ldrbeq	r0, [sl], #-1024	; 0x400
    1728:	000000ca 	andeq	r0, r0, sl, asr #1
    172c:	05420e0c 	strbeq	r0, [r2, #-3596]	; 0xe0c
    1730:	5b040000 	blpl	101738 <_Min_Stack_Size+0x101338>
    1734:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1738:	d50e1000 	strle	r1, [lr, #-0]
    173c:	04000004 	streq	r0, [r0], #-4
    1740:	00ca045c 	sbceq	r0, sl, ip, asr r4
    1744:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1748:	000006aa 	andeq	r0, r0, sl, lsr #13
    174c:	ca045d04 	bgt	118b64 <_Min_Stack_Size+0x118764>
    1750:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1754:	0006550e 	andeq	r5, r6, lr, lsl #10
    1758:	045e0400 	ldrbeq	r0, [lr], #-1024	; 0x400
    175c:	000000b8 	strheq	r0, [r0], -r8
    1760:	04c40e1c 	strbeq	r0, [r4], #3612	; 0xe1c
    1764:	5f040000 	svcpl	0x00040000
    1768:	0000ca04 	andeq	ip, r0, r4, lsl #20
    176c:	960e2000 	strls	r2, [lr], -r0
    1770:	04000005 	streq	r0, [r0], #-5
    1774:	00ca0460 	sbceq	r0, sl, r0, ror #8
    1778:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    177c:	0000065f 	andeq	r0, r0, pc, asr r6
    1780:	cf046104 	svcgt	0x00046104
    1784:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1788:	00069d0e 	andeq	r9, r6, lr, lsl #26
    178c:	04620400 	strbteq	r0, [r2], #-1024	; 0x400
    1790:	000000ca 	andeq	r0, r0, sl, asr #1
    1794:	04cd0e30 	strbeq	r0, [sp], #3632	; 0xe30
    1798:	63040000 	movwvs	r0, #16384	; 0x4000
    179c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    17a0:	b50e3400 	strlt	r3, [lr, #-1024]	; 0x400
    17a4:	04000005 	streq	r0, [r0], #-5
    17a8:	00ca0464 	sbceq	r0, sl, r4, ror #8
    17ac:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    17b0:	00000669 	andeq	r0, r0, r9, ror #12
    17b4:	b8046504 	stmdalt	r4, {r2, r8, sl, sp, lr}
    17b8:	3c000000 	stccc	0, cr0, [r0], {-0}
    17bc:	0005680e 	andeq	r6, r5, lr, lsl #16
    17c0:	04660400 	strbteq	r0, [r6], #-1024	; 0x400
    17c4:	000000ca 	andeq	r0, r0, sl, asr #1
    17c8:	05cd0e40 	strbeq	r0, [sp, #3648]	; 0xe40
    17cc:	67040000 	strvs	r0, [r4, -r0]
    17d0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    17d4:	550e4400 	strpl	r4, [lr, #-1024]	; 0x400
    17d8:	04000005 	streq	r0, [r0], #-5
    17dc:	00cf0468 	sbceq	r0, pc, r8, ror #8
    17e0:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    17e4:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    17e8:	ca046904 	bgt	11bc00 <_Min_Stack_Size+0x11b800>
    17ec:	50000000 	andpl	r0, r0, r0
    17f0:	0006460e 	andeq	r4, r6, lr, lsl #12
    17f4:	046a0400 	strbteq	r0, [sl], #-1024	; 0x400
    17f8:	000000ca 	andeq	r0, r0, sl, asr #1
    17fc:	054b0e54 	strbeq	r0, [fp, #-3668]	; 0xe54
    1800:	6b040000 	blvs	101808 <_Min_Stack_Size+0x101408>
    1804:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1808:	7f0e5800 	svcvc	0x000e5800
    180c:	04000006 	streq	r0, [r0], #-6
    1810:	00b8046c 	adcseq	r0, r8, ip, ror #8
    1814:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    1818:	00000611 	andeq	r0, r0, r1, lsl r6
    181c:	ca046d04 	bgt	11cc34 <_Min_Stack_Size+0x11c834>
    1820:	60000000 	andvs	r0, r0, r0
    1824:	0006d20e 	andeq	sp, r6, lr, lsl #4
    1828:	046e0400 	strbteq	r0, [lr], #-1024	; 0x400
    182c:	000000ca 	andeq	r0, r0, sl, asr #1
    1830:	06890e64 	streq	r0, [r9], r4, ror #28
    1834:	6f040000 	svcvs	0x00040000
    1838:	0000cf04 	andeq	ip, r0, r4, lsl #30
    183c:	de0e6800 	cdple	8, 0, cr6, cr14, cr0, {0}
    1840:	04000004 	streq	r0, [r0], #-4
    1844:	00ca0470 	sbceq	r0, sl, r0, ror r4
    1848:	0d700000 	ldcleq	0, cr0, [r0, #-0]
    184c:	00525343 	subseq	r5, r2, r3, asr #6
    1850:	ca047104 	bgt	11dc68 <_Min_Stack_Size+0x11d868>
    1854:	74000000 	strvc	r0, [r0], #-0
    1858:	0006930e 	andeq	r9, r6, lr, lsl #6
    185c:	04720400 	ldrbteq	r0, [r2], #-1024	; 0x400
    1860:	000000cf 	andeq	r0, r0, pc, asr #1
    1864:	04fa0e78 	ldrbteq	r0, [sl], #3704	; 0xe78
    1868:	73040000 	movwvc	r0, #16384	; 0x4000
    186c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1870:	e30e8000 	movw	r8, #57344	; 0xe000
    1874:	04000004 	streq	r0, [r0], #-4
    1878:	00ca0474 	sbceq	r0, sl, r4, ror r4
    187c:	0e840000 	cdpeq	0, 8, cr0, cr4, cr0, {0}
    1880:	000006c1 	andeq	r0, r0, r1, asr #13
    1884:	ca047504 	bgt	11ec9c <_Min_Stack_Size+0x11e89c>
    1888:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    188c:	0005700e 	andeq	r7, r5, lr
    1890:	04760400 	ldrbteq	r0, [r6], #-1024	; 0x400
    1894:	000000ca 	andeq	r0, r0, sl, asr #1
    1898:	8a0b008c 	bhi	2c1ad0 <_Min_Stack_Size+0x2c16d0>
    189c:	04000005 	streq	r0, [r0], #-5
    18a0:	01560478 	cmpeq	r6, r8, ror r4
    18a4:	100f0000 	andne	r0, pc, r0
    18a8:	03443005 	movteq	r3, #16389	; 0x4005
    18ac:	c2100000 	andsgt	r0, r0, #0
    18b0:	0500000a 	streq	r0, [r0, #-10]
    18b4:	0000b832 	andeq	fp, r0, r2, lsr r8
    18b8:	9a100000 	bls	4018c0 <_Min_Stack_Size+0x4014c0>
    18bc:	0500000c 	streq	r0, [r0, #-12]
    18c0:	0000b833 	andeq	fp, r0, r3, lsr r8
    18c4:	47100400 	ldrmi	r0, [r0, -r0, lsl #8]
    18c8:	0500000f 	streq	r0, [r0, #-15]
    18cc:	0000b834 	andeq	fp, r0, r4, lsr r8
    18d0:	90100800 	andsls	r0, r0, r0, lsl #16
    18d4:	0500000b 	streq	r0, [r0, #-11]
    18d8:	0000b835 	andeq	fp, r0, r5, lsr r8
    18dc:	03000c00 	movweq	r0, #3072	; 0xc00
    18e0:	000010e0 	andeq	r1, r0, r0, ror #1
    18e4:	030b3605 	movweq	r3, #46597	; 0xb605
    18e8:	00110000 	andseq	r0, r1, r0
    18ec:	01000010 	tsteq	r0, r0, lsl r0
    18f0:	000c30d5 	ldrdeq	r3, [ip], -r5
    18f4:	00007008 	andeq	r7, r0, r8
    18f8:	129c0100 	addsne	r0, ip, #0, 2
    18fc:	00000e77 	andeq	r0, r0, r7, ror lr
    1900:	a0010801 	andge	r0, r1, r1, lsl #16
    1904:	2408000c 	strcs	r0, [r8], #-12
    1908:	01000000 	mrseq	r0, (UNDEF: 0)
    190c:	0003869c 	muleq	r3, ip, r6
    1910:	0f3f1300 	svceq	0x003f1300
    1914:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1918:	00009701 	andeq	r9, r0, r1, lsl #14
    191c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1920:	0c841400 	cfstrseq	mvf1, [r4], {0}
    1924:	20010000 	andcs	r0, r1, r0
    1928:	00014a01 	andeq	r4, r1, r1, lsl #20
    192c:	000cc400 	andeq	ip, ip, r0, lsl #8
    1930:	00005008 	andeq	r5, r0, r8
    1934:	ce9c0100 	fmlgte	f0, f4, f0
    1938:	15000003 	strne	r0, [r0, #-3]
    193c:	00001048 	andeq	r1, r0, r8, asr #32
    1940:	ca012201 	bgt	4a14c <_Min_Stack_Size+0x49d4c>
    1944:	02000000 	andeq	r0, r0, #0
    1948:	58157091 	ldmdapl	r5, {r0, r4, r7, ip, sp, lr}
    194c:	0100001a 	tsteq	r0, sl, lsl r0
    1950:	014a0123 	cmpeq	sl, r3, lsr #2
    1954:	91020000 	mrsls	r0, (UNDEF: 2)
    1958:	0fc51577 	svceq	0x00c51577
    195c:	24010000 	strcs	r0, [r1], #-0
    1960:	0000fa01 	andeq	pc, r0, r1, lsl #20
    1964:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1968:	0fa71200 	svceq	0x00a71200
    196c:	3f010000 	svccc	0x00010000
    1970:	000d1401 	andeq	r1, sp, r1, lsl #8
    1974:	00003c08 	andeq	r3, r0, r8, lsl #24
    1978:	039c0100 	orrseq	r0, ip, #0, 2
    197c:	13000004 	movwne	r0, #4
    1980:	00000fb1 			; <UNDEFINED> instruction: 0x00000fb1
    1984:	97013f01 	strls	r3, [r1, -r1, lsl #30]
    1988:	02000000 	andeq	r0, r0, #0
    198c:	89156f91 	ldmdbhi	r5, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    1990:	0100000b 	tsteq	r0, fp
    1994:	00b80141 	adcseq	r0, r8, r1, asr #2
    1998:	91020000 	mrsls	r0, (UNDEF: 2)
    199c:	8a120074 	bhi	481b74 <_Min_Stack_Size+0x481774>
    19a0:	0100000d 	tsteq	r0, sp
    19a4:	0d500163 	ldfeqe	f0, [r0, #-396]	; 0xfffffe74
    19a8:	00200800 	eoreq	r0, r0, r0, lsl #16
    19ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    19b0:	00000429 	andeq	r0, r0, r9, lsr #8
    19b4:	00075613 	andeq	r5, r7, r3, lsl r6
    19b8:	01630100 	cmneq	r3, r0, lsl #2
    19bc:	00000128 	andeq	r0, r0, r8, lsr #2
    19c0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    19c4:	000c2c12 	andeq	r2, ip, r2, lsl ip
    19c8:	017c0100 	cmneq	ip, r0, lsl #2
    19cc:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
    19d0:	00000040 	andeq	r0, r0, r0, asr #32
    19d4:	044f9c01 	strbeq	r9, [pc], #-3073	; 19dc <_Min_Stack_Size+0x15dc>
    19d8:	84130000 	ldrhi	r0, [r3], #-0
    19dc:	0100000a 	tsteq	r0, sl
    19e0:	0097017c 	addseq	r0, r7, ip, ror r1
    19e4:	91020000 	mrsls	r0, (UNDEF: 2)
    19e8:	9b120077 	blls	481bcc <_Min_Stack_Size+0x4817cc>
    19ec:	01000010 	tsteq	r0, r0, lsl r0
    19f0:	0db001a4 	ldfeqs	f0, [r0, #656]!	; 0x290
    19f4:	00200800 	eoreq	r0, r0, r0, lsl #16
    19f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    19fc:	00000475 	andeq	r0, r0, r5, ror r4
    1a00:	00075613 	andeq	r5, r7, r3, lsl r6
    1a04:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    1a08:	00000128 	andeq	r0, r0, r8, lsr #2
    1a0c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1a10:	0010d212 	andseq	sp, r0, r2, lsl r2
    1a14:	01cf0100 	biceq	r0, pc, r0, lsl #2
    1a18:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
    1a1c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1a20:	04d79c01 	ldrbeq	r9, [r7], #3073	; 0xc01
    1a24:	62130000 	andsvs	r0, r3, #0
    1a28:	0100000c 	tsteq	r0, ip
    1a2c:	00b801cf 	adcseq	r0, r8, pc, asr #3
    1a30:	91020000 	mrsls	r0, (UNDEF: 2)
    1a34:	0b381374 	bleq	e0680c <_Min_Stack_Size+0xe0640c>
    1a38:	cf010000 	svcgt	0x00010000
    1a3c:	0000b801 	andeq	fp, r0, r1, lsl #16
    1a40:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a44:	000af913 	andeq	pc, sl, r3, lsl r9	; <UNPREDICTABLE>
    1a48:	01cf0100 	biceq	r0, pc, r0, lsl #2
    1a4c:	000000b8 	strheq	r0, [r0], -r8
    1a50:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1a54:	00000b18 	andeq	r0, r0, r8, lsl fp
    1a58:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    1a5c:	02000000 	andeq	r0, r0, #0
    1a60:	1d136891 	ldcne	8, cr6, [r3, #-580]	; 0xfffffdbc
    1a64:	0100000b 	tsteq	r0, fp
    1a68:	00b801cf 	adcseq	r0, r8, pc, asr #3
    1a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a70:	c8120000 	ldmdagt	r2, {}	; <UNPREDICTABLE>
    1a74:	0100000e 	tsteq	r0, lr
    1a78:	0e0c01e6 	adfeq<illegal precision>z	f0, f4, f6
    1a7c:	00200800 	eoreq	r0, r0, r0, lsl #16
    1a80:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a84:	000004fd 	strdeq	r0, [r0], -sp
    1a88:	00075613 	andeq	r5, r7, r3, lsl r6
    1a8c:	01e60100 	mvneq	r0, r0, lsl #2
    1a90:	00000128 	andeq	r0, r0, r8, lsr #2
    1a94:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1a98:	000d7912 	andeq	r7, sp, r2, lsl r9
    1a9c:	02280100 	eoreq	r0, r8, #0, 2
    1aa0:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
    1aa4:	00000030 	andeq	r0, r0, r0, lsr r0
    1aa8:	05419c01 	strbeq	r9, [r1, #-3073]	; 0xc01
    1aac:	cf130000 	svcgt	0x00130000
    1ab0:	0100000f 	tsteq	r0, pc
    1ab4:	00b80228 	adcseq	r0, r8, r8, lsr #4
    1ab8:	91020000 	mrsls	r0, (UNDEF: 2)
    1abc:	100b1374 	andne	r1, fp, r4, ror r3
    1ac0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1ac4:	0000b802 	andeq	fp, r0, r2, lsl #16
    1ac8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1acc:	00101313 	andseq	r1, r0, r3, lsl r3
    1ad0:	02280100 	eoreq	r0, r8, #0, 2
    1ad4:	000000b8 	strheq	r0, [r0], -r8
    1ad8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1adc:	000cf412 	andeq	pc, ip, r2, lsl r4	; <UNPREDICTABLE>
    1ae0:	02390100 	eorseq	r0, r9, #0, 2
    1ae4:	08000e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp}
    1ae8:	00000020 	andeq	r0, r0, r0, lsr #32
    1aec:	05679c01 	strbeq	r9, [r7, #-3073]!	; 0xc01
    1af0:	56130000 	ldrpl	r0, [r3], -r0
    1af4:	01000007 	tsteq	r0, r7
    1af8:	01280239 	teqeq	r8, r9, lsr r2
    1afc:	91020000 	mrsls	r0, (UNDEF: 2)
    1b00:	11120077 	tstne	r2, r7, ror r0
    1b04:	0100000e 	tsteq	r0, lr
    1b08:	0e7c0256 	mrceq	2, 3, r0, cr12, cr6, {2}
    1b0c:	00300800 	eorseq	r0, r0, r0, lsl #16
    1b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b14:	000005ab 	andeq	r0, r0, fp, lsr #11
    1b18:	000e9c13 	andeq	r9, lr, r3, lsl ip
    1b1c:	02560100 	subseq	r0, r6, #0, 2
    1b20:	000000b8 	strheq	r0, [r0], -r8
    1b24:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1b28:	00000ea4 	andeq	r0, r0, r4, lsr #29
    1b2c:	b8025601 	stmdalt	r2, {r0, r9, sl, ip, lr}
    1b30:	02000000 	andeq	r0, r0, #0
    1b34:	ac137091 	ldcge	0, cr7, [r3], {145}	; 0x91
    1b38:	0100000e 	tsteq	r0, lr
    1b3c:	00b80256 	adcseq	r0, r8, r6, asr r2
    1b40:	91020000 	mrsls	r0, (UNDEF: 2)
    1b44:	8c12006c 	ldchi	0, cr0, [r2], {108}	; 0x6c
    1b48:	0100000a 	tsteq	r0, sl
    1b4c:	0eac0268 	cdpeq	2, 10, cr0, cr12, cr8, {3}
    1b50:	00200800 	eoreq	r0, r0, r0, lsl #16
    1b54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b58:	000005d1 	ldrdeq	r0, [r0], -r1
    1b5c:	00075613 	andeq	r5, r7, r3, lsl r6
    1b60:	02680100 	rsbeq	r0, r8, #0, 2
    1b64:	00000128 	andeq	r0, r0, r8, lsr #2
    1b68:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1b6c:	000de712 	andeq	lr, sp, r2, lsl r7
    1b70:	027a0100 	rsbseq	r0, sl, #0, 2
    1b74:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
    1b78:	00000020 	andeq	r0, r0, r0, lsr #32
    1b7c:	05f79c01 	ldrbeq	r9, [r7, #3073]!	; 0xc01
    1b80:	56130000 	ldrpl	r0, [r3], -r0
    1b84:	01000007 	tsteq	r0, r7
    1b88:	0128027a 	teqeq	r8, sl, ror r2
    1b8c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b90:	da120077 	ble	481d74 <_Min_Stack_Size+0x481974>
    1b94:	0100000c 	tsteq	r0, ip
    1b98:	0eec0293 	mcreq	2, 7, r0, cr12, cr3, {4}
    1b9c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1ba0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ba4:	0000063b 	andeq	r0, r0, fp, lsr r6
    1ba8:	000ad313 	andeq	sp, sl, r3, lsl r3
    1bac:	02930100 	addseq	r0, r3, #0, 2
    1bb0:	000000b8 	strheq	r0, [r0], -r8
    1bb4:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1bb8:	00000e22 	andeq	r0, r0, r2, lsr #28
    1bbc:	b8029301 	stmdalt	r2, {r0, r8, r9, ip, pc}
    1bc0:	02000000 	andeq	r0, r0, #0
    1bc4:	89156891 	ldmdbhi	r5, {r0, r4, r7, fp, sp, lr}
    1bc8:	0100000b 	tsteq	r0, fp
    1bcc:	00b80295 	umlalseq	r0, r8, r5, r2
    1bd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1bd4:	8c120074 	ldchi	0, cr0, [r2], {116}	; 0x74
    1bd8:	01000010 	tsteq	r0, r0, lsl r0
    1bdc:	0f2802b9 	svceq	0x002802b9
    1be0:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1be4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1be8:	0000067f 	andeq	r0, r0, pc, ror r6
    1bec:	000e4513 	andeq	r4, lr, r3, lsl r5
    1bf0:	02b90100 	adcseq	r0, r9, #0, 2
    1bf4:	000000b8 	strheq	r0, [r0], -r8
    1bf8:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1bfc:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    1c00:	b802b901 	stmdalt	r2, {r0, r8, fp, ip, sp, pc}
    1c04:	02000000 	andeq	r0, r0, #0
    1c08:	89156891 	ldmdbhi	r5, {r0, r4, r7, fp, sp, lr}
    1c0c:	0100000b 	tsteq	r0, fp
    1c10:	00b802bb 	ldrhteq	r0, [r8], fp
    1c14:	91020000 	mrsls	r0, (UNDEF: 2)
    1c18:	1b120074 	blne	481df0 <_Min_Stack_Size+0x4819f0>
    1c1c:	0100000c 	tsteq	r0, ip
    1c20:	0f64035f 	svceq	0x0064035f
    1c24:	00380800 	eorseq	r0, r8, r0, lsl #16
    1c28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c2c:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    1c30:	000f2e13 	andeq	r2, pc, r3, lsl lr	; <UNPREDICTABLE>
    1c34:	035f0100 	cmpeq	pc, #0, 2
    1c38:	000000b8 	strheq	r0, [r0], -r8
    1c3c:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1c40:	00000b89 	andeq	r0, r0, r9, lsl #23
    1c44:	b8036101 	stmdalt	r3, {r0, r8, sp, lr}
    1c48:	02000000 	andeq	r0, r0, #0
    1c4c:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1c50:	00000c70 	andeq	r0, r0, r0, ror ip
    1c54:	97037b01 	strls	r7, [r3, -r1, lsl #22]
    1c58:	9c000000 	stcls	0, cr0, [r0], {-0}
    1c5c:	2008000f 	andcs	r0, r8, pc
    1c60:	01000000 	mrseq	r0, (UNDEF: 0)
    1c64:	0c0c129c 	sfmeq	f1, 4, [ip], {156}	; 0x9c
    1c68:	94010000 	strls	r0, [r1], #-0
    1c6c:	000fbc03 	andeq	fp, pc, r3, lsl #24
    1c70:	00003808 	andeq	r3, r0, r8, lsl #16
    1c74:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1c78:	13000006 	movwne	r0, #6
    1c7c:	00000ce9 	andeq	r0, r0, r9, ror #25
    1c80:	b8039401 	stmdalt	r3, {r0, sl, ip, pc}
    1c84:	02000000 	andeq	r0, r0, #0
    1c88:	89156c91 	ldmdbhi	r5, {r0, r4, r7, sl, fp, sp, lr}
    1c8c:	0100000b 	tsteq	r0, fp
    1c90:	00b80396 	umlalseq	r0, r8, r6, r3
    1c94:	91020000 	mrsls	r0, (UNDEF: 2)
    1c98:	b7120074 			; <UNDEFINED> instruction: 0xb7120074
    1c9c:	0100000b 	tsteq	r0, fp
    1ca0:	0ff403b4 	svceq	0x00f403b4
    1ca4:	00380800 	eorseq	r0, r8, r0, lsl #16
    1ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cac:	00000734 	andeq	r0, r0, r4, lsr r7
    1cb0:	000a7b13 	andeq	r7, sl, r3, lsl fp
    1cb4:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    1cb8:	000000b8 	strheq	r0, [r0], -r8
    1cbc:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1cc0:	00000b89 	andeq	r0, r0, r9, lsl #23
    1cc4:	b803b601 	stmdalt	r3, {r0, r9, sl, ip, sp, pc}
    1cc8:	02000000 	andeq	r0, r0, #0
    1ccc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1cd0:	00000f1e 	andeq	r0, r0, lr, lsl pc
    1cd4:	2c03d301 	stccs	3, cr13, [r3], {1}
    1cd8:	38080010 	stmdacc	r8, {r4}
    1cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ce0:	0007699c 	muleq	r7, ip, r9
    1ce4:	0a7b1300 	beq	1ec68ec <_Min_Stack_Size+0x1ec64ec>
    1ce8:	d3010000 	movwle	r0, #4096	; 0x1000
    1cec:	0000b803 	andeq	fp, r0, r3, lsl #16
    1cf0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cf4:	000b8915 	andeq	r8, fp, r5, lsl r9
    1cf8:	03d50100 	bicseq	r0, r5, #0, 2
    1cfc:	000000b8 	strheq	r0, [r0], -r8
    1d00:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d04:	000fd712 	andeq	sp, pc, r2, lsl r7	; <UNPREDICTABLE>
    1d08:	04070100 	streq	r0, [r7], #-256	; 0x100
    1d0c:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
    1d10:	00000154 	andeq	r0, r0, r4, asr r1
    1d14:	07e99c01 	strbeq	r9, [r9, r1, lsl #24]!
    1d18:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    1d1c:	0100000b 	tsteq	r0, fp
    1d20:	07e90407 	strbeq	r0, [r9, r7, lsl #8]!
    1d24:	91020000 	mrsls	r0, (UNDEF: 2)
    1d28:	6d74175c 	ldclvs	7, cr1, [r4, #-368]!	; 0xfffffe90
    1d2c:	09010070 	stmdbeq	r1, {r4, r5, r6}
    1d30:	0000b804 	andeq	fp, r0, r4, lsl #16
    1d34:	70910200 	addsvc	r0, r1, r0, lsl #4
    1d38:	000d0215 	andeq	r0, sp, r5, lsl r2
    1d3c:	04090100 	streq	r0, [r9], #-256	; 0x100
    1d40:	000000b8 	strheq	r0, [r0], -r8
    1d44:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1d48:	0000061b 	andeq	r0, r0, fp, lsl r6
    1d4c:	b8040901 	stmdalt	r4, {r0, r8, fp}
    1d50:	02000000 	andeq	r0, r0, #0
    1d54:	c2157491 	andsgt	r7, r5, #-1862270976	; 0x91000000
    1d58:	01000005 	tsteq	r0, r5
    1d5c:	00b80409 	adcseq	r0, r8, r9, lsl #8
    1d60:	91020000 	mrsls	r0, (UNDEF: 2)
    1d64:	05ab1568 	streq	r1, [fp, #1384]!	; 0x568
    1d68:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1d6c:	0000b804 	andeq	fp, r0, r4, lsl #16
    1d70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1d74:	0005bd15 	andeq	fp, r5, r5, lsl sp
    1d78:	04090100 	streq	r0, [r9], #-256	; 0x100
    1d7c:	000000b8 	strheq	r0, [r0], -r8
    1d80:	00609102 	rsbeq	r9, r0, r2, lsl #2
    1d84:	03440418 	movteq	r0, #17432	; 0x4418
    1d88:	c9120000 	ldmdbgt	r2, {}	; <UNPREDICTABLE>
    1d8c:	0100000c 	tsteq	r0, ip
    1d90:	11b80484 			; <UNDEFINED> instruction: 0x11b80484
    1d94:	005c0800 	subseq	r0, ip, r0, lsl #16
    1d98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d9c:	00000824 	andeq	r0, r0, r4, lsr #16
    1da0:	000d0813 	andeq	r0, sp, r3, lsl r8
    1da4:	04840100 	streq	r0, [r4], #256	; 0x100
    1da8:	000000b8 	strheq	r0, [r0], -r8
    1dac:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1db0:	00000b89 	andeq	r0, r0, r9, lsl #23
    1db4:	b8048601 	stmdalt	r4, {r0, r9, sl, pc}
    1db8:	02000000 	andeq	r0, r0, #0
    1dbc:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1dc0:	00000dd9 	ldrdeq	r0, [r0], -r9
    1dc4:	1404a401 	strne	sl, [r4], #-1025	; 0x401
    1dc8:	20080012 	andcs	r0, r8, r2, lsl r0
    1dcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd0:	00084a9c 	muleq	r8, ip, sl
    1dd4:	07561300 	ldrbeq	r1, [r6, -r0, lsl #6]
    1dd8:	a4010000 	strge	r0, [r1], #-0
    1ddc:	00012804 	andeq	r2, r1, r4, lsl #16
    1de0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1de4:	0c431200 	sfmeq	f1, 2, [r3], {-0}
    1de8:	b5010000 	strlt	r0, [r1, #-0]
    1dec:	00123404 	andseq	r3, r2, r4, lsl #8
    1df0:	00002008 	andeq	r2, r0, r8
    1df4:	709c0100 	addsvc	r0, ip, r0, lsl #2
    1df8:	13000008 	movwne	r0, #8
    1dfc:	00000756 	andeq	r0, r0, r6, asr r7
    1e00:	2804b501 	stmdacs	r4, {r0, r8, sl, ip, sp, pc}
    1e04:	02000001 	andeq	r0, r0, #1
    1e08:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    1e0c:	0000107b 	andeq	r1, r0, fp, ror r0
    1e10:	5404c601 	strpl	ip, [r4], #-1537	; 0x601
    1e14:	1c080012 	stcne	0, cr0, [r8], {18}
    1e18:	01000000 	mrseq	r0, (UNDEF: 0)
    1e1c:	0008969c 	muleq	r8, ip, r6
    1e20:	0e541300 	cdpeq	3, 5, cr1, cr4, cr0, {0}
    1e24:	c6010000 	strgt	r0, [r1], -r0
    1e28:	0000b804 	andeq	fp, r0, r4, lsl #16
    1e2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e30:	0dbf1200 	lfmeq	f1, 4, [pc]	; 1e38 <_Min_Stack_Size+0x1a38>
    1e34:	db010000 	blle	41e3c <_Min_Stack_Size+0x41a3c>
    1e38:	00127004 	andseq	r7, r2, r4
    1e3c:	00003c08 	andeq	r3, r0, r8, lsl #24
    1e40:	cb9c0100 	blgt	fe702248 <_estack+0xde6d2248>
    1e44:	13000008 	movwne	r0, #8
    1e48:	00000e02 	andeq	r0, r0, r2, lsl #28
    1e4c:	b804db01 	stmdalt	r4, {r0, r8, r9, fp, ip, lr, pc}
    1e50:	02000000 	andeq	r0, r0, #0
    1e54:	89156c91 	ldmdbhi	r5, {r0, r4, r7, sl, fp, sp, lr}
    1e58:	0100000b 	tsteq	r0, fp
    1e5c:	00b804dd 	ldrsbteq	r0, [r8], sp
    1e60:	91020000 	mrsls	r0, (UNDEF: 2)
    1e64:	fe120074 	mrc2	0, 0, r0, cr2, cr4, {3}
    1e68:	0100000a 	tsteq	r0, sl
    1e6c:	12ac04fb 	adcne	r0, ip, #-83886080	; 0xfb000000
    1e70:	00400800 	subeq	r0, r0, r0, lsl #16
    1e74:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e78:	00000900 	andeq	r0, r0, r0, lsl #18
    1e7c:	000a9a13 	andeq	r9, sl, r3, lsl sl
    1e80:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    1e84:	000000b8 	strheq	r0, [r0], -r8
    1e88:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    1e8c:	00000b89 	andeq	r0, r0, r9, lsl #23
    1e90:	b804fd01 	stmdalt	r4, {r0, r8, sl, fp, ip, sp, lr, pc}
    1e94:	02000000 	andeq	r0, r0, #0
    1e98:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1e9c:	00000bde 	ldrdeq	r0, [r0], -lr
    1ea0:	ec051f01 	stc	15, cr1, [r5], {1}
    1ea4:	3c080012 	stccc	0, cr0, [r8], {18}
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	0009359c 	muleq	r9, ip, r5
    1eb0:	0d191300 	ldceq	3, cr1, [r9, #-0]
    1eb4:	1f010000 	svcne	0x00010000
    1eb8:	0000b805 	andeq	fp, r0, r5, lsl #16
    1ebc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ec0:	000b8915 	andeq	r8, fp, r5, lsl r9
    1ec4:	05210100 	streq	r0, [r1, #-256]!	; 0x100
    1ec8:	000000b8 	strheq	r0, [r0], -r8
    1ecc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ed0:	000e8512 	andeq	r8, lr, r2, lsl r5
    1ed4:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    1ed8:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
    1edc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1ee0:	096a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}^
    1ee4:	30130000 	andscc	r0, r3, r0
    1ee8:	0100000d 	tsteq	r0, sp
    1eec:	00b80543 	adcseq	r0, r8, r3, asr #10
    1ef0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ef4:	0b89156c 	bleq	fe2474ac <_estack+0xde2174ac>
    1ef8:	45010000 	strmi	r0, [r1, #-0]
    1efc:	0000b805 	andeq	fp, r0, r5, lsl #16
    1f00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f04:	0d471200 	sfmeq	f1, 2, [r7, #-0]
    1f08:	64010000 	strvs	r0, [r1], #-0
    1f0c:	00136405 	andseq	r6, r3, r5, lsl #8
    1f10:	00003c08 	andeq	r3, r0, r8, lsl #24
    1f14:	9f9c0100 	svcls	0x009c0100
    1f18:	13000009 	movwne	r0, #9
    1f1c:	00000aa9 	andeq	r0, r0, r9, lsr #21
    1f20:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    1f24:	02000000 	andeq	r0, r0, #0
    1f28:	89156c91 	ldmdbhi	r5, {r0, r4, r7, sl, fp, sp, lr}
    1f2c:	0100000b 	tsteq	r0, fp
    1f30:	00b80566 	adcseq	r0, r8, r6, ror #10
    1f34:	91020000 	mrsls	r0, (UNDEF: 2)
    1f38:	66120074 			; <UNDEFINED> instruction: 0x66120074
    1f3c:	01000010 	tsteq	r0, r0, lsl r0
    1f40:	13a00589 	movne	r0, #574619648	; 0x22400000
    1f44:	001c0800 	andseq	r0, ip, r0, lsl #16
    1f48:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f4c:	000009c5 	andeq	r0, r0, r5, asr #19
    1f50:	000eb413 	andeq	fp, lr, r3, lsl r4
    1f54:	05890100 	streq	r0, [r9, #256]	; 0x100
    1f58:	000000b8 	strheq	r0, [r0], -r8
    1f5c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f60:	000ed312 	andeq	sp, lr, r2, lsl r3
    1f64:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
    1f68:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
    1f6c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1f70:	09fa9c01 	ldmibeq	sl!, {r0, sl, fp, ip, pc}^
    1f74:	3d130000 	ldccc	0, cr0, [r3, #-0]
    1f78:	0100000b 	tsteq	r0, fp
    1f7c:	00b805b4 	ldrhteq	r0, [r8], r4
    1f80:	91020000 	mrsls	r0, (UNDEF: 2)
    1f84:	07561374 			; <UNDEFINED> instruction: 0x07561374
    1f88:	b4010000 	strlt	r0, [r1], #-0
    1f8c:	00012805 	andeq	r2, r1, r5, lsl #16
    1f90:	73910200 	orrsvc	r0, r1, #0, 4
    1f94:	0ba01200 	bleq	fe80679c <_estack+0xde7d679c>
    1f98:	d4010000 	strle	r0, [r1], #-0
    1f9c:	0013f805 	andseq	pc, r3, r5, lsl #16
    1fa0:	00003c08 	andeq	r3, r0, r8, lsl #24
    1fa4:	2f9c0100 	svccs	0x009c0100
    1fa8:	1300000a 	movwne	r0, #10
    1fac:	00000d95 	muleq	r0, r5, sp
    1fb0:	b805d401 	stmdalt	r5, {r0, sl, ip, lr, pc}
    1fb4:	02000000 	andeq	r0, r0, #0
    1fb8:	56137491 			; <UNDEFINED> instruction: 0x56137491
    1fbc:	01000007 	tsteq	r0, r7
    1fc0:	012805d4 	ldrdeq	r0, [r8, -r4]!
    1fc4:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc8:	0f120073 	svceq	0x00120073
    1fcc:	01000011 	tsteq	r0, r1, lsl r0
    1fd0:	143405f0 	ldrtne	r0, [r4], #-1520	; 0x5f0
    1fd4:	003c0800 	eorseq	r0, ip, r0, lsl #16
    1fd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fdc:	00000a64 	andeq	r0, r0, r4, ror #20
    1fe0:	000da413 	andeq	sl, sp, r3, lsl r4
    1fe4:	05f00100 	ldrbeq	r0, [r0, #256]!	; 0x100
    1fe8:	000000b8 	strheq	r0, [r0], -r8
    1fec:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1ff0:	00000756 	andeq	r0, r0, r6, asr r7
    1ff4:	2805f001 	stmdacs	r5, {r0, ip, sp, lr, pc}
    1ff8:	02000001 	andeq	r0, r0, #1
    1ffc:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    2000:	000010a6 	andeq	r1, r0, r6, lsr #1
    2004:	70062401 	andvc	r2, r6, r1, lsl #8
    2008:	3c080014 	stccc	0, cr0, [r8], {20}
    200c:	01000000 	mrseq	r0, (UNDEF: 0)
    2010:	000a999c 	muleq	sl, ip, r9
    2014:	0cba1300 	ldceq	3, cr1, [sl]
    2018:	24010000 	strcs	r0, [r1], #-0
    201c:	0000b806 	andeq	fp, r0, r6, lsl #16
    2020:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2024:	00075613 	andeq	r5, r7, r3, lsl r6
    2028:	06240100 	strteq	r0, [r4], -r0, lsl #2
    202c:	00000128 	andeq	r0, r0, r8, lsr #2
    2030:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2034:	000fe912 	andeq	lr, pc, r2, lsl r9	; <UNPREDICTABLE>
    2038:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    203c:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
    2040:	0000003c 	andeq	r0, r0, ip, lsr r0
    2044:	0ace9c01 	beq	ff3a9050 <_estack+0xdf379050>
    2048:	57130000 	ldrpl	r0, [r3, -r0]
    204c:	01000010 	tsteq	r0, r0, lsl r0
    2050:	00b80651 	adcseq	r0, r8, r1, asr r6
    2054:	91020000 	mrsls	r0, (UNDEF: 2)
    2058:	07561374 			; <UNDEFINED> instruction: 0x07561374
    205c:	51010000 	mrspl	r0, (UNDEF: 1)
    2060:	00012806 	andeq	r2, r1, r6, lsl #16
    2064:	73910200 	orrsvc	r0, r1, #0, 4
    2068:	0bf51200 	bleq	ffd46870 <_estack+0xdfd16870>
    206c:	7b010000 	blvc	42074 <_Min_Stack_Size+0x41c74>
    2070:	0014e806 	andseq	lr, r4, r6, lsl #16
    2074:	00003c08 	andeq	r3, r0, r8, lsl #24
    2078:	039c0100 	orrseq	r0, ip, #0, 2
    207c:	1300000b 	movwne	r0, #11
    2080:	00000b3d 	andeq	r0, r0, sp, lsr fp
    2084:	b8067b01 	stmdalt	r6, {r0, r8, r9, fp, ip, sp, lr}
    2088:	02000000 	andeq	r0, r0, #0
    208c:	56137491 			; <UNDEFINED> instruction: 0x56137491
    2090:	01000007 	tsteq	r0, r7
    2094:	0128067b 	teqeq	r8, fp, ror r6
    2098:	91020000 	mrsls	r0, (UNDEF: 2)
    209c:	ea120073 	b	482270 <_Min_Stack_Size+0x481e70>
    20a0:	0100000e 	tsteq	r0, lr
    20a4:	15240698 	strne	r0, [r4, #-1688]!	; 0x698
    20a8:	003c0800 	eorseq	r0, ip, r0, lsl #16
    20ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    20b0:	00000b38 	andeq	r0, r0, r8, lsr fp
    20b4:	000d9513 	andeq	r9, sp, r3, lsl r5
    20b8:	06980100 	ldreq	r0, [r8], r0, lsl #2
    20bc:	000000b8 	strheq	r0, [r0], -r8
    20c0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    20c4:	00000756 	andeq	r0, r0, r6, asr r7
    20c8:	28069801 	stmdacs	r6, {r0, fp, ip, pc}
    20cc:	02000001 	andeq	r0, r0, #1
    20d0:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    20d4:	00000bc7 	andeq	r0, r0, r7, asr #23
    20d8:	6006b101 	andvs	fp, r6, r1, lsl #2
    20dc:	3c080015 	stccc	0, cr0, [r8], {21}
    20e0:	01000000 	mrseq	r0, (UNDEF: 0)
    20e4:	000b6d9c 	muleq	fp, ip, sp
    20e8:	0da41300 	stceq	3, cr1, [r4]
    20ec:	b1010000 	mrslt	r0, (UNDEF: 1)
    20f0:	0000b806 	andeq	fp, r0, r6, lsl #16
    20f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20f8:	00075613 	andeq	r5, r7, r3, lsl r6
    20fc:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    2100:	00000128 	andeq	r0, r0, r8, lsr #2
    2104:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2108:	000ae212 	andeq	lr, sl, r2, lsl r2
    210c:	06e20100 	strbteq	r0, [r2], r0, lsl #2
    2110:	0800159c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip}
    2114:	0000003c 	andeq	r0, r0, ip, lsr r0
    2118:	0ba29c01 	bleq	fe8a9124 <_estack+0xde879124>
    211c:	ba130000 	blt	4c2124 <_Min_Stack_Size+0x4c1d24>
    2120:	0100000c 	tsteq	r0, ip
    2124:	00b806e2 	adcseq	r0, r8, r2, ror #13
    2128:	91020000 	mrsls	r0, (UNDEF: 2)
    212c:	07561374 			; <UNDEFINED> instruction: 0x07561374
    2130:	e2010000 	and	r0, r1, #0
    2134:	00012806 	andeq	r2, r1, r6, lsl #16
    2138:	73910200 	orrsvc	r0, r1, #0, 4
    213c:	0e2e1200 	cdpeq	2, 2, cr1, cr14, cr0, {0}
    2140:	0b010000 	bleq	42148 <_Min_Stack_Size+0x41d48>
    2144:	0015d807 	andseq	sp, r5, r7, lsl #16
    2148:	00003c08 	andeq	r3, r0, r8, lsl #24
    214c:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    2150:	1300000b 	movwne	r0, #11
    2154:	00001057 	andeq	r1, r0, r7, asr r0
    2158:	b8070b01 	stmdalt	r7, {r0, r8, r9, fp}
    215c:	02000000 	andeq	r0, r0, #0
    2160:	56137491 			; <UNDEFINED> instruction: 0x56137491
    2164:	01000007 	tsteq	r0, r7
    2168:	0128070b 	teqeq	r8, fp, lsl #14
    216c:	91020000 	mrsls	r0, (UNDEF: 2)
    2170:	f2120073 	vqadd.s16	q0, q1, <illegal reg q9.5>
    2174:	01000010 	tsteq	r0, r0, lsl r0
    2178:	1614073c 			; <UNDEFINED> instruction: 0x1614073c
    217c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2180:	9c010000 	stcls	0, cr0, [r1], {-0}
    2184:	00000c0c 	andeq	r0, r0, ip, lsl #24
    2188:	000b3d13 	andeq	r3, fp, r3, lsl sp
    218c:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    2190:	000000b8 	strheq	r0, [r0], -r8
    2194:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    2198:	00000756 	andeq	r0, r0, r6, asr r7
    219c:	28073c01 	stmdacs	r7, {r0, sl, fp, ip, sp}
    21a0:	02000001 	andeq	r0, r0, #1
    21a4:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    21a8:	00000d5c 	andeq	r0, r0, ip, asr sp
    21ac:	50075c01 	andpl	r5, r7, r1, lsl #24
    21b0:	3c080016 	stccc	0, cr0, [r8], {22}
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	000c419c 	muleq	ip, ip, r1
    21bc:	0d951300 	ldceq	3, cr1, [r5]
    21c0:	5c010000 	stcpl	0, cr0, [r1], {-0}
    21c4:	0000b807 	andeq	fp, r0, r7, lsl #16
    21c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21cc:	00075613 	andeq	r5, r7, r3, lsl r6
    21d0:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    21d4:	00000128 	andeq	r0, r0, r8, lsr #2
    21d8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    21dc:	00102b12 	andseq	r2, r0, r2, lsl fp
    21e0:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
    21e4:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
    21e8:	0000003c 	andeq	r0, r0, ip, lsr r0
    21ec:	0c769c01 	ldcleq	12, cr9, [r6], #-4
    21f0:	a4130000 	ldrge	r0, [r3], #-0
    21f4:	0100000d 	tsteq	r0, sp
    21f8:	00b80778 	adcseq	r0, r8, r8, ror r7
    21fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2200:	07561374 			; <UNDEFINED> instruction: 0x07561374
    2204:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2208:	00012807 	andeq	r2, r1, r7, lsl #16
    220c:	73910200 	orrsvc	r0, r1, #0, 4
    2210:	0f011200 	svceq	0x00011200
    2214:	ac010000 	stcge	0, cr0, [r1], {-0}
    2218:	0016c807 	andseq	ip, r6, r7, lsl #16
    221c:	00003c08 	andeq	r3, r0, r8, lsl #24
    2220:	ab9c0100 	blge	fe702628 <_estack+0xde6d2628>
    2224:	1300000c 	movwne	r0, #12
    2228:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    222c:	b807ac01 	stmdalt	r7, {r0, sl, fp, sp, pc}
    2230:	02000000 	andeq	r0, r0, #0
    2234:	56137491 			; <UNDEFINED> instruction: 0x56137491
    2238:	01000007 	tsteq	r0, r7
    223c:	012807ac 	smulwbeq	r8, ip, r7
    2240:	91020000 	mrsls	r0, (UNDEF: 2)
    2244:	57120073 			; <UNDEFINED> instruction: 0x57120073
    2248:	0100000b 	tsteq	r0, fp
    224c:	170407d9 			; <UNDEFINED> instruction: 0x170407d9
    2250:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2254:	9c010000 	stcls	0, cr0, [r1], {-0}
    2258:	00000ce0 	andeq	r0, r0, r0, ror #25
    225c:	00105713 	andseq	r5, r0, r3, lsl r7
    2260:	07d90100 	ldrbeq	r0, [r9, r0, lsl #2]
    2264:	000000b8 	strheq	r0, [r0], -r8
    2268:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    226c:	00000756 	andeq	r0, r0, r6, asr r7
    2270:	2807d901 	stmdacs	r7, {r0, r8, fp, ip, lr, pc}
    2274:	02000001 	andeq	r0, r0, #1
    2278:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    227c:	000010bd 	strheq	r1, [r0], -sp
    2280:	40080701 	andmi	r0, r8, r1, lsl #14
    2284:	48080017 	stmdami	r8, {r0, r1, r2, r4}
    2288:	01000000 	mrseq	r0, (UNDEF: 0)
    228c:	000d159c 	muleq	sp, ip, r5
    2290:	0b821300 	bleq	fe086e98 <_estack+0xde056e98>
    2294:	07010000 	streq	r0, [r1, -r0]
    2298:	00009708 	andeq	r9, r0, r8, lsl #14
    229c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    22a0:	00075613 	andeq	r5, r7, r3, lsl r6
    22a4:	08070100 	stmdaeq	r7, {r8}
    22a8:	00000128 	andeq	r0, r0, r8, lsr #2
    22ac:	00769102 	rsbseq	r9, r6, r2, lsl #2
    22b0:	000e6519 	andeq	r6, lr, r9, lsl r5
    22b4:	082c0100 	stmdaeq	ip!, {r8}
    22b8:	000000fa 	strdeq	r0, [r0], -sl
    22bc:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
    22c0:	00000074 	andeq	r0, r0, r4, ror r0
    22c4:	0d6c9c01 	stcleq	12, cr9, [ip, #-4]!
    22c8:	3a130000 	bcc	4c22d0 <_Min_Stack_Size+0x4c1ed0>
    22cc:	0100000c 	tsteq	r0, ip
    22d0:	0097082c 	addseq	r0, r7, ip, lsr #16
    22d4:	91020000 	mrsls	r0, (UNDEF: 2)
    22d8:	6d741767 	ldclvs	7, cr1, [r4, #-412]!	; 0xfffffe64
    22dc:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    22e0:	0000b808 	andeq	fp, r0, r8, lsl #16
    22e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    22e8:	000ab815 	andeq	fp, sl, r5, lsl r8
    22ec:	082f0100 	stmdaeq	pc!, {r8}	; <UNPREDICTABLE>
    22f0:	000000b8 	strheq	r0, [r0], -r8
    22f4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    22f8:	00000974 	andeq	r0, r0, r4, ror r9
    22fc:	fa083001 	blx	20e308 <_Min_Stack_Size+0x20df08>
    2300:	02000000 	andeq	r0, r0, #0
    2304:	1a007391 	bne	1f150 <_Min_Stack_Size+0x1ed50>
    2308:	00000b74 	andeq	r0, r0, r4, ror fp
    230c:	fc085901 	stc2	9, cr5, [r8], {1}
    2310:	1c080017 	stcne	0, cr0, [r8], {23}
    2314:	01000000 	mrseq	r0, (UNDEF: 0)
    2318:	101b199c 	mulsne	fp, ip, r9
    231c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2320:	00010608 	andeq	r0, r1, r8, lsl #12
    2324:	00181800 	andseq	r1, r8, r0, lsl #16
    2328:	00003808 	andeq	r3, r0, r8, lsl #16
    232c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2330:	1300000d 	movwne	r0, #13
    2334:	00000b82 	andeq	r0, r0, r2, lsl #23
    2338:	97086d01 	strls	r6, [r8, -r1, lsl #26]
    233c:	02000000 	andeq	r0, r0, #0
    2340:	74156f91 	ldrvc	r6, [r5], #-3985	; 0xf91
    2344:	01000009 	tsteq	r0, r9
    2348:	0106086f 	tsteq	r6, pc, ror #16
    234c:	91020000 	mrsls	r0, (UNDEF: 2)
    2350:	22120077 	andscs	r0, r2, #119	; 0x77
    2354:	0100000b 	tsteq	r0, fp
    2358:	1850088f 	ldmdane	r0, {r0, r1, r2, r3, r7, fp}^
    235c:	00200800 	eoreq	r0, r0, r0, lsl #16
    2360:	9c010000 	stcls	0, cr0, [r1], {-0}
    2364:	00000ddd 	ldrdeq	r0, [r0], -sp
    2368:	000b8213 	andeq	r8, fp, r3, lsl r2
    236c:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    2370:	00000097 	muleq	r0, r7, r0
    2374:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2378:	00009706 	andeq	r9, r0, r6, lsl #14
    237c:	000ded00 	andeq	lr, sp, r0, lsl #26
    2380:	00c30700 	sbceq	r0, r3, r0, lsl #14
    2384:	000f0000 	andeq	r0, pc, r0
    2388:	000ca91b 	andeq	sl, ip, fp, lsl r9
    238c:	fe8d0100 	cdp2	1, 8, cr0, cr13, cr0, {0}
    2390:	0500000d 	streq	r0, [r0, #-13]
    2394:	00001403 	andeq	r1, r0, r3, lsl #8
    2398:	0e031c20 	cdpeq	12, 0, cr1, cr3, cr0, {1}
    239c:	dd050000 	stcle	0, cr0, [r5, #-0]
    23a0:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    23a4:	00000414 	andeq	r0, r0, r4, lsl r4
    23a8:	df06a706 	svcle	0x0006a706
    23ac:	00000000 	andeq	r0, r0, r0
    23b0:	000009c2 	andeq	r0, r0, r2, asr #19
    23b4:	07580004 	ldrbeq	r0, [r8, -r4]
    23b8:	01040000 	mrseq	r0, (UNDEF: 4)
    23bc:	0000012a 	andeq	r0, r0, sl, lsr #2
    23c0:	00131c01 	andseq	r1, r3, r1, lsl #24
    23c4:	00036900 	andeq	r6, r3, r0, lsl #18
    23c8:	0002c000 	andeq	ip, r2, r0
    23cc:	00000000 	andeq	r0, r0, r0
    23d0:	000f8a00 	andeq	r8, pc, r0, lsl #20
    23d4:	06010200 	streq	r0, [r1], -r0, lsl #4
    23d8:	000002a6 	andeq	r0, r0, r6, lsr #5
    23dc:	00023303 	andeq	r3, r2, r3, lsl #6
    23e0:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    23e4:	02000000 	andeq	r0, r0, #0
    23e8:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    23ec:	02020000 	andeq	r0, r2, #0
    23f0:	00003a05 	andeq	r3, r0, r5, lsl #20
    23f4:	007c0300 	rsbseq	r0, ip, r0, lsl #6
    23f8:	2b020000 	blcs	82400 <_Min_Stack_Size+0x82000>
    23fc:	00000050 	andeq	r0, r0, r0, asr r0
    2400:	4b070202 	blmi	1c2c10 <_Min_Stack_Size+0x1c2810>
    2404:	03000003 	movweq	r0, #3
    2408:	00000445 	andeq	r0, r0, r5, asr #8
    240c:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    2410:	04020000 	streq	r0, [r2], #-0
    2414:	00010005 	andeq	r0, r1, r5
    2418:	00600300 	rsbeq	r0, r0, r0, lsl #6
    241c:	41020000 	mrsmi	r0, (UNDEF: 2)
    2420:	00000074 	andeq	r0, r0, r4, ror r0
    2424:	f5070402 			; <UNDEFINED> instruction: 0xf5070402
    2428:	02000002 	andeq	r0, r0, #2
    242c:	00fb0508 	rscseq	r0, fp, r8, lsl #10
    2430:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2434:	0002f007 	andeq	pc, r2, r7
    2438:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    243c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2440:	fa070402 	blx	1c3450 <_Min_Stack_Size+0x1c3050>
    2444:	03000002 	movweq	r0, #2
    2448:	00000235 	andeq	r0, r0, r5, lsr r2
    244c:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    2450:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
    2454:	03000000 	movweq	r0, #0
    2458:	00004536 	andeq	r4, r0, r6, lsr r5
    245c:	04470300 	strbeq	r0, [r7], #-768	; 0x300
    2460:	41030000 	mrsmi	r0, (UNDEF: 3)
    2464:	00000057 	andeq	r0, r0, r7, asr r0
    2468:	00006203 	andeq	r6, r0, r3, lsl #4
    246c:	69420300 	stmdbvs	r2, {r8, r9}^
    2470:	02000000 	andeq	r0, r0, #0
    2474:	00440704 	subeq	r0, r4, r4, lsl #14
    2478:	a2050000 	andge	r0, r5, #0
    247c:	05000000 	streq	r0, [r0, #-0]
    2480:	000000ad 	andeq	r0, r0, sp, lsr #1
    2484:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    2488:	0000ea01 	andeq	lr, r0, r1, lsl #20
    248c:	09180700 	ldmdbeq	r8, {r8, r9, sl}
    2490:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2494:	00544553 	subseq	r4, r4, r3, asr r5
    2498:	99090001 	stmdbls	r9, {r0}
    249c:	0400001d 	streq	r0, [r0], #-29
    24a0:	00d401f7 	ldrsheq	r0, [r4], #23
    24a4:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    24a8:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    24ac:	00d401f7 	ldrsheq	r0, [r4], #23
    24b0:	01060000 	mrseq	r0, (UNDEF: 6)
    24b4:	1801f904 	stmdane	r1, {r2, r8, fp, ip, sp, lr, pc}
    24b8:	07000001 	streq	r0, [r0, -r1]
    24bc:	0000039d 	muleq	r0, sp, r3
    24c0:	00b20700 	adcseq	r0, r2, r0, lsl #14
    24c4:	00010000 	andeq	r0, r1, r0
    24c8:	00083e09 	andeq	r3, r8, r9, lsl #28
    24cc:	01f90400 	mvnseq	r0, r0, lsl #8
    24d0:	00000102 	andeq	r0, r0, r2, lsl #2
    24d4:	26041c0a 	strcs	r1, [r4], -sl, lsl #24
    24d8:	0001e205 	andeq	lr, r1, r5, lsl #4
    24dc:	52530b00 	subspl	r0, r3, #0, 22
    24e0:	05280400 	streq	r0, [r8, #-1024]!	; 0x400
    24e4:	000000ca 	andeq	r0, r0, sl, asr #1
    24e8:	06550c00 	ldrbeq	r0, [r5], -r0, lsl #24
    24ec:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    24f0:	0000a205 	andeq	sl, r0, r5, lsl #4
    24f4:	440b0200 	strmi	r0, [fp], #-512	; 0x200
    24f8:	2a040052 	bcs	102648 <_Min_Stack_Size+0x102248>
    24fc:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2500:	5f0c0400 	svcpl	0x000c0400
    2504:	04000006 	streq	r0, [r0], #-6
    2508:	00a2052b 	adceq	r0, r2, fp, lsr #10
    250c:	0b060000 	bleq	182514 <_Min_Stack_Size+0x182114>
    2510:	00525242 	subseq	r5, r2, r2, asr #4
    2514:	ca052c04 	bgt	14d52c <_Min_Stack_Size+0x14d12c>
    2518:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    251c:	0006690c 	andeq	r6, r6, ip, lsl #18
    2520:	052d0400 	streq	r0, [sp, #-1024]!	; 0x400
    2524:	000000a2 	andeq	r0, r0, r2, lsr #1
    2528:	52430b0a 	subpl	r0, r3, #10240	; 0x2800
    252c:	2e040031 	mcrcs	0, 0, r0, cr4, cr1, {1}
    2530:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2534:	550c0c00 	strpl	r0, [ip, #-3072]	; 0xc00
    2538:	04000005 	streq	r0, [r0], #-5
    253c:	00a2052f 	adceq	r0, r2, pc, lsr #10
    2540:	0b0e0000 	bleq	382548 <_Min_Stack_Size+0x382148>
    2544:	00325243 	eorseq	r5, r2, r3, asr #4
    2548:	ca053004 	bgt	14e560 <_Min_Stack_Size+0x14e160>
    254c:	10000000 	andne	r0, r0, r0
    2550:	00067f0c 	andeq	r7, r6, ip, lsl #30
    2554:	05310400 	ldreq	r0, [r1, #-1024]!	; 0x400
    2558:	000000a2 	andeq	r0, r0, r2, lsr #1
    255c:	52430b12 	subpl	r0, r3, #18432	; 0x4800
    2560:	32040033 	andcc	r0, r4, #51	; 0x33
    2564:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2568:	890c1400 	stmdbhi	ip, {sl, ip}
    256c:	04000006 	streq	r0, [r0], #-6
    2570:	00a20533 	adceq	r0, r2, r3, lsr r5
    2574:	0c160000 	ldceq	0, cr0, [r6], {-0}
    2578:	00001140 	andeq	r1, r0, r0, asr #2
    257c:	ca053404 	bgt	14f594 <_Min_Stack_Size+0x14f194>
    2580:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2584:	0006930c 	andeq	r9, r6, ip, lsl #6
    2588:	05350400 	ldreq	r0, [r5, #-1024]!	; 0x400
    258c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2590:	9609001a 			; <UNDEFINED> instruction: 0x9609001a
    2594:	04000011 	streq	r0, [r0], #-17
    2598:	01240536 	teqeq	r4, r6, lsr r5
    259c:	100d0000 	andne	r0, sp, r0
    25a0:	02273005 	eoreq	r3, r7, #5
    25a4:	c20e0000 	andgt	r0, lr, #0
    25a8:	0500000a 	streq	r0, [r0, #-10]
    25ac:	0000b832 	andeq	fp, r0, r2, lsr r8
    25b0:	9a0e0000 	bls	3825b8 <_Min_Stack_Size+0x3821b8>
    25b4:	0500000c 	streq	r0, [r0, #-12]
    25b8:	0000b833 	andeq	fp, r0, r3, lsr r8
    25bc:	470e0400 	strmi	r0, [lr, -r0, lsl #8]
    25c0:	0500000f 	streq	r0, [r0, #-15]
    25c4:	0000b834 	andeq	fp, r0, r4, lsr r8
    25c8:	900e0800 	andls	r0, lr, r0, lsl #16
    25cc:	0500000b 	streq	r0, [r0, #-11]
    25d0:	0000b835 	andeq	fp, r0, r5, lsr r8
    25d4:	03000c00 	movweq	r0, #3072	; 0xc00
    25d8:	000010e0 	andeq	r1, r0, r0, ror #1
    25dc:	01ee3605 	mvneq	r3, r5, lsl #12
    25e0:	100d0000 	andne	r0, sp, r0
    25e4:	02833606 	addeq	r3, r3, #6291456	; 0x600000
    25e8:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    25ec:	06000012 			; <UNDEFINED> instruction: 0x06000012
    25f0:	0000b838 	andeq	fp, r0, r8, lsr r8
    25f4:	f00e0000 			; <UNDEFINED> instruction: 0xf00e0000
    25f8:	06000011 			; <UNDEFINED> instruction: 0x06000011
    25fc:	0000a23e 	andeq	sl, r0, lr, lsr r2
    2600:	a40e0400 	strge	r0, [lr], #-1024	; 0x400
    2604:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2608:	0000a241 	andeq	sl, r0, r1, asr #4
    260c:	ba0e0600 	blt	383e14 <_Min_Stack_Size+0x383a14>
    2610:	06000012 			; <UNDEFINED> instruction: 0x06000012
    2614:	0000a244 	andeq	sl, r0, r4, asr #4
    2618:	f60e0800 			; <UNDEFINED> instruction: 0xf60e0800
    261c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2620:	0000a24b 	andeq	sl, r0, fp, asr #4
    2624:	c90e0a00 	stmdbgt	lr, {r9, fp}
    2628:	06000013 			; <UNDEFINED> instruction: 0x06000013
    262c:	0000a24e 	andeq	sl, r0, lr, asr #4
    2630:	03000c00 	movweq	r0, #3072	; 0xc00
    2634:	0000137e 	andeq	r1, r0, lr, ror r3
    2638:	02325106 	eorseq	r5, r2, #-2147483647	; 0x80000001
    263c:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    2640:	02c75706 	sbceq	r5, r7, #1572864	; 0x180000
    2644:	5d0e0000 	stcpl	0, cr0, [lr, #-0]
    2648:	06000014 			; <UNDEFINED> instruction: 0x06000014
    264c:	0000a25a 	andeq	sl, r0, sl, asr r2
    2650:	370e0000 	strcc	r0, [lr, -r0]
    2654:	06000015 			; <UNDEFINED> instruction: 0x06000015
    2658:	0000a25d 	andeq	sl, r0, sp, asr r2
    265c:	350e0200 	strcc	r0, [lr, #-512]	; 0x200
    2660:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2664:	0000a260 	andeq	sl, r0, r0, ror #4
    2668:	0e0e0400 	cfcpyseq	mvf0, mvf14
    266c:	06000012 			; <UNDEFINED> instruction: 0x06000012
    2670:	0000a263 	andeq	sl, r0, r3, ror #4
    2674:	03000600 	movweq	r0, #1536	; 0x600
    2678:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    267c:	028e6606 	addeq	r6, lr, #6291456	; 0x600000
    2680:	970f0000 	strls	r0, [pc, -r0]
    2684:	01000012 	tsteq	r0, r2, lsl r0
    2688:	001870bb 	ldrheq	r7, [r8], -fp
    268c:	00011408 	andeq	r1, r1, r8, lsl #8
    2690:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    2694:	10000002 	andne	r0, r0, r2
    2698:	000013ac 	andeq	r1, r0, ip, lsr #7
    269c:	02f6bb01 	rscseq	fp, r6, #1024	; 0x400
    26a0:	91020000 	mrsls	r0, (UNDEF: 2)
    26a4:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    26a8:	000001e2 	andeq	r0, r0, r2, ror #3
    26ac:	0011700f 	andseq	r7, r1, pc
    26b0:	84f60100 	ldrbthi	r0, [r6], #256	; 0x100
    26b4:	74080019 	strvc	r0, [r8], #-25
    26b8:	01000001 	tsteq	r0, r1
    26bc:	0003749c 	muleq	r3, ip, r4
    26c0:	13ac1000 			; <UNDEFINED> instruction: 0x13ac1000
    26c4:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    26c8:	000002f6 	strdeq	r0, [r0], -r6
    26cc:	10549102 	subsne	r9, r4, r2, lsl #2
    26d0:	000014bd 			; <UNDEFINED> instruction: 0x000014bd
    26d4:	0374f601 	cmneq	r4, #1048576	; 0x100000
    26d8:	91020000 	mrsls	r0, (UNDEF: 2)
    26dc:	0b891250 	bleq	fe247024 <_estack+0xde217024>
    26e0:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    26e4:	000000b8 	strheq	r0, [r0], -r8
    26e8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    26ec:	0000123a 	andeq	r1, r0, sl, lsr r2
    26f0:	00b8f801 	adcseq	pc, r8, r1, lsl #16
    26f4:	91020000 	mrsls	r0, (UNDEF: 2)
    26f8:	11261270 	teqne	r6, r0, ror r2
    26fc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    2700:	000000b8 	strheq	r0, [r0], -r8
    2704:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2708:	00001477 	andeq	r1, r0, r7, ror r4
    270c:	00b8fa01 	adcseq	pc, r8, r1, lsl #20
    2710:	91020000 	mrsls	r0, (UNDEF: 2)
    2714:	14ce1268 	strbne	r1, [lr], #616	; 0x268
    2718:	fb010000 	blx	42722 <_Min_Stack_Size+0x42322>
    271c:	00000227 	andeq	r0, r0, r7, lsr #4
    2720:	00589102 	subseq	r9, r8, r2, lsl #2
    2724:	02830411 	addeq	r0, r3, #285212672	; 0x11000000
    2728:	16130000 	ldrne	r0, [r3], -r0
    272c:	01000015 	tsteq	r0, r5, lsl r0
    2730:	1af80167 	bne	ffe02cd4 <_estack+0xdfdd2cd4>
    2734:	00380800 	eorseq	r0, r8, r0, lsl #16
    2738:	9c010000 	stcls	0, cr0, [r1], {-0}
    273c:	000003a0 	andeq	r0, r0, r0, lsr #7
    2740:	0014bd14 	andseq	fp, r4, r4, lsl sp
    2744:	01670100 	cmneq	r7, r0, lsl #2
    2748:	00000374 	andeq	r0, r0, r4, ror r3
    274c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2750:	0014df13 	andseq	sp, r4, r3, lsl pc
    2754:	017b0100 	cmneq	fp, r0, lsl #2
    2758:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
    275c:	00000052 	andeq	r0, r0, r2, asr r0
    2760:	03e49c01 	mvneq	r9, #256	; 0x100
    2764:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2768:	01000013 	tsteq	r0, r3, lsl r0
    276c:	02f6017b 	rscseq	r0, r6, #-1073741794	; 0xc000001e
    2770:	91020000 	mrsls	r0, (UNDEF: 2)
    2774:	12a4146c 	adcne	r1, r4, #108, 8	; 0x6c000000
    2778:	7b010000 	blvc	42780 <_Min_Stack_Size+0x42380>
    277c:	0003e401 	andeq	lr, r3, r1, lsl #8
    2780:	68910200 	ldmvs	r1, {r9}
    2784:	000b8915 	andeq	r8, fp, r5, lsl r9
    2788:	017d0100 	cmneq	sp, r0, lsl #2
    278c:	000000b8 	strheq	r0, [r0], -r8
    2790:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2794:	02c70411 	sbceq	r0, r7, #285212672	; 0x11000000
    2798:	c7130000 	ldrgt	r0, [r3, -r0]
    279c:	01000012 	tsteq	r0, r2, lsl r0
    27a0:	1b84019a 	blne	fe102e10 <_estack+0xde0d2e10>
    27a4:	002a0800 	eoreq	r0, sl, r0, lsl #16
    27a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    27ac:	00000410 	andeq	r0, r0, r0, lsl r4
    27b0:	0012a414 	andseq	sl, r2, r4, lsl r4
    27b4:	019a0100 	orrseq	r0, sl, r0, lsl #2
    27b8:	000003e4 	andeq	r0, r0, r4, ror #7
    27bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    27c0:	0011ca13 	andseq	ip, r1, r3, lsl sl
    27c4:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    27c8:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
    27cc:	0000003e 	andeq	r0, r0, lr, lsr r0
    27d0:	04459c01 	strbeq	r9, [r5], #-3073	; 0xc01
    27d4:	ac140000 	ldcge	0, cr0, [r4], {-0}
    27d8:	01000013 	tsteq	r0, r3, lsl r0
    27dc:	02f601ab 	rscseq	r0, r6, #-1073741782	; 0xc000002a
    27e0:	91020000 	mrsls	r0, (UNDEF: 2)
    27e4:	07561474 			; <UNDEFINED> instruction: 0x07561474
    27e8:	ab010000 	blge	427f0 <_Min_Stack_Size+0x423f0>
    27ec:	00011801 	andeq	r1, r1, r1, lsl #16
    27f0:	73910200 	orrsvc	r0, r1, #0, 4
    27f4:	115d1300 	cmpne	sp, r0, lsl #6
    27f8:	c5010000 	strgt	r0, [r1, #-0]
    27fc:	001bf001 	andseq	pc, fp, r1
    2800:	00003808 	andeq	r3, r0, r8, lsl #16
    2804:	7a9c0100 	bvc	fe702c0c <_estack+0xde6d2c0c>
    2808:	14000004 	strne	r0, [r0], #-4
    280c:	000013ac 	andeq	r1, r0, ip, lsr #7
    2810:	f601c501 			; <UNDEFINED> instruction: 0xf601c501
    2814:	02000002 	andeq	r0, r0, #2
    2818:	27147491 			; <UNDEFINED> instruction: 0x27147491
    281c:	01000015 	tsteq	r0, r5, lsl r0
    2820:	009701c5 	addseq	r0, r7, r5, asr #3
    2824:	91020000 	mrsls	r0, (UNDEF: 2)
    2828:	16130073 			; <UNDEFINED> instruction: 0x16130073
    282c:	01000014 	tsteq	r0, r4, lsl r0
    2830:	1c2801da 	stfnes	f0, [r8], #-872	; 0xfffffc98
    2834:	00420800 	subeq	r0, r2, r0, lsl #16
    2838:	9c010000 	stcls	0, cr0, [r1], {-0}
    283c:	000004af 	andeq	r0, r0, pc, lsr #9
    2840:	0013ac14 	andseq	sl, r3, r4, lsl ip
    2844:	01da0100 	bicseq	r0, sl, r0, lsl #2
    2848:	000002f6 	strdeq	r0, [r0], -r6
    284c:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2850:	00000756 	andeq	r0, r0, r6, asr r7
    2854:	1801da01 	stmdane	r1, {r0, r9, fp, ip, lr, pc}
    2858:	02000001 	andeq	r0, r0, #1
    285c:	13007391 	movwne	r7, #913	; 0x391
    2860:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    2864:	6c01f401 	cfstrsvs	mvf15, [r1], {1}
    2868:	3e08001c 	mcrcc	0, 0, r0, cr8, cr12, {0}
    286c:	01000000 	mrseq	r0, (UNDEF: 0)
    2870:	0004e49c 	muleq	r4, ip, r4
    2874:	13ac1400 			; <UNDEFINED> instruction: 0x13ac1400
    2878:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    287c:	0002f601 	andeq	pc, r2, r1, lsl #12
    2880:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2884:	00075614 	andeq	r5, r7, r4, lsl r6
    2888:	01f40100 	mvnseq	r0, r0, lsl #2
    288c:	00000118 	andeq	r0, r0, r8, lsl r1
    2890:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2894:	0011d413 	andseq	sp, r1, r3, lsl r4
    2898:	022d0100 	eoreq	r0, sp, #0, 2
    289c:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
    28a0:	00000022 	andeq	r0, r0, r2, lsr #32
    28a4:	05199c01 	ldreq	r9, [r9, #-3073]	; 0xc01
    28a8:	ac140000 	ldcge	0, cr0, [r4], {-0}
    28ac:	01000013 	tsteq	r0, r3, lsl r0
    28b0:	02f6022d 	rscseq	r0, r6, #-805306366	; 0xd0000002
    28b4:	91020000 	mrsls	r0, (UNDEF: 2)
    28b8:	179d1474 			; <UNDEFINED> instruction: 0x179d1474
    28bc:	2d010000 	stccs	0, cr0, [r1, #-0]
    28c0:	0000a202 	andeq	sl, r0, r2, lsl #4
    28c4:	72910200 	addsvc	r0, r1, #0, 4
    28c8:	15491600 	strbne	r1, [r9, #-1536]	; 0x600
    28cc:	3d010000 	stccc	0, cr0, [r1, #-0]
    28d0:	0000a202 	andeq	sl, r0, r2, lsl #4
    28d4:	001cd000 	andseq	sp, ip, r0
    28d8:	00002008 	andeq	r2, r0, r8
    28dc:	439c0100 	orrsmi	r0, ip, #0, 2
    28e0:	14000005 	strne	r0, [r0], #-5
    28e4:	000013ac 	andeq	r1, r0, ip, lsr #7
    28e8:	f6023d01 			; <UNDEFINED> instruction: 0xf6023d01
    28ec:	02000002 	andeq	r0, r0, #2
    28f0:	13007491 	movwne	r7, #1169	; 0x491
    28f4:	000012f8 	strdeq	r1, [r0], -r8
    28f8:	f0027101 			; <UNDEFINED> instruction: 0xf0027101
    28fc:	3808001c 	stmdacc	r8, {r2, r3, r4}
    2900:	01000000 	mrseq	r0, (UNDEF: 0)
    2904:	0005789c 	muleq	r5, ip, r8
    2908:	13ac1400 			; <UNDEFINED> instruction: 0x13ac1400
    290c:	71010000 	mrsvc	r0, (UNDEF: 1)
    2910:	0002f602 	andeq	pc, r2, r2, lsl #12
    2914:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2918:	00140114 	andseq	r0, r4, r4, lsl r1
    291c:	02710100 	rsbseq	r0, r1, #0, 2
    2920:	00000097 	muleq	r0, r7, r0
    2924:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2928:	00114513 	andseq	r4, r1, r3, lsl r5
    292c:	02850100 	addeq	r0, r5, #0, 2
    2930:	08001d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip}
    2934:	0000003e 	andeq	r0, r0, lr, lsr r0
    2938:	05ad9c01 	streq	r9, [sp, #3073]!	; 0xc01
    293c:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2940:	01000013 	tsteq	r0, r3, lsl r0
    2944:	02f60285 	rscseq	r0, r6, #1342177288	; 0x50000008
    2948:	91020000 	mrsls	r0, (UNDEF: 2)
    294c:	07561474 			; <UNDEFINED> instruction: 0x07561474
    2950:	85010000 	strhi	r0, [r1, #-0]
    2954:	00011802 	andeq	r1, r1, r2, lsl #16
    2958:	73910200 	orrsvc	r0, r1, #0, 4
    295c:	14ef1300 	strbtne	r1, [pc], #768	; 2964 <_Min_Stack_Size+0x2564>
    2960:	a0010000 	andge	r0, r1, r0
    2964:	001d6802 	andseq	r6, sp, r2, lsl #16
    2968:	00003608 	andeq	r3, r0, r8, lsl #12
    296c:	e29c0100 	adds	r0, ip, #0, 2
    2970:	14000005 	strne	r0, [r0], #-5
    2974:	000013ac 	andeq	r1, r0, ip, lsr #7
    2978:	f602a001 			; <UNDEFINED> instruction: 0xf602a001
    297c:	02000002 	andeq	r0, r0, #2
    2980:	e3147491 	tst	r4, #-1862270976	; 0x91000000
    2984:	01000011 	tsteq	r0, r1, lsl r0
    2988:	00a202a0 	adceq	r0, r2, r0, lsr #5
    298c:	91020000 	mrsls	r0, (UNDEF: 2)
    2990:	6b130072 	blvs	4c2b60 <_Min_Stack_Size+0x4c2760>
    2994:	01000012 	tsteq	r0, r2, lsl r0
    2998:	1da002e5 	sfmne	f0, 4, [r0, #916]!	; 0x394
    299c:	00360800 	eorseq	r0, r6, r0, lsl #16
    29a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    29a4:	00000617 	andeq	r0, r0, r7, lsl r6
    29a8:	0013ac14 	andseq	sl, r3, r4, lsl ip
    29ac:	02e50100 	rsceq	r0, r5, #0, 2
    29b0:	000002f6 	strdeq	r0, [r0], -r6
    29b4:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    29b8:	0000117b 	andeq	r1, r0, fp, ror r1
    29bc:	a202e501 	andge	lr, r2, #4194304	; 0x400000
    29c0:	02000000 	andeq	r0, r0, #0
    29c4:	13007291 	movwne	r7, #657	; 0x291
    29c8:	0000143f 	andeq	r1, r0, pc, lsr r4
    29cc:	d802f701 	stmdale	r2, {r0, r8, r9, sl, ip, sp, lr, pc}
    29d0:	3e08001d 	mcrcc	0, 0, r0, cr8, cr13, {0}
    29d4:	01000000 	mrseq	r0, (UNDEF: 0)
    29d8:	00064c9c 	muleq	r6, ip, ip
    29dc:	13ac1400 			; <UNDEFINED> instruction: 0x13ac1400
    29e0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    29e4:	0002f602 	andeq	pc, r2, r2, lsl #12
    29e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29ec:	00075614 	andeq	r5, r7, r4, lsl r6
    29f0:	02f70100 	rscseq	r0, r7, #0, 2
    29f4:	00000118 	andeq	r0, r0, r8, lsl r1
    29f8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    29fc:	00136e13 	andseq	r6, r3, r3, lsl lr
    2a00:	030f0100 	movweq	r0, #61696	; 0xf100
    2a04:	08001e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip}
    2a08:	00000022 	andeq	r0, r0, r2, lsr #32
    2a0c:	06729c01 	ldrbteq	r9, [r2], -r1, lsl #24
    2a10:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2a14:	01000013 	tsteq	r0, r3, lsl r0
    2a18:	02f6030f 	rscseq	r0, r6, #1006632960	; 0x3c000000
    2a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a20:	02130074 	andseq	r0, r3, #116	; 0x74
    2a24:	01000015 	tsteq	r0, r5, lsl r0
    2a28:	1e3c0344 	cdpne	3, 3, cr0, cr12, cr4, {2}
    2a2c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    2a30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a34:	000006a7 	andeq	r0, r0, r7, lsr #13
    2a38:	0013ac14 	andseq	sl, r3, r4, lsl ip
    2a3c:	03440100 	movteq	r0, #16640	; 0x4100
    2a40:	000002f6 	strdeq	r0, [r0], -r6
    2a44:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2a48:	00000756 	andeq	r0, r0, r6, asr r7
    2a4c:	18034401 	stmdane	r3, {r0, sl, lr}
    2a50:	02000001 	andeq	r0, r0, #1
    2a54:	13007391 	movwne	r7, #913	; 0x391
    2a58:	00001309 	andeq	r1, r0, r9, lsl #6
    2a5c:	7c039801 	stcvc	8, cr9, [r3], {1}
    2a60:	3a08001e 	bcc	202ae0 <_Min_Stack_Size+0x2026e0>
    2a64:	01000000 	mrseq	r0, (UNDEF: 0)
    2a68:	0006dc9c 	muleq	r6, ip, ip
    2a6c:	13ac1400 			; <UNDEFINED> instruction: 0x13ac1400
    2a70:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2a74:	0002f603 	andeq	pc, r2, r3, lsl #12
    2a78:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a7c:	00125b14 	andseq	r5, r2, r4, lsl fp
    2a80:	03980100 	orrseq	r0, r8, #0, 2
    2a84:	00000097 	muleq	r0, r7, r0
    2a88:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2a8c:	0013e313 	andseq	lr, r3, r3, lsl r3
    2a90:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2a94:	08001eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip}
    2a98:	0000003e 	andeq	r0, r0, lr, lsr r0
    2a9c:	07119c01 	ldreq	r9, [r1, -r1, lsl #24]
    2aa0:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2aa4:	01000013 	tsteq	r0, r3, lsl r0
    2aa8:	02f603ab 	rscseq	r0, r6, #-1409286142	; 0xac000002
    2aac:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab0:	07561474 			; <UNDEFINED> instruction: 0x07561474
    2ab4:	ab010000 	blge	42abc <_Min_Stack_Size+0x426bc>
    2ab8:	00011803 	andeq	r1, r1, r3, lsl #16
    2abc:	73910200 	orrsvc	r0, r1, #0, 4
    2ac0:	14891300 	strne	r1, [r9], #768	; 0x300
    2ac4:	c4010000 	strgt	r0, [r1], #-0
    2ac8:	001ef803 	andseq	pc, lr, r3, lsl #16
    2acc:	00003e08 	andeq	r3, r0, r8, lsl #28
    2ad0:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    2ad4:	14000007 	strne	r0, [r0], #-7
    2ad8:	000013ac 	andeq	r1, r0, ip, lsr #7
    2adc:	f603c401 			; <UNDEFINED> instruction: 0xf603c401
    2ae0:	02000002 	andeq	r0, r0, #2
    2ae4:	56147491 			; <UNDEFINED> instruction: 0x56147491
    2ae8:	01000007 	tsteq	r0, r7
    2aec:	011803c4 	tsteq	r8, r4, asr #7
    2af0:	91020000 	mrsls	r0, (UNDEF: 2)
    2af4:	4c130073 	ldcmi	0, cr0, [r3], {115}	; 0x73
    2af8:	01000014 	tsteq	r0, r4, lsl r0
    2afc:	1f38040b 	svcne	0x0038040b
    2b00:	00360800 	eorseq	r0, r6, r0, lsl #16
    2b04:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b08:	0000077b 	andeq	r0, r0, fp, ror r7
    2b0c:	0013ac14 	andseq	sl, r3, r4, lsl ip
    2b10:	040b0100 	streq	r0, [fp], #-256	; 0x100
    2b14:	000002f6 	strdeq	r0, [r0], -r6
    2b18:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    2b1c:	0000122b 	andeq	r1, r0, fp, lsr #4
    2b20:	a2040b01 	andge	r0, r4, #1024	; 0x400
    2b24:	02000000 	andeq	r0, r0, #0
    2b28:	13007291 	movwne	r7, #657	; 0x291
    2b2c:	00001469 	andeq	r1, r0, r9, ror #8
    2b30:	70041d01 	andvc	r1, r4, r1, lsl #26
    2b34:	3e08001f 	mcrcc	0, 0, r0, cr8, cr15, {0}
    2b38:	01000000 	mrseq	r0, (UNDEF: 0)
    2b3c:	0007b09c 	muleq	r7, ip, r0
    2b40:	13ac1400 			; <UNDEFINED> instruction: 0x13ac1400
    2b44:	1d010000 	stcne	0, cr0, [r1, #-0]
    2b48:	0002f604 	andeq	pc, r2, r4, lsl #12
    2b4c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b50:	00075614 	andeq	r5, r7, r4, lsl r6
    2b54:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    2b58:	00000118 	andeq	r0, r0, r8, lsl r1
    2b5c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2b60:	00120113 	andseq	r0, r2, r3, lsl r1
    2b64:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    2b68:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
    2b6c:	00000046 	andeq	r0, r0, r6, asr #32
    2b70:	07f49c01 	ldrbeq	r9, [r4, r1, lsl #24]!
    2b74:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2b78:	01000013 	tsteq	r0, r3, lsl r0
    2b7c:	02f6044b 	rscseq	r0, r6, #1258291200	; 0x4b000000
    2b80:	91020000 	mrsls	r0, (UNDEF: 2)
    2b84:	139f1474 	orrsne	r1, pc, #116, 8	; 0x74000000
    2b88:	4b010000 	blmi	42b90 <_Min_Stack_Size+0x42790>
    2b8c:	0000a204 	andeq	sl, r0, r4, lsl #4
    2b90:	72910200 	addsvc	r0, r1, #0, 4
    2b94:	00075614 	andeq	r5, r7, r4, lsl r6
    2b98:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    2b9c:	00000118 	andeq	r0, r0, r8, lsl r1
    2ba0:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2ba4:	00139013 	andseq	r9, r3, r3, lsl r0
    2ba8:	04cf0100 	strbeq	r0, [pc], #256	; 2bb0 <_Min_Stack_Size+0x27b0>
    2bac:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2bb0:	0000008e 	andeq	r0, r0, lr, lsl #1
    2bb4:	08749c01 	ldmdaeq	r4!, {r0, sl, fp, ip, pc}^
    2bb8:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2bbc:	01000013 	tsteq	r0, r3, lsl r0
    2bc0:	02f604cf 	rscseq	r0, r6, #-822083584	; 0xcf000000
    2bc4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bc8:	14b41464 	ldrtne	r1, [r4], #1124	; 0x464
    2bcc:	cf010000 	svcgt	0x00010000
    2bd0:	0000a204 	andeq	sl, r0, r4, lsl #4
    2bd4:	62910200 	addsvs	r0, r1, #0, 4
    2bd8:	00075614 	andeq	r5, r7, r4, lsl r6
    2bdc:	04cf0100 	strbeq	r0, [pc], #256	; 2be4 <_Min_Stack_Size+0x27e4>
    2be0:	00000118 	andeq	r0, r0, r8, lsl r1
    2be4:	15619102 	strbne	r9, [r1, #-258]!	; 0x102
    2be8:	0000155b 	andeq	r1, r0, fp, asr r5
    2bec:	b804d101 	stmdalt	r4, {r0, r8, ip, lr, pc}
    2bf0:	02000000 	andeq	r0, r0, #0
    2bf4:	10157091 	mulsne	r5, r1, r0
    2bf8:	01000014 	tsteq	r0, r4, lsl r0
    2bfc:	00b804d1 	ldrsbteq	r0, [r8], r1
    2c00:	91020000 	mrsls	r0, (UNDEF: 2)
    2c04:	1542156c 	strbne	r1, [r2, #-1388]	; 0x56c
    2c08:	d1010000 	mrsle	r0, (UNDEF: 1)
    2c0c:	0000b804 	andeq	fp, r0, r4, lsl #16
    2c10:	68910200 	ldmvs	r1, {r9}
    2c14:	0012dd15 	andseq	sp, r2, r5, lsl sp
    2c18:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2c1c:	000000b8 	strheq	r0, [r0], -r8
    2c20:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2c24:	0014a016 	andseq	sl, r4, r6, lsl r0
    2c28:	050f0100 	streq	r0, [pc, #-256]	; 2b30 <_Min_Stack_Size+0x2730>
    2c2c:	000000ea 	andeq	r0, r0, sl, ror #1
    2c30:	08002088 	stmdaeq	r0, {r3, r7, sp}
    2c34:	00000038 	andeq	r0, r0, r8, lsr r0
    2c38:	08bc9c01 	ldmeq	ip!, {r0, sl, fp, ip, pc}
    2c3c:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2c40:	01000013 	tsteq	r0, r3, lsl r0
    2c44:	02f6050f 	rscseq	r0, r6, #62914560	; 0x3c00000
    2c48:	91020000 	mrsls	r0, (UNDEF: 2)
    2c4c:	128c146c 	addne	r1, ip, #108, 8	; 0x6c000000
    2c50:	0f010000 	svceq	0x00010000
    2c54:	0000a205 	andeq	sl, r0, r5, lsl #4
    2c58:	6a910200 	bvs	fe443460 <_estack+0xde413460>
    2c5c:	00097415 	andeq	r7, r9, r5, lsl r4
    2c60:	05110100 	ldreq	r0, [r1, #-256]	; 0x100
    2c64:	000000ea 	andeq	r0, r0, sl, ror #1
    2c68:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c6c:	0012e813 	andseq	lr, r2, r3, lsl r8
    2c70:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    2c74:	080020c0 	stmdaeq	r0, {r6, r7, sp}
    2c78:	00000020 	andeq	r0, r0, r0, lsr #32
    2c7c:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    2c80:	ac140000 	ldcge	0, cr0, [r4], {-0}
    2c84:	01000013 	tsteq	r0, r3, lsl r0
    2c88:	02f60540 	rscseq	r0, r6, #64, 10	; 0x10000000
    2c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c90:	128c1474 	addne	r1, ip, #116, 8	; 0x74000000
    2c94:	40010000 	andmi	r0, r1, r0
    2c98:	0000a205 	andeq	sl, r0, r5, lsl #4
    2c9c:	72910200 	addsvc	r0, r1, #0, 4
    2ca0:	142d1600 	strtne	r1, [sp], #-1536	; 0x600
    2ca4:	62010000 	andvs	r0, r1, #0
    2ca8:	0000f605 	andeq	pc, r0, r5, lsl #12
    2cac:	0020e000 	eoreq	lr, r0, r0
    2cb0:	0000ae08 	andeq	sl, r0, r8, lsl #28
    2cb4:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    2cb8:	14000009 	strne	r0, [r0], #-9
    2cbc:	000013ac 	andeq	r1, r0, ip, lsr #7
    2cc0:	f6056201 			; <UNDEFINED> instruction: 0xf6056201
    2cc4:	02000002 	andeq	r0, r0, #2
    2cc8:	b4146491 	ldrlt	r6, [r4], #-1169	; 0x491
    2ccc:	01000014 	tsteq	r0, r4, lsl r0
    2cd0:	00a20562 	adceq	r0, r2, r2, ror #10
    2cd4:	91020000 	mrsls	r0, (UNDEF: 2)
    2cd8:	140f1562 	strne	r1, [pc], #-1378	; 2ce0 <_Min_Stack_Size+0x28e0>
    2cdc:	64010000 	strvs	r0, [r1], #-0
    2ce0:	0000b805 	andeq	fp, r0, r5, lsl #16
    2ce4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ce8:	00154215 	andseq	r4, r5, r5, lsl r2
    2cec:	05640100 	strbeq	r0, [r4, #-256]!	; 0x100
    2cf0:	000000b8 	strheq	r0, [r0], -r8
    2cf4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    2cf8:	0000155b 	andeq	r1, r0, fp, asr r5
    2cfc:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    2d00:	02000000 	andeq	r0, r0, #0
    2d04:	74156891 	ldrvc	r6, [r5], #-2193	; 0x891
    2d08:	01000009 	tsteq	r0, r9
    2d0c:	00f60565 	rscseq	r0, r6, r5, ror #10
    2d10:	91020000 	mrsls	r0, (UNDEF: 2)
    2d14:	43130073 	tstmi	r3, #115	; 0x73
    2d18:	01000012 	tsteq	r0, r2, lsl r0
    2d1c:	219005ac 	orrscs	r0, r0, ip, lsr #11
    2d20:	00380800 	eorseq	r0, r8, r0, lsl #16
    2d24:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d28:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    2d2c:	0013ac14 	andseq	sl, r3, r4, lsl ip
    2d30:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    2d34:	000002f6 	strdeq	r0, [r0], -r6
    2d38:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    2d3c:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    2d40:	a205ac01 	andge	sl, r5, #256	; 0x100
    2d44:	02000000 	andeq	r0, r0, #0
    2d48:	0f156a91 	svceq	0x00156a91
    2d4c:	01000014 	tsteq	r0, r4, lsl r0
    2d50:	00a205ae 	adceq	r0, r2, lr, lsr #11
    2d54:	91020000 	mrsls	r0, (UNDEF: 2)
    2d58:	15421576 	strbne	r1, [r2, #-1398]	; 0x576
    2d5c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2d60:	0000a205 	andeq	sl, r0, r5, lsl #4
    2d64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2d68:	04141700 	ldreq	r1, [r4], #-1792	; 0x700
    2d6c:	a7070000 	strge	r0, [r7, -r0]
    2d70:	0000cf06 	andeq	ip, r0, r6, lsl #30
    2d74:	02900000 	addseq	r0, r0, #0
    2d78:	00040000 	andeq	r0, r4, r0
    2d7c:	000008af 	andeq	r0, r0, pc, lsr #17
    2d80:	012a0104 	teqeq	sl, r4, lsl #2
    2d84:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2d88:	69000016 	stmdbvs	r0, {r1, r2, r4}
    2d8c:	b0000003 	andlt	r0, r0, r3
    2d90:	00000003 	andeq	r0, r0, r3
    2d94:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    2d98:	02000013 	andeq	r0, r0, #19
    2d9c:	02a60601 	adceq	r0, r6, #1048576	; 0x100000
    2da0:	33030000 	movwcc	r0, #12288	; 0x3000
    2da4:	02000002 	andeq	r0, r0, #2
    2da8:	0000371d 	andeq	r3, r0, sp, lsl r7
    2dac:	08010200 	stmdaeq	r1, {r9}
    2db0:	000002a4 	andeq	r0, r0, r4, lsr #5
    2db4:	3a050202 	bcc	1435c4 <_Min_Stack_Size+0x1431c4>
    2db8:	02000000 	andeq	r0, r0, #0
    2dbc:	034b0702 	movteq	r0, #46850	; 0xb702
    2dc0:	45030000 	strmi	r0, [r3, #-0]
    2dc4:	02000004 	andeq	r0, r0, #4
    2dc8:	0000573f 	andeq	r5, r0, pc, lsr r7
    2dcc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2dd0:	00000100 	andeq	r0, r0, r0, lsl #2
    2dd4:	00006003 	andeq	r6, r0, r3
    2dd8:	69410200 	stmdbvs	r1, {r9}^
    2ddc:	02000000 	andeq	r0, r0, #0
    2de0:	02f50704 	rscseq	r0, r5, #4, 14	; 0x100000
    2de4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2de8:	0000fb05 	andeq	pc, r0, r5, lsl #22
    2dec:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2df0:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2df4:	69050404 	stmdbvs	r5, {r2, sl}
    2df8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2dfc:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    2e00:	35030000 	strcc	r0, [r3, #-0]
    2e04:	03000002 	movweq	r0, #2
    2e08:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2e0c:	04470300 	strbeq	r0, [r7], #-768	; 0x300
    2e10:	41030000 	mrsmi	r0, (UNDEF: 3)
    2e14:	0000004c 	andeq	r0, r0, ip, asr #32
    2e18:	00006203 	andeq	r6, r0, r3, lsl #4
    2e1c:	5e420300 	cdppl	3, 4, cr0, cr2, cr0, {0}
    2e20:	02000000 	andeq	r0, r0, #0
    2e24:	00440704 	subeq	r0, r4, r4, lsl #14
    2e28:	a2050000 	andge	r0, r5, #0
    2e2c:	06000000 	streq	r0, [r0], -r0
    2e30:	000000a2 	andeq	r0, r0, r2, lsr #1
    2e34:	000000c9 	andeq	r0, r0, r9, asr #1
    2e38:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2e3c:	06000100 	streq	r0, [r0], -r0, lsl #2
    2e40:	000000a2 	andeq	r0, r0, r2, lsr #1
    2e44:	000000d9 	ldrdeq	r0, [r0], -r9
    2e48:	0000ad07 	andeq	sl, r0, r7, lsl #26
    2e4c:	05000300 	streq	r0, [r0, #-768]	; 0x300
    2e50:	00000097 	muleq	r0, r7, r0
    2e54:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    2e58:	0000f401 	andeq	pc, r0, r1, lsl #8
    2e5c:	09180900 	ldmdbeq	r8, {r8, fp}
    2e60:	0a000000 	beq	2e68 <_Min_Stack_Size+0x2a68>
    2e64:	00544553 	subseq	r4, r4, r3, asr r5
    2e68:	990b0001 	stmdbls	fp, {r0}
    2e6c:	0400001d 	streq	r0, [r0], #-29
    2e70:	00de01f7 	ldrsheq	r0, [lr], #23
    2e74:	01080000 	mrseq	r0, (UNDEF: 8)
    2e78:	1601f904 	strne	pc, [r1], -r4, lsl #18
    2e7c:	09000001 	stmdbeq	r0, {r0}
    2e80:	0000039d 	muleq	r0, sp, r3
    2e84:	00b20900 	adcseq	r0, r2, r0, lsl #18
    2e88:	00010000 	andeq	r0, r1, r0
    2e8c:	00083e0b 	andeq	r3, r8, fp, lsl #28
    2e90:	01f90400 	mvnseq	r0, r0, lsl #8
    2e94:	00000100 	andeq	r0, r0, r0, lsl #2
    2e98:	e604240c 	str	r2, [r4], -ip, lsl #8
    2e9c:	00016d03 	andeq	r6, r1, r3, lsl #26
    2ea0:	15ca0d00 	strbne	r0, [sl, #3328]	; 0xd00
    2ea4:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
    2ea8:	0000b403 	andeq	fp, r0, r3, lsl #8
    2eac:	500e0000 	andpl	r0, lr, r0
    2eb0:	0400434d 	streq	r4, [r0], #-845	; 0x34d
    2eb4:	00b403e9 	adcseq	r0, r4, r9, ror #7
    2eb8:	0d040000 	stceq	0, cr0, [r4, #-0]
    2ebc:	00001661 	andeq	r1, r0, r1, ror #12
    2ec0:	6d03ea04 	vstrvs	s28, [r3, #-16]
    2ec4:	08000001 	stmdaeq	r0, {r0}
    2ec8:	0015eb0d 	andseq	lr, r5, sp, lsl #22
    2ecc:	03eb0400 	mvneq	r0, #0, 8
    2ed0:	000000b9 	strheq	r0, [r0], -r9
    2ed4:	15c40d18 	strbne	r0, [r4, #3352]	; 0xd18
    2ed8:	ec040000 	stc	0, cr0, [r4], {-0}
    2edc:	0000b403 	andeq	fp, r0, r3, lsl #8
    2ee0:	05002000 	streq	r2, [r0, #-0]
    2ee4:	000000c9 	andeq	r0, r0, r9, asr #1
    2ee8:	0016ab0b 	andseq	sl, r6, fp, lsl #22
    2eec:	03ed0400 	mvneq	r0, #0, 8
    2ef0:	00000122 	andeq	r0, r0, r2, lsr #2
    2ef4:	0015a00f 	andseq	sl, r5, pc
    2ef8:	c8640100 	stmdagt	r4!, {r8}^
    2efc:	1a080021 	bne	202f88 <_Min_Stack_Size+0x202b88>
    2f00:	01000000 	mrseq	r0, (UNDEF: 0)
    2f04:	16cf109c 			; <UNDEFINED> instruction: 0x16cf109c
    2f08:	76010000 	strvc	r0, [r1], -r0
    2f0c:	080021e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp}
    2f10:	00000020 	andeq	r0, r0, r0, lsr #32
    2f14:	01b39c01 			; <UNDEFINED> instruction: 0x01b39c01
    2f18:	98110000 	ldmdals	r1, {}	; <UNPREDICTABLE>
    2f1c:	01000016 	tsteq	r0, r6, lsl r0
    2f20:	00008c76 	andeq	r8, r0, r6, ror ip
    2f24:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2f28:	15f41000 	ldrbne	r1, [r4, #0]!
    2f2c:	8b010000 	blhi	42f34 <_Min_Stack_Size+0x42b34>
    2f30:	08002204 	stmdaeq	r0, {r2, r9, sp}
    2f34:	00000020 	andeq	r0, r0, r0, lsr #32
    2f38:	01d79c01 	bicseq	r9, r7, r1, lsl #24
    2f3c:	56110000 	ldrpl	r0, [r1], -r0
    2f40:	01000007 	tsteq	r0, r7
    2f44:	0001168b 	andeq	r1, r1, fp, lsl #13
    2f48:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2f4c:	15ae1000 	strne	r1, [lr, #0]!
    2f50:	a2010000 	andge	r0, r1, #0
    2f54:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
    2f58:	0000007c 	andeq	r0, r0, ip, ror r0
    2f5c:	02179c01 	andseq	r9, r7, #256	; 0x100
    2f60:	ba110000 	blt	442f68 <_Min_Stack_Size+0x442b68>
    2f64:	01000016 	tsteq	r0, r6, lsl r0
    2f68:	00008ca2 	andeq	r8, r0, r2, lsr #25
    2f6c:	6f910200 	svcvs	0x00910200
    2f70:	00166811 	andseq	r6, r6, r1, lsl r8
    2f74:	8ca20100 	stfhis	f0, [r2]
    2f78:	02000000 	andeq	r0, r0, #0
    2f7c:	74126e91 	ldrvc	r6, [r2], #-3729	; 0xe91
    2f80:	0100706d 	tsteq	r0, sp, rrx
    2f84:	0000a2a4 	andeq	sl, r0, r4, lsr #5
    2f88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f8c:	16781000 	ldrbtne	r1, [r8], -r0
    2f90:	b7010000 	strlt	r0, [r1, -r0]
    2f94:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
    2f98:	0000001c 	andeq	r0, r0, ip, lsl r0
    2f9c:	023b9c01 	eorseq	r9, fp, #256	; 0x100
    2fa0:	d1110000 	tstle	r1, r0
    2fa4:	01000015 	tsteq	r0, r5, lsl r0
    2fa8:	0000a2b7 			; <UNDEFINED> instruction: 0x0000a2b7
    2fac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2fb0:	15641000 	strbne	r1, [r4, #-0]!
    2fb4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    2fb8:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
    2fbc:	00000020 	andeq	r0, r0, r0, lsr #32
    2fc0:	025f9c01 	subseq	r9, pc, #256	; 0x100
    2fc4:	56110000 	ldrpl	r0, [r1], -r0
    2fc8:	01000007 	tsteq	r0, r7
    2fcc:	000116c8 	andeq	r1, r1, r8, asr #13
    2fd0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2fd4:	157f1300 	ldrbne	r1, [pc, #-768]!	; 2cdc <_Min_Stack_Size+0x28dc>
    2fd8:	d5010000 	strle	r0, [r1, #-0]
    2fdc:	000000f4 	strdeq	r0, [r0], -r4
    2fe0:	080022dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp}
    2fe4:	00000034 	andeq	r0, r0, r4, lsr r0
    2fe8:	02879c01 	addeq	r9, r7, #256	; 0x100
    2fec:	74140000 	ldrvc	r0, [r4], #-0
    2ff0:	01000009 	tsteq	r0, r9
    2ff4:	0000f4d7 	ldrdeq	pc, [r0], -r7
    2ff8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2ffc:	04141500 	ldreq	r1, [r4], #-1280	; 0x500
    3000:	a7050000 	strge	r0, [r5, -r0]
    3004:	0000d906 	andeq	sp, r0, r6, lsl #18
    3008:	0b870000 	bleq	fe1c3010 <_estack+0xde193010>
    300c:	00040000 	andeq	r0, r4, r0
    3010:	000009e2 	andeq	r0, r0, r2, ror #19
    3014:	012a0104 	teqeq	sl, r4, lsl #2
    3018:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    301c:	69000018 	stmdbvs	r0, {r3, r4}
    3020:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    3024:	00000003 	andeq	r0, r0, r3
    3028:	c3000000 	movwgt	r0, #0
    302c:	02000015 	andeq	r0, r0, #21
    3030:	02a60601 	adceq	r0, r6, #1048576	; 0x100000
    3034:	33030000 	movwcc	r0, #12288	; 0x3000
    3038:	02000002 	andeq	r0, r0, #2
    303c:	0000371d 	andeq	r3, r0, sp, lsl r7
    3040:	08010200 	stmdaeq	r1, {r9}
    3044:	000002a4 	andeq	r0, r0, r4, lsr #5
    3048:	3a050202 	bcc	143858 <_Min_Stack_Size+0x143458>
    304c:	03000000 	movweq	r0, #0
    3050:	0000007c 	andeq	r0, r0, ip, ror r0
    3054:	00502b02 	subseq	r2, r0, r2, lsl #22
    3058:	02020000 	andeq	r0, r2, #0
    305c:	00034b07 	andeq	r4, r3, r7, lsl #22
    3060:	04450300 	strbeq	r0, [r5], #-768	; 0x300
    3064:	3f020000 	svccc	0x00020000
    3068:	00000062 	andeq	r0, r0, r2, rrx
    306c:	00050402 	andeq	r0, r5, r2, lsl #8
    3070:	03000001 	movweq	r0, #1
    3074:	00000060 	andeq	r0, r0, r0, rrx
    3078:	00744102 	rsbseq	r4, r4, r2, lsl #2
    307c:	04020000 	streq	r0, [r2], #-0
    3080:	0002f507 	andeq	pc, r2, r7, lsl #10
    3084:	05080200 	streq	r0, [r8, #-512]	; 0x200
    3088:	000000fb 	strdeq	r0, [r0], -fp
    308c:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
    3090:	04000002 	streq	r0, [r0], #-2
    3094:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3098:	04020074 	streq	r0, [r2], #-116	; 0x74
    309c:	0002fa07 	andeq	pc, r2, r7, lsl #20
    30a0:	02350300 	eorseq	r0, r5, #0, 6
    30a4:	2a030000 	bcs	c30ac <_Min_Stack_Size+0xc2cac>
    30a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    30ac:	00007e03 	andeq	r7, r0, r3, lsl #28
    30b0:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    30b4:	03000000 	movweq	r0, #0
    30b8:	00000447 	andeq	r0, r0, r7, asr #8
    30bc:	00574103 	subseq	r4, r7, r3, lsl #2
    30c0:	62030000 	andvs	r0, r3, #0
    30c4:	03000000 	movweq	r0, #0
    30c8:	00006942 	andeq	r6, r0, r2, asr #18
    30cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    30d0:	00000044 	andeq	r0, r0, r4, asr #32
    30d4:	0000b805 	andeq	fp, r0, r5, lsl #16
    30d8:	00a20500 	adceq	r0, r2, r0, lsl #10
    30dc:	ad050000 	stcge	0, cr0, [r5, #-0]
    30e0:	06000000 	streq	r0, [r0], -r0
    30e4:	01f70401 	mvnseq	r0, r1, lsl #8
    30e8:	000000ef 	andeq	r0, r0, pc, ror #1
    30ec:	00091807 	andeq	r1, r9, r7, lsl #16
    30f0:	53080000 	movwpl	r0, #32768	; 0x8000
    30f4:	01005445 	tsteq	r0, r5, asr #8
    30f8:	1d990900 	ldcne	9, cr0, [r9]
    30fc:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    3100:	0000d901 	andeq	sp, r0, r1, lsl #18
    3104:	4d4e0900 	stclmi	9, cr0, [lr, #-0]
    3108:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    310c:	0000d901 	andeq	sp, r0, r1, lsl #18
    3110:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3114:	011d01f9 			; <UNDEFINED> instruction: 0x011d01f9
    3118:	9d070000 	stcls	0, cr0, [r7, #-0]
    311c:	00000003 	andeq	r0, r0, r3
    3120:	0000b207 	andeq	fp, r0, r7, lsl #4
    3124:	09000100 	stmdbeq	r0, {r8}
    3128:	0000083e 	andeq	r0, r0, lr, lsr r8
    312c:	0701f904 	streq	pc, [r1, -r4, lsl #18]
    3130:	06000001 	streq	r0, [r0], -r1
    3134:	01fc0401 	mvnseq	r0, r1, lsl #8
    3138:	0000013f 	andeq	r0, r0, pc, lsr r1
    313c:	004ef507 	subeq	pc, lr, r7, lsl #10
    3140:	ca070000 	bgt	1c3148 <_Min_Stack_Size+0x1c2d48>
    3144:	01000010 	tsteq	r0, r0, lsl r0
    3148:	0c560900 	mrrceq	9, 0, r0, r6, cr0
    314c:	fc040000 	stc2	0, cr0, [r4], {-0}
    3150:	00012901 	andeq	r2, r1, r1, lsl #18
    3154:	04280a00 	strteq	r0, [r8], #-2560	; 0xa00
    3158:	025803f3 	subseq	r0, r8, #-872415229	; 0xcc000003
    315c:	430b0000 	movwmi	r0, #45056	; 0xb000
    3160:	04003152 	streq	r3, [r0], #-338	; 0x152
    3164:	00cf03f5 	strdeq	r0, [pc], #53	; <UNPREDICTABLE>
    3168:	0c000000 	stceq	0, cr0, [r0], {-0}
    316c:	00000655 	andeq	r0, r0, r5, asr r6
    3170:	a203f604 	andge	pc, r3, #4, 12	; 0x400000
    3174:	02000000 	andeq	r0, r0, #0
    3178:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    317c:	03f70400 	mvnseq	r0, #0, 8
    3180:	000000cf 	andeq	r0, r0, pc, asr #1
    3184:	065f0c04 	ldrbeq	r0, [pc], -r4, lsl #24
    3188:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
    318c:	0000a203 	andeq	sl, r0, r3, lsl #4
    3190:	da0c0600 	ble	304998 <_Min_Stack_Size+0x304598>
    3194:	04000017 	streq	r0, [r0], #-23
    3198:	00cf03f9 	strdeq	r0, [pc], #57	; <UNPREDICTABLE>
    319c:	0c080000 	stceq	0, cr0, [r8], {-0}
    31a0:	00000669 	andeq	r0, r0, r9, ror #12
    31a4:	a203fa04 	andge	pc, r3, #4, 20	; 0x4000
    31a8:	0a000000 	beq	31b0 <_Min_Stack_Size+0x2db0>
    31ac:	001ad30c 	andseq	sp, sl, ip, lsl #6
    31b0:	03fb0400 	mvnseq	r0, #0, 8
    31b4:	000000cf 	andeq	r0, r0, pc, asr #1
    31b8:	05550c0c 	ldrbeq	r0, [r5, #-3084]	; 0xc0c
    31bc:	fc040000 	stc2	0, cr0, [r4], {-0}
    31c0:	0000a203 	andeq	sl, r0, r3, lsl #4
    31c4:	440b0e00 	strmi	r0, [fp], #-3584	; 0xe00
    31c8:	fd040052 	stc2	0, cr0, [r4, #-328]	; 0xfffffeb8
    31cc:	0000cf03 	andeq	ip, r0, r3, lsl #30
    31d0:	7f0c1000 	svcvc	0x000c1000
    31d4:	04000006 	streq	r0, [r0], #-6
    31d8:	00a203fe 	strdeq	r0, [r2], lr	; <UNPREDICTABLE>
    31dc:	0b120000 	bleq	4831e4 <_Min_Stack_Size+0x482de4>
    31e0:	00315253 	eorseq	r5, r1, r3, asr r2
    31e4:	cf03ff04 	svcgt	0x0003ff04
    31e8:	14000000 	strne	r0, [r0], #-0
    31ec:	0006890c 	andeq	r8, r6, ip, lsl #18
    31f0:	04000400 	streq	r0, [r0], #-1024	; 0x400
    31f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    31f8:	52530b16 	subspl	r0, r3, #22528	; 0x5800
    31fc:	01040032 	tsteq	r4, r2, lsr r0
    3200:	0000cf04 	andeq	ip, r0, r4, lsl #30
    3204:	930c1800 	movwls	r1, #51200	; 0xc800
    3208:	04000006 	streq	r0, [r0], #-6
    320c:	00a20402 	adceq	r0, r2, r2, lsl #8
    3210:	0b1a0000 	bleq	683218 <_Min_Stack_Size+0x682e18>
    3214:	00524343 	subseq	r4, r2, r3, asr #6
    3218:	cf040304 	svcgt	0x00040304
    321c:	1c000000 	stcne	0, cr0, [r0], {-0}
    3220:	0019850c 	andseq	r8, r9, ip, lsl #10
    3224:	04040400 	streq	r0, [r4], #-1024	; 0x400
    3228:	000000a2 	andeq	r0, r0, r2, lsr #1
    322c:	173c0c1e 			; <UNDEFINED> instruction: 0x173c0c1e
    3230:	05040000 	streq	r0, [r4, #-0]
    3234:	0000cf04 	andeq	ip, r0, r4, lsl #30
    3238:	8f0c2000 	svchi	0x000c2000
    323c:	04000019 	streq	r0, [r0], #-25
    3240:	00a20406 	adceq	r0, r2, r6, lsl #8
    3244:	0c220000 	stceq	0, cr0, [r2], #-0
    3248:	000017df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    324c:	cf040704 	svcgt	0x00040704
    3250:	24000000 	strcs	r0, [r0], #-0
    3254:	0019990c 	andseq	r9, r9, ip, lsl #18
    3258:	04080400 	streq	r0, [r8], #-1024	; 0x400
    325c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3260:	10090026 	andne	r0, r9, r6, lsr #32
    3264:	04000018 	streq	r0, [r0], #-24
    3268:	014b0409 	cmpeq	fp, r9, lsl #8
    326c:	100d0000 	andne	r0, sp, r0
    3270:	029d3005 	addseq	r3, sp, #5
    3274:	c20e0000 	andgt	r0, lr, #0
    3278:	0500000a 	streq	r0, [r0, #-10]
    327c:	0000b832 	andeq	fp, r0, r2, lsr r8
    3280:	9a0e0000 	bls	383288 <_Min_Stack_Size+0x382e88>
    3284:	0500000c 	streq	r0, [r0, #-12]
    3288:	0000b833 	andeq	fp, r0, r3, lsr r8
    328c:	470e0400 	strmi	r0, [lr, -r0, lsl #8]
    3290:	0500000f 	streq	r0, [r0, #-15]
    3294:	0000b834 	andeq	fp, r0, r4, lsr r8
    3298:	900e0800 	andls	r0, lr, r0, lsl #16
    329c:	0500000b 	streq	r0, [r0, #-11]
    32a0:	0000b835 	andeq	fp, r0, r5, lsr r8
    32a4:	03000c00 	movweq	r0, #3072	; 0xc00
    32a8:	000010e0 	andeq	r1, r0, r0, ror #1
    32ac:	02643605 	rsbeq	r3, r4, #5242880	; 0x500000
    32b0:	100d0000 	andne	r0, sp, r0
    32b4:	02f93606 	rscseq	r3, r9, #6291456	; 0x600000
    32b8:	b30e0000 	movwlt	r0, #57344	; 0xe000
    32bc:	06000017 			; <UNDEFINED> instruction: 0x06000017
    32c0:	0000b838 	andeq	fp, r0, r8, lsr r8
    32c4:	c20e0000 	andgt	r0, lr, #0
    32c8:	06000017 			; <UNDEFINED> instruction: 0x06000017
    32cc:	0000a23b 	andeq	sl, r0, fp, lsr r2
    32d0:	660e0400 	strvs	r0, [lr], -r0, lsl #8
    32d4:	06000018 			; <UNDEFINED> instruction: 0x06000018
    32d8:	0000a23e 	andeq	sl, r0, lr, lsr r2
    32dc:	a30e0600 	movwge	r0, #58880	; 0xe600
    32e0:	06000019 			; <UNDEFINED> instruction: 0x06000019
    32e4:	0000a241 	andeq	sl, r0, r1, asr #4
    32e8:	be0e0800 	cdplt	8, 0, cr0, cr14, cr0, {0}
    32ec:	06000019 			; <UNDEFINED> instruction: 0x06000019
    32f0:	0000a244 	andeq	sl, r0, r4, asr #4
    32f4:	ee0e0a00 	vmla.f32	s0, s28, s0
    32f8:	06000019 			; <UNDEFINED> instruction: 0x06000019
    32fc:	0000a247 	andeq	sl, r0, r7, asr #4
    3300:	03000c00 	movweq	r0, #3072	; 0xc00
    3304:	00001960 	andeq	r1, r0, r0, ror #18
    3308:	02a84906 	adceq	r4, r8, #98304	; 0x18000
    330c:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
    3310:	01000019 	tsteq	r0, r9, lsl r0
    3314:	00231089 	eoreq	r1, r3, r9, lsl #1
    3318:	00007408 	andeq	r7, r0, r8, lsl #8
    331c:	289c0100 	ldmcs	ip, {r8}
    3320:	10000003 	andne	r0, r0, r3
    3324:	0000189a 	muleq	r0, sl, r8
    3328:	03288901 	teqeq	r8, #16384	; 0x4000
    332c:	91020000 	mrsls	r0, (UNDEF: 2)
    3330:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    3334:	00000258 	andeq	r0, r0, r8, asr r2
    3338:	0018520f 	andseq	r5, r8, pc, lsl #4
    333c:	84b40100 	ldrthi	r0, [r4], #256	; 0x100
    3340:	84080023 	strhi	r0, [r8], #-35	; 0x23
    3344:	01000001 	tsteq	r0, r1
    3348:	0003a69c 	muleq	r3, ip, r6
    334c:	189a1000 	ldmne	sl, {ip}
    3350:	b4010000 	strlt	r0, [r1], #-0
    3354:	00000328 	andeq	r0, r0, r8, lsr #6
    3358:	10549102 	subsne	r9, r4, r2, lsl #2
    335c:	0000177c 	andeq	r1, r0, ip, ror r7
    3360:	03a6b401 			; <UNDEFINED> instruction: 0x03a6b401
    3364:	91020000 	mrsls	r0, (UNDEF: 2)
    3368:	0b891250 	bleq	fe247cb0 <_estack+0xde217cb0>
    336c:	b6010000 	strlt	r0, [r1], -r0
    3370:	000000a2 	andeq	r0, r0, r2, lsr #1
    3374:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
    3378:	0000178b 	andeq	r1, r0, fp, lsl #15
    337c:	00a2b601 	adceq	fp, r2, r1, lsl #12
    3380:	91020000 	mrsls	r0, (UNDEF: 2)
    3384:	1b1f1272 	blne	7c7d54 <_Min_Stack_Size+0x7c7954>
    3388:	b7010000 	strlt	r0, [r1, -r0]
    338c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3390:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3394:	00001977 	andeq	r1, r0, r7, ror r9
    3398:	00b8b801 	adcseq	fp, r8, r1, lsl #16
    339c:	91020000 	mrsls	r0, (UNDEF: 2)
    33a0:	19b3126c 	ldmibne	r3!, {r2, r3, r5, r6, r9, ip}
    33a4:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    33a8:	0000029d 	muleq	r0, sp, r2
    33ac:	005c9102 	subseq	r9, ip, r2, lsl #2
    33b0:	02f90411 	rscseq	r0, r9, #285212672	; 0x11000000
    33b4:	cb130000 	blgt	4c33bc <_Min_Stack_Size+0x4c2fbc>
    33b8:	01000017 	tsteq	r0, r7, lsl r0
    33bc:	25080121 	strcs	r0, [r8, #-289]	; 0x121
    33c0:	003c0800 	eorseq	r0, ip, r0, lsl #16
    33c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    33c8:	000003d2 	ldrdeq	r0, [r0], -r2
    33cc:	00177c14 	andseq	r7, r7, r4, lsl ip
    33d0:	01210100 	teqeq	r1, r0, lsl #2
    33d4:	000003a6 	andeq	r0, r0, r6, lsr #7
    33d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    33dc:	00197d13 	andseq	r7, r9, r3, lsl sp
    33e0:	01390100 	teqeq	r9, r0, lsl #2
    33e4:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
    33e8:	0000003e 	andeq	r0, r0, lr, lsr r0
    33ec:	04079c01 	streq	r9, [r7], #-3073	; 0xc01
    33f0:	9a140000 	bls	5033f8 <_Min_Stack_Size+0x502ff8>
    33f4:	01000018 	tsteq	r0, r8, lsl r0
    33f8:	03280139 	teqeq	r8, #1073741838	; 0x4000000e
    33fc:	91020000 	mrsls	r0, (UNDEF: 2)
    3400:	07561474 			; <UNDEFINED> instruction: 0x07561474
    3404:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    3408:	00011d01 	andeq	r1, r1, r1, lsl #26
    340c:	73910200 	orrsvc	r0, r1, #0, 4
    3410:	1b0b1300 	blne	2c8018 <_Min_Stack_Size+0x2c7c18>
    3414:	56010000 	strpl	r0, [r1], -r0
    3418:	00258401 	eoreq	r8, r5, r1, lsl #8
    341c:	00003e08 	andeq	r3, r0, r8, lsl #28
    3420:	3c9c0100 	ldfccs	f0, [ip], {0}
    3424:	14000004 	strne	r0, [r0], #-4
    3428:	0000189a 	muleq	r0, sl, r8
    342c:	28015601 	stmdacs	r1, {r0, r9, sl, ip, lr}
    3430:	02000003 	andeq	r0, r0, #3
    3434:	56147491 			; <UNDEFINED> instruction: 0x56147491
    3438:	01000007 	tsteq	r0, r7
    343c:	011d0156 	tsteq	sp, r6, asr r1
    3440:	91020000 	mrsls	r0, (UNDEF: 2)
    3444:	1c130073 	ldcne	0, cr0, [r3], {115}	; 0x73
    3448:	01000018 	tsteq	r0, r8, lsl r0
    344c:	25c40173 	strbcs	r0, [r4, #371]	; 0x173
    3450:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3454:	9c010000 	stcls	0, cr0, [r1], {-0}
    3458:	00000480 	andeq	r0, r0, r0, lsl #9
    345c:	00189a14 	andseq	r9, r8, r4, lsl sl
    3460:	01730100 	cmneq	r3, r0, lsl #2
    3464:	00000328 	andeq	r0, r0, r8, lsr #6
    3468:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    346c:	00001ad8 	ldrdeq	r1, [r0], -r8
    3470:	a2017301 	andge	r7, r1, #67108864	; 0x4000000
    3474:	02000000 	andeq	r0, r0, #0
    3478:	89156a91 	ldmdbhi	r5, {r0, r4, r7, r9, fp, sp, lr}
    347c:	0100000b 	tsteq	r0, fp
    3480:	00a20175 	adceq	r0, r2, r5, ror r1
    3484:	91020000 	mrsls	r0, (UNDEF: 2)
    3488:	fe130076 	mrc2	0, 0, r0, cr3, cr6, {3}
    348c:	01000016 	tsteq	r0, r6, lsl r0
    3490:	2604018f 	strcs	r0, [r4], -pc, lsl #3
    3494:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3498:	9c010000 	stcls	0, cr0, [r1], {-0}
    349c:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    34a0:	00189a14 	andseq	r9, r8, r4, lsl sl
    34a4:	018f0100 	orreq	r0, pc, r0, lsl #2
    34a8:	00000328 	andeq	r0, r0, r8, lsr #6
    34ac:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    34b0:	00000756 	andeq	r0, r0, r6, asr r7
    34b4:	1d018f01 	stcne	15, cr8, [r1, #-4]
    34b8:	02000001 	andeq	r0, r0, #1
    34bc:	13007391 	movwne	r7, #913	; 0x391
    34c0:	00001aea 	andeq	r1, r0, sl, ror #21
    34c4:	4401a701 	strmi	sl, [r1], #-1793	; 0x701
    34c8:	3e080026 	cdpcc	0, 0, cr0, cr8, cr6, {1}
    34cc:	01000000 	mrseq	r0, (UNDEF: 0)
    34d0:	0004ea9c 	muleq	r4, ip, sl
    34d4:	189a1400 	ldmne	sl, {sl, ip}
    34d8:	a7010000 	strge	r0, [r1, -r0]
    34dc:	00032801 	andeq	r2, r3, r1, lsl #16
    34e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34e4:	00075614 	andeq	r5, r7, r4, lsl r6
    34e8:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    34ec:	0000011d 	andeq	r0, r0, sp, lsl r1
    34f0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    34f4:	001ab613 	andseq	fp, sl, r3, lsl r6
    34f8:	01c30100 	biceq	r0, r3, r0, lsl #2
    34fc:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
    3500:	0000003a 	andeq	r0, r0, sl, lsr r0
    3504:	052e9c01 	streq	r9, [lr, #-3073]!	; 0xc01
    3508:	9a140000 	bls	503510 <_Min_Stack_Size+0x503110>
    350c:	01000018 	tsteq	r0, r8, lsl r0
    3510:	032801c3 	teqeq	r8, #-1073741776	; 0xc0000030
    3514:	91020000 	mrsls	r0, (UNDEF: 2)
    3518:	14071474 	strne	r1, [r7], #-1140	; 0x474
    351c:	c3010000 	movwgt	r0, #4096	; 0x1000
    3520:	00009701 	andeq	r9, r0, r1, lsl #14
    3524:	73910200 	orrsvc	r0, r1, #0, 4
    3528:	00189f14 	andseq	r9, r8, r4, lsl pc
    352c:	01c30100 	biceq	r0, r3, r0, lsl #2
    3530:	00000097 	muleq	r0, r7, r0
    3534:	00729102 	rsbseq	r9, r2, r2, lsl #2
    3538:	001a5f13 	andseq	r5, sl, r3, lsl pc
    353c:	01de0100 	bicseq	r0, lr, r0, lsl #2
    3540:	080026c0 	stmdaeq	r0, {r6, r7, r9, sl, sp}
    3544:	0000003e 	andeq	r0, r0, lr, lsr r0
    3548:	05639c01 	strbeq	r9, [r3, #-3073]!	; 0xc01
    354c:	9a140000 	bls	503554 <_Min_Stack_Size+0x503154>
    3550:	01000018 	tsteq	r0, r8, lsl r0
    3554:	032801de 	teqeq	r8, #-2147483593	; 0x80000037
    3558:	91020000 	mrsls	r0, (UNDEF: 2)
    355c:	07561474 			; <UNDEFINED> instruction: 0x07561474
    3560:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    3564:	00011d01 	andeq	r1, r1, r1, lsl #26
    3568:	73910200 	orrsvc	r0, r1, #0, 4
    356c:	17661300 	strbne	r1, [r6, -r0, lsl #6]!
    3570:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3574:	00270001 	eoreq	r0, r7, r1
    3578:	00004008 	andeq	r4, r0, r8
    357c:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    3580:	14000005 	strne	r0, [r0], #-5
    3584:	0000189a 	muleq	r0, sl, r8
    3588:	2801f501 	stmdacs	r1, {r0, r8, sl, ip, sp, lr, pc}
    358c:	02000003 	andeq	r0, r0, #3
    3590:	07146c91 			; <UNDEFINED> instruction: 0x07146c91
    3594:	01000014 	tsteq	r0, r4, lsl r0
    3598:	009701f5 			; <UNDEFINED> instruction: 0x009701f5
    359c:	91020000 	mrsls	r0, (UNDEF: 2)
    35a0:	0b89156b 	bleq	fe248b54 <_estack+0xde218b54>
    35a4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    35a8:	0000a201 	andeq	sl, r0, r1, lsl #4
    35ac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    35b0:	1a331300 	bne	cc81b8 <_Min_Stack_Size+0xcc7db8>
    35b4:	10010000 	andne	r0, r1, r0
    35b8:	00274002 	eoreq	r4, r7, r2
    35bc:	00003e08 	andeq	r3, r0, r8, lsl #28
    35c0:	dc9c0100 	ldfles	f0, [ip], {0}
    35c4:	14000005 	strne	r0, [r0], #-5
    35c8:	0000189a 	muleq	r0, sl, r8
    35cc:	28021001 	stmdacs	r2, {r0, ip}
    35d0:	02000003 	andeq	r0, r0, #3
    35d4:	56147491 			; <UNDEFINED> instruction: 0x56147491
    35d8:	01000007 	tsteq	r0, r7
    35dc:	011d0210 	tsteq	sp, r0, lsl r2
    35e0:	91020000 	mrsls	r0, (UNDEF: 2)
    35e4:	33130073 	tstcc	r3, #115	; 0x73
    35e8:	01000019 	tsteq	r0, r9, lsl r0
    35ec:	27800228 	strcs	r0, [r0, r8, lsr #4]
    35f0:	003e0800 	eorseq	r0, lr, r0, lsl #16
    35f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    35f8:	00000611 	andeq	r0, r0, r1, lsl r6
    35fc:	00189a14 	andseq	r9, r8, r4, lsl sl
    3600:	02280100 	eoreq	r0, r8, #0, 2
    3604:	00000328 	andeq	r0, r0, r8, lsr #6
    3608:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    360c:	00000756 	andeq	r0, r0, r6, asr r7
    3610:	1d022801 	stcne	8, cr2, [r2, #-4]
    3614:	02000001 	andeq	r0, r0, #1
    3618:	13007391 	movwne	r7, #913	; 0x391
    361c:	00001aa1 	andeq	r1, r0, r1, lsr #21
    3620:	c0024201 	andgt	r4, r2, r1, lsl #4
    3624:	42080027 	andmi	r0, r8, #39	; 0x27
    3628:	01000000 	mrseq	r0, (UNDEF: 0)
    362c:	0006469c 	muleq	r6, ip, r6
    3630:	189a1400 	ldmne	sl, {sl, ip}
    3634:	42010000 	andmi	r0, r1, #0
    3638:	00032802 	andeq	r2, r3, r2, lsl #16
    363c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3640:	00075614 	andeq	r5, r7, r4, lsl r6
    3644:	02420100 	subeq	r0, r2, #0, 2
    3648:	0000011d 	andeq	r0, r0, sp, lsl r1
    364c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3650:	00171b13 	andseq	r1, r7, r3, lsl fp
    3654:	025a0100 	subseq	r0, sl, #0, 2
    3658:	08002804 	stmdaeq	r0, {r2, fp, sp}
    365c:	0000003e 	andeq	r0, r0, lr, lsr r0
    3660:	067b9c01 	ldrbteq	r9, [fp], -r1, lsl #24
    3664:	9a140000 	bls	50366c <_Min_Stack_Size+0x50326c>
    3668:	01000018 	tsteq	r0, r8, lsl r0
    366c:	0328025a 	teqeq	r8, #-1610612731	; 0xa0000005
    3670:	91020000 	mrsls	r0, (UNDEF: 2)
    3674:	07561474 			; <UNDEFINED> instruction: 0x07561474
    3678:	5a010000 	bpl	43680 <_Min_Stack_Size+0x43280>
    367c:	00011d02 	andeq	r1, r1, r2, lsl #26
    3680:	73910200 	orrsvc	r0, r1, #0, 4
    3684:	1a171300 	bne	5c828c <_Min_Stack_Size+0x5c7e8c>
    3688:	74010000 	strvc	r0, [r1], #-0
    368c:	00284402 	eoreq	r4, r8, r2, lsl #8
    3690:	00004008 	andeq	r4, r0, r8
    3694:	b09c0100 	addslt	r0, ip, r0, lsl #2
    3698:	14000006 	strne	r0, [r0], #-6
    369c:	0000189a 	muleq	r0, sl, r8
    36a0:	28027401 	stmdacs	r2, {r0, sl, ip, sp, lr}
    36a4:	02000003 	andeq	r0, r0, #3
    36a8:	66147491 			; <UNDEFINED> instruction: 0x66147491
    36ac:	01000018 	tsteq	r0, r8, lsl r0
    36b0:	00a20274 	adceq	r0, r2, r4, ror r2
    36b4:	91020000 	mrsls	r0, (UNDEF: 2)
    36b8:	4f130072 	svcmi	0x00130072
    36bc:	01000017 	tsteq	r0, r7, lsl r0
    36c0:	2884029a 	stmcs	r4, {r1, r3, r4, r7, r9}
    36c4:	00400800 	subeq	r0, r0, r0, lsl #16
    36c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    36cc:	000006e5 	andeq	r0, r0, r5, ror #13
    36d0:	00189a14 	andseq	r9, r8, r4, lsl sl
    36d4:	029a0100 	addseq	r0, sl, #0, 2
    36d8:	00000328 	andeq	r0, r0, r8, lsr #6
    36dc:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    36e0:	000018ad 	andeq	r1, r0, sp, lsr #17
    36e4:	a2029a01 	andge	r9, r2, #4096	; 0x1000
    36e8:	02000000 	andeq	r0, r0, #0
    36ec:	13007291 	movwne	r7, #657	; 0x291
    36f0:	000017fb 	strdeq	r1, [r0], -fp
    36f4:	c402b601 	strgt	fp, [r2], #-1537	; 0x601
    36f8:	40080028 	andmi	r0, r8, r8, lsr #32
    36fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3700:	00071a9c 	muleq	r7, ip, sl
    3704:	189a1400 	ldmne	sl, {sl, ip}
    3708:	b6010000 	strlt	r0, [r1], -r0
    370c:	00032802 	andeq	r2, r3, r2, lsl #16
    3710:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3714:	00188b14 	andseq	r8, r8, r4, lsl fp
    3718:	02b60100 	adcseq	r0, r6, #0, 2
    371c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3720:	00729102 	rsbseq	r9, r2, r2, lsl #2
    3724:	00185b13 	andseq	r5, r8, r3, lsl fp
    3728:	02ce0100 	sbceq	r0, lr, #0, 2
    372c:	08002904 	stmdaeq	r0, {r2, r8, fp, sp}
    3730:	0000003e 	andeq	r0, r0, lr, lsr r0
    3734:	074f9c01 	strbeq	r9, [pc, -r1, lsl #24]
    3738:	9a140000 	bls	503740 <_Min_Stack_Size+0x503340>
    373c:	01000018 	tsteq	r0, r8, lsl r0
    3740:	032802ce 	teqeq	r8, #-536870900	; 0xe000000c
    3744:	91020000 	mrsls	r0, (UNDEF: 2)
    3748:	07561474 			; <UNDEFINED> instruction: 0x07561474
    374c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    3750:	00011d02 	andeq	r1, r1, r2, lsl #26
    3754:	73910200 	orrsvc	r0, r1, #0, 4
    3758:	17951300 	ldrne	r1, [r5, r0, lsl #6]
    375c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3760:	00294402 	eoreq	r4, r9, r2, lsl #8
    3764:	00001e08 	andeq	r1, r0, r8, lsl #28
    3768:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    376c:	14000007 	strne	r0, [r0], #-7
    3770:	0000189a 	muleq	r0, sl, r8
    3774:	2802f401 	stmdacs	r2, {r0, sl, ip, sp, lr, pc}
    3778:	02000003 	andeq	r0, r0, #3
    377c:	9d147491 	cfldrsls	mvf7, [r4, #-580]	; 0xfffffdbc
    3780:	01000017 	tsteq	r0, r7, lsl r0
    3784:	009702f4 			; <UNDEFINED> instruction: 0x009702f4
    3788:	91020000 	mrsls	r0, (UNDEF: 2)
    378c:	d0160073 	andsle	r0, r6, r3, ror r0
    3790:	01000019 	tsteq	r0, r9, lsl r0
    3794:	00970301 	addseq	r0, r7, r1, lsl #6
    3798:	29640000 	stmdbcs	r4!, {}^	; <UNPREDICTABLE>
    379c:	001c0800 	andseq	r0, ip, r0, lsl #16
    37a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    37a4:	000007ae 	andeq	r0, r0, lr, lsr #15
    37a8:	00189a14 	andseq	r9, r8, r4, lsl sl
    37ac:	03010100 	movweq	r0, #4352	; 0x1100
    37b0:	00000328 	andeq	r0, r0, r8, lsr #6
    37b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    37b8:	00187b13 	andseq	r7, r8, r3, lsl fp
    37bc:	03200100 	teqeq	r0, #0, 2
    37c0:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
    37c4:	0000003e 	andeq	r0, r0, lr, lsr r0
    37c8:	07e39c01 	strbeq	r9, [r3, r1, lsl #24]!
    37cc:	9a140000 	bls	5037d4 <_Min_Stack_Size+0x5033d4>
    37d0:	01000018 	tsteq	r0, r8, lsl r0
    37d4:	03280320 	teqeq	r8, #32, 6	; 0x80000000
    37d8:	91020000 	mrsls	r0, (UNDEF: 2)
    37dc:	07561474 			; <UNDEFINED> instruction: 0x07561474
    37e0:	20010000 	andcs	r0, r1, r0
    37e4:	00011d03 	andeq	r1, r1, r3, lsl #26
    37e8:	73910200 	orrsvc	r0, r1, #0, 4
    37ec:	18341300 	ldmdane	r4!, {r8, r9, ip}
    37f0:	3f010000 	svccc	0x00010000
    37f4:	0029c003 	eoreq	ip, r9, r3
    37f8:	00004008 	andeq	r4, r0, r8
    37fc:	189c0100 	ldmne	ip, {r8}
    3800:	14000008 	strne	r0, [r0], #-8
    3804:	0000189a 	muleq	r0, sl, r8
    3808:	28033f01 	stmdacs	r3, {r0, r8, r9, sl, fp, ip, sp}
    380c:	02000003 	andeq	r0, r0, #3
    3810:	75147491 	ldrvc	r7, [r4, #-1169]	; 0x491
    3814:	0100001a 	tsteq	r0, sl, lsl r0
    3818:	00a2033f 	adceq	r0, r2, pc, lsr r3
    381c:	91020000 	mrsls	r0, (UNDEF: 2)
    3820:	a2130072 	andsge	r0, r3, #114	; 0x72
    3824:	01000017 	tsteq	r0, r7, lsl r0
    3828:	2a000357 	bcs	458c <_Min_Stack_Size+0x418c>
    382c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3830:	9c010000 	stcls	0, cr0, [r1], {-0}
    3834:	0000084d 	andeq	r0, r0, sp, asr #16
    3838:	00189a14 	andseq	r9, r8, r4, lsl sl
    383c:	03570100 	cmpeq	r7, #0, 2
    3840:	00000328 	andeq	r0, r0, r8, lsr #6
    3844:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    3848:	00000756 	andeq	r0, r0, r6, asr r7
    384c:	1d035701 	stcne	7, cr5, [r3, #-4]
    3850:	02000001 	andeq	r0, r0, #1
    3854:	16007391 			; <UNDEFINED> instruction: 0x16007391
    3858:	00001710 	andeq	r1, r0, r0, lsl r7
    385c:	97036d01 	strls	r6, [r3, -r1, lsl #26]
    3860:	40000000 	andmi	r0, r0, r0
    3864:	2008002a 	andcs	r0, r8, sl, lsr #32
    3868:	01000000 	mrseq	r0, (UNDEF: 0)
    386c:	0008779c 	muleq	r8, ip, r7
    3870:	189a1400 	ldmne	sl, {sl, ip}
    3874:	6d010000 	stcvs	0, cr0, [r1, #-0]
    3878:	00032803 	andeq	r2, r3, r3, lsl #16
    387c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3880:	19551300 	ldmdbne	r5, {r8, r9, ip}^
    3884:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3888:	002a6003 	eoreq	r6, sl, r3
    388c:	00003e08 	andeq	r3, r0, r8, lsl #28
    3890:	ac9c0100 	ldfges	f0, [ip], {0}
    3894:	14000008 	strne	r0, [r0], #-8
    3898:	0000189a 	muleq	r0, sl, r8
    389c:	28038e01 	stmdacs	r3, {r0, r9, sl, fp, pc}
    38a0:	02000003 	andeq	r0, r0, #3
    38a4:	56147491 			; <UNDEFINED> instruction: 0x56147491
    38a8:	01000007 	tsteq	r0, r7
    38ac:	011d038e 	tsteq	sp, lr, lsl #7
    38b0:	91020000 	mrsls	r0, (UNDEF: 2)
    38b4:	e4130073 	ldr	r0, [r3], #-115	; 0x73
    38b8:	01000017 	tsteq	r0, r7, lsl r0
    38bc:	2aa003a6 	bcs	fe80475c <_estack+0xde7d475c>
    38c0:	003e0800 	eorseq	r0, lr, r0, lsl #16
    38c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    38c8:	000008e1 	andeq	r0, r0, r1, ror #17
    38cc:	00189a14 	andseq	r9, r8, r4, lsl sl
    38d0:	03a60100 			; <UNDEFINED> instruction: 0x03a60100
    38d4:	00000328 	andeq	r0, r0, r8, lsr #6
    38d8:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    38dc:	00000756 	andeq	r0, r0, r6, asr r7
    38e0:	1d03a601 	stcne	6, cr10, [r3, #-4]
    38e4:	02000001 	andeq	r0, r0, #1
    38e8:	16007391 			; <UNDEFINED> instruction: 0x16007391
    38ec:	00001a06 	andeq	r1, r0, r6, lsl #20
    38f0:	a2043001 	andge	r3, r4, #1
    38f4:	e0000000 	and	r0, r0, r0
    38f8:	2e08002a 	cdpcs	0, 0, cr0, cr8, cr10, {1}
    38fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3900:	0009299c 	muleq	r9, ip, r9
    3904:	189a1400 	ldmne	sl, {sl, ip}
    3908:	30010000 	andcc	r0, r1, r0
    390c:	00032804 	andeq	r2, r3, r4, lsl #16
    3910:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3914:	00172f14 	andseq	r2, r7, r4, lsl pc
    3918:	04300100 	ldrteq	r0, [r0], #-256	; 0x100
    391c:	00000097 	muleq	r0, r7, r0
    3920:	176b9102 	strbne	r9, [fp, -r2, lsl #2]!
    3924:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3928:	ca043201 	bgt	110134 <_Min_Stack_Size+0x10fd34>
    392c:	02000000 	andeq	r0, r0, #0
    3930:	13007491 	movwne	r7, #1169	; 0x491
    3934:	00001742 	andeq	r1, r0, r2, asr #14
    3938:	10044b01 	andne	r4, r4, r1, lsl #22
    393c:	4608002b 	strmi	r0, [r8], -fp, lsr #32
    3940:	01000000 	mrseq	r0, (UNDEF: 0)
    3944:	00096d9c 	muleq	r9, ip, sp
    3948:	189a1400 	ldmne	sl, {sl, ip}
    394c:	4b010000 	blmi	43954 <_Min_Stack_Size+0x43554>
    3950:	00032804 	andeq	r2, r3, r4, lsl #16
    3954:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3958:	00197014 	andseq	r7, r9, r4, lsl r0
    395c:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    3960:	000000a2 	andeq	r0, r0, r2, lsr #1
    3964:	14729102 	ldrbtne	r9, [r2], #-258	; 0x102
    3968:	00000756 	andeq	r0, r0, r6, asr r7
    396c:	1d044b01 	vstrne	d4, [r4, #-4]
    3970:	02000001 	andeq	r0, r0, #1
    3974:	16007191 			; <UNDEFINED> instruction: 0x16007191
    3978:	00001946 	andeq	r1, r0, r6, asr #18
    397c:	3f048601 	svccc	0x00048601
    3980:	58000001 	stmdapl	r0, {r0}
    3984:	6008002b 	andvs	r0, r8, fp, lsr #32
    3988:	01000000 	mrseq	r0, (UNDEF: 0)
    398c:	0009e29c 	muleq	r9, ip, r2
    3990:	189a1400 	ldmne	sl, {sl, ip}
    3994:	86010000 	strhi	r0, [r1], -r0
    3998:	00032804 	andeq	r2, r3, r4, lsl #16
    399c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    39a0:	0019c614 	andseq	ip, r9, r4, lsl r6
    39a4:	04860100 	streq	r0, [r6], #256	; 0x100
    39a8:	000000b8 	strheq	r0, [r0], -r8
    39ac:	15609102 	strbne	r9, [r0, #-258]!	; 0x102
    39b0:	00001a97 	muleq	r0, r7, sl
    39b4:	b8048801 	stmdalt	r4, {r0, fp, pc}
    39b8:	02000000 	andeq	r0, r0, #0
    39bc:	46157091 			; <UNDEFINED> instruction: 0x46157091
    39c0:	0100001a 	tsteq	r0, sl, lsl r0
    39c4:	00b80489 	adcseq	r0, r8, r9, lsl #9
    39c8:	91020000 	mrsls	r0, (UNDEF: 2)
    39cc:	1a4c156c 	bne	1308f84 <_Min_Stack_Size+0x1308b84>
    39d0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    39d4:	0000b804 	andeq	fp, r0, r4, lsl #16
    39d8:	68910200 	ldmvs	r1, {r9}
    39dc:	001a5815 	andseq	r5, sl, r5, lsl r8
    39e0:	048a0100 	streq	r0, [sl], #256	; 0x100
    39e4:	0000013f 	andeq	r0, r0, pc, lsr r1
    39e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    39ec:	00190e16 	andseq	r0, r9, r6, lsl lr
    39f0:	04b60100 	ldrteq	r0, [r6], #256	; 0x100
    39f4:	000000b8 	strheq	r0, [r0], -r8
    39f8:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
    39fc:	00000044 	andeq	r0, r0, r4, asr #32
    3a00:	0a399c01 	beq	e6aa0c <_Min_Stack_Size+0xe6a60c>
    3a04:	9a140000 	bls	503a0c <_Min_Stack_Size+0x50360c>
    3a08:	01000018 	tsteq	r0, r8, lsl r0
    3a0c:	032804b6 	teqeq	r8, #-1241513984	; 0xb6000000
    3a10:	91020000 	mrsls	r0, (UNDEF: 2)
    3a14:	1a971564 	bne	fe5c8fac <_estack+0xde598fac>
    3a18:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    3a1c:	0000b804 	andeq	fp, r0, r4, lsl #16
    3a20:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3a24:	001a4615 	andseq	r4, sl, r5, lsl r6
    3a28:	04b90100 	ldrteq	r0, [r9], #256	; 0x100
    3a2c:	000000b8 	strheq	r0, [r0], -r8
    3a30:	15709102 	ldrbne	r9, [r0, #-258]!	; 0x102
    3a34:	00001a4c 	andeq	r1, r0, ip, asr #20
    3a38:	b804b901 	stmdalt	r4, {r0, r8, fp, ip, sp, pc}
    3a3c:	02000000 	andeq	r0, r0, #0
    3a40:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    3a44:	00001a85 	andeq	r1, r0, r5, lsl #21
    3a48:	ef04ed01 	svc	0x0004ed01
    3a4c:	fc000000 	stc2	0, cr0, [r0], {-0}
    3a50:	6608002b 	strvs	r0, [r8], -fp, lsr #32
    3a54:	01000000 	mrseq	r0, (UNDEF: 0)
    3a58:	000a9f9c 	muleq	sl, ip, pc	; <UNPREDICTABLE>
    3a5c:	189a1400 	ldmne	sl, {sl, ip}
    3a60:	ed010000 	stc	0, cr0, [r1, #-0]
    3a64:	00032804 	andeq	r2, r3, r4, lsl #16
    3a68:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3a6c:	00191f14 	andseq	r1, r9, r4, lsl pc
    3a70:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    3a74:	000000b8 	strheq	r0, [r0], -r8
    3a78:	15609102 	strbne	r9, [r0, #-258]!	; 0x102
    3a7c:	00000974 	andeq	r0, r0, r4, ror r9
    3a80:	ef04ef01 	svc	0x0004ef01
    3a84:	02000000 	andeq	r0, r0, #0
    3a88:	74157791 	ldrvc	r7, [r5], #-1937	; 0x791
    3a8c:	01000018 	tsteq	r0, r8, lsl r0
    3a90:	00ca04f0 	strdeq	r0, [sl], #64	; 0x40
    3a94:	91020000 	mrsls	r0, (UNDEF: 2)
    3a98:	1aca1570 	bne	ff289060 <_estack+0xdf259060>
    3a9c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    3aa0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    3aa4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3aa8:	19e01300 	stmibne	r0!, {r8, r9, ip}^
    3aac:	3a010000 	bcc	43ab4 <_Min_Stack_Size+0x436b4>
    3ab0:	002c6405 	eoreq	r6, ip, r5, lsl #8
    3ab4:	00002c08 	andeq	r2, r0, r8, lsl #24
    3ab8:	e39c0100 	orrs	r0, ip, #0, 2
    3abc:	1400000a 	strne	r0, [r0], #-10
    3ac0:	0000189a 	muleq	r0, sl, r8
    3ac4:	28053a01 	stmdacs	r5, {r0, r9, fp, ip, sp}
    3ac8:	02000003 	andeq	r0, r0, #3
    3acc:	1f146c91 	svcne	0x00146c91
    3ad0:	01000019 	tsteq	r0, r9, lsl r0
    3ad4:	00b8053a 	adcseq	r0, r8, sl, lsr r5
    3ad8:	91020000 	mrsls	r0, (UNDEF: 2)
    3adc:	184a1568 	stmdane	sl, {r3, r5, r6, r8, sl, ip}^
    3ae0:	3c010000 	stccc	0, cr0, [r1], {-0}
    3ae4:	0000b805 	andeq	fp, r0, r5, lsl #16
    3ae8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3aec:	1afb1600 	bne	ffec92f4 <_estack+0xdfe992f4>
    3af0:	5c010000 	stcpl	0, cr0, [r1], {-0}
    3af4:	0000fb05 	andeq	pc, r0, r5, lsl #22
    3af8:	002c9000 	eoreq	r9, ip, r0
    3afc:	00005a08 	andeq	r5, r0, r8, lsl #20
    3b00:	3a9c0100 	bcc	fe703f08 <_estack+0xde6d3f08>
    3b04:	1400000b 	strne	r0, [r0], #-11
    3b08:	0000189a 	muleq	r0, sl, r8
    3b0c:	28055c01 	stmdacs	r5, {r0, sl, fp, ip, lr}
    3b10:	02000003 	andeq	r0, r0, #3
    3b14:	70146c91 	mulsvc	r4, r1, ip
    3b18:	01000019 	tsteq	r0, r9, lsl r0
    3b1c:	00b8055c 	adcseq	r0, r8, ip, asr r5
    3b20:	91020000 	mrsls	r0, (UNDEF: 2)
    3b24:	09741568 	ldmdbeq	r4!, {r3, r5, r6, r8, sl, ip}^
    3b28:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3b2c:	0000fb05 	andeq	pc, r0, r5, lsl #22
    3b30:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3b34:	001a5215 	andseq	r5, sl, r5, lsl r2
    3b38:	055f0100 	ldrbeq	r0, [pc, #-256]	; 3a40 <_Min_Stack_Size+0x3640>
    3b3c:	000000b8 	strheq	r0, [r0], -r8
    3b40:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3b44:	0016e813 	andseq	lr, r6, r3, lsl r8
    3b48:	05980100 	ldreq	r0, [r8, #256]	; 0x100
    3b4c:	08002cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, sp}
    3b50:	0000002c 	andeq	r0, r0, ip, lsr #32
    3b54:	0b7e9c01 	bleq	1faab60 <_Min_Stack_Size+0x1faa760>
    3b58:	9a140000 	bls	503b60 <_Min_Stack_Size+0x503760>
    3b5c:	01000018 	tsteq	r0, r8, lsl r0
    3b60:	03280598 	teqeq	r8, #152, 10	; 0x26000000
    3b64:	91020000 	mrsls	r0, (UNDEF: 2)
    3b68:	1970146c 	ldmdbne	r0!, {r2, r3, r5, r6, sl, ip}^
    3b6c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    3b70:	0000b805 	andeq	fp, r0, r5, lsl #16
    3b74:	68910200 	ldmvs	r1, {r9}
    3b78:	00184a15 	andseq	r4, r8, r5, lsl sl
    3b7c:	059a0100 	ldreq	r0, [sl, #256]	; 0x100
    3b80:	000000b8 	strheq	r0, [r0], -r8
    3b84:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3b88:	00041418 	andeq	r1, r4, r8, lsl r4
    3b8c:	06a70700 	strteq	r0, [r7], r0, lsl #14
    3b90:	000000d4 	ldrdeq	r0, [r0], -r4
    3b94:	00073900 	andeq	r3, r7, r0, lsl #18
    3b98:	48000400 	stmdami	r0, {sl}
    3b9c:	0400000b 	streq	r0, [r0], #-11
    3ba0:	00012a01 	andeq	r2, r1, r1, lsl #20
    3ba4:	1daf0100 	stfnes	f0, [pc]	; 3bac <_Min_Stack_Size+0x37ac>
    3ba8:	03690000 	cmneq	r9, #0
    3bac:	05100000 	ldreq	r0, [r0, #-0]
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	1a7f0000 	bne	1fc3bbc <_Min_Stack_Size+0x1fc37bc>
    3bb8:	01020000 	mrseq	r0, (UNDEF: 2)
    3bbc:	0002a606 	andeq	sl, r2, r6, lsl #12
    3bc0:	08010200 	stmdaeq	r1, {r9}
    3bc4:	000002a4 	andeq	r0, r0, r4, lsr #5
    3bc8:	3a050202 	bcc	1443d8 <_Min_Stack_Size+0x143fd8>
    3bcc:	03000000 	movweq	r0, #0
    3bd0:	0000007c 	andeq	r0, r0, ip, ror r0
    3bd4:	00452b02 	subeq	r2, r5, r2, lsl #22
    3bd8:	02020000 	andeq	r0, r2, #0
    3bdc:	00034b07 	andeq	r4, r3, r7, lsl #22
    3be0:	04450300 	strbeq	r0, [r5], #-768	; 0x300
    3be4:	3f020000 	svccc	0x00020000
    3be8:	00000057 	andeq	r0, r0, r7, asr r0
    3bec:	00050402 	andeq	r0, r5, r2, lsl #8
    3bf0:	03000001 	movweq	r0, #1
    3bf4:	00000060 	andeq	r0, r0, r0, rrx
    3bf8:	00694102 	rsbeq	r4, r9, r2, lsl #2
    3bfc:	04020000 	streq	r0, [r2], #-0
    3c00:	0002f507 	andeq	pc, r2, r7, lsl #10
    3c04:	05080200 	streq	r0, [r8, #-512]	; 0x200
    3c08:	000000fb 	strdeq	r0, [r0], -fp
    3c0c:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
    3c10:	04000002 	streq	r0, [r0], #-2
    3c14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3c18:	04020074 	streq	r0, [r2], #-116	; 0x74
    3c1c:	0002fa07 	andeq	pc, r2, r7, lsl #20
    3c20:	007e0300 	rsbseq	r0, lr, r0, lsl #6
    3c24:	36030000 	strcc	r0, [r3], -r0
    3c28:	0000003a 	andeq	r0, r0, sl, lsr r0
    3c2c:	00044703 	andeq	r4, r4, r3, lsl #14
    3c30:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
    3c34:	03000000 	movweq	r0, #0
    3c38:	00000062 	andeq	r0, r0, r2, rrx
    3c3c:	005e4203 	subseq	r4, lr, r3, lsl #4
    3c40:	04020000 	streq	r0, [r2], #-0
    3c44:	00004407 	andeq	r4, r0, r7, lsl #8
    3c48:	00a20500 	adceq	r0, r2, r0, lsl #10
    3c4c:	97050000 	strls	r0, [r5, -r0]
    3c50:	06000000 	streq	r0, [r0], -r0
    3c54:	01f70401 	mvnseq	r0, r1, lsl #8
    3c58:	000000d4 	ldrdeq	r0, [r0], -r4
    3c5c:	00091807 	andeq	r1, r9, r7, lsl #16
    3c60:	53080000 	movwpl	r0, #32768	; 0x8000
    3c64:	01005445 	tsteq	r0, r5, asr #8
    3c68:	1d990900 	ldcne	9, cr0, [r9]
    3c6c:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    3c70:	0000be01 	andeq	fp, r0, r1, lsl #28
    3c74:	4d4e0900 	stclmi	9, cr0, [lr, #-0]
    3c78:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    3c7c:	0000be01 	andeq	fp, r0, r1, lsl #28
    3c80:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3c84:	010201f9 	strdeq	r0, [r2, -r9]
    3c88:	9d070000 	stcls	0, cr0, [r7, #-0]
    3c8c:	00000003 	andeq	r0, r0, r3
    3c90:	0000b207 	andeq	fp, r0, r7, lsl #4
    3c94:	09000100 	stmdbeq	r0, {r8}
    3c98:	0000083e 	andeq	r0, r0, lr, lsr r8
    3c9c:	ec01f904 	stc	9, cr15, [r1], {4}
    3ca0:	0a000000 	beq	3ca8 <_Min_Stack_Size+0x38a8>
    3ca4:	02b10418 	adcseq	r0, r1, #24, 8	; 0x18000000
    3ca8:	00000165 	andeq	r0, r0, r5, ror #2
    3cac:	0052430b 	subseq	r4, r2, fp, lsl #6
    3cb0:	b402b304 	strlt	fp, [r2], #-772	; 0x304
    3cb4:	00000000 	andeq	r0, r0, r0
    3cb8:	001e2d0c 	andseq	r2, lr, ip, lsl #26
    3cbc:	02b40400 	adcseq	r0, r4, #0, 8
    3cc0:	000000b4 	strheq	r0, [r0], -r4
    3cc4:	41500b04 	cmpmi	r0, r4, lsl #22
    3cc8:	b5040052 	strlt	r0, [r4, #-82]	; 0x52
    3ccc:	0000b402 	andeq	fp, r0, r2, lsl #8
    3cd0:	aa0c0800 	bge	305cd8 <_Min_Stack_Size+0x3058d8>
    3cd4:	0400001d 	streq	r0, [r0], #-29
    3cd8:	00b402b6 	ldrhteq	r0, [r4], r6
    3cdc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3ce0:	00001d38 	andeq	r1, r0, r8, lsr sp
    3ce4:	b402b704 	strlt	fp, [r2], #-1796	; 0x704
    3ce8:	10000000 	andne	r0, r0, r0
    3cec:	5243460b 	subpl	r4, r3, #11534336	; 0xb00000
    3cf0:	02b80400 	adcseq	r0, r8, #0, 8
    3cf4:	000000b4 	strheq	r0, [r0], -r4
    3cf8:	40090014 	andmi	r0, r9, r4, lsl r0
    3cfc:	0400001b 	streq	r0, [r0], #-27
    3d00:	010e02b9 			; <UNDEFINED> instruction: 0x010e02b9
    3d04:	100a0000 	andne	r0, sl, r0
    3d08:	af02bb04 	svcge	0x0002bb04
    3d0c:	0c000001 	stceq	0, cr0, [r0], {1}
    3d10:	00001c8b 	andeq	r1, r0, fp, lsl #25
    3d14:	b402bd04 	strlt	fp, [r2], #-3332	; 0xd04
    3d18:	00000000 	andeq	r0, r0, r0
    3d1c:	001d190c 	andseq	r1, sp, ip, lsl #18
    3d20:	02be0400 	adcseq	r0, lr, #0, 8
    3d24:	000000b4 	strheq	r0, [r0], -r4
    3d28:	1da40c04 	stcne	12, cr0, [r4, #16]!
    3d2c:	bf040000 	svclt	0x00040000
    3d30:	0000b402 	andeq	fp, r0, r2, lsl #8
    3d34:	220c0800 	andcs	r0, ip, #0, 16
    3d38:	0400001c 	streq	r0, [r0], #-28
    3d3c:	00b402c0 	adcseq	r0, r4, r0, asr #5
    3d40:	000c0000 	andeq	r0, ip, r0
    3d44:	001bab09 	andseq	sl, fp, r9, lsl #22
    3d48:	02c10400 	sbceq	r0, r1, #0, 8
    3d4c:	00000171 	andeq	r0, r0, r1, ror r1
    3d50:	36053c0d 	strcc	r3, [r5], -sp, lsl #24
    3d54:	00000278 	andeq	r0, r0, r8, ror r2
    3d58:	001e320e 	andseq	r3, lr, lr, lsl #4
    3d5c:	a2380500 	eorsge	r0, r8, #0, 10
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	001bfd0e 	andseq	pc, fp, lr, lsl #26
    3d68:	a23b0500 	eorsge	r0, fp, #0, 10
    3d6c:	04000000 	streq	r0, [r0], #-0
    3d70:	001e4d0e 	andseq	r4, lr, lr, lsl #26
    3d74:	a23d0500 	eorsge	r0, sp, #0, 10
    3d78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3d7c:	001bf50e 	andseq	pc, fp, lr, lsl #10
    3d80:	a2410500 	subge	r0, r1, #0, 10
    3d84:	0c000000 	stceq	0, cr0, [r0], {-0}
    3d88:	001e610e 	andseq	r6, lr, lr, lsl #2
    3d8c:	a2450500 	subge	r0, r5, #0, 10
    3d90:	10000000 	andne	r0, r0, r0
    3d94:	001c580e 	andseq	r5, ip, lr, lsl #16
    3d98:	a2490500 	subge	r0, r9, #0, 10
    3d9c:	14000000 	strne	r0, [r0], #-0
    3da0:	001c140e 	andseq	r1, ip, lr, lsl #8
    3da4:	a24c0500 	subge	r0, ip, #0, 10
    3da8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3dac:	001cb50e 	andseq	fp, ip, lr, lsl #10
    3db0:	a24f0500 	subge	r0, pc, #0, 10
    3db4:	1c000000 	stcne	0, cr0, [r0], {-0}
    3db8:	001ea40e 	andseq	sl, lr, lr, lsl #8
    3dbc:	a2520500 	subsge	r0, r2, #0, 10
    3dc0:	20000000 	andcs	r0, r0, r0
    3dc4:	001e700e 	andseq	r7, lr, lr
    3dc8:	a2550500 	subsge	r0, r5, #0, 10
    3dcc:	24000000 	strcs	r0, [r0], #-0
    3dd0:	001b590e 	andseq	r5, fp, lr, lsl #18
    3dd4:	a25a0500 	subsge	r0, sl, #0, 10
    3dd8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3ddc:	001e0f0e 	andseq	r0, lr, lr, lsl #30
    3de0:	a25d0500 	subsge	r0, sp, #0, 10
    3de4:	2c000000 	stccs	0, cr0, [r0], {-0}
    3de8:	001cf70e 	andseq	pc, ip, lr, lsl #14
    3dec:	a2620500 	rsbge	r0, r2, #0, 10
    3df0:	30000000 	andcc	r0, r0, r0
    3df4:	001b660e 	andseq	r6, fp, lr, lsl #12
    3df8:	a2650500 	rsbge	r0, r5, #0, 10
    3dfc:	34000000 	strcc	r0, [r0], #-0
    3e00:	001b850e 	andseq	r8, fp, lr, lsl #10
    3e04:	a26a0500 	rsbge	r0, sl, #0, 10
    3e08:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3e0c:	1ccc0300 	stclne	3, cr0, [ip], {0}
    3e10:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    3e14:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    3e18:	001d870f 	andseq	r8, sp, pc, lsl #14
    3e1c:	18c40100 	stmiane	r4, {r8}^
    3e20:	a408002d 	strge	r0, [r8], #-45	; 0x2d
    3e24:	01000001 	tsteq	r0, r1
    3e28:	0002a79c 	muleq	r2, ip, r7
    3e2c:	1be81000 	blne	ffa07e34 <_estack+0xdf9d7e34>
    3e30:	c4010000 	strgt	r0, [r1], #-0
    3e34:	000002a7 	andeq	r0, r0, r7, lsr #5
    3e38:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3e3c:	01650411 	cmneq	r5, r1, lsl r4
    3e40:	82120000 	andshi	r0, r2, #0
    3e44:	0100001c 	tsteq	r0, ip, lsl r0
    3e48:	2ebc013f 	mrccs	1, 5, r0, cr12, cr15, {1}
    3e4c:	00ac0800 	adceq	r0, ip, r0, lsl #16
    3e50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e54:	000002f1 	strdeq	r0, [r0], -r1
    3e58:	001be813 	andseq	lr, fp, r3, lsl r8
    3e5c:	013f0100 	teqeq	pc, r0, lsl #2
    3e60:	000002a7 	andeq	r0, r0, r7, lsr #5
    3e64:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    3e68:	00001d1e 	andeq	r1, r0, lr, lsl sp
    3e6c:	f1013f01 			; <UNDEFINED> instruction: 0xf1013f01
    3e70:	02000002 	andeq	r0, r0, #2
    3e74:	89146891 	ldmdbhi	r4, {r0, r4, r7, fp, sp, lr}
    3e78:	0100000b 	tsteq	r0, fp
    3e7c:	00a20141 	adceq	r0, r2, r1, asr #2
    3e80:	91020000 	mrsls	r0, (UNDEF: 2)
    3e84:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    3e88:	00000278 	andeq	r0, r0, r8, ror r2
    3e8c:	001b7612 	andseq	r7, fp, r2, lsl r6
    3e90:	01930100 	orrseq	r0, r3, r0, lsl #2
    3e94:	08002f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp}
    3e98:	0000006c 	andeq	r0, r0, ip, rrx
    3e9c:	031d9c01 	tsteq	sp, #256	; 0x100
    3ea0:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    3ea4:	0100001d 	tsteq	r0, sp, lsl r0
    3ea8:	02f10193 	rscseq	r0, r1, #-1073741788	; 0xc0000024
    3eac:	91020000 	mrsls	r0, (UNDEF: 2)
    3eb0:	38120074 	ldmdacc	r2, {r2, r4, r5, r6}
    3eb4:	0100001b 	tsteq	r0, fp, lsl r0
    3eb8:	2fd401de 	svccs	0x00d401de
    3ebc:	00360800 	eorseq	r0, r6, r0, lsl #16
    3ec0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ec4:	00000352 	andeq	r0, r0, r2, asr r3
    3ec8:	001be813 	andseq	lr, fp, r3, lsl r8
    3ecc:	01de0100 	bicseq	r0, lr, r0, lsl #2
    3ed0:	000002a7 	andeq	r0, r0, r7, lsr #5
    3ed4:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    3ed8:	00000756 	andeq	r0, r0, r6, asr r7
    3edc:	0201de01 	andeq	sp, r1, #1, 28
    3ee0:	02000001 	andeq	r0, r0, #1
    3ee4:	12007391 	andne	r7, r0, #1140850690	; 0x44000002
    3ee8:	00001d69 	andeq	r1, r0, r9, ror #26
    3eec:	0c020201 	sfmeq	f0, 4, [r2], {1}
    3ef0:	34080030 	strcc	r0, [r8], #-48	; 0x30
    3ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ef8:	0003879c 	muleq	r3, ip, r7
    3efc:	1be81300 	blne	ffa08b04 <_estack+0xdf9d8b04>
    3f00:	02010000 	andeq	r0, r1, #0
    3f04:	0002a702 	andeq	sl, r2, r2, lsl #14
    3f08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3f0c:	001d2d13 	andseq	r2, sp, r3, lsl sp
    3f10:	02020100 	andeq	r0, r2, #0, 2
    3f14:	000000a2 	andeq	r0, r0, r2, lsr #1
    3f18:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3f1c:	001c2812 	andseq	r2, ip, r2, lsl r8
    3f20:	02260100 	eoreq	r0, r6, #0, 2
    3f24:	08003040 	stmdaeq	r0, {r6, ip, sp}
    3f28:	00000034 	andeq	r0, r0, r4, lsr r0
    3f2c:	03bc9c01 			; <UNDEFINED> instruction: 0x03bc9c01
    3f30:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    3f34:	0100001b 	tsteq	r0, fp, lsl r0
    3f38:	02a70226 	adceq	r0, r7, #1610612738	; 0x60000002
    3f3c:	91020000 	mrsls	r0, (UNDEF: 2)
    3f40:	1d3d1374 	ldcne	3, cr1, [sp, #-464]!	; 0xfffffe30
    3f44:	26010000 	strcs	r0, [r1], -r0
    3f48:	0000a202 	andeq	sl, r0, r2, lsl #4
    3f4c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3f50:	1c9e1200 	lfmne	f1, 4, [lr], {0}
    3f54:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3f58:	00307402 	eorseq	r7, r0, r2, lsl #8
    3f5c:	00001c08 	andeq	r1, r0, r8, lsl #24
    3f60:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    3f64:	13000003 	movwne	r0, #3
    3f68:	00001be8 	andeq	r1, r0, r8, ror #23
    3f6c:	a7027801 	strge	r7, [r2, -r1, lsl #16]
    3f70:	02000002 	andeq	r0, r0, #2
    3f74:	88137491 	ldmdahi	r3, {r0, r4, r7, sl, ip, sp, lr}
    3f78:	0100001e 	tsteq	r0, lr, lsl r0
    3f7c:	008c0278 	addeq	r0, ip, r8, ror r2
    3f80:	91020000 	mrsls	r0, (UNDEF: 2)
    3f84:	79150072 	ldmdbvc	r5, {r1, r4, r5, r6}
    3f88:	0100001e 	tsteq	r0, lr, lsl r0
    3f8c:	008c0287 	addeq	r0, ip, r7, lsl #5
    3f90:	30900000 	addscc	r0, r0, r0
    3f94:	001a0800 	andseq	r0, sl, r0, lsl #16
    3f98:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f9c:	0000041b 	andeq	r0, r0, fp, lsl r4
    3fa0:	001be813 	andseq	lr, fp, r3, lsl r8
    3fa4:	02870100 	addeq	r0, r7, #0, 2
    3fa8:	000002a7 	andeq	r0, r0, r7, lsr #5
    3fac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3fb0:	001cdc12 	andseq	sp, ip, r2, lsl ip
    3fb4:	02da0100 	sbcseq	r0, sl, #0, 2
    3fb8:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
    3fbc:	0000003c 	andeq	r0, r0, ip, lsr r0
    3fc0:	045f9c01 	ldrbeq	r9, [pc], #-3073	; 3fc8 <_Min_Stack_Size+0x3bc8>
    3fc4:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    3fc8:	0100001b 	tsteq	r0, fp, lsl r0
    3fcc:	02a702da 	adceq	r0, r7, #-1610612723	; 0xa000000d
    3fd0:	91020000 	mrsls	r0, (UNDEF: 2)
    3fd4:	1dff1374 	ldclne	3, cr1, [pc, #464]!	; 41ac <_Min_Stack_Size+0x3dac>
    3fd8:	da010000 	ble	43fe0 <_Min_Stack_Size+0x43be0>
    3fdc:	0000a202 	andeq	sl, r0, r2, lsl #4
    3fe0:	70910200 	addsvc	r0, r1, r0, lsl #4
    3fe4:	001b2613 	andseq	r2, fp, r3, lsl r6
    3fe8:	02db0100 	sbcseq	r0, fp, #0, 2
    3fec:	000000a2 	andeq	r0, r0, r2, lsr #1
    3ff0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3ff4:	001c6a12 	andseq	r6, ip, r2, lsl sl
    3ff8:	02f90100 	rscseq	r0, r9, #0, 2
    3ffc:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
    4000:	00000036 	andeq	r0, r0, r6, lsr r0
    4004:	04949c01 	ldreq	r9, [r4], #3073	; 0xc01
    4008:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    400c:	0100001b 	tsteq	r0, fp, lsl r0
    4010:	02a702f9 	adceq	r0, r7, #-1879048177	; 0x9000000f
    4014:	91020000 	mrsls	r0, (UNDEF: 2)
    4018:	07561374 			; <UNDEFINED> instruction: 0x07561374
    401c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    4020:	00010202 	andeq	r0, r1, r2, lsl #4
    4024:	73910200 	orrsvc	r0, r1, #0, 4
    4028:	1c411200 	sfmne	f1, 2, [r1], {-0}
    402c:	22010000 	andcs	r0, r1, #0
    4030:	00312003 	eorseq	r2, r1, r3
    4034:	00002a08 	andeq	r2, r0, r8, lsl #20
    4038:	d89c0100 	ldmle	ip, {r8}
    403c:	13000004 	movwne	r0, #4
    4040:	00001be8 	andeq	r1, r0, r8, ror #23
    4044:	a7032201 	strge	r2, [r3, -r1, lsl #4]
    4048:	02000002 	andeq	r0, r0, #2
    404c:	3e137491 	cfcmpscc	r7, mvf3, mvf1
    4050:	0100001e 	tsteq	r0, lr, lsl r0
    4054:	00a20322 	adceq	r0, r2, r2, lsr #6
    4058:	91020000 	mrsls	r0, (UNDEF: 2)
    405c:	1bd21370 	blne	ff488e24 <_estack+0xdf458e24>
    4060:	23010000 	movwcs	r0, #4096	; 0x1000
    4064:	0000a203 	andeq	sl, r0, r3, lsl #4
    4068:	6c910200 	lfmvs	f0, 4, [r1], {0}
    406c:	1bb71500 	blne	fedc9474 <_estack+0xded99474>
    4070:	3c010000 	stccc	0, cr0, [r1], {-0}
    4074:	0000a203 	andeq	sl, r0, r3, lsl #4
    4078:	00314c00 	eorseq	r4, r1, r0, lsl #24
    407c:	00003008 	andeq	r3, r0, r8
    4080:	119c0100 	orrsne	r0, ip, r0, lsl #2
    4084:	13000005 	movwne	r0, #5
    4088:	00001be8 	andeq	r1, r0, r8, ror #23
    408c:	a7033c01 	strge	r3, [r3, -r1, lsl #24]
    4090:	02000002 	andeq	r0, r0, #2
    4094:	74166c91 	ldrvc	r6, [r6], #-3217	; 0xc91
    4098:	0100706d 	tsteq	r0, sp, rrx
    409c:	00a2033e 	adceq	r0, r2, lr, lsr r3
    40a0:	91020000 	mrsls	r0, (UNDEF: 2)
    40a4:	1c150074 	ldcne	0, cr0, [r5], {116}	; 0x74
    40a8:	0100001e 	tsteq	r0, lr, lsl r0
    40ac:	010203af 	smlatbeq	r2, pc, r3, r0	; <UNPREDICTABLE>
    40b0:	317c0000 	cmncc	ip, r0
    40b4:	00300800 	eorseq	r0, r0, r0, lsl #16
    40b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    40bc:	0000054a 	andeq	r0, r0, sl, asr #10
    40c0:	001be813 	andseq	lr, fp, r3, lsl r8
    40c4:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    40c8:	000002a7 	andeq	r0, r0, r7, lsr #5
    40cc:	146c9102 	strbtne	r9, [ip], #-258	; 0x102
    40d0:	00001b53 	andeq	r1, r0, r3, asr fp
    40d4:	0203b101 	andeq	fp, r3, #1073741824	; 0x40000000
    40d8:	02000001 	andeq	r0, r0, #1
    40dc:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    40e0:	00001b99 	muleq	r0, r9, fp
    40e4:	a203d101 	andge	sp, r3, #1073741824	; 0x40000000
    40e8:	ac000000 	stcge	0, cr0, [r0], {-0}
    40ec:	24080031 	strcs	r0, [r8], #-49	; 0x31
    40f0:	01000000 	mrseq	r0, (UNDEF: 0)
    40f4:	0005839c 	muleq	r5, ip, r3
    40f8:	1be81300 	blne	ffa08d00 <_estack+0xdf9d8d00>
    40fc:	d1010000 	mrsle	r0, (UNDEF: 1)
    4100:	0002a703 	andeq	sl, r2, r3, lsl #14
    4104:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4108:	000b8914 	andeq	r8, fp, r4, lsl r9
    410c:	03d30100 	bicseq	r0, r3, #0, 2
    4110:	000000a2 	andeq	r0, r0, r2, lsr #1
    4114:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4118:	001d9215 	andseq	r9, sp, r5, lsl r2
    411c:	03ec0100 	mvneq	r0, #0, 2
    4120:	000000d4 	ldrdeq	r0, [r0], -r4
    4124:	080031d0 	stmdaeq	r0, {r4, r6, r7, r8, ip, sp}
    4128:	00000078 	andeq	r0, r0, r8, ror r0
    412c:	05e99c01 	strbeq	r9, [r9, #3073]!	; 0xc01
    4130:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    4134:	0100001b 	tsteq	r0, fp, lsl r0
    4138:	02a703ec 	adceq	r0, r7, #236, 6	; 0xb0000003
    413c:	91020000 	mrsls	r0, (UNDEF: 2)
    4140:	1d4a1364 	stclne	3, cr1, [sl, #-400]	; 0xfffffe70
    4144:	ec010000 	stc	0, cr0, [r1], {-0}
    4148:	0000a203 	andeq	sl, r0, r3, lsl #4
    414c:	60910200 	addsvs	r0, r1, r0, lsl #4
    4150:	00097414 	andeq	r7, r9, r4, lsl r4
    4154:	03ee0100 	mvneq	r0, #0, 2
    4158:	000000d4 	ldrdeq	r0, [r0], -r4
    415c:	14779102 	ldrbtne	r9, [r7], #-258	; 0x102
    4160:	00001be3 	andeq	r1, r0, r3, ror #23
    4164:	e903ef01 	stmdb	r3, {r0, r8, r9, sl, fp, sp, lr, pc}
    4168:	02000005 	andeq	r0, r0, #5
    416c:	89147091 	ldmdbhi	r4, {r0, r4, r7, ip, sp, lr}
    4170:	0100000b 	tsteq	r0, fp
    4174:	00a203f0 	strdeq	r0, [r2], r0	; <UNPREDICTABLE>
    4178:	91020000 	mrsls	r0, (UNDEF: 2)
    417c:	0411006c 	ldreq	r0, [r1], #-108	; 0x6c
    4180:	000001af 	andeq	r0, r0, pc, lsr #3
    4184:	001c9012 	andseq	r9, ip, r2, lsl r0
    4188:	042f0100 	strteq	r0, [pc], #-256	; 4190 <_Min_Stack_Size+0x3d90>
    418c:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
    4190:	0000005c 	andeq	r0, r0, ip, asr r0
    4194:	06339c01 	ldrteq	r9, [r3], -r1, lsl #24
    4198:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    419c:	0100001b 	tsteq	r0, fp, lsl r0
    41a0:	02a7042f 	adceq	r0, r7, #788529152	; 0x2f000000
    41a4:	91020000 	mrsls	r0, (UNDEF: 2)
    41a8:	1d4a136c 	stclne	3, cr1, [sl, #-432]	; 0xfffffe50
    41ac:	2f010000 	svccs	0x00010000
    41b0:	0000a204 	andeq	sl, r0, r4, lsl #4
    41b4:	68910200 	ldmvs	r1, {r9}
    41b8:	001be314 	andseq	lr, fp, r4, lsl r3
    41bc:	04310100 	ldrteq	r0, [r1], #-256	; 0x100
    41c0:	000005e9 	andeq	r0, r0, r9, ror #11
    41c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    41c8:	001e9012 	andseq	r9, lr, r2, lsl r0
    41cc:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    41d0:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    41d4:	00000072 	andeq	r0, r0, r2, ror r0
    41d8:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    41dc:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    41e0:	0100001b 	tsteq	r0, fp, lsl r0
    41e4:	02a7045e 	adceq	r0, r7, #1577058304	; 0x5e000000
    41e8:	91020000 	mrsls	r0, (UNDEF: 2)
    41ec:	1e9d1374 	mrcne	3, 4, r1, cr13, cr4, {3}
    41f0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    41f4:	0000a204 	andeq	sl, r0, r4, lsl #4
    41f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    41fc:	00075613 	andeq	r5, r7, r3, lsl r6
    4200:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    4204:	00000102 	andeq	r0, r0, r2, lsl #2
    4208:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    420c:	001d0915 	andseq	r0, sp, r5, lsl r9
    4210:	04920100 	ldreq	r0, [r2], #256	; 0x100
    4214:	000000e0 	andeq	r0, r0, r0, ror #1
    4218:	08003318 	stmdaeq	r0, {r3, r4, r8, r9, ip, sp}
    421c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4220:	06ec9c01 	strbteq	r9, [ip], r1, lsl #24
    4224:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    4228:	0100001b 	tsteq	r0, fp, lsl r0
    422c:	02a70492 	adceq	r0, r7, #-1845493760	; 0x92000000
    4230:	91020000 	mrsls	r0, (UNDEF: 2)
    4234:	1e9d1364 	cdpne	3, 9, cr1, cr13, cr4, {3}
    4238:	92010000 	andls	r0, r1, #0
    423c:	0000a204 	andeq	sl, r0, r4, lsl #4
    4240:	60910200 	addsvs	r0, r1, r0, lsl #4
    4244:	00097414 	andeq	r7, r9, r4, lsl r4
    4248:	04940100 	ldreq	r0, [r4], #256	; 0x100
    424c:	000000e0 	andeq	r0, r0, r0, ror #1
    4250:	14779102 	ldrbtne	r9, [r7], #-258	; 0x102
    4254:	00001be3 	andeq	r1, r0, r3, ror #23
    4258:	e9049501 	stmdb	r4, {r0, r8, sl, ip, pc}
    425c:	02000005 	andeq	r0, r0, #5
    4260:	89147091 	ldmdbhi	r4, {r0, r4, r7, ip, sp, lr}
    4264:	0100000b 	tsteq	r0, fp
    4268:	00a20496 	umlaleq	r0, r2, r6, r4
    426c:	91020000 	mrsls	r0, (UNDEF: 2)
    4270:	1a52146c 	bne	1489428 <_Min_Stack_Size+0x1489028>
    4274:	96010000 	strls	r0, [r1], -r0
    4278:	0000a204 	andeq	sl, r0, r4, lsl #4
    427c:	68910200 	ldmvs	r1, {r9}
    4280:	1d531200 	lfmne	f1, 2, [r3, #-0]
    4284:	e4010000 	str	r0, [r1], #-0
    4288:	0033c804 	eorseq	ip, r3, r4, lsl #16
    428c:	00005c08 	andeq	r5, r0, r8, lsl #24
    4290:	309c0100 	addscc	r0, ip, r0, lsl #2
    4294:	13000007 	movwne	r0, #7
    4298:	00001be8 	andeq	r1, r0, r8, ror #23
    429c:	a704e401 	strge	lr, [r4, -r1, lsl #8]
    42a0:	02000002 	andeq	r0, r0, #2
    42a4:	9d136c91 	ldcls	12, cr6, [r3, #-580]	; 0xfffffdbc
    42a8:	0100001e 	tsteq	r0, lr, lsl r0
    42ac:	00a204e4 	adceq	r0, r2, r4, ror #9
    42b0:	91020000 	mrsls	r0, (UNDEF: 2)
    42b4:	1be31468 	blne	ff8c945c <_estack+0xdf89945c>
    42b8:	e6010000 	str	r0, [r1], -r0
    42bc:	0005e904 	andeq	lr, r5, r4, lsl #18
    42c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    42c4:	04141700 	ldreq	r1, [r4], #-1792	; 0x700
    42c8:	a7060000 	strge	r0, [r6, -r0]
    42cc:	0000b906 	andeq	fp, r0, r6, lsl #18
    42d0:	0b210000 	bleq	8442d8 <_Min_Stack_Size+0x843ed8>
    42d4:	00040000 	andeq	r0, r4, r0
    42d8:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    42dc:	012a0104 	teqeq	sl, r4, lsl #2
    42e0:	ba010000 	blt	442e8 <_Min_Stack_Size+0x43ee8>
    42e4:	69000021 	stmdbvs	r0, {r0, r5}
    42e8:	b0000003 	andlt	r0, r0, r3
    42ec:	00000005 	andeq	r0, r0, r5
    42f0:	12000000 	andne	r0, r0, #0
    42f4:	0200001e 	andeq	r0, r0, #30
    42f8:	02a60601 	adceq	r0, r6, #1048576	; 0x100000
    42fc:	33030000 	movwcc	r0, #12288	; 0x3000
    4300:	02000002 	andeq	r0, r0, #2
    4304:	0000371d 	andeq	r3, r0, sp, lsl r7
    4308:	08010200 	stmdaeq	r1, {r9}
    430c:	000002a4 	andeq	r0, r0, r4, lsr #5
    4310:	3a050202 	bcc	144b20 <_Min_Stack_Size+0x144720>
    4314:	03000000 	movweq	r0, #0
    4318:	0000007c 	andeq	r0, r0, ip, ror r0
    431c:	00502b02 	subseq	r2, r0, r2, lsl #22
    4320:	02020000 	andeq	r0, r2, #0
    4324:	00034b07 	andeq	r4, r3, r7, lsl #22
    4328:	04450300 	strbeq	r0, [r5], #-768	; 0x300
    432c:	3f020000 	svccc	0x00020000
    4330:	00000062 	andeq	r0, r0, r2, rrx
    4334:	00050402 	andeq	r0, r5, r2, lsl #8
    4338:	03000001 	movweq	r0, #1
    433c:	00000060 	andeq	r0, r0, r0, rrx
    4340:	00744102 	rsbseq	r4, r4, r2, lsl #2
    4344:	04020000 	streq	r0, [r2], #-0
    4348:	0002f507 	andeq	pc, r2, r7, lsl #10
    434c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    4350:	000000fb 	strdeq	r0, [r0], -fp
    4354:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
    4358:	04000002 	streq	r0, [r0], #-2
    435c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4360:	04020074 	streq	r0, [r2], #-116	; 0x74
    4364:	0002fa07 	andeq	pc, r2, r7, lsl #20
    4368:	02350300 	eorseq	r0, r5, #0, 6
    436c:	2a030000 	bcs	c4374 <_Min_Stack_Size+0xc3f74>
    4370:	0000002c 	andeq	r0, r0, ip, lsr #32
    4374:	00007e03 	andeq	r7, r0, r3, lsl #28
    4378:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    437c:	03000000 	movweq	r0, #0
    4380:	00000447 	andeq	r0, r0, r7, asr #8
    4384:	00574103 	subseq	r4, r7, r3, lsl #2
    4388:	62030000 	andvs	r0, r3, #0
    438c:	03000000 	movweq	r0, #0
    4390:	00006942 	andeq	r6, r0, r2, asr #18
    4394:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4398:	00000044 	andeq	r0, r0, r4, asr #32
    439c:	0000b805 	andeq	fp, r0, r5, lsl #16
    43a0:	00b80600 	adcseq	r0, r8, r0, lsl #12
    43a4:	00df0000 	sbcseq	r0, pc, r0
    43a8:	c3070000 	movwgt	r0, #28672	; 0x7000
    43ac:	01000000 	mrseq	r0, (UNDEF: 0)
    43b0:	00a20500 	adceq	r0, r2, r0, lsl #10
    43b4:	ad050000 	stcge	0, cr0, [r5, #-0]
    43b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    43bc:	01f70401 	mvnseq	r0, r1, lsl #8
    43c0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    43c4:	00091809 	andeq	r1, r9, r9, lsl #16
    43c8:	530a0000 	movwpl	r0, #40960	; 0xa000
    43cc:	01005445 	tsteq	r0, r5, asr #8
    43d0:	1d990b00 	vldrne	d0, [r9]
    43d4:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    43d8:	0000e901 	andeq	lr, r0, r1, lsl #18
    43dc:	4d4e0b00 	vstrmi	d16, [lr, #-0]
    43e0:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    43e4:	0000e901 	andeq	lr, r0, r1, lsl #18
    43e8:	04010800 	streq	r0, [r1], #-2048	; 0x800
    43ec:	012d01f9 	strdeq	r0, [sp, -r9]!
    43f0:	9d090000 	stcls	0, cr0, [r9, #-0]
    43f4:	00000003 	andeq	r0, r0, r3
    43f8:	0000b209 	andeq	fp, r0, r9, lsl #4
    43fc:	0b000100 	bleq	4804 <_Min_Stack_Size+0x4404>
    4400:	0000083e 	andeq	r0, r0, lr, lsr r8
    4404:	1701f904 	strne	pc, [r1, -r4, lsl #18]
    4408:	0c000001 	stceq	0, cr0, [r0], {1}
    440c:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    4410:	000002e2 	andeq	r0, r0, r2, ror #5
    4414:	0052430d 	subseq	r4, r2, sp, lsl #6
    4418:	ca045704 	bgt	11a030 <_Min_Stack_Size+0x119c30>
    441c:	00000000 	andeq	r0, r0, r0
    4420:	0004bc0e 	andeq	fp, r4, lr, lsl #24
    4424:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    4428:	000000ca 	andeq	r0, r0, sl, asr #1
    442c:	06c70e04 	strbeq	r0, [r7], r4, lsl #28
    4430:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    4434:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4438:	430d0800 	movwmi	r0, #55296	; 0xd800
    443c:	04005249 	streq	r5, [r0], #-585	; 0x249
    4440:	00ca045a 	sbceq	r0, sl, sl, asr r4
    4444:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    4448:	00000542 	andeq	r0, r0, r2, asr #10
    444c:	ca045b04 	bgt	11b064 <_Min_Stack_Size+0x11ac64>
    4450:	10000000 	andne	r0, r0, r0
    4454:	0004d50e 	andeq	sp, r4, lr, lsl #10
    4458:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    445c:	000000ca 	andeq	r0, r0, sl, asr #1
    4460:	06aa0e14 	ssateq	r0, #11, r4, lsl #28
    4464:	5d040000 	stcpl	0, cr0, [r4, #-0]
    4468:	0000ca04 	andeq	ip, r0, r4, lsl #20
    446c:	550e1800 	strpl	r1, [lr, #-2048]	; 0x800
    4470:	04000006 	streq	r0, [r0], #-6
    4474:	00b8045e 	adcseq	r0, r8, lr, asr r4
    4478:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    447c:	000004c4 	andeq	r0, r0, r4, asr #9
    4480:	ca045f04 	bgt	11c098 <_Min_Stack_Size+0x11bc98>
    4484:	20000000 	andcs	r0, r0, r0
    4488:	0005960e 	andeq	r9, r5, lr, lsl #12
    448c:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    4490:	000000ca 	andeq	r0, r0, sl, asr #1
    4494:	065f0e24 	ldrbeq	r0, [pc], -r4, lsr #28
    4498:	61040000 	mrsvs	r0, (UNDEF: 4)
    449c:	0000cf04 	andeq	ip, r0, r4, lsl #30
    44a0:	9d0e2800 	stcls	8, cr2, [lr, #-0]
    44a4:	04000006 	streq	r0, [r0], #-6
    44a8:	00ca0462 	sbceq	r0, sl, r2, ror #8
    44ac:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    44b0:	000004cd 	andeq	r0, r0, sp, asr #9
    44b4:	ca046304 	bgt	11d0cc <_Min_Stack_Size+0x11cccc>
    44b8:	34000000 	strcc	r0, [r0], #-0
    44bc:	0005b50e 	andeq	fp, r5, lr, lsl #10
    44c0:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    44c4:	000000ca 	andeq	r0, r0, sl, asr #1
    44c8:	06690e38 			; <UNDEFINED> instruction: 0x06690e38
    44cc:	65040000 	strvs	r0, [r4, #-0]
    44d0:	0000b804 	andeq	fp, r0, r4, lsl #16
    44d4:	680e3c00 	stmdavs	lr, {sl, fp, ip, sp}
    44d8:	04000005 	streq	r0, [r0], #-5
    44dc:	00ca0466 	sbceq	r0, sl, r6, ror #8
    44e0:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    44e4:	000005cd 	andeq	r0, r0, sp, asr #11
    44e8:	ca046704 	bgt	11e100 <_Min_Stack_Size+0x11dd00>
    44ec:	44000000 	strmi	r0, [r0], #-0
    44f0:	0005550e 	andeq	r5, r5, lr, lsl #10
    44f4:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    44f8:	000000cf 	andeq	r0, r0, pc, asr #1
    44fc:	04b20e48 	ldrteq	r0, [r2], #3656	; 0xe48
    4500:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    4504:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4508:	460e5000 	strmi	r5, [lr], -r0
    450c:	04000006 	streq	r0, [r0], #-6
    4510:	00ca046a 	sbceq	r0, sl, sl, ror #8
    4514:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    4518:	0000054b 	andeq	r0, r0, fp, asr #10
    451c:	ca046b04 	bgt	11f134 <_Min_Stack_Size+0x11ed34>
    4520:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4524:	00067f0e 	andeq	r7, r6, lr, lsl #30
    4528:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    452c:	000000b8 	strheq	r0, [r0], -r8
    4530:	06110e5c 			; <UNDEFINED> instruction: 0x06110e5c
    4534:	6d040000 	stcvs	0, cr0, [r4, #-0]
    4538:	0000ca04 	andeq	ip, r0, r4, lsl #20
    453c:	d20e6000 	andle	r6, lr, #0
    4540:	04000006 	streq	r0, [r0], #-6
    4544:	00ca046e 	sbceq	r0, sl, lr, ror #8
    4548:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    454c:	00000689 	andeq	r0, r0, r9, lsl #13
    4550:	cf046f04 	svcgt	0x00046f04
    4554:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4558:	0004de0e 	andeq	sp, r4, lr, lsl #28
    455c:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    4560:	000000ca 	andeq	r0, r0, sl, asr #1
    4564:	53430d70 	movtpl	r0, #15728	; 0x3d70
    4568:	71040052 	qaddvc	r0, r2, r4
    456c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    4570:	930e7400 	movwls	r7, #58368	; 0xe400
    4574:	04000006 	streq	r0, [r0], #-6
    4578:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    457c:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    4580:	000004fa 	strdeq	r0, [r0], -sl
    4584:	ca047304 	bgt	12119c <_Min_Stack_Size+0x120d9c>
    4588:	80000000 	andhi	r0, r0, r0
    458c:	0004e30e 	andeq	lr, r4, lr, lsl #6
    4590:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    4594:	000000ca 	andeq	r0, r0, sl, asr #1
    4598:	06c10e84 	strbeq	r0, [r1], r4, lsl #29
    459c:	75040000 	strvc	r0, [r4, #-0]
    45a0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    45a4:	700e8800 	andvc	r8, lr, r0, lsl #16
    45a8:	04000005 	streq	r0, [r0], #-5
    45ac:	00ca0476 	sbceq	r0, sl, r6, ror r4
    45b0:	008c0000 	addeq	r0, ip, r0
    45b4:	00058a0b 	andeq	r8, r5, fp, lsl #20
    45b8:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    45bc:	00000139 	andeq	r0, r0, r9, lsr r1
    45c0:	e004240c 	and	r2, r4, ip, lsl #8
    45c4:	0003e004 	andeq	lr, r3, r4
    45c8:	52430d00 	subpl	r0, r3, #0, 26
    45cc:	e2040031 	and	r0, r4, #49	; 0x31
    45d0:	0000df04 	andeq	sp, r0, r4, lsl #30
    45d4:	550e0000 	strpl	r0, [lr, #-0]
    45d8:	04000006 	streq	r0, [r0], #-6
    45dc:	00a204e3 	adceq	r0, r2, r3, ror #9
    45e0:	0d020000 	stceq	0, cr0, [r2, #-0]
    45e4:	00325243 	eorseq	r5, r2, r3, asr #4
    45e8:	df04e404 	svcle	0x0004e404
    45ec:	04000000 	streq	r0, [r0], #-0
    45f0:	00065f0e 	andeq	r5, r6, lr, lsl #30
    45f4:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
    45f8:	000000a2 	andeq	r0, r0, r2, lsr #1
    45fc:	52530d06 	subspl	r0, r3, #384	; 0x180
    4600:	04e60400 	strbteq	r0, [r6], #1024	; 0x400
    4604:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4608:	06690e08 	strbteq	r0, [r9], -r8, lsl #28
    460c:	e7040000 	str	r0, [r4, -r0]
    4610:	0000a204 	andeq	sl, r0, r4, lsl #4
    4614:	440d0a00 	strmi	r0, [sp], #-2560	; 0xa00
    4618:	e8040052 	stmda	r4, {r1, r4, r6}
    461c:	0000df04 	andeq	sp, r0, r4, lsl #30
    4620:	550e0c00 	strpl	r0, [lr, #-3072]	; 0xc00
    4624:	04000005 	streq	r0, [r0], #-5
    4628:	00a204e9 	adceq	r0, r2, r9, ror #9
    462c:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    4630:	00001ee0 	andeq	r1, r0, r0, ror #29
    4634:	df04ea04 	svcle	0x0004ea04
    4638:	10000000 	andne	r0, r0, r0
    463c:	00067f0e 	andeq	r7, r6, lr, lsl #30
    4640:	04eb0400 	strbteq	r0, [fp], #1024	; 0x400
    4644:	000000a2 	andeq	r0, r0, r2, lsr #1
    4648:	1eb70e12 	mrcne	14, 5, r0, cr7, cr2, {0}
    464c:	ec040000 	stc	0, cr0, [r4], {-0}
    4650:	0000df04 	andeq	sp, r0, r4, lsl #30
    4654:	890e1400 	stmdbhi	lr, {sl, ip}
    4658:	04000006 	streq	r0, [r0], #-6
    465c:	00a204ed 	adceq	r0, r2, sp, ror #9
    4660:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    4664:	00001fd9 	ldrdeq	r1, [r0], -r9
    4668:	df04ee04 	svcle	0x0004ee04
    466c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4670:	0006930e 	andeq	r9, r6, lr, lsl #6
    4674:	04ef0400 	strbteq	r0, [pc], #1024	; 467c <_Min_Stack_Size+0x427c>
    4678:	000000a2 	andeq	r0, r0, r2, lsr #1
    467c:	04e60e1a 	strbteq	r0, [r6], #3610	; 0xe1a
    4680:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    4684:	0000df04 	andeq	sp, r0, r4, lsl #30
    4688:	850e1c00 	strhi	r1, [lr, #-3072]	; 0xc00
    468c:	04000019 	streq	r0, [r0], #-25
    4690:	00a204f1 	strdeq	r0, [r2], r1	; <UNPREDICTABLE>
    4694:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    4698:	000020ba 	strheq	r2, [r0], -sl
    469c:	df04f204 	svcle	0x0004f204
    46a0:	20000000 	andcs	r0, r0, r0
    46a4:	00198f0e 	andseq	r8, r9, lr, lsl #30
    46a8:	04f30400 	ldrbteq	r0, [r3], #1024	; 0x400
    46ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    46b0:	420b0022 	andmi	r0, fp, #34	; 0x22
    46b4:	04000021 	streq	r0, [r0], #-33	; 0x21
    46b8:	02ee04f4 	rsceq	r0, lr, #244, 8	; 0xf4000000
    46bc:	120f0000 	andne	r0, pc, #0
    46c0:	04613605 	strbteq	r3, [r1], #-1541	; 0x605
    46c4:	e0100000 	ands	r0, r0, r0
    46c8:	0500001f 	streq	r0, [r0, #-31]
    46cc:	0000a238 	andeq	sl, r0, r8, lsr r2
    46d0:	4e100000 	cdpmi	0, 1, cr0, cr0, cr0, {0}
    46d4:	05000021 	streq	r0, [r0, #-33]	; 0x21
    46d8:	0000a23b 	andeq	sl, r0, fp, lsr r2
    46dc:	0a100200 	beq	404ee4 <_Min_Stack_Size+0x404ae4>
    46e0:	05000022 	streq	r0, [r0, #-34]	; 0x22
    46e4:	0000a23e 	andeq	sl, r0, lr, lsr r2
    46e8:	00100400 	andseq	r0, r0, r0, lsl #8
    46ec:	05000021 	streq	r0, [r0, #-33]	; 0x21
    46f0:	0000a241 	andeq	sl, r0, r1, asr #4
    46f4:	1e100600 	cfmsub32ne	mvax0, mvfx0, mvfx0, mvfx0
    46f8:	05000021 	streq	r0, [r0, #-33]	; 0x21
    46fc:	0000a244 	andeq	sl, r0, r4, asr #4
    4700:	69100800 	ldmdbvs	r0, {fp}
    4704:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4708:	0000a247 	andeq	sl, r0, r7, asr #4
    470c:	2c100a00 	ldccs	10, cr0, [r0], {-0}
    4710:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4714:	0000a24b 	andeq	sl, r0, fp, asr #4
    4718:	11100c00 	tstne	r0, r0, lsl #24
    471c:	05000021 	streq	r0, [r0, #-33]	; 0x21
    4720:	0000a251 	andeq	sl, r0, r1, asr r2
    4724:	54100e00 	ldrpl	r0, [r0], #-3584	; 0xe00
    4728:	05000020 	streq	r0, [r0, #-32]
    472c:	0000a254 	andeq	sl, r0, r4, asr r2
    4730:	03001000 	movweq	r1, #0
    4734:	0000206f 	andeq	r2, r0, pc, rrx
    4738:	03ec5505 	mvneq	r5, #20971520	; 0x1400000
    473c:	100f0000 	andne	r0, pc, r0
    4740:	04bd5b05 	ldrteq	r5, [sp], #2821	; 0xb05
    4744:	c8100000 	ldmdagt	r0, {}	; <UNPREDICTABLE>
    4748:	05000020 	streq	r0, [r0, #-32]
    474c:	0000a25e 	andeq	sl, r0, lr, asr r2
    4750:	16100000 	ldrne	r0, [r0], -r0
    4754:	0500001f 	streq	r0, [r0, #-31]
    4758:	0000a261 	andeq	sl, r0, r1, ror #4
    475c:	ab100200 	blge	404f64 <_Min_Stack_Size+0x404b64>
    4760:	05000020 	streq	r0, [r0, #-32]
    4764:	0000a264 	andeq	sl, r0, r4, ror #4
    4768:	1a100400 	bne	405770 <_Min_Stack_Size+0x405370>
    476c:	05000020 	streq	r0, [r0, #-32]
    4770:	0000a267 	andeq	sl, r0, r7, ror #4
    4774:	f2100600 	vmax.s16	d0, d0, d0
    4778:	05000020 	streq	r0, [r0, #-32]
    477c:	0000b86a 	andeq	fp, r0, sl, ror #16
    4780:	66100800 	ldrvs	r0, [r0], -r0, lsl #16
    4784:	05000020 	streq	r0, [r0, #-32]
    4788:	0000a26d 	andeq	sl, r0, sp, ror #4
    478c:	03000c00 	movweq	r0, #3072	; 0xc00
    4790:	00001ef7 	strdeq	r1, [r0], -r7
    4794:	046c6f05 	strbteq	r6, [ip], #-3845	; 0xf05
    4798:	07110000 	ldreq	r0, [r1, -r0]
    479c:	0100001f 	tsteq	r0, pc, lsl r0
    47a0:	003424e0 	eorseq	r2, r4, r0, ror #9
    47a4:	0000d808 	andeq	sp, r0, r8, lsl #16
    47a8:	ec9c0100 	ldfs	f0, [ip], {0}
    47ac:	12000004 	andne	r0, r0, #4
    47b0:	00002127 	andeq	r2, r0, r7, lsr #2
    47b4:	04ece001 	strbteq	lr, [ip], #1
    47b8:	91020000 	mrsls	r0, (UNDEF: 2)
    47bc:	04130074 	ldreq	r0, [r3], #-116	; 0x74
    47c0:	000003e0 	andeq	r0, r0, r0, ror #7
    47c4:	001ec314 	andseq	ip, lr, r4, lsl r3
    47c8:	011c0100 	tsteq	ip, r0, lsl #2
    47cc:	080034fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp}
    47d0:	00000086 	andeq	r0, r0, r6, lsl #1
    47d4:	05369c01 	ldreq	r9, [r6, #-3073]!	; 0xc01
    47d8:	27150000 	ldrcs	r0, [r5, -r0]
    47dc:	01000021 	tsteq	r0, r1, lsr #32
    47e0:	04ec011c 	strbteq	r0, [ip], #284	; 0x11c
    47e4:	91020000 	mrsls	r0, (UNDEF: 2)
    47e8:	208e156c 	addcs	r1, lr, ip, ror #10
    47ec:	1c010000 	stcne	0, cr0, [r1], {-0}
    47f0:	00053601 	andeq	r3, r5, r1, lsl #12
    47f4:	68910200 	ldmvs	r1, {r9}
    47f8:	000b8916 	andeq	r8, fp, r6, lsl r9
    47fc:	011e0100 	tsteq	lr, r0, lsl #2
    4800:	000000a2 	andeq	r0, r0, r2, lsr #1
    4804:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4808:	04610413 	strbteq	r0, [r1], #-1043	; 0x413
    480c:	9c140000 	ldcls	0, cr0, [r4], {-0}
    4810:	01000021 	tsteq	r0, r1, lsr #32
    4814:	3584015c 	strcc	r0, [r4, #348]	; 0x15c
    4818:	01b00800 	lslseq	r0, r0, #16
    481c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4820:	000005f8 	strdeq	r0, [r0], -r8
    4824:	00212715 	eoreq	r2, r1, r5, lsl r7
    4828:	015c0100 	cmpeq	ip, r0, lsl #2
    482c:	000004ec 	andeq	r0, r0, ip, ror #9
    4830:	15549102 	ldrbne	r9, [r4, #-258]	; 0x102
    4834:	00001ed1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4838:	f8015c01 			; <UNDEFINED> instruction: 0xf8015c01
    483c:	02000005 	andeq	r0, r0, #5
    4840:	89165091 	ldmdbhi	r6, {r0, r4, r7, ip, lr}
    4844:	0100000b 	tsteq	r0, fp
    4848:	00a2015e 	adceq	r0, r2, lr, asr r1
    484c:	91020000 	mrsls	r0, (UNDEF: 2)
    4850:	20eb166a 	rsccs	r1, fp, sl, ror #12
    4854:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    4858:	0000a201 	andeq	sl, r0, r1, lsl #4
    485c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4860:	00221716 	eoreq	r1, r2, r6, lsl r7
    4864:	015e0100 	cmpeq	lr, r0, lsl #2
    4868:	000000a2 	andeq	r0, r0, r2, lsr #1
    486c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4870:	0000221e 	andeq	r2, r0, lr, lsl r2
    4874:	a2015e01 	andge	r5, r1, #1, 28
    4878:	02000000 	andeq	r0, r0, #0
    487c:	74177291 	ldrvc	r7, [r7], #-657	; 0x291
    4880:	0100706d 	tsteq	r0, sp, rrx
    4884:	00b8015f 	adcseq	r0, r8, pc, asr r1
    4888:	91020000 	mrsls	r0, (UNDEF: 2)
    488c:	2250166c 	subscs	r1, r0, #108, 12	; 0x6c00000
    4890:	5f010000 	svcpl	0x00010000
    4894:	0000b801 	andeq	fp, r0, r1, lsl #16
    4898:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    489c:	0005bd16 	andeq	fp, r5, r6, lsl sp
    48a0:	01610100 	cmneq	r1, r0, lsl #2
    48a4:	000000b8 	strheq	r0, [r0], -r8
    48a8:	16609102 	strbtne	r9, [r0], -r2, lsl #2
    48ac:	00001ebe 			; <UNDEFINED> instruction: 0x00001ebe
    48b0:	b8016101 	stmdalt	r1, {r0, r8, sp, lr}
    48b4:	02000000 	andeq	r0, r0, #0
    48b8:	cc165c91 	ldcgt	12, cr5, [r6], {145}	; 0x91
    48bc:	0100001e 	tsteq	r0, lr, lsl r0
    48c0:	00b80161 	adcseq	r0, r8, r1, ror #2
    48c4:	91020000 	mrsls	r0, (UNDEF: 2)
    48c8:	04130058 	ldreq	r0, [r3], #-88	; 0x58
    48cc:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    48d0:	001f9c14 	andseq	r9, pc, r4, lsl ip	; <UNPREDICTABLE>
    48d4:	01e00100 	mvneq	r0, r0, lsl #2
    48d8:	08003734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp}
    48dc:	00000048 	andeq	r0, r0, r8, asr #32
    48e0:	06249c01 	strteq	r9, [r4], -r1, lsl #24
    48e4:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    48e8:	01000020 	tsteq	r0, r0, lsr #32
    48ec:	053601e0 	ldreq	r0, [r6, #-480]!	; 0x1e0
    48f0:	91020000 	mrsls	r0, (UNDEF: 2)
    48f4:	8d140074 	ldchi	0, cr0, [r4, #-464]	; 0xfffffe30
    48f8:	01000021 	tsteq	r0, r1, lsr #32
    48fc:	377c01fc 			; <UNDEFINED> instruction: 0x377c01fc
    4900:	00360800 	eorseq	r0, r6, r0, lsl #16
    4904:	9c010000 	stcls	0, cr0, [r1], {-0}
    4908:	0000064a 	andeq	r0, r0, sl, asr #12
    490c:	001ed115 	andseq	sp, lr, r5, lsl r1
    4910:	01fc0100 	mvnseq	r0, r0, lsl #2
    4914:	000005f8 	strdeq	r0, [r0], -r8
    4918:	00749102 	rsbseq	r9, r4, r2, lsl #2
    491c:	0020c014 	eoreq	ip, r0, r4, lsl r0
    4920:	02190100 	andseq	r0, r9, #0, 2
    4924:	080037b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip, sp}
    4928:	0000003e 	andeq	r0, r0, lr, lsr r0
    492c:	067f9c01 	ldrbteq	r9, [pc], -r1, lsl #24
    4930:	27150000 	ldrcs	r0, [r5, -r0]
    4934:	01000021 	tsteq	r0, r1, lsr #32
    4938:	04ec0219 	strbteq	r0, [ip], #537	; 0x219
    493c:	91020000 	mrsls	r0, (UNDEF: 2)
    4940:	07561574 			; <UNDEFINED> instruction: 0x07561574
    4944:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    4948:	00012d02 	andeq	r2, r1, r2, lsl #26
    494c:	73910200 	orrsvc	r0, r1, #0, 4
    4950:	21091400 	tstcs	r9, r0, lsl #8
    4954:	32010000 	andcc	r0, r1, #0
    4958:	0037f402 	eorseq	pc, r7, r2, lsl #8
    495c:	00003e08 	andeq	r3, r0, r8, lsl #28
    4960:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    4964:	15000006 	strne	r0, [r0, #-6]
    4968:	00002127 	andeq	r2, r0, r7, lsr #2
    496c:	ec023201 	sfm	f3, 4, [r2], {1}
    4970:	02000004 	andeq	r0, r0, #4
    4974:	56157491 			; <UNDEFINED> instruction: 0x56157491
    4978:	01000007 	tsteq	r0, r7
    497c:	012d0232 	teqeq	sp, r2, lsr r2
    4980:	91020000 	mrsls	r0, (UNDEF: 2)
    4984:	41140073 	tstmi	r4, r3, ror r0
    4988:	01000020 	tsteq	r0, r0, lsr #32
    498c:	3834024d 	ldmdacc	r4!, {r0, r2, r3, r6, r9}
    4990:	00360800 	eorseq	r0, r6, r0, lsl #16
    4994:	9c010000 	stcls	0, cr0, [r1], {-0}
    4998:	000006e9 	andeq	r0, r0, r9, ror #13
    499c:	00212715 	eoreq	r2, r1, r5, lsl r7
    49a0:	024d0100 	subeq	r0, sp, #0, 2
    49a4:	000004ec 	andeq	r0, r0, ip, ror #9
    49a8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    49ac:	0000220a 	andeq	r2, r0, sl, lsl #4
    49b0:	a2024d01 	andge	r4, r2, #1, 26	; 0x40
    49b4:	02000000 	andeq	r0, r0, #0
    49b8:	14007291 	strne	r7, [r0], #-657	; 0x291
    49bc:	00001f23 	andeq	r1, r0, r3, lsr #30
    49c0:	6c026101 	stfvss	f6, [r2], {1}
    49c4:	40080038 	andmi	r0, r8, r8, lsr r0
    49c8:	01000000 	mrseq	r0, (UNDEF: 0)
    49cc:	00071e9c 	muleq	r7, ip, lr
    49d0:	21271500 	teqcs	r7, r0, lsl #10
    49d4:	61010000 	mrsvs	r0, (UNDEF: 1)
    49d8:	0004ec02 	andeq	lr, r4, r2, lsl #24
    49dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    49e0:	001fe015 	andseq	lr, pc, r5, lsl r0	; <UNPREDICTABLE>
    49e4:	02610100 	rsbeq	r0, r1, #0, 2
    49e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    49ec:	00729102 	rsbseq	r9, r2, r2, lsl #2
    49f0:	001f7e14 	andseq	r7, pc, r4, lsl lr	; <UNPREDICTABLE>
    49f4:	027b0100 	rsbseq	r0, fp, #0, 2
    49f8:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
    49fc:	00000042 	andeq	r0, r0, r2, asr #32
    4a00:	07539c01 	ldrbeq	r9, [r3, -r1, lsl #24]
    4a04:	27150000 	ldrcs	r0, [r5, -r0]
    4a08:	01000021 	tsteq	r0, r1, lsr #32
    4a0c:	04ec027b 	strbteq	r0, [ip], #635	; 0x27b
    4a10:	91020000 	mrsls	r0, (UNDEF: 2)
    4a14:	1ff61574 	svcne	0x00f61574
    4a18:	7b010000 	blvc	44a20 <_Min_Stack_Size+0x44620>
    4a1c:	0000a202 	andeq	sl, r0, r2, lsl #4
    4a20:	72910200 	addsvc	r0, r1, #0, 4
    4a24:	1fc11400 	svcne	0x00c11400
    4a28:	93010000 	movwls	r0, #4096	; 0x1000
    4a2c:	0038f002 	eorseq	pc, r8, r2
    4a30:	00003e08 	andeq	r3, r0, r8, lsl #28
    4a34:	889c0100 	ldmhi	ip, {r8}
    4a38:	15000007 	strne	r0, [r0, #-7]
    4a3c:	00002127 	andeq	r2, r0, r7, lsr #2
    4a40:	ec029301 	stc	3, cr9, [r2], {1}
    4a44:	02000004 	andeq	r0, r0, #4
    4a48:	56157491 			; <UNDEFINED> instruction: 0x56157491
    4a4c:	01000007 	tsteq	r0, r7
    4a50:	012d0293 			; <UNDEFINED> instruction: 0x012d0293
    4a54:	91020000 	mrsls	r0, (UNDEF: 2)
    4a58:	9d140073 	ldcls	0, cr0, [r4, #-460]	; 0xfffffe34
    4a5c:	01000020 	tsteq	r0, r0, lsr #32
    4a60:	393002b2 	ldmdbcc	r0!, {r1, r4, r5, r7, r9}
    4a64:	003e0800 	eorseq	r0, lr, r0, lsl #16
    4a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a6c:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
    4a70:	00212715 	eoreq	r2, r1, r5, lsl r7
    4a74:	02b20100 	adcseq	r0, r2, #0, 2
    4a78:	000004ec 	andeq	r0, r0, ip, ror #9
    4a7c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4a80:	00000756 	andeq	r0, r0, r6, asr r7
    4a84:	2d02b201 	sfmcs	f3, 1, [r2, #-4]
    4a88:	02000001 	andeq	r0, r0, #1
    4a8c:	14007391 	strne	r7, [r0], #-913	; 0x391
    4a90:	000021a5 	andeq	r2, r0, r5, lsr #3
    4a94:	7002d701 	andvc	sp, r2, r1, lsl #14
    4a98:	9a080039 	bls	204b84 <_Min_Stack_Size+0x204784>
    4a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa0:	0008109c 	muleq	r8, ip, r0
    4aa4:	1fd11500 	svcne	0x00d11500
    4aa8:	d7010000 	strle	r0, [r1, -r0]
    4aac:	0004ec02 	andeq	lr, r4, r2, lsl #24
    4ab0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4ab4:	001ed115 	andseq	sp, lr, r5, lsl r1
    4ab8:	02d70100 	sbcseq	r0, r7, #0, 2
    4abc:	000005f8 	strdeq	r0, [r0], -r8
    4ac0:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    4ac4:	00000b89 	andeq	r0, r0, r9, lsl #23
    4ac8:	a202d901 	andge	sp, r2, #16384	; 0x4000
    4acc:	02000000 	andeq	r0, r0, #0
    4ad0:	74177491 	ldrvc	r7, [r7], #-1169	; 0x491
    4ad4:	0100706d 	tsteq	r0, sp, rrx
    4ad8:	00a202d9 	ldrdeq	r0, [r2], r9	; <UNPREDICTABLE>
    4adc:	91020000 	mrsls	r0, (UNDEF: 2)
    4ae0:	3c180076 	ldccc	0, cr0, [r8], {118}	; 0x76
    4ae4:	01000022 	tsteq	r0, r2, lsr #32
    4ae8:	00a20321 	adceq	r0, r2, r1, lsr #6
    4aec:	3a0c0000 	bcc	304af4 <_Min_Stack_Size+0x3046f4>
    4af0:	001a0800 	andseq	r0, sl, r0, lsl #16
    4af4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4af8:	0000083a 	andeq	r0, r0, sl, lsr r8
    4afc:	00212715 	eoreq	r2, r1, r5, lsl r7
    4b00:	03210100 	teqeq	r1, #0, 2
    4b04:	000004ec 	andeq	r0, r0, ip, ror #9
    4b08:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b0c:	00222b14 	eoreq	r2, r2, r4, lsl fp
    4b10:	03310100 	teqeq	r1, #0, 2
    4b14:	08003a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, sp}
    4b18:	0000001c 	andeq	r0, r0, ip, lsl r0
    4b1c:	086f9c01 	stmdaeq	pc!, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    4b20:	27150000 	ldrcs	r0, [r5, -r0]
    4b24:	01000021 	tsteq	r0, r1, lsr #32
    4b28:	04ec0331 	strbteq	r0, [ip], #817	; 0x331
    4b2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b30:	179d1574 			; <UNDEFINED> instruction: 0x179d1574
    4b34:	31010000 	mrscc	r0, (UNDEF: 1)
    4b38:	0000a203 	andeq	sl, r0, r3, lsl #4
    4b3c:	72910200 	addsvc	r0, r1, #0, 4
    4b40:	21711400 	cmncs	r1, r0, lsl #8
    4b44:	8b010000 	blhi	44b4c <_Min_Stack_Size+0x4474c>
    4b48:	003a4403 	eorseq	r4, sl, r3, lsl #8
    4b4c:	00003e08 	andeq	r3, r0, r8, lsl #28
    4b50:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    4b54:	15000008 	strne	r0, [r0, #-8]
    4b58:	00002127 	andeq	r2, r0, r7, lsr #2
    4b5c:	ec038b01 	stc	11, cr8, [r3], {1}
    4b60:	02000004 	andeq	r0, r0, #4
    4b64:	56157491 			; <UNDEFINED> instruction: 0x56157491
    4b68:	01000007 	tsteq	r0, r7
    4b6c:	012d038b 	smlawbeq	sp, fp, r3, r0
    4b70:	91020000 	mrsls	r0, (UNDEF: 2)
    4b74:	0a140073 	beq	504d48 <_Min_Stack_Size+0x504948>
    4b78:	01000020 	tsteq	r0, r0, lsr #32
    4b7c:	3a8403a1 	bcc	fe105a08 <_estack+0xde0d5a08>
    4b80:	00220800 	eoreq	r0, r2, r0, lsl #16
    4b84:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b88:	000008ca 	andeq	r0, r0, sl, asr #17
    4b8c:	00212715 	eoreq	r2, r1, r5, lsl r7
    4b90:	03a10100 			; <UNDEFINED> instruction: 0x03a10100
    4b94:	000004ec 	andeq	r0, r0, ip, ror #9
    4b98:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b9c:	00218218 	eoreq	r8, r1, r8, lsl r2
    4ba0:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    4ba4:	000000a2 	andeq	r0, r0, r2, lsr #1
    4ba8:	08003aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip, sp}
    4bac:	00000032 	andeq	r0, r0, r2, lsr r0
    4bb0:	09129c01 	ldmdbeq	r2, {r0, sl, fp, ip, pc}
    4bb4:	27150000 	ldrcs	r0, [r5, -r0]
    4bb8:	01000021 	tsteq	r0, r1, lsr #32
    4bbc:	04ec03b3 	strbteq	r0, [ip], #947	; 0x3b3
    4bc0:	91020000 	mrsls	r0, (UNDEF: 2)
    4bc4:	1fee156c 	svcne	0x00ee156c
    4bc8:	b3010000 	movwlt	r0, #4096	; 0x1000
    4bcc:	00009703 	andeq	r9, r0, r3, lsl #14
    4bd0:	6b910200 	blvs	fe4453d8 <_estack+0xde4153d8>
    4bd4:	001f5416 	andseq	r5, pc, r6, lsl r4	; <UNPREDICTABLE>
    4bd8:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    4bdc:	000000a2 	andeq	r0, r0, r2, lsr #1
    4be0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4be4:	001f3f18 	andseq	r3, pc, r8, lsl pc	; <UNPREDICTABLE>
    4be8:	03cc0100 	biceq	r0, ip, #0, 2
    4bec:	000000a2 	andeq	r0, r0, r2, lsr #1
    4bf0:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
    4bf4:	0000001a 	andeq	r0, r0, sl, lsl r0
    4bf8:	093c9c01 	ldmdbeq	ip!, {r0, sl, fp, ip, pc}
    4bfc:	27150000 	ldrcs	r0, [r5, -r0]
    4c00:	01000021 	tsteq	r0, r1, lsr #32
    4c04:	04ec03cc 	strbteq	r0, [ip], #972	; 0x3cc
    4c08:	91020000 	mrsls	r0, (UNDEF: 2)
    4c0c:	5b140074 	blpl	504de4 <_Min_Stack_Size+0x5049e4>
    4c10:	0100001f 	tsteq	r0, pc, lsl r0
    4c14:	3af803f1 	bcc	ffe05be0 <_estack+0xdfdd5be0>
    4c18:	00460800 	subeq	r0, r6, r0, lsl #16
    4c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c20:	00000980 	andeq	r0, r0, r0, lsl #19
    4c24:	00212715 	eoreq	r2, r1, r5, lsl r7
    4c28:	03f10100 	mvnseq	r0, #0, 2
    4c2c:	000004ec 	andeq	r0, r0, ip, ror #9
    4c30:	15749102 	ldrbne	r9, [r4, #-258]!	; 0x102
    4c34:	0000207f 	andeq	r2, r0, pc, ror r0
    4c38:	a203f101 	andge	pc, r3, #1073741824	; 0x40000000
    4c3c:	02000000 	andeq	r0, r0, #0
    4c40:	56157291 			; <UNDEFINED> instruction: 0x56157291
    4c44:	01000007 	tsteq	r0, r7
    4c48:	012d03f1 	strdeq	r0, [sp, -r1]!
    4c4c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c50:	e6140071 			; <UNDEFINED> instruction: 0xe6140071
    4c54:	0100001e 	tsteq	r0, lr, lsl r0
    4c58:	3b40045d 	blcc	1005dd4 <_Min_Stack_Size+0x10059d4>
    4c5c:	00600800 	rsbeq	r0, r0, r0, lsl #16
    4c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c64:	000009e2 	andeq	r0, r0, r2, ror #19
    4c68:	00212715 	eoreq	r2, r1, r5, lsl r7
    4c6c:	045d0100 	ldrbeq	r0, [sp], #-256	; 0x100
    4c70:	000004ec 	andeq	r0, r0, ip, ror #9
    4c74:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4c78:	00002036 	andeq	r2, r0, r6, lsr r0
    4c7c:	97045d01 	strls	r5, [r4, -r1, lsl #26]
    4c80:	02000000 	andeq	r0, r0, #0
    4c84:	56156b91 			; <UNDEFINED> instruction: 0x56156b91
    4c88:	01000007 	tsteq	r0, r7
    4c8c:	012d045d 	teqeq	sp, sp, asr r4
    4c90:	91020000 	mrsls	r0, (UNDEF: 2)
    4c94:	1410166a 	ldrne	r1, [r0], #-1642	; 0x66a
    4c98:	5f010000 	svcpl	0x00010000
    4c9c:	0000a204 	andeq	sl, r0, r4, lsl #4
    4ca0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4ca4:	00154216 	andseq	r4, r5, r6, lsl r2
    4ca8:	045f0100 	ldrbeq	r0, [pc], #-256	; 4cb0 <_Min_Stack_Size+0x48b0>
    4cac:	000000a2 	andeq	r0, r0, r2, lsr #1
    4cb0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4cb4:	001fab18 	andseq	sl, pc, r8, lsl fp	; <UNPREDICTABLE>
    4cb8:	04890100 	streq	r0, [r9], #256	; 0x100
    4cbc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4cc0:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
    4cc4:	00000038 	andeq	r0, r0, r8, lsr r0
    4cc8:	0a2a9c01 	beq	aabcd4 <_Min_Stack_Size+0xaab8d4>
    4ccc:	27150000 	ldrcs	r0, [r5, -r0]
    4cd0:	01000021 	tsteq	r0, r1, lsr #32
    4cd4:	04ec0489 	strbteq	r0, [ip], #1161	; 0x489
    4cd8:	91020000 	mrsls	r0, (UNDEF: 2)
    4cdc:	2029156c 	eorcs	r1, r9, ip, ror #10
    4ce0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    4ce4:	0000a204 	andeq	sl, r0, r4, lsl #4
    4ce8:	6a910200 	bvs	fe4454f0 <_estack+0xde4154f0>
    4cec:	00097416 	andeq	r7, r9, r6, lsl r4
    4cf0:	048b0100 	streq	r0, [fp], #256	; 0x100
    4cf4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4cf8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4cfc:	00215714 	eoreq	r5, r1, r4, lsl r7
    4d00:	04b20100 	ldrteq	r0, [r2], #256	; 0x100
    4d04:	08003bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, sp}
    4d08:	00000020 	andeq	r0, r0, r0, lsr #32
    4d0c:	0a5f9c01 	beq	17ebd18 <_Min_Stack_Size+0x17eb918>
    4d10:	27150000 	ldrcs	r0, [r5, -r0]
    4d14:	01000021 	tsteq	r0, r1, lsr #32
    4d18:	04ec04b2 	strbteq	r0, [ip], #1202	; 0x4b2
    4d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    4d20:	20291574 	eorcs	r1, r9, r4, ror r5
    4d24:	b2010000 	andlt	r0, r1, #0
    4d28:	0000a204 	andeq	sl, r0, r4, lsl #4
    4d2c:	72910200 	addsvc	r0, r1, #0, 4
    4d30:	1f6a1800 	svcne	0x006a1800
    4d34:	cb010000 	blgt	44d3c <_Min_Stack_Size+0x4493c>
    4d38:	00010b04 	andeq	r0, r1, r4, lsl #22
    4d3c:	003bf800 	eorseq	pc, fp, r0, lsl #16
    4d40:	00007608 	andeq	r7, r0, r8, lsl #12
    4d44:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    4d48:	1500000a 	strne	r0, [r0, #-10]
    4d4c:	00002127 	andeq	r2, r0, r7, lsr #2
    4d50:	ec04cb01 	stc	11, cr12, [r4], {1}
    4d54:	02000004 	andeq	r0, r0, #4
    4d58:	36156c91 			; <UNDEFINED> instruction: 0x36156c91
    4d5c:	01000020 	tsteq	r0, r0, lsr #32
    4d60:	009704cb 	addseq	r0, r7, fp, asr #9
    4d64:	91020000 	mrsls	r0, (UNDEF: 2)
    4d68:	0974166b 	ldmdbeq	r4!, {r0, r1, r3, r5, r6, r9, sl, ip}^
    4d6c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    4d70:	00010b04 	andeq	r0, r1, r4, lsl #22
    4d74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4d78:	00141016 	andseq	r1, r4, r6, lsl r0
    4d7c:	04ce0100 	strbeq	r0, [lr], #256	; 0x100
    4d80:	000000a2 	andeq	r0, r0, r2, lsr #1
    4d84:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4d88:	00001542 	andeq	r1, r0, r2, asr #10
    4d8c:	a204ce01 	andge	ip, r4, #1, 28
    4d90:	02000000 	andeq	r0, r0, #0
    4d94:	52167291 	andspl	r7, r6, #268435465	; 0x10000009
    4d98:	0100001a 	tsteq	r0, sl, lsl r0
    4d9c:	00a204ce 	adceq	r0, r2, lr, asr #9
    4da0:	91020000 	mrsls	r0, (UNDEF: 2)
    4da4:	d1140070 	tstle	r4, r0, ror r0
    4da8:	01000020 	tsteq	r0, r0, lsr #32
    4dac:	3c700502 	cfldr64cc	mvdx0, [r0], #-8
    4db0:	00320800 	eorseq	r0, r2, r0, lsl #16
    4db4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4db8:	00000b18 	andeq	r0, r0, r8, lsl fp
    4dbc:	00212715 	eoreq	r2, r1, r5, lsl r7
    4dc0:	05020100 	streq	r0, [r2, #-256]	; 0x100
    4dc4:	000004ec 	andeq	r0, r0, ip, ror #9
    4dc8:	156c9102 	strbne	r9, [ip, #-258]!	; 0x102
    4dcc:	00002036 	andeq	r2, r0, r6, lsr r0
    4dd0:	97050201 	strls	r0, [r5, -r1, lsl #4]
    4dd4:	02000000 	andeq	r0, r0, #0
    4dd8:	10166b91 	mulsne	r6, r1, fp
    4ddc:	01000014 	tsteq	r0, r4, lsl r0
    4de0:	00a20504 	adceq	r0, r2, r4, lsl #10
    4de4:	91020000 	mrsls	r0, (UNDEF: 2)
    4de8:	14190076 	ldrne	r0, [r9], #-118	; 0x76
    4dec:	06000004 	streq	r0, [r0], -r4
    4df0:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    4df4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4df8:	04000003 	streq	r0, [r0], #-3
    4dfc:	000e0800 	andeq	r0, lr, r0, lsl #16
    4e00:	2a010400 	bcs	45e08 <_Min_Stack_Size+0x45a08>
    4e04:	01000001 	tsteq	r0, r1
    4e08:	000023da 	ldrdeq	r2, [r0], -sl
    4e0c:	00000369 	andeq	r0, r0, r9, ror #6
    4e10:	00000680 	andeq	r0, r0, r0, lsl #13
    4e14:	00000000 	andeq	r0, r0, r0
    4e18:	00002224 	andeq	r2, r0, r4, lsr #4
    4e1c:	a6060102 	strge	r0, [r6], -r2, lsl #2
    4e20:	02000002 	andeq	r0, r0, #2
    4e24:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    4e28:	02020000 	andeq	r0, r2, #0
    4e2c:	00003a05 	andeq	r3, r0, r5, lsl #20
    4e30:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4e34:	0000034b 	andeq	r0, r0, fp, asr #6
    4e38:	00044503 	andeq	r4, r4, r3, lsl #10
    4e3c:	4c3f0200 	lfmmi	f0, 4, [pc], #-0	; 4e44 <_Min_Stack_Size+0x4a44>
    4e40:	02000000 	andeq	r0, r0, #0
    4e44:	01000504 	tsteq	r0, r4, lsl #10
    4e48:	60030000 	andvs	r0, r3, r0
    4e4c:	02000000 	andeq	r0, r0, #0
    4e50:	00005e41 	andeq	r5, r0, r1, asr #28
    4e54:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4e58:	000002f5 	strdeq	r0, [r0], -r5
    4e5c:	fb050802 	blx	146e6e <_Min_Stack_Size+0x146a6e>
    4e60:	02000000 	andeq	r0, r0, #0
    4e64:	02f00708 	rscseq	r0, r0, #8, 14	; 0x200000
    4e68:	04040000 	streq	r0, [r4], #-0
    4e6c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    4e70:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4e74:	000002fa 	strdeq	r0, [r0], -sl
    4e78:	00044703 	andeq	r4, r4, r3, lsl #14
    4e7c:	41410300 	mrsmi	r0, (UNDEF: 113)
    4e80:	03000000 	movweq	r0, #0
    4e84:	00000062 	andeq	r0, r0, r2, rrx
    4e88:	00534203 	subseq	r4, r3, r3, lsl #4
    4e8c:	04020000 	streq	r0, [r2], #-0
    4e90:	00004407 	andeq	r4, r0, r7, lsl #8
    4e94:	008c0500 	addeq	r0, ip, r0, lsl #10
    4e98:	81050000 	mrshi	r0, (UNDEF: 5)
    4e9c:	06000000 	streq	r0, [r0], -r0
    4ea0:	01f70401 	mvnseq	r0, r1, lsl #8
    4ea4:	000000be 	strheq	r0, [r0], -lr
    4ea8:	00091807 	andeq	r1, r9, r7, lsl #16
    4eac:	53080000 	movwpl	r0, #32768	; 0x8000
    4eb0:	01005445 	tsteq	r0, r5, asr #8
    4eb4:	1d990900 	ldcne	9, cr0, [r9]
    4eb8:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    4ebc:	0000a801 	andeq	sl, r0, r1, lsl #16
    4ec0:	4d4e0900 	stclmi	9, cr0, [lr, #-0]
    4ec4:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    4ec8:	0000a801 	andeq	sl, r0, r1, lsl #16
    4ecc:	04010600 	streq	r0, [r1], #-1536	; 0x600
    4ed0:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    4ed4:	9d070000 	stcls	0, cr0, [r7, #-0]
    4ed8:	00000003 	andeq	r0, r0, r3
    4edc:	0000b207 	andeq	fp, r0, r7, lsl #4
    4ee0:	09000100 	stmdbeq	r0, {r8}
    4ee4:	0000083e 	andeq	r0, r0, lr, lsr r8
    4ee8:	d601f904 	strle	pc, [r1], -r4, lsl #18
    4eec:	0a000000 	beq	4ef4 <_Min_Stack_Size+0x4af4>
    4ef0:	03300418 	teqeq	r0, #24, 8	; 0x18000000
    4ef4:	0000014f 	andeq	r0, r0, pc, asr #2
    4ef8:	524d490b 	subpl	r4, sp, #180224	; 0x2c000
    4efc:	03320400 	teqeq	r2, #0, 8
    4f00:	0000009e 	muleq	r0, lr, r0
    4f04:	4d450b00 	vstrmi	d16, [r5, #-0]
    4f08:	33040052 	movwcc	r0, #16466	; 0x4052
    4f0c:	00009e03 	andeq	r9, r0, r3, lsl #28
    4f10:	100c0400 	andne	r0, ip, r0, lsl #8
    4f14:	04000023 	streq	r0, [r0], #-35	; 0x23
    4f18:	009e0334 	addseq	r0, lr, r4, lsr r3
    4f1c:	0c080000 	stceq	0, cr0, [r8], {-0}
    4f20:	000023af 	andeq	r2, r0, pc, lsr #7
    4f24:	9e033504 	cfsh32ls	mvfx3, mvfx3, #4
    4f28:	0c000000 	stceq	0, cr0, [r0], {-0}
    4f2c:	0023c80c 	eoreq	ip, r3, ip, lsl #16
    4f30:	03360400 	teqeq	r6, #0, 8
    4f34:	0000009e 	muleq	r0, lr, r0
    4f38:	52500b10 	subspl	r0, r0, #16, 22	; 0x4000
    4f3c:	03370400 	teqeq	r7, #0, 8
    4f40:	0000009e 	muleq	r0, lr, r0
    4f44:	03090014 	movweq	r0, #36884	; 0x9014
    4f48:	04000023 	streq	r0, [r0], #-35	; 0x23
    4f4c:	00f80338 	rscseq	r0, r8, r8, lsr r3
    4f50:	010d0000 	mrseq	r0, (UNDEF: 13)
    4f54:	01703705 	cmneq	r0, r5, lsl #14
    4f58:	cf070000 	svcgt	0x00070000
    4f5c:	00000022 	andeq	r0, r0, r2, lsr #32
    4f60:	00228507 	eoreq	r8, r2, r7, lsl #10
    4f64:	03000400 	movweq	r0, #1024	; 0x400
    4f68:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    4f6c:	015b3a05 	cmpeq	fp, r5, lsl #20
    4f70:	010d0000 	mrseq	r0, (UNDEF: 13)
    4f74:	01964305 	orrseq	r4, r6, r5, lsl #6
    4f78:	15070000 	strne	r0, [r7, #-0]
    4f7c:	08000023 	stmdaeq	r0, {r0, r1, r5}
    4f80:	00239a07 	eoreq	r9, r3, r7, lsl #20
    4f84:	29070c00 	stmdbcs	r7, {sl, fp}
    4f88:	10000023 	andne	r0, r0, r3, lsr #32
    4f8c:	23b40300 			; <UNDEFINED> instruction: 0x23b40300
    4f90:	47050000 	strmi	r0, [r5, -r0]
    4f94:	0000017b 	andeq	r0, r0, fp, ror r1
    4f98:	5005080e 	andpl	r0, r5, lr, lsl #16
    4f9c:	000001da 	ldrdeq	r0, [r0], -sl
    4fa0:	0022570f 	eoreq	r5, r2, pc, lsl #14
    4fa4:	8c520500 	cfldr64hi	mvdx0, [r2], {-0}
    4fa8:	00000000 	andeq	r0, r0, r0
    4fac:	0022610f 	eoreq	r6, r2, pc, lsl #2
    4fb0:	70550500 	subsvc	r0, r5, r0, lsl #10
    4fb4:	04000001 	streq	r0, [r0], #-1
    4fb8:	0022780f 	eoreq	r7, r2, pc, lsl #16
    4fbc:	96580500 	ldrbls	r0, [r8], -r0, lsl #10
    4fc0:	05000001 	streq	r0, [r0, #-1]
    4fc4:	00226b0f 	eoreq	r6, r2, pc, lsl #22
    4fc8:	ec5b0500 	cfldr64	mvdx0, [fp], {-0}
    4fcc:	06000000 	streq	r0, [r0], -r0
    4fd0:	22ae0300 	adccs	r0, lr, #0, 6
    4fd4:	5d050000 	stcpl	0, cr0, [r5, #-0]
    4fd8:	000001a1 	andeq	r0, r0, r1, lsr #3
    4fdc:	0023ce10 	eoreq	ip, r3, r0, lsl lr
    4fe0:	a46e0100 	strbtge	r0, [lr], #-256	; 0x100
    4fe4:	3408003c 	strcc	r0, [r8], #-60	; 0x3c
    4fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    4fec:	2345119c 	movtcs	r1, #20892	; 0x519c
    4ff0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    4ff4:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
    4ff8:	000000dc 	ldrdeq	r0, [r0], -ip
    4ffc:	02289c01 	eoreq	r9, r8, #256	; 0x100
    5000:	bf120000 	svclt	0x00120000
    5004:	01000022 	tsteq	r0, r2, lsr #32
    5008:	0002287e 	andeq	r2, r2, lr, ror r8
    500c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5010:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    5014:	8c800100 	stfhis	f0, [r0], {0}
    5018:	02000000 	andeq	r0, r0, #0
    501c:	14007491 	strne	r7, [r0], #-1169	; 0x491
    5020:	0001da04 	andeq	sp, r1, r4, lsl #20
    5024:	23621100 	cmncs	r2, #0, 2
    5028:	b6010000 	strlt	r0, [r1], -r0
    502c:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
    5030:	0000002a 	andeq	r0, r0, sl, lsr #32
    5034:	02529c01 	subseq	r9, r2, #256	; 0x100
    5038:	bf120000 	svclt	0x00120000
    503c:	01000022 	tsteq	r0, r2, lsr #32
    5040:	000228b6 			; <UNDEFINED> instruction: 0x000228b6
    5044:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5048:	22951100 	addscs	r1, r5, #0, 2
    504c:	c5010000 	strgt	r0, [r1, #-0]
    5050:	08003de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, sp}
    5054:	00000024 	andeq	r0, r0, r4, lsr #32
    5058:	02769c01 	rsbseq	r9, r6, #256	; 0x100
    505c:	57120000 	ldrpl	r0, [r2, -r0]
    5060:	01000022 	tsteq	r0, r2, lsr #32
    5064:	00008cc5 	andeq	r8, r0, r5, asr #25
    5068:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    506c:	234f1500 	movtcs	r1, #62720	; 0xf500
    5070:	e3010000 	movw	r0, #4096	; 0x1000
    5074:	000000be 	strheq	r0, [r0], -lr
    5078:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
    507c:	00000034 	andeq	r0, r0, r4, lsr r0
    5080:	02ac9c01 	adceq	r9, ip, #256	; 0x100
    5084:	57120000 	ldrpl	r0, [r2, -r0]
    5088:	01000022 	tsteq	r0, r2, lsr #32
    508c:	00008ce3 	andeq	r8, r0, r3, ror #25
    5090:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5094:	00097416 	andeq	r7, r9, r6, lsl r4
    5098:	bee50100 	cdplt	1, 14, cr0, cr5, cr0, {0}
    509c:	02000000 	andeq	r0, r0, #0
    50a0:	11007791 			; <UNDEFINED> instruction: 0x11007791
    50a4:	000022e3 	andeq	r2, r0, r3, ror #5
    50a8:	3e38fa01 	vaddcc.f32	s30, s16, s2
    50ac:	001c0800 	andseq	r0, ip, r0, lsl #16
    50b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    50b4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    50b8:	00225712 	eoreq	r5, r2, r2, lsl r7
    50bc:	8cfa0100 	ldfhie	f0, [sl]
    50c0:	02000000 	andeq	r0, r0, #0
    50c4:	17007491 			; <UNDEFINED> instruction: 0x17007491
    50c8:	00002372 	andeq	r2, r0, r2, ror r3
    50cc:	ca010801 	bgt	470d8 <_Min_Stack_Size+0x46cd8>
    50d0:	54000000 	strpl	r0, [r0], #-0
    50d4:	3408003e 	strcc	r0, [r8], #-62	; 0x3e
    50d8:	01000000 	mrseq	r0, (UNDEF: 0)
    50dc:	0003099c 	muleq	r3, ip, r9
    50e0:	22571800 	subscs	r1, r7, #0, 16
    50e4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    50e8:	00008c01 	andeq	r8, r0, r1, lsl #24
    50ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    50f0:	00097419 	andeq	r7, r9, r9, lsl r4
    50f4:	010a0100 	mrseq	r0, (UNDEF: 26)
    50f8:	000000be 	strheq	r0, [r0], -lr
    50fc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    5100:	0023831a 	eoreq	r8, r3, sl, lsl r3
    5104:	01200100 	teqeq	r0, r0, lsl #2
    5108:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
    510c:	0000001c 	andeq	r0, r0, ip, lsl r0
    5110:	032f9c01 	teqeq	pc, #256	; 0x100
    5114:	57180000 	ldrpl	r0, [r8, -r0]
    5118:	01000022 	tsteq	r0, r2, lsr #32
    511c:	008c0120 	addeq	r0, ip, r0, lsr #2
    5120:	91020000 	mrsls	r0, (UNDEF: 2)
    5124:	141b0074 	ldrne	r0, [fp], #-116	; 0x74
    5128:	06000004 	streq	r0, [r0], -r4
    512c:	00a306a7 	adceq	r0, r3, r7, lsr #13
    5130:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5134:	04000008 	streq	r0, [r0], #-8
    5138:	000faf00 	andeq	sl, pc, r0, lsl #30
    513c:	2a010400 	bcs	46144 <_Min_Stack_Size+0x45d44>
    5140:	01000001 	tsteq	r0, r1
    5144:	00002707 	andeq	r2, r0, r7, lsl #14
    5148:	00000369 	andeq	r0, r0, r9, ror #6
    514c:	000006c8 	andeq	r0, r0, r8, asr #13
    5150:	00000000 	andeq	r0, r0, r0
    5154:	00002477 	andeq	r2, r0, r7, ror r4
    5158:	a6060102 	strge	r0, [r6], -r2, lsl #2
    515c:	02000002 	andeq	r0, r0, #2
    5160:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    5164:	02020000 	andeq	r0, r2, #0
    5168:	00003a05 	andeq	r3, r0, r5, lsl #20
    516c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5170:	0000034b 	andeq	r0, r0, fp, asr #6
    5174:	00044503 	andeq	r4, r4, r3, lsl #10
    5178:	4c3f0200 	lfmmi	f0, 4, [pc], #-0	; 5180 <_Min_Stack_Size+0x4d80>
    517c:	02000000 	andeq	r0, r0, #0
    5180:	01000504 	tsteq	r0, r4, lsl #10
    5184:	60030000 	andvs	r0, r3, r0
    5188:	02000000 	andeq	r0, r0, #0
    518c:	00005e41 	andeq	r5, r0, r1, asr #28
    5190:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5194:	000002f5 	strdeq	r0, [r0], -r5
    5198:	fb050802 	blx	1471aa <_Min_Stack_Size+0x146daa>
    519c:	02000000 	andeq	r0, r0, #0
    51a0:	02f00708 	rscseq	r0, r0, #8, 14	; 0x200000
    51a4:	04040000 	streq	r0, [r4], #-0
    51a8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    51ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    51b0:	000002fa 	strdeq	r0, [r0], -sl
    51b4:	00044703 	andeq	r4, r4, r3, lsl #14
    51b8:	41410300 	mrsmi	r0, (UNDEF: 113)
    51bc:	03000000 	movweq	r0, #0
    51c0:	00000062 	andeq	r0, r0, r2, rrx
    51c4:	00534203 	subseq	r4, r3, r3, lsl #4
    51c8:	04020000 	streq	r0, [r2], #-0
    51cc:	00004407 	andeq	r4, r0, r7, lsl #8
    51d0:	008c0500 	addeq	r0, ip, r0, lsl #10
    51d4:	81050000 	mrshi	r0, (UNDEF: 5)
    51d8:	06000000 	streq	r0, [r0], -r0
    51dc:	01f70401 	mvnseq	r0, r1, lsl #8
    51e0:	000000be 	strheq	r0, [r0], -lr
    51e4:	00091807 	andeq	r1, r9, r7, lsl #16
    51e8:	53080000 	movwpl	r0, #32768	; 0x8000
    51ec:	01005445 	tsteq	r0, r5, asr #8
    51f0:	1d990900 	ldcne	9, cr0, [r9]
    51f4:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    51f8:	0000a801 	andeq	sl, r0, r1, lsl #16
    51fc:	4d4e0900 	stclmi	9, cr0, [lr, #-0]
    5200:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    5204:	0000a801 	andeq	sl, r0, r1, lsl #16
    5208:	04010600 	streq	r0, [r1], #-1536	; 0x600
    520c:	00ec01f9 	strdeq	r0, [ip], #25	; <UNPREDICTABLE>
    5210:	9d070000 	stcls	0, cr0, [r7, #-0]
    5214:	00000003 	andeq	r0, r0, r3
    5218:	0000b207 	andeq	fp, r0, r7, lsl #4
    521c:	09000100 	stmdbeq	r0, {r8}
    5220:	0000083e 	andeq	r0, r0, lr, lsr r8
    5224:	d601f904 	strle	pc, [r1], -r4, lsl #18
    5228:	0a000000 	beq	5230 <_Min_Stack_Size+0x4e30>
    522c:	c7040c00 	strgt	r0, [r4, -r0, lsl #24]
    5230:	00022f02 	andeq	r2, r2, r2, lsl #30
    5234:	52430b00 	subpl	r0, r3, #0, 22
    5238:	02c90400 	sbceq	r0, r9, #0, 8
    523c:	0000009e 	muleq	r0, lr, r0
    5240:	53490b00 	movtpl	r0, #39680	; 0x9b00
    5244:	ca040052 	bgt	105394 <_Min_Stack_Size+0x104f94>
    5248:	00009e02 	andeq	r9, r0, r2, lsl #28
    524c:	230c0400 	movwcs	r0, #50176	; 0xc400
    5250:	0400001c 	streq	r0, [r0], #-28
    5254:	009e02cb 	addseq	r0, lr, fp, asr #5
    5258:	0c080000 	stceq	0, cr0, [r8], {-0}
    525c:	00002629 	andeq	r2, r0, r9, lsr #12
    5260:	9e02cc04 	cdpls	12, 0, cr12, cr2, cr4, {0}
    5264:	0c000000 	stceq	0, cr0, [r0], {-0}
    5268:	0026910c 	eoreq	r9, r6, ip, lsl #2
    526c:	02cd0400 	sbceq	r0, sp, #0, 8
    5270:	0000009e 	muleq	r0, lr, r0
    5274:	28f00c10 	ldmcs	r0!, {r4, sl, fp}^
    5278:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    527c:	00009e02 	andeq	r9, r0, r2, lsl #28
    5280:	390c1400 	stmdbcc	ip, {sl, ip}
    5284:	04000029 	streq	r0, [r0], #-41	; 0x29
    5288:	009e02cf 	addseq	r0, lr, pc, asr #5
    528c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    5290:	00002863 	andeq	r2, r0, r3, ror #16
    5294:	9e02d004 	cdpls	0, 0, cr13, cr2, cr4, {0}
    5298:	1c000000 	stcne	0, cr0, [r0], {-0}
    529c:	0026130c 	eoreq	r1, r6, ip, lsl #6
    52a0:	02d10400 	sbcseq	r0, r1, #0, 8
    52a4:	0000009e 	muleq	r0, lr, r0
    52a8:	281a0c20 	ldmdacs	sl, {r5, sl, fp}
    52ac:	d2040000 	andle	r0, r4, #0
    52b0:	00009e02 	andeq	r9, r0, r2, lsl #28
    52b4:	c00c2400 	andgt	r2, ip, r0, lsl #8
    52b8:	04000027 	streq	r0, [r0], #-39	; 0x27
    52bc:	009e02d3 			; <UNDEFINED> instruction: 0x009e02d3
    52c0:	0c280000 	stceq	0, cr0, [r8], #-0
    52c4:	00002995 	muleq	r0, r5, r9
    52c8:	9e02d404 	cdpls	4, 0, cr13, cr2, cr4, {0}
    52cc:	2c000000 	stccs	0, cr0, [r0], {-0}
    52d0:	0025550c 	eoreq	r5, r5, ip, lsl #10
    52d4:	02d50400 	sbcseq	r0, r5, #0, 8
    52d8:	0000009e 	muleq	r0, lr, r0
    52dc:	28000c30 	stmdacs	r0, {r4, r5, sl, fp}
    52e0:	d6040000 	strle	r0, [r4], -r0
    52e4:	00009e02 	andeq	r9, r0, r2, lsl #28
    52e8:	ba0c3400 	blt	3122f0 <_Min_Stack_Size+0x311ef0>
    52ec:	04000027 	streq	r0, [r0], #-39	; 0x27
    52f0:	009e02d7 			; <UNDEFINED> instruction: 0x009e02d7
    52f4:	0c380000 	ldceq	0, cr0, [r8], #-0
    52f8:	00002759 	andeq	r2, r0, r9, asr r7
    52fc:	9e02d804 	cdpls	8, 0, cr13, cr2, cr4, {0}
    5300:	3c000000 	stccc	0, cr0, [r0], {-0}
    5304:	524f4f0b 	subpl	r4, pc, #11, 30	; 0x2c
    5308:	02d90400 	sbcseq	r0, r9, #0, 8
    530c:	0000009e 	muleq	r0, lr, r0
    5310:	4c4e0b40 	mcrrmi	11, 4, r0, lr, cr0
    5314:	da040052 	ble	105464 <_Min_Stack_Size+0x105064>
    5318:	00009e02 	andeq	r9, r0, r2, lsl #28
    531c:	4c0b4400 	cfstrsmi	mvf4, [fp], {-0}
    5320:	04005257 	streq	r5, [r0], #-599	; 0x257
    5324:	009e02db 			; <UNDEFINED> instruction: 0x009e02db
    5328:	0c480000 	mareq	acc0, r0, r8
    532c:	0000255c 	andeq	r2, r0, ip, asr r5
    5330:	9e02dc04 	cdpls	12, 0, cr13, cr2, cr4, {0}
    5334:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5338:	0015eb0c 	andseq	lr, r5, ip, lsl #22
    533c:	02dd0400 	sbcseq	r0, sp, #0, 8
    5340:	0000022f 	andeq	r0, r0, pc, lsr #4
    5344:	24c20d50 	strbcs	r0, [r2], #3408	; 0xd50
    5348:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    534c:	00024f02 	andeq	r4, r2, r2, lsl #30
    5350:	0d040000 	stceq	0, cr0, [r4, #-0]
    5354:	000025ec 	andeq	r2, r0, ip, ror #11
    5358:	5402df04 	strpl	sp, [r2], #-3844	; 0xf04
    535c:	00000002 	andeq	r0, r0, r2
    5360:	8c0e0008 	stchi	0, cr0, [lr], {8}
    5364:	3f000000 	svccc	0x00000000
    5368:	0f000002 	svceq	0x00000002
    536c:	00000097 	muleq	r0, r7, r0
    5370:	8c0e00eb 	stchi	0, cr0, [lr], {235}	; 0xeb
    5374:	4f000000 	svcmi	0x00000000
    5378:	0f000002 	svceq	0x00000002
    537c:	00000097 	muleq	r0, r7, r0
    5380:	3f0500ff 	svccc	0x000500ff
    5384:	05000002 	streq	r0, [r0, #-2]
    5388:	0000023f 	andeq	r0, r0, pc, lsr r2
    538c:	0028f609 	eoreq	pc, r8, r9, lsl #12
    5390:	02e00400 	rsceq	r0, r0, #0, 8
    5394:	000000f8 	strdeq	r0, [r0], -r8
    5398:	30052810 	andcc	r2, r5, r0, lsl r8
    539c:	000002e6 	andeq	r0, r0, r6, ror #5
    53a0:	0025b511 	eoreq	fp, r5, r1, lsl r5
    53a4:	8c320500 	cfldr32hi	mvfx0, [r2], #-0
    53a8:	00000000 	andeq	r0, r0, r0
    53ac:	00264611 	eoreq	r4, r6, r1, lsl r6
    53b0:	8c350500 	cfldr32hi	mvfx0, [r5], #-0
    53b4:	04000000 	streq	r0, [r0], #-0
    53b8:	00246611 	eoreq	r6, r4, r1, lsl r6
    53bc:	8c380500 	cfldr32hi	mvfx0, [r8], #-0
    53c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    53c4:	0028be11 	eoreq	fp, r8, r1, lsl lr
    53c8:	8c400500 	cfstr64hi	mvdx0, [r0], {-0}
    53cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    53d0:	0028a011 	eoreq	sl, r8, r1, lsl r0
    53d4:	8c480500 	cfstr64hi	mvdx0, [r8], {-0}
    53d8:	10000000 	andne	r0, r0, r0
    53dc:	00296311 	eoreq	r6, r9, r1, lsl r3
    53e0:	8c500500 	cfldr64hi	mvdx0, [r0], {-0}
    53e4:	14000000 	strne	r0, [r0], #-0
    53e8:	00287b11 	eoreq	r7, r8, r1, lsl fp
    53ec:	8c560500 	cfldr64hi	mvdx0, [r6], {-0}
    53f0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    53f4:	00293e11 	eoreq	r3, r9, r1, lsl lr
    53f8:	8c590500 	cfldr64hi	mvdx0, [r9], {-0}
    53fc:	1c000000 	stcne	0, cr0, [r0], {-0}
    5400:	00266d11 	eoreq	r6, r6, r1, lsl sp
    5404:	8c5c0500 	cfldr64hi	mvdx0, [ip], {-0}
    5408:	20000000 	andcs	r0, r0, r0
    540c:	00259311 	eoreq	r9, r5, r1, lsl r3
    5410:	8c5f0500 	cfldr64hi	mvdx0, [pc], {-0}
    5414:	24000000 	strcs	r0, [r0], #-0
    5418:	27a80300 	strcs	r0, [r8, r0, lsl #6]!
    541c:	61050000 	mrsvs	r0, (UNDEF: 5)
    5420:	00000265 	andeq	r0, r0, r5, ror #4
    5424:	65052c10 	strvs	r2, [r5, #-3088]	; 0xc10
    5428:	0000037e 	andeq	r0, r0, lr, ror r3
    542c:	00252711 	eoreq	r2, r5, r1, lsl r7
    5430:	8c670500 	cfstr64hi	mvdx0, [r7], #-0
    5434:	00000000 	andeq	r0, r0, r0
    5438:	00253211 	eoreq	r3, r5, r1, lsl r2
    543c:	8c6a0500 	cfstr64hi	mvdx0, [sl], #-0
    5440:	04000000 	streq	r0, [r0], #-0
    5444:	0028d011 	eoreq	sp, r8, r1, lsl r0
    5448:	8c6d0500 	cfstr64hi	mvdx0, [sp], #-0
    544c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5450:	0024c911 	eoreq	ip, r4, r1, lsl r9
    5454:	8c700500 	cfldr64hi	mvdx0, [r0], #-0
    5458:	0c000000 	stceq	0, cr0, [r0], {-0}
    545c:	00253c11 	eoreq	r3, r5, r1, lsl ip
    5460:	8c730500 	cfldr64hi	mvdx0, [r3], #-0
    5464:	10000000 	andne	r0, r0, r0
    5468:	00290e11 	eoreq	r0, r9, r1, lsl lr
    546c:	8c760500 	cfldr64hi	mvdx0, [r6], #-0
    5470:	14000000 	strne	r0, [r0], #-0
    5474:	00243911 	eoreq	r3, r4, r1, lsl r9
    5478:	8c790500 	cfldr64hi	mvdx0, [r9], #-0
    547c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5480:	0025a611 	eoreq	sl, r5, r1, lsl r6
    5484:	8c7c0500 	cfldr64hi	mvdx0, [ip], #-0
    5488:	1c000000 	stcne	0, cr0, [r0], {-0}
    548c:	00286b11 	eoreq	r6, r8, r1, lsl fp
    5490:	8c7f0500 	cfldr64hi	mvdx0, [pc], #-0	; 5498 <_Min_Stack_Size+0x5098>
    5494:	20000000 	andcs	r0, r0, r0
    5498:	00247711 	eoreq	r7, r4, r1, lsl r7
    549c:	8c820500 	cfstr32hi	mvfx0, [r2], {0}
    54a0:	24000000 	strcs	r0, [r0], #-0
    54a4:	00298f11 	eoreq	r8, r9, r1, lsl pc
    54a8:	8c850500 	cfstr32hi	mvfx0, [r5], {0}
    54ac:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    54b0:	24510300 	ldrbcs	r0, [r1], #-768	; 0x300
    54b4:	87050000 	strhi	r0, [r5, -r0]
    54b8:	000002f1 	strdeq	r0, [r0], -r1
    54bc:	8a052c10 	bhi	150504 <_Min_Stack_Size+0x150104>
    54c0:	00000416 	andeq	r0, r0, r6, lsl r4
    54c4:	0027c711 	eoreq	ip, r7, r1, lsl r7
    54c8:	8c8c0500 	cfstr32hi	mvfx0, [ip], {0}
    54cc:	00000000 	andeq	r0, r0, r0
    54d0:	00290411 	eoreq	r0, r9, r1, lsl r4
    54d4:	8c8f0500 	cfstr32hi	mvfx0, [pc], {0}
    54d8:	04000000 	streq	r0, [r0], #-0
    54dc:	00278411 	eoreq	r8, r7, r1, lsl r4
    54e0:	8c920500 	cfldr32hi	mvfx0, [r2], {0}
    54e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    54e8:	0024b111 	eoreq	fp, r4, r1, lsl r1
    54ec:	8c950500 	cfldr32hi	mvfx0, [r5], {0}
    54f0:	0c000000 	stceq	0, cr0, [r0], {-0}
    54f4:	00280711 	eoreq	r0, r8, r1, lsl r7
    54f8:	8c980500 	cfldr32hi	mvfx0, [r8], {0}
    54fc:	10000000 	andne	r0, r0, r0
    5500:	00262f11 	eoreq	r2, r6, r1, lsl pc
    5504:	8c9b0500 	cfldr32hi	mvfx0, [fp], {0}
    5508:	14000000 	strne	r0, [r0], #-0
    550c:	00256211 	eoreq	r6, r5, r1, lsl r2
    5510:	8c9e0500 	cfldr32hi	mvfx0, [lr], {0}
    5514:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5518:	0027d211 	eoreq	sp, r7, r1, lsl r2
    551c:	8ca10500 	cfstr32hi	mvfx0, [r1]
    5520:	1c000000 	stcne	0, cr0, [r0], {-0}
    5524:	00258311 	eoreq	r8, r5, r1, lsl r3
    5528:	8ca40500 	cfstr32hi	mvfx0, [r4]
    552c:	20000000 	andcs	r0, r0, r0
    5530:	00297511 	eoreq	r7, r9, r1, lsl r5
    5534:	8ca70500 	cfstr32hi	mvfx0, [r7]
    5538:	24000000 	strcs	r0, [r0], #-0
    553c:	00254f11 	eoreq	r4, r5, r1, lsl pc
    5540:	8caa0500 	cfstr32hi	mvfx0, [sl]
    5544:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5548:	28db0300 	ldmcs	fp, {r8, r9}^
    554c:	ac050000 	stcge	0, cr0, [r5], {-0}
    5550:	00000389 	andeq	r0, r0, r9, lsl #7
    5554:	0025ce12 	eoreq	ip, r5, r2, lsl lr
    5558:	a4690100 	strbtge	r0, [r9], #-256	; 0x100
    555c:	1a08003e 	bne	20565c <_Min_Stack_Size+0x20525c>
    5560:	01000000 	mrseq	r0, (UNDEF: 0)
    5564:	278f139c 			; <UNDEFINED> instruction: 0x278f139c
    5568:	7a010000 	bvc	45570 <_Min_Stack_Size+0x45170>
    556c:	08003ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip, sp}
    5570:	0000015c 	andeq	r0, r0, ip, asr r1
    5574:	048e9c01 	streq	r9, [lr], #3073	; 0xc01
    5578:	db140000 	blle	505580 <_Min_Stack_Size+0x505180>
    557c:	01000025 	tsteq	r0, r5, lsr #32
    5580:	00048e7a 	andeq	r8, r4, sl, ror lr
    5584:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5588:	00257a15 	eoreq	r7, r5, r5, lsl sl
    558c:	8c7d0100 	ldfhie	f0, [sp], #-0
    5590:	02000000 	andeq	r0, r0, #0
    5594:	99157491 	ldmdbls	r5, {r0, r4, r7, sl, ip, sp, lr}
    5598:	01000028 	tsteq	r0, r8, lsr #32
    559c:	00008c7e 	andeq	r8, r0, lr, ror ip
    55a0:	70910200 	addsvc	r0, r1, r0, lsl #4
    55a4:	00269615 	eoreq	r9, r6, r5, lsl r6
    55a8:	8c7f0100 	ldfhie	f0, [pc], #-0	; 55b0 <_Min_Stack_Size+0x51b0>
    55ac:	02000000 	andeq	r0, r0, #0
    55b0:	91156c91 			; <UNDEFINED> instruction: 0x91156c91
    55b4:	01000028 	tsteq	r0, r8, lsr #32
    55b8:	00008c80 	andeq	r8, r0, r0, lsl #25
    55bc:	68910200 	ldmvs	r1, {r9}
    55c0:	e6041600 	str	r1, [r4], -r0, lsl #12
    55c4:	13000002 	movwne	r0, #2
    55c8:	00002602 	andeq	r2, r0, r2, lsl #12
    55cc:	401cd301 	andsmi	sp, ip, r1, lsl #6
    55d0:	004e0800 	subeq	r0, lr, r0, lsl #16
    55d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    55d8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    55dc:	0025db14 	eoreq	sp, r5, r4, lsl fp
    55e0:	8ed30100 	cdphi	1, 13, cr0, cr3, cr0, {0}
    55e4:	02000004 	andeq	r0, r0, #4
    55e8:	17007491 			; <UNDEFINED> instruction: 0x17007491
    55ec:	000027e1 	andeq	r2, r0, r1, ror #15
    55f0:	406cf201 	rsbmi	pc, ip, r1, lsl #4
    55f4:	001c0800 	andseq	r0, ip, r0, lsl #16
    55f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    55fc:	0026c117 	eoreq	ip, r6, r7, lsl r1
    5600:	88fe0100 	ldmhi	lr!, {r8}^
    5604:	1c080040 	stcne	0, cr0, [r8], {64}	; 0x40
    5608:	01000000 	mrseq	r0, (UNDEF: 0)
    560c:	269f189c 			; <UNDEFINED> instruction: 0x269f189c
    5610:	0b010000 	bleq	45618 <_Min_Stack_Size+0x45218>
    5614:	0040a401 	subeq	sl, r0, r1, lsl #8
    5618:	00003808 	andeq	r3, r0, r8, lsl #16
    561c:	009c0100 	addseq	r0, ip, r0, lsl #2
    5620:	19000005 	stmdbne	r0, {r0, r2}
    5624:	00000756 	andeq	r0, r0, r6, asr r7
    5628:	ec010b01 	stc	11, cr0, [r1], {1}
    562c:	02000000 	andeq	r0, r0, #0
    5630:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    5634:	00002652 	andeq	r2, r0, r2, asr r6
    5638:	dc012401 	cfstrsle	mvf2, [r1], {1}
    563c:	dc080040 	stcle	0, cr0, [r8], {64}	; 0x40
    5640:	01000000 	mrseq	r0, (UNDEF: 0)
    5644:	0005809c 	muleq	r5, ip, r0
    5648:	28371900 	ldmdacs	r7!, {r8, fp, ip}
    564c:	24010000 	strcs	r0, [r1], #-0
    5650:	00058001 	andeq	r8, r5, r1
    5654:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5658:	0026801a 	eoreq	r8, r6, sl, lsl r0
    565c:	01270100 	teqeq	r7, r0, lsl #2
    5660:	0000008c 	andeq	r0, r0, ip, lsl #1
    5664:	1a749102 	bne	1d29a74 <_Min_Stack_Size+0x1d29674>
    5668:	000026fb 	strdeq	r2, [r0], -fp
    566c:	8c012801 	stchi	8, cr2, [r1], {1}
    5670:	02000000 	andeq	r0, r0, #0
    5674:	9a1a7091 	bls	6a18c0 <_Min_Stack_Size+0x6a14c0>
    5678:	01000027 	tsteq	r0, r7, lsr #32
    567c:	008c0129 	addeq	r0, ip, r9, lsr #2
    5680:	91020000 	mrsls	r0, (UNDEF: 2)
    5684:	24ee1a6c 	strbtcs	r1, [lr], #2668	; 0xa6c
    5688:	2a010000 	bcs	45690 <_Min_Stack_Size+0x45290>
    568c:	00008c01 	andeq	r8, r0, r1, lsl #24
    5690:	68910200 	ldmvs	r1, {r9}
    5694:	0028b01a 	eoreq	fp, r8, sl, lsl r0
    5698:	012b0100 	teqeq	fp, r0, lsl #2
    569c:	0000008c 	andeq	r0, r0, ip, lsl #1
    56a0:	1a649102 	bne	1929ab0 <_Min_Stack_Size+0x19296b0>
    56a4:	00002983 	andeq	r2, r0, r3, lsl #19
    56a8:	8c012c01 	stchi	12, cr2, [r1], {1}
    56ac:	02000000 	andeq	r0, r0, #0
    56b0:	16006091 			; <UNDEFINED> instruction: 0x16006091
    56b4:	00037e04 	andeq	r7, r3, r4, lsl #28
    56b8:	26ad1800 	strtcs	r1, [sp], r0, lsl #16
    56bc:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    56c0:	0041b801 	subeq	fp, r1, r1, lsl #16
    56c4:	00005408 	andeq	r5, r0, r8, lsl #8
    56c8:	ac9c0100 	ldfges	f0, [ip], {0}
    56cc:	19000005 	stmdbne	r0, {r0, r2}
    56d0:	00002837 	andeq	r2, r0, r7, lsr r8
    56d4:	80015801 	andhi	r5, r1, r1, lsl #16
    56d8:	02000005 	andeq	r0, r0, #5
    56dc:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    56e0:	000025f3 	strdeq	r2, [r0], -r3
    56e4:	0c018501 	cfstr32eq	mvfx8, [r1], {1}
    56e8:	dc080042 	stcle	0, cr0, [r8], {66}	; 0x42
    56ec:	01000000 	mrseq	r0, (UNDEF: 0)
    56f0:	00062c9c 	muleq	r6, ip, ip
    56f4:	25131900 	ldrcs	r1, [r3, #-2304]	; 0x900
    56f8:	85010000 	strhi	r0, [r1, #-0]
    56fc:	00062c01 	andeq	r2, r6, r1, lsl #24
    5700:	5c910200 	lfmpl	f0, 4, [r1], {0}
    5704:	00299c1a 	eoreq	r9, r9, sl, lsl ip
    5708:	01880100 	orreq	r0, r8, r0, lsl #2
    570c:	0000008c 	andeq	r0, r0, ip, lsl #1
    5710:	1a749102 	bne	1d29b20 <_Min_Stack_Size+0x1d29720>
    5714:	00002661 	andeq	r2, r0, r1, ror #12
    5718:	8c018901 	stchi	9, cr8, [r1], {1}
    571c:	02000000 	andeq	r0, r0, #0
    5720:	ad1a7091 	ldcge	0, cr7, [sl, #-580]	; 0xfffffdbc
    5724:	01000029 	tsteq	r0, r9, lsr #32
    5728:	008c018a 	addeq	r0, ip, sl, lsl #3
    572c:	91020000 	mrsls	r0, (UNDEF: 2)
    5730:	26ed1a6c 	strbtcs	r1, [sp], ip, ror #20
    5734:	8b010000 	blhi	4573c <_Min_Stack_Size+0x4533c>
    5738:	00008c01 	andeq	r8, r0, r1, lsl #24
    573c:	68910200 	ldmvs	r1, {r9}
    5740:	0025c01a 	eoreq	ip, r5, sl, lsl r0
    5744:	018c0100 	orreq	r0, ip, r0, lsl #2
    5748:	0000008c 	andeq	r0, r0, ip, lsl #1
    574c:	1a649102 	bne	1929b5c <_Min_Stack_Size+0x192975c>
    5750:	00002778 	andeq	r2, r0, r8, ror r7
    5754:	8c018d01 	stchi	13, cr8, [r1], {1}
    5758:	02000000 	andeq	r0, r0, #0
    575c:	16006091 			; <UNDEFINED> instruction: 0x16006091
    5760:	00041604 	andeq	r1, r4, r4, lsl #12
    5764:	24da1800 	ldrbcs	r1, [sl], #2048	; 0x800
    5768:	ba010000 	blt	45770 <_Min_Stack_Size+0x45370>
    576c:	0042e801 	subeq	lr, r2, r1, lsl #16
    5770:	00005408 	andeq	r5, r0, r8, lsl #8
    5774:	589c0100 	ldmpl	ip, {r8}
    5778:	19000006 	stmdbne	r0, {r1, r2}
    577c:	00002513 	andeq	r2, r0, r3, lsl r5
    5780:	2c01ba01 	stccs	10, cr11, [r1], {1}
    5784:	02000006 	andeq	r0, r0, #6
    5788:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    578c:	00002485 	andeq	r2, r0, r5, lsl #9
    5790:	3c01e501 	cfstr32cc	mvfx14, [r1], {1}
    5794:	38080043 	stmdacc	r8, {r0, r1, r6}
    5798:	01000000 	mrseq	r0, (UNDEF: 0)
    579c:	00067e9c 	muleq	r6, ip, lr
    57a0:	07561900 	ldrbeq	r1, [r6, -r0, lsl #18]
    57a4:	e5010000 	str	r0, [r1, #-0]
    57a8:	0000ec01 	andeq	lr, r0, r1, lsl #24
    57ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    57b0:	242b1800 	strtcs	r1, [fp], #-2048	; 0x800
    57b4:	fd010000 	stc2	0, cr0, [r1, #-0]
    57b8:	00437401 	subeq	r7, r3, r1, lsl #8
    57bc:	00003808 	andeq	r3, r0, r8, lsl #16
    57c0:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    57c4:	19000006 	stmdbne	r0, {r1, r2}
    57c8:	00000756 	andeq	r0, r0, r6, asr r7
    57cc:	ec01fd01 	stc	13, cr15, [r1], {1}
    57d0:	02000000 	andeq	r0, r0, #0
    57d4:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    57d8:	00002822 	andeq	r2, r0, r2, lsr #16
    57dc:	ac021401 	cfstrsge	mvf1, [r2], {1}
    57e0:	54080043 	strpl	r0, [r8], #-67	; 0x43
    57e4:	01000000 	mrseq	r0, (UNDEF: 0)
    57e8:	0006e89c 	muleq	r6, ip, r8
    57ec:	261a1900 	ldrcs	r1, [sl], -r0, lsl #18
    57f0:	14010000 	strne	r0, [r1], #-0
    57f4:	00008c02 	andeq	r8, r0, r2, lsl #24
    57f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    57fc:	00075619 	andeq	r5, r7, r9, lsl r6
    5800:	02140100 	andseq	r0, r4, #0, 2
    5804:	000000ec 	andeq	r0, r0, ip, ror #1
    5808:	1a6b9102 	bne	1ae9c18 <_Min_Stack_Size+0x1ae9818>
    580c:	00002620 	andeq	r2, r0, r0, lsr #12
    5810:	8c021601 	stchi	6, cr1, [r2], {1}
    5814:	02000000 	andeq	r0, r0, #0
    5818:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    581c:	0000275e 	andeq	r2, r0, lr, asr r7
    5820:	00022f01 	andeq	r2, r2, r1, lsl #30
    5824:	1c080044 	stcne	0, cr0, [r8], {68}	; 0x44
    5828:	01000000 	mrseq	r0, (UNDEF: 0)
    582c:	00070e9c 	muleq	r7, ip, lr
    5830:	24fc1900 	ldrbtcs	r1, [ip], #2304	; 0x900
    5834:	2f010000 	svccs	0x00010000
    5838:	00008c02 	andeq	r8, r0, r2, lsl #24
    583c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5840:	26d51800 	ldrbcs	r1, [r5], r0, lsl #16
    5844:	72010000 	andvc	r0, r1, #0
    5848:	00441c02 	subeq	r1, r4, r2, lsl #24
    584c:	00003c08 	andeq	r3, r0, r8, lsl #24
    5850:	439c0100 	orrsmi	r0, ip, #0, 2
    5854:	19000007 	stmdbne	r0, {r0, r1, r2}
    5858:	000026e4 	andeq	r2, r0, r4, ror #13
    585c:	8c027201 	sfmhi	f7, 4, [r2], {1}
    5860:	02000000 	andeq	r0, r0, #0
    5864:	56197491 			; <UNDEFINED> instruction: 0x56197491
    5868:	01000007 	tsteq	r0, r7
    586c:	00ec0272 	rsceq	r0, ip, r2, ror r2
    5870:	91020000 	mrsls	r0, (UNDEF: 2)
    5874:	251b0073 	ldrcs	r0, [fp, #-115]	; 0x73
    5878:	01000029 	tsteq	r0, r9, lsr #32
    587c:	00be0291 	umlalseq	r0, lr, r1, r2
    5880:	44580000 	ldrbmi	r0, [r8], #-0
    5884:	00340800 	eorseq	r0, r4, r0, lsl #16
    5888:	9c010000 	stcls	0, cr0, [r1], {-0}
    588c:	0000077c 	andeq	r0, r0, ip, ror r7
    5890:	0027f519 	eoreq	pc, r7, r9, lsl r5	; <UNPREDICTABLE>
    5894:	02910100 	addseq	r0, r1, #0, 2
    5898:	0000008c 	andeq	r0, r0, ip, lsl #1
    589c:	1a6c9102 	bne	1b29cac <_Min_Stack_Size+0x1b298ac>
    58a0:	00000974 	andeq	r0, r0, r4, ror r9
    58a4:	be029301 	cdplt	3, 0, cr9, cr2, cr1, {0}
    58a8:	02000000 	andeq	r0, r0, #0
    58ac:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    58b0:	00002493 	muleq	r0, r3, r4
    58b4:	8c02b301 	stchi	3, cr11, [r2], {1}
    58b8:	1c080044 	stcne	0, cr0, [r8], {68}	; 0x44
    58bc:	01000000 	mrseq	r0, (UNDEF: 0)
    58c0:	0007a29c 	muleq	r7, ip, r2
    58c4:	27f51900 	ldrbcs	r1, [r5, r0, lsl #18]!
    58c8:	b3010000 	movwlt	r0, #4096	; 0x1000
    58cc:	00008c02 	andeq	r8, r0, r2, lsl #24
    58d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    58d4:	29511b00 	ldmdbcs	r1, {r8, r9, fp, ip}^
    58d8:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    58dc:	0000ca02 	andeq	ip, r0, r2, lsl #20
    58e0:	0044a800 	subeq	sl, r4, r0, lsl #16
    58e4:	00005808 	andeq	r5, r0, r8, lsl #16
    58e8:	ea9c0100 	b	fe705cf0 <_estack+0xde6d5cf0>
    58ec:	19000007 	stmdbne	r0, {r0, r1, r2}
    58f0:	000026e4 	andeq	r2, r0, r4, ror #13
    58f4:	8c02c801 	stchi	8, cr12, [r2], {1}
    58f8:	02000000 	andeq	r0, r0, #0
    58fc:	741a6c91 	ldrvc	r6, [sl], #-3217	; 0xc91
    5900:	01000009 	tsteq	r0, r9
    5904:	00ca02ca 	sbceq	r0, sl, sl, asr #5
    5908:	91020000 	mrsls	r0, (UNDEF: 2)
    590c:	24a31a77 	strtcs	r1, [r3], #2679	; 0xa77
    5910:	cb010000 	blgt	45918 <_Min_Stack_Size+0x45518>
    5914:	00008c02 	andeq	r8, r0, r2, lsl #24
    5918:	70910200 	addsvc	r0, r1, r0, lsl #4
    591c:	284b1800 	stmdacs	fp, {fp, ip}^
    5920:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    5924:	00450002 	subeq	r0, r5, r2
    5928:	00002408 	andeq	r2, r0, r8, lsl #8
    592c:	109c0100 	addsne	r0, ip, r0, lsl #2
    5930:	19000008 	stmdbne	r0, {r3}
    5934:	000026e4 	andeq	r2, r0, r4, ror #13
    5938:	8c02f001 	stchi	0, cr15, [r2], {1}
    593c:	02000000 	andeq	r0, r0, #0
    5940:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
    5944:	00000414 	andeq	r0, r0, r4, lsl r4
    5948:	a306a706 	movwge	sl, #26374	; 0x6706
    594c:	00000000 	andeq	r0, r0, r0
    5950:	00000cf8 	strdeq	r0, [r0], -r8
    5954:	11570004 	cmpne	r7, r4
    5958:	01040000 	mrseq	r0, (UNDEF: 4)
    595c:	0000012a 	andeq	r0, r0, sl, lsr #2
    5960:	0030f901 	eorseq	pc, r0, r1, lsl #18
    5964:	00036900 	andeq	r6, r3, r0, lsl #18
    5968:	00076800 	andeq	r6, r7, r0, lsl #16
    596c:	00000000 	andeq	r0, r0, r0
    5970:	00280200 	eoreq	r0, r8, r0, lsl #4
    5974:	06010200 	streq	r0, [r1], -r0, lsl #4
    5978:	000002a6 	andeq	r0, r0, r6, lsr #5
    597c:	00023303 	andeq	r3, r2, r3, lsl #6
    5980:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    5984:	02000000 	andeq	r0, r0, #0
    5988:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    598c:	02020000 	andeq	r0, r2, #0
    5990:	00003a05 	andeq	r3, r0, r5, lsl #20
    5994:	007c0300 	rsbseq	r0, ip, r0, lsl #6
    5998:	2b020000 	blcs	859a0 <_Min_Stack_Size+0x855a0>
    599c:	00000050 	andeq	r0, r0, r0, asr r0
    59a0:	4b070202 	blmi	1c61b0 <_Min_Stack_Size+0x1c5db0>
    59a4:	03000003 	movweq	r0, #3
    59a8:	00000445 	andeq	r0, r0, r5, asr #8
    59ac:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    59b0:	04020000 	streq	r0, [r2], #-0
    59b4:	00010005 	andeq	r0, r1, r5
    59b8:	00600300 	rsbeq	r0, r0, r0, lsl #6
    59bc:	41020000 	mrsmi	r0, (UNDEF: 2)
    59c0:	00000074 	andeq	r0, r0, r4, ror r0
    59c4:	f5070402 			; <UNDEFINED> instruction: 0xf5070402
    59c8:	02000002 	andeq	r0, r0, #2
    59cc:	00fb0508 	rscseq	r0, fp, r8, lsl #10
    59d0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    59d4:	0002f007 	andeq	pc, r2, r7
    59d8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    59dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    59e0:	fa070402 	blx	1c69f0 <_Min_Stack_Size+0x1c65f0>
    59e4:	03000002 	movweq	r0, #2
    59e8:	00000235 	andeq	r0, r0, r5, lsr r2
    59ec:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    59f0:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
    59f4:	03000000 	movweq	r0, #0
    59f8:	00004536 	andeq	r4, r0, r6, lsr r5
    59fc:	04470300 	strbeq	r0, [r7], #-768	; 0x300
    5a00:	41030000 	mrsmi	r0, (UNDEF: 3)
    5a04:	00000057 	andeq	r0, r0, r7, asr r0
    5a08:	00006203 	andeq	r6, r0, r3, lsl #4
    5a0c:	69420300 	stmdbvs	r2, {r8, r9}^
    5a10:	02000000 	andeq	r0, r0, #0
    5a14:	00440704 	subeq	r0, r4, r4, lsl #14
    5a18:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    5a1c:	06000000 	streq	r0, [r0], -r0
    5a20:	000000b8 	strheq	r0, [r0], -r8
    5a24:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5a28:	0000c307 	andeq	ip, r0, r7, lsl #6
    5a2c:	06000100 	streq	r0, [r0], -r0, lsl #2
    5a30:	000000b8 	strheq	r0, [r0], -r8
    5a34:	000000ef 	andeq	r0, r0, pc, ror #1
    5a38:	0000c307 	andeq	ip, r0, r7, lsl #6
    5a3c:	05000000 	streq	r0, [r0, #-0]
    5a40:	000000ad 	andeq	r0, r0, sp, lsr #1
    5a44:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    5a48:	00010a01 	andeq	r0, r1, r1, lsl #20
    5a4c:	09180900 	ldmdbeq	r8, {r8, fp}
    5a50:	0a000000 	beq	5a58 <_Min_Stack_Size+0x5658>
    5a54:	00544553 	subseq	r4, r4, r3, asr r5
    5a58:	990b0001 	stmdbls	fp, {r0}
    5a5c:	0400001d 	streq	r0, [r0], #-29
    5a60:	00f401f7 	ldrshteq	r0, [r4], #23
    5a64:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    5a68:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    5a6c:	00f401f7 	ldrshteq	r0, [r4], #23
    5a70:	01080000 	mrseq	r0, (UNDEF: 8)
    5a74:	3801f904 	stmdacc	r1, {r2, r8, fp, ip, sp, lr, pc}
    5a78:	09000001 	stmdbeq	r0, {r0}
    5a7c:	0000039d 	muleq	r0, sp, r3
    5a80:	00b20900 	adcseq	r0, r2, r0, lsl #18
    5a84:	00010000 	andeq	r0, r1, r0
    5a88:	00083e0b 	andeq	r3, r8, fp, lsl #28
    5a8c:	01f90400 	mvnseq	r0, r0, lsl #8
    5a90:	00000122 	andeq	r0, r0, r2, lsr #2
    5a94:	1b044c0c 	blne	118acc <_Min_Stack_Size+0x1186cc>
    5a98:	00022b04 	andeq	r2, r2, r4, lsl #22
    5a9c:	06550d00 	ldrbeq	r0, [r5], -r0, lsl #26
    5aa0:	1d040000 	stcne	0, cr0, [r4, #-0]
    5aa4:	0000cf04 	andeq	ip, r0, r4, lsl #30
    5aa8:	130d0000 	movwne	r0, #53248	; 0xd000
    5aac:	04000030 	streq	r0, [r0], #-48	; 0x30
    5ab0:	00ca041e 	sbceq	r0, sl, lr, lsl r4
    5ab4:	0d080000 	stceq	0, cr0, [r8, #-0]
    5ab8:	00002f87 	andeq	r2, r0, r7, lsl #31
    5abc:	ca041f04 	bgt	10d6d4 <_Min_Stack_Size+0x10d2d4>
    5ac0:	0c000000 	stceq	0, cr0, [r0], {-0}
    5ac4:	002df60d 	eoreq	pc, sp, sp, lsl #12
    5ac8:	04200400 	strteq	r0, [r0], #-1024	; 0x400
    5acc:	000000ca 	andeq	r0, r0, sl, asr #1
    5ad0:	2d770d10 	ldclcs	13, cr0, [r7, #-64]!	; 0xffffffc0
    5ad4:	21040000 	mrscs	r0, (UNDEF: 4)
    5ad8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5adc:	470e1400 	strmi	r1, [lr, -r0, lsl #8]
    5ae0:	04005243 	streq	r5, [r0], #-579	; 0x243
    5ae4:	00ca0422 	sbceq	r0, sl, r2, lsr #8
    5ae8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    5aec:	0000065f 	andeq	r0, r0, pc, asr r6
    5af0:	cf042304 	svcgt	0x00042304
    5af4:	1c000000 	stcne	0, cr0, [r0], {-0}
    5af8:	002d8c0d 	eoreq	r8, sp, sp, lsl #24
    5afc:	04240400 	strteq	r0, [r4], #-1024	; 0x400
    5b00:	000000ca 	andeq	r0, r0, sl, asr #1
    5b04:	06690d24 	strbteq	r0, [r9], -r4, lsr #26
    5b08:	25040000 	strcs	r0, [r4, #-0]
    5b0c:	0000df04 	andeq	sp, r0, r4, lsl #30
    5b10:	0a0d2800 	beq	34fb18 <_Min_Stack_Size+0x34f718>
    5b14:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    5b18:	00ca0426 	sbceq	r0, sl, r6, lsr #8
    5b1c:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    5b20:	00000555 	andeq	r0, r0, r5, asr r5
    5b24:	df042704 	svcle	0x00042704
    5b28:	30000000 	andcc	r0, r0, r0
    5b2c:	5245490e 	subpl	r4, r5, #229376	; 0x38000
    5b30:	04280400 	strteq	r0, [r8], #-1024	; 0x400
    5b34:	000000ca 	andeq	r0, r0, sl, asr #1
    5b38:	53490e34 	movtpl	r0, #40500	; 0x9e34
    5b3c:	29040052 	stmdbcs	r4, {r1, r4, r6}
    5b40:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5b44:	490e3800 	stmdbmi	lr, {fp, ip, sp}
    5b48:	04005243 	streq	r5, [r0], #-579	; 0x243
    5b4c:	00ca042a 	sbceq	r0, sl, sl, lsr #8
    5b50:	0d3c0000 	ldceq	0, cr0, [ip, #-0]
    5b54:	00002f35 	andeq	r2, r0, r5, lsr pc
    5b58:	ca042b04 	bgt	110770 <_Min_Stack_Size+0x110370>
    5b5c:	40000000 	andmi	r0, r0, r0
    5b60:	002f820d 	eoreq	r8, pc, sp, lsl #4
    5b64:	042c0400 	strteq	r0, [ip], #-1024	; 0x400
    5b68:	000000ca 	andeq	r0, r0, sl, asr #1
    5b6c:	30d80d44 	sbcscc	r0, r8, r4, asr #26
    5b70:	2d040000 	stccs	0, cr0, [r4, #-0]
    5b74:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5b78:	0b004800 	bleq	17b80 <_Min_Stack_Size+0x17780>
    5b7c:	00002abd 			; <UNDEFINED> instruction: 0x00002abd
    5b80:	44042e04 	strmi	r2, [r4], #-3588	; 0xe04
    5b84:	0c000001 	stceq	0, cr0, [r0], {1}
    5b88:	04340444 	ldrteq	r0, [r4], #-1092	; 0x444
    5b8c:	000002f6 	strdeq	r0, [r0], -r6
    5b90:	0052430e 	subseq	r4, r2, lr, lsl #6
    5b94:	ca043604 	bgt	1133ac <_Min_Stack_Size+0x112fac>
    5b98:	00000000 	andeq	r0, r0, r0
    5b9c:	002cde0d 	eoreq	sp, ip, sp, lsl #28
    5ba0:	04370400 	ldrteq	r0, [r7], #-1024	; 0x400
    5ba4:	000000ca 	andeq	r0, r0, sl, asr #1
    5ba8:	2ae00d04 	bcs	ff808fc0 <_estack+0xdf7d8fc0>
    5bac:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    5bb0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5bb4:	990d0800 	stmdbls	sp, {fp}
    5bb8:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    5bbc:	00ca0439 	sbceq	r0, sl, r9, lsr r4
    5bc0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    5bc4:	000031a5 	andeq	r3, r0, r5, lsr #3
    5bc8:	ca043a04 	bgt	1143e0 <_Min_Stack_Size+0x113fe0>
    5bcc:	10000000 	andne	r0, r0, r0
    5bd0:	002be20d 	eoreq	lr, fp, sp, lsl #4
    5bd4:	043b0400 	ldrteq	r0, [fp], #-1024	; 0x400
    5bd8:	000000ca 	andeq	r0, r0, sl, asr #1
    5bdc:	30a60d14 	adccc	r0, r6, r4, lsl sp
    5be0:	3c040000 	stccc	0, cr0, [r4], {-0}
    5be4:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5be8:	bb0d1800 	bllt	34bbf0 <_Min_Stack_Size+0x34b7f0>
    5bec:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    5bf0:	00ca043d 	sbceq	r0, sl, sp, lsr r4
    5bf4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    5bf8:	00000655 	andeq	r0, r0, r5, asr r6
    5bfc:	cf043e04 	svcgt	0x00043e04
    5c00:	20000000 	andcs	r0, r0, r0
    5c04:	002eb30d 	eoreq	fp, lr, sp, lsl #6
    5c08:	043f0400 	ldrteq	r0, [pc], #-1024	; 5c10 <_Min_Stack_Size+0x5810>
    5c0c:	000000ca 	andeq	r0, r0, sl, asr #1
    5c10:	2a0f0d28 	bcs	3c90b8 <_Min_Stack_Size+0x3c8cb8>
    5c14:	40040000 	andmi	r0, r4, r0
    5c18:	0000ca04 	andeq	ip, r0, r4, lsl #20
    5c1c:	d20d2c00 	andle	r2, sp, #0, 24
    5c20:	04000029 	streq	r0, [r0], #-41	; 0x29
    5c24:	00ca0441 	sbceq	r0, sl, r1, asr #8
    5c28:	0d300000 	ldceq	0, cr0, [r0, #-0]
    5c2c:	0000065f 	andeq	r0, r0, pc, asr r6
    5c30:	f6044204 			; <UNDEFINED> instruction: 0xf6044204
    5c34:	34000002 	strcc	r0, [r0], #-2
    5c38:	002d5f0d 	eoreq	r5, sp, sp, lsl #30
    5c3c:	04430400 	strbeq	r0, [r3], #-1024	; 0x400
    5c40:	000000ca 	andeq	r0, r0, sl, asr #1
    5c44:	b8060040 	stmdalt	r6, {r6}
    5c48:	06000000 	streq	r0, [r0], -r0
    5c4c:	07000003 	streq	r0, [r0, -r3]
    5c50:	000000c3 	andeq	r0, r0, r3, asr #1
    5c54:	c30b0002 	movwgt	r0, #45058	; 0xb002
    5c58:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    5c5c:	02370445 	eorseq	r0, r7, #1157627904	; 0x45000000
    5c60:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    5c64:	03cf3005 	biceq	r3, pc, #5
    5c68:	e6100000 	ldr	r0, [r0], -r0
    5c6c:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    5c70:	0000b832 	andeq	fp, r0, r2, lsr r8
    5c74:	5e100000 	cdppl	0, 1, cr0, cr0, cr0, {0}
    5c78:	05000031 	streq	r0, [r0, #-49]	; 0x31
    5c7c:	0000b835 	andeq	fp, r0, r5, lsr r8
    5c80:	33100400 	tstcc	r0, #0, 8
    5c84:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5c88:	0000b838 	andeq	fp, r0, r8, lsr r8
    5c8c:	9e100800 	cdpls	8, 1, cr0, cr0, cr0, {0}
    5c90:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5c94:	0000b83b 	andeq	fp, r0, fp, lsr r8
    5c98:	af100c00 	svcge	0x00100c00
    5c9c:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5ca0:	0000b83e 	andeq	fp, r0, lr, lsr r8
    5ca4:	5d101000 	ldcpl	0, cr1, [r0, #-0]
    5ca8:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5cac:	0000b841 	andeq	fp, r0, r1, asr #16
    5cb0:	d5101400 	ldrle	r1, [r0, #-1024]	; 0x400
    5cb4:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5cb8:	0000b844 	andeq	fp, r0, r4, asr #16
    5cbc:	20101800 	andscs	r1, r0, r0, lsl #16
    5cc0:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5cc4:	0000b847 	andeq	fp, r0, r7, asr #16
    5cc8:	5a101c00 	bpl	40ccd0 <_Min_Stack_Size+0x40c8d0>
    5ccc:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5cd0:	0000b84a 	andeq	fp, r0, sl, asr #16
    5cd4:	8f102000 	svchi	0x00102000
    5cd8:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    5cdc:	0000b84d 	andeq	fp, r0, sp, asr #16
    5ce0:	7c102400 	cfldrsvc	mvf2, [r0], {-0}
    5ce4:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5ce8:	0000b850 	andeq	fp, r0, r0, asr r8
    5cec:	e9102800 	ldmdb	r0, {fp, sp}
    5cf0:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5cf4:	0000b853 	andeq	fp, r0, r3, asr r8
    5cf8:	ac102c00 	ldcge	12, cr2, [r0], {-0}
    5cfc:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5d00:	0000b856 	andeq	fp, r0, r6, asr r8
    5d04:	06103000 	ldreq	r3, [r0], -r0
    5d08:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5d0c:	0000b859 	andeq	fp, r0, r9, asr r8
    5d10:	b6103400 	ldrlt	r3, [r0], -r0, lsl #8
    5d14:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5d18:	0000b85c 	andeq	fp, r0, ip, asr r8
    5d1c:	03003800 	movweq	r3, #2048	; 0x800
    5d20:	000031bb 			; <UNDEFINED> instruction: 0x000031bb
    5d24:	03125e05 	tsteq	r2, #5, 28	; 0x50
    5d28:	400f0000 	andmi	r0, pc, r0
    5d2c:	04a36405 	strteq	r6, [r3], #1029	; 0x405
    5d30:	3f100000 	svccc	0x00100000
    5d34:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5d38:	0000b866 	andeq	fp, r0, r6, ror #16
    5d3c:	80100000 	andshi	r0, r0, r0
    5d40:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5d44:	0000b869 	andeq	fp, r0, r9, ror #16
    5d48:	7c100400 	cfldrsvc	mvf0, [r0], {-0}
    5d4c:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    5d50:	0000b86c 	andeq	fp, r0, ip, ror #16
    5d54:	10100800 	andsne	r0, r0, r0, lsl #16
    5d58:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5d5c:	0000b86f 	andeq	fp, r0, pc, ror #16
    5d60:	43100c00 	tstmi	r0, #0, 24
    5d64:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5d68:	0000b872 	andeq	fp, r0, r2, ror r8
    5d6c:	1b101000 	blne	409d74 <_Min_Stack_Size+0x409974>
    5d70:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5d74:	0000b875 	andeq	fp, r0, r5, ror r8
    5d78:	34101400 	ldrcc	r1, [r0], #-1024	; 0x400
    5d7c:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5d80:	0000b878 	andeq	fp, r0, r8, ror r8
    5d84:	e4101800 	ldr	r1, [r0], #-2048	; 0x800
    5d88:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5d8c:	0000b87b 	andeq	fp, r0, fp, ror r8
    5d90:	67101c00 	ldrvs	r1, [r0, -r0, lsl #24]
    5d94:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    5d98:	0000b87e 	andeq	fp, r0, lr, ror r8
    5d9c:	1e102000 	cdpne	0, 1, cr2, cr0, cr0, {0}
    5da0:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5da4:	0000b881 	andeq	fp, r0, r1, lsl #17
    5da8:	7a102400 	bvc	40edb0 <_Min_Stack_Size+0x40e9b0>
    5dac:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5db0:	0000b884 	andeq	fp, r0, r4, lsl #17
    5db4:	90102800 	andsls	r2, r0, r0, lsl #16
    5db8:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5dbc:	0000b887 	andeq	fp, r0, r7, lsl #17
    5dc0:	53102c00 	tstpl	r0, #0, 24
    5dc4:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    5dc8:	0000b88a 	andeq	fp, r0, sl, lsl #17
    5dcc:	4a103000 	bmi	411dd4 <_Min_Stack_Size+0x4119d4>
    5dd0:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5dd4:	0000b88c 	andeq	fp, r0, ip, lsl #17
    5dd8:	6e103400 	cfmulsvs	mvf3, mvf0, mvf0
    5ddc:	05000031 	streq	r0, [r0, #-49]	; 0x31
    5de0:	0000b88f 	andeq	fp, r0, pc, lsl #17
    5de4:	6f103800 	svcvs	0x00103800
    5de8:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5dec:	0000b892 	muleq	r0, r2, r8
    5df0:	03003c00 	movweq	r3, #3072	; 0xc00
    5df4:	000029bb 			; <UNDEFINED> instruction: 0x000029bb
    5df8:	03da9405 	bicseq	r9, sl, #83886080	; 0x5000000
    5dfc:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    5e00:	04cf9a05 	strbeq	r9, [pc], #2565	; 5e08 <_Min_Stack_Size+0x5a08>
    5e04:	44100000 	ldrmi	r0, [r0], #-0
    5e08:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5e0c:	0000b89c 	muleq	r0, ip, r8
    5e10:	4e100000 	cdpmi	0, 1, cr0, cr0, cr0, {0}
    5e14:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5e18:	0000b89d 	muleq	r0, sp, r8
    5e1c:	03000400 	movweq	r0, #1024	; 0x400
    5e20:	0000305e 	andeq	r3, r0, lr, asr r0
    5e24:	04ae9e05 	strteq	r9, [lr], #3589	; 0xe05
    5e28:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    5e2c:	0507a005 	streq	sl, [r7, #-5]
    5e30:	cf100000 	svcgt	0x00100000
    5e34:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    5e38:	0000b8a2 	andeq	fp, r0, r2, lsr #17
    5e3c:	8c100000 	ldchi	0, cr0, [r0], {-0}
    5e40:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5e44:	0000b8a3 	andeq	fp, r0, r3, lsr #17
    5e48:	0d100400 	cfldrseq	mvf0, [r0, #-0]
    5e4c:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5e50:	0000b8a4 	andeq	fp, r0, r4, lsr #17
    5e54:	03000800 	movweq	r0, #2048	; 0x800
    5e58:	000030c8 	andeq	r3, r0, r8, asr #1
    5e5c:	04daa505 	ldrbeq	sl, [sl], #1285	; 0x505
    5e60:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    5e64:	053fa705 	ldreq	sl, [pc, #-1797]!	; 5767 <_Min_Stack_Size+0x5367>
    5e68:	01100000 	tsteq	r0, r0
    5e6c:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5e70:	0000b8a9 	andeq	fp, r0, r9, lsr #17
    5e74:	f6100000 			; <UNDEFINED> instruction: 0xf6100000
    5e78:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5e7c:	0000b8ac 	andeq	fp, r0, ip, lsr #17
    5e80:	66100400 	ldrvs	r0, [r0], -r0, lsl #8
    5e84:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    5e88:	0000b8af 	andeq	fp, r0, pc, lsr #17
    5e8c:	03000800 	movweq	r0, #2048	; 0x800
    5e90:	00002d22 	andeq	r2, r0, r2, lsr #26
    5e94:	0512b105 	ldreq	fp, [r2, #-261]	; 0x105
    5e98:	100f0000 	andne	r0, pc, r0
    5e9c:	0583b305 	streq	fp, [r3, #773]	; 0x305
    5ea0:	43100000 	tstmi	r0, #0
    5ea4:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    5ea8:	0000b8b5 			; <UNDEFINED> instruction: 0x0000b8b5
    5eac:	e7100000 	ldr	r0, [r0, -r0]
    5eb0:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    5eb4:	0000b8b8 			; <UNDEFINED> instruction: 0x0000b8b8
    5eb8:	d7100400 	ldrle	r0, [r0, -r0, lsl #8]
    5ebc:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    5ec0:	0000b8bb 			; <UNDEFINED> instruction: 0x0000b8bb
    5ec4:	dd100800 	ldcle	8, cr0, [r0, #-0]
    5ec8:	05000030 	streq	r0, [r0, #-48]	; 0x30
    5ecc:	0000b8be 			; <UNDEFINED> instruction: 0x0000b8be
    5ed0:	03000c00 	movweq	r0, #3072	; 0xc00
    5ed4:	00002e2e 	andeq	r2, r0, lr, lsr #28
    5ed8:	054ac005 	strbeq	ip, [sl, #-5]
    5edc:	f0110000 			; <UNDEFINED> instruction: 0xf0110000
    5ee0:	01000029 	tsteq	r0, r9, lsr #32
    5ee4:	0045247b 	subeq	r2, r5, fp, ror r4
    5ee8:	00001a08 	andeq	r1, r0, r8, lsl #20
    5eec:	129c0100 	addsne	r0, ip, #0, 2
    5ef0:	00002f65 	andeq	r2, r0, r5, ror #30
    5ef4:	45408c01 	strbmi	r8, [r0, #-3073]	; 0xc01
    5ef8:	012c0800 	teqeq	ip, r0, lsl #16
    5efc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f00:	00000617 	andeq	r0, r0, r7, lsl r6
    5f04:	002af613 	eoreq	pc, sl, r3, lsl r6	; <UNPREDICTABLE>
    5f08:	178c0100 	strne	r0, [ip, r0, lsl #2]
    5f0c:	02000006 	andeq	r0, r0, #6
    5f10:	34145c91 	ldrcc	r5, [r4], #-3217	; 0xc91
    5f14:	0100002b 	tsteq	r0, fp, lsr #32
    5f18:	0000b88e 	andeq	fp, r0, lr, lsl #17
    5f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5f20:	002dc014 	eoreq	ip, sp, r4, lsl r0
    5f24:	b88f0100 	stmlt	pc, {r8}	; <UNPREDICTABLE>
    5f28:	02000000 	andeq	r0, r0, #0
    5f2c:	15147091 	ldrne	r7, [r4, #-145]	; 0x91
    5f30:	0100002a 	tsteq	r0, sl, lsr #32
    5f34:	0000b890 	muleq	r0, r0, r8
    5f38:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5f3c:	002d5414 	eoreq	r5, sp, r4, lsl r4
    5f40:	b8910100 	ldmlt	r1, {r8}
    5f44:	02000000 	andeq	r0, r0, #0
    5f48:	2a146891 	bcs	520194 <_Min_Stack_Size+0x51fd94>
    5f4c:	0100002c 	tsteq	r0, ip, lsr #32
    5f50:	0000b892 	muleq	r0, r2, r8
    5f54:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5f58:	002b9f14 	eoreq	r9, fp, r4, lsl pc
    5f5c:	b8930100 	ldmlt	r3, {r8}
    5f60:	02000000 	andeq	r0, r0, #0
    5f64:	15006091 	strne	r6, [r0, #-145]	; 0x91
    5f68:	0003cf04 	andeq	ip, r3, r4, lsl #30
    5f6c:	2c941200 	lfmcs	f1, 4, [r4], {0}
    5f70:	cd010000 	stcgt	0, cr0, [r1, #-0]
    5f74:	0800466c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, lr}
    5f78:	0000006c 	andeq	r0, r0, ip, rrx
    5f7c:	06419c01 	strbeq	r9, [r1], -r1, lsl #24
    5f80:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
    5f84:	0100002a 	tsteq	r0, sl, lsr #32
    5f88:	000617cd 	andeq	r1, r6, sp, asr #15
    5f8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5f90:	2b901200 	blcs	fe40a798 <_estack+0xde3da798>
    5f94:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    5f98:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
    5f9c:	00000038 	andeq	r0, r0, r8, lsr r0
    5fa0:	06659c01 	strbteq	r9, [r5], -r1, lsl #24
    5fa4:	56130000 	ldrpl	r0, [r3], -r0
    5fa8:	01000007 	tsteq	r0, r7
    5fac:	000138e8 	andeq	r3, r1, r8, ror #17
    5fb0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5fb4:	2e801600 	cdpcs	6, 8, cr1, cr0, cr0, {0}
    5fb8:	00010000 	andeq	r0, r1, r0
    5fbc:	00471001 	subeq	r1, r7, r1
    5fc0:	00003808 	andeq	r3, r0, r8, lsl #16
    5fc4:	8b9c0100 	blhi	fe7063cc <_estack+0xde6d63cc>
    5fc8:	17000006 	strne	r0, [r0, -r6]
    5fcc:	00000756 	andeq	r0, r0, r6, asr r7
    5fd0:	38010001 	stmdacc	r1, {r0}
    5fd4:	02000001 	andeq	r0, r0, #1
    5fd8:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    5fdc:	000031aa 	andeq	r3, r0, sl, lsr #3
    5fe0:	07011801 	streq	r1, [r1, -r1, lsl #16]
    5fe4:	48000005 	stmdami	r0, {r0, r2}
    5fe8:	58080047 	stmdapl	r8, {r0, r1, r2, r6}
    5fec:	01000000 	mrseq	r0, (UNDEF: 0)
    5ff0:	0006b59c 	muleq	r6, ip, r5
    5ff4:	314a1900 	cmpcc	sl, r0, lsl #18
    5ff8:	1a010000 	bne	46000 <_Min_Stack_Size+0x45c00>
    5ffc:	00050701 	andeq	r0, r5, r1, lsl #14
    6000:	6c910200 	lfmvs	f0, 4, [r1], {0}
    6004:	2f031600 	svccs	0x00031600
    6008:	2c010000 	stccs	0, cr0, [r1], {-0}
    600c:	0047a001 	subeq	sl, r7, r1
    6010:	00002408 	andeq	r2, r0, r8, lsl #8
    6014:	db9c0100 	blle	fe70641c <_estack+0xde6d641c>
    6018:	17000006 	strne	r0, [r0, -r6]
    601c:	0000314a 	andeq	r3, r0, sl, asr #2
    6020:	db012c01 	blle	5102c <_Min_Stack_Size+0x50c2c>
    6024:	02000006 	andeq	r0, r0, #6
    6028:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    602c:	00050704 	andeq	r0, r5, r4, lsl #14
    6030:	30b91600 	adcscc	r1, r9, r0, lsl #12
    6034:	3a010000 	bcc	4603c <_Min_Stack_Size+0x45c3c>
    6038:	0047c401 	subeq	ip, r7, r1, lsl #8
    603c:	00001c08 	andeq	r1, r0, r8, lsl #24
    6040:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    6044:	17000007 	strne	r0, [r0, -r7]
    6048:	00002aca 	andeq	r2, r0, sl, asr #21
    604c:	b8013a01 	stmdalt	r1, {r0, r9, fp, ip, sp}
    6050:	02000000 	andeq	r0, r0, #0
    6054:	16007491 			; <UNDEFINED> instruction: 0x16007491
    6058:	00002ca4 	andeq	r2, r0, r4, lsr #25
    605c:	e0014c01 	and	r4, r1, r1, lsl #24
    6060:	1c080047 	stcne	0, cr0, [r8], {71}	; 0x47
    6064:	01000000 	mrseq	r0, (UNDEF: 0)
    6068:	00072d9c 	muleq	r7, ip, sp
    606c:	306e1700 	rsbcc	r1, lr, r0, lsl #14
    6070:	4c010000 	stcmi	0, cr0, [r1], {-0}
    6074:	0000b801 	andeq	fp, r0, r1, lsl #16
    6078:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    607c:	2b431600 	blcs	10cb884 <_Min_Stack_Size+0x10cb484>
    6080:	61010000 	mrsvs	r0, (UNDEF: 1)
    6084:	0047fc01 	subeq	pc, r7, r1, lsl #24
    6088:	00013208 	andeq	r3, r1, r8, lsl #4
    608c:	bc9c0100 	ldflts	f0, [ip], {0}
    6090:	17000007 	strne	r0, [r0, -r7]
    6094:	00002bd6 	ldrdeq	r2, [r0], -r6
    6098:	bc016101 	stflts	f6, [r1], {1}
    609c:	02000007 	andeq	r0, r0, #7
    60a0:	c1175c91 			; <UNDEFINED> instruction: 0xc1175c91
    60a4:	0100002e 	tsteq	r0, lr, lsr #32
    60a8:	07c20161 	strbeq	r0, [r2, r1, ror #2]
    60ac:	91020000 	mrsls	r0, (UNDEF: 2)
    60b0:	2ff91958 	svccs	0x00f91958
    60b4:	64010000 	strvs	r0, [r1], #-0
    60b8:	0000b801 	andeq	fp, r0, r1, lsl #16
    60bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    60c0:	002ba719 	eoreq	sl, fp, r9, lsl r7
    60c4:	01650100 	cmneq	r5, r0, lsl #2
    60c8:	000000b8 	strheq	r0, [r0], -r8
    60cc:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    60d0:	0000317c 	andeq	r3, r0, ip, ror r1
    60d4:	b8016601 	stmdalt	r1, {r0, r9, sl, sp, lr}
    60d8:	02000000 	andeq	r0, r0, #0
    60dc:	99196c91 	ldmdbls	r9, {r0, r4, r7, sl, fp, sp, lr}
    60e0:	0100002b 	tsteq	r0, fp, lsr #32
    60e4:	00b80167 	adcseq	r0, r8, r7, ror #2
    60e8:	91020000 	mrsls	r0, (UNDEF: 2)
    60ec:	2b521968 	blcs	148c694 <_Min_Stack_Size+0x148c294>
    60f0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    60f4:	0000b801 	andeq	fp, r0, r1, lsl #16
    60f8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    60fc:	002efe19 	eoreq	pc, lr, r9, lsl lr	; <UNPREDICTABLE>
    6100:	01690100 	cmneq	r9, r0, lsl #2
    6104:	000000b8 	strheq	r0, [r0], -r8
    6108:	00609102 	rsbeq	r9, r0, r2, lsl #2
    610c:	03060415 	movweq	r0, #25621	; 0x6415
    6110:	04150000 	ldreq	r0, [r5], #-0
    6114:	000004a3 	andeq	r0, r0, r3, lsr #9
    6118:	002e5816 	eoreq	r5, lr, r6, lsl r8
    611c:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
    6120:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
    6124:	00000074 	andeq	r0, r0, r4, ror r0
    6128:	07ee9c01 	strbeq	r9, [lr, r1, lsl #24]!
    612c:	c1170000 	tstgt	r7, r0
    6130:	0100002e 	tsteq	r0, lr, lsr #32
    6134:	07c201af 	strbeq	r0, [r2, pc, lsr #3]
    6138:	91020000 	mrsls	r0, (UNDEF: 2)
    613c:	eb160074 	bl	586314 <_Min_Stack_Size+0x585f14>
    6140:	01000030 	tsteq	r0, r0, lsr r0
    6144:	49a401e0 	stmibmi	r4!, {r5, r6, r7, r8}
    6148:	00360800 	eorseq	r0, r6, r0, lsl #16
    614c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6150:	00000823 	andeq	r0, r0, r3, lsr #16
    6154:	002bd617 	eoreq	sp, fp, r7, lsl r6
    6158:	01e00100 	mvneq	r0, r0, lsl #2
    615c:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    6160:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    6164:	00000756 	andeq	r0, r0, r6, asr r7
    6168:	3801e001 	stmdacc	r1, {r0, sp, lr, pc}
    616c:	02000001 	andeq	r0, r0, #1
    6170:	18007391 	stmdane	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    6174:	00002dfb 	strdeq	r2, [r0], -fp
    6178:	cf01f901 	svcgt	0x0001f901
    617c:	dc000004 	stcle	0, cr0, [r0], {4}
    6180:	40080049 	andmi	r0, r8, r9, asr #32
    6184:	01000000 	mrseq	r0, (UNDEF: 0)
    6188:	00084d9c 	muleq	r8, ip, sp
    618c:	2dcf1900 	stclcs	9, cr1, [pc]	; 6194 <_Min_Stack_Size+0x5d94>
    6190:	fb010000 	blx	4619a <_Min_Stack_Size+0x45d9a>
    6194:	0004cf01 	andeq	ip, r4, r1, lsl #30
    6198:	70910200 	addsvc	r0, r1, r0, lsl #4
    619c:	2de31600 	stclcs	6, cr1, [r3]
    61a0:	0c010000 	stceq	0, cr0, [r1], {-0}
    61a4:	004a1c02 	subeq	r1, sl, r2, lsl #24
    61a8:	00001e08 	andeq	r1, r0, r8, lsl #28
    61ac:	739c0100 	orrsvc	r0, ip, #0, 2
    61b0:	17000008 	strne	r0, [r0, -r8]
    61b4:	00002dcf 	andeq	r2, r0, pc, asr #27
    61b8:	73020c01 	movwvc	r0, #11265	; 0x2c01
    61bc:	02000008 	andeq	r0, r0, #8
    61c0:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    61c4:	0004cf04 	andeq	ip, r4, r4, lsl #30
    61c8:	2c091800 	stccs	8, cr1, [r9], {-0}
    61cc:	1d010000 	stcne	0, cr0, [r1, #-0]
    61d0:	00010a02 	andeq	r0, r1, r2, lsl #20
    61d4:	004a3c00 	subeq	r3, sl, r0, lsl #24
    61d8:	00003008 	andeq	r3, r0, r8
    61dc:	b29c0100 	addslt	r0, ip, #0, 2
    61e0:	17000008 	strne	r0, [r0, -r8]
    61e4:	00002f16 	andeq	r2, r0, r6, lsl pc
    61e8:	b8021d01 	stmdalt	r2, {r0, r8, sl, fp, ip}
    61ec:	02000000 	andeq	r0, r0, #0
    61f0:	74196c91 	ldrvc	r6, [r9], #-3217	; 0xc91
    61f4:	01000009 	tsteq	r0, r9
    61f8:	010a021f 	tsteq	sl, pc, lsl r2
    61fc:	91020000 	mrsls	r0, (UNDEF: 2)
    6200:	d9160077 	ldmdble	r6, {r0, r1, r2, r4, r5, r6}
    6204:	01000029 	tsteq	r0, r9, lsr #32
    6208:	4a6c0238 	bmi	1b06af0 <_Min_Stack_Size+0x1b066f0>
    620c:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    6210:	9c010000 	stcls	0, cr0, [r1], {-0}
    6214:	00000914 	andeq	r0, r0, r4, lsl r9
    6218:	002bd617 	eoreq	sp, fp, r7, lsl r6
    621c:	02380100 	eorseq	r0, r8, #0, 2
    6220:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    6224:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    6228:	00002a37 	andeq	r2, r0, r7, lsr sl
    622c:	14023801 	strne	r3, [r2], #-2049	; 0x801
    6230:	02000009 	andeq	r0, r0, #9
    6234:	56176891 			; <UNDEFINED> instruction: 0x56176891
    6238:	01000007 	tsteq	r0, r7
    623c:	01380238 	teqeq	r8, r8, lsr r2
    6240:	91020000 	mrsls	r0, (UNDEF: 2)
    6244:	2c2c1967 	stccs	9, cr1, [ip], #-412	; 0xfffffe64
    6248:	3a010000 	bcc	46250 <_Min_Stack_Size+0x45e50>
    624c:	0000b802 	andeq	fp, r0, r2, lsl #16
    6250:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6254:	002ba119 	eoreq	sl, fp, r9, lsl r1
    6258:	023b0100 	eorseq	r0, fp, #0, 2
    625c:	000000b8 	strheq	r0, [r0], -r8
    6260:	00709102 	rsbseq	r9, r0, r2, lsl #2
    6264:	053f0415 	ldreq	r0, [pc, #-1045]!	; 5e57 <_Min_Stack_Size+0x5a57>
    6268:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    626c:	01000030 	tsteq	r0, r0, lsr r0
    6270:	4ae8025f 	bmi	ffa06bf4 <_estack+0xdf9d6bf4>
    6274:	00240800 	eoreq	r0, r4, r0, lsl #16
    6278:	9c010000 	stcls	0, cr0, [r1], {-0}
    627c:	00000940 	andeq	r0, r0, r0, asr #18
    6280:	002a3717 	eoreq	r3, sl, r7, lsl r7
    6284:	025f0100 	subseq	r0, pc, #0, 2
    6288:	00000914 	andeq	r0, r0, r4, lsl r9
    628c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6290:	002dae16 	eoreq	sl, sp, r6, lsl lr
    6294:	02710100 	rsbseq	r0, r1, #0, 2
    6298:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
    629c:	00000040 	andeq	r0, r0, r0, asr #32
    62a0:	09759c01 	ldmdbeq	r5!, {r0, sl, fp, ip, pc}^
    62a4:	d6170000 	ldrle	r0, [r7], -r0
    62a8:	0100002b 	tsteq	r0, fp, lsr #32
    62ac:	07bc0271 			; <UNDEFINED> instruction: 0x07bc0271
    62b0:	91020000 	mrsls	r0, (UNDEF: 2)
    62b4:	07561774 			; <UNDEFINED> instruction: 0x07561774
    62b8:	71010000 	mrsvc	r0, (UNDEF: 1)
    62bc:	00013802 	andeq	r3, r1, r2, lsl #16
    62c0:	73910200 	orrsvc	r0, r1, #0, 4
    62c4:	29fc1600 	ldmibcs	ip!, {r9, sl, ip}^
    62c8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    62cc:	004b4c02 	subeq	r4, fp, r2, lsl #24
    62d0:	00004c08 	andeq	r4, r0, r8, lsl #24
    62d4:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    62d8:	17000009 	strne	r0, [r0, -r9]
    62dc:	00002bd6 	ldrdeq	r2, [r0], -r6
    62e0:	bc028e01 	stclt	14, cr8, [r2], {1}
    62e4:	02000007 	andeq	r0, r0, #7
    62e8:	fb176491 	blx	5df536 <_Min_Stack_Size+0x5df136>
    62ec:	0100002c 	tsteq	r0, ip, lsr #32
    62f0:	09d7028e 	ldmibeq	r7, {r1, r2, r3, r7, r9}^
    62f4:	91020000 	mrsls	r0, (UNDEF: 2)
    62f8:	317e1960 	cmncc	lr, r0, ror #18
    62fc:	90010000 	andls	r0, r1, r0
    6300:	0000b802 	andeq	fp, r0, r2, lsl #16
    6304:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6308:	6465721a 	strbtvs	r7, [r5], #-538	; 0x21a
    630c:	02910100 	addseq	r0, r1, #0, 2
    6310:	000000b8 	strheq	r0, [r0], -r8
    6314:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    6318:	00002eb9 			; <UNDEFINED> instruction: 0x00002eb9
    631c:	b8029201 	stmdalt	r2, {r0, r9, ip, pc}
    6320:	02000000 	andeq	r0, r0, #0
    6324:	15006c91 	strne	r6, [r0, #-3217]	; 0xc91
    6328:	00058304 	andeq	r8, r5, r4, lsl #6
    632c:	2e8f1600 	cdpcs	6, 8, cr1, cr15, cr0, {0}
    6330:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    6334:	004b9802 	subeq	r9, fp, r2, lsl #16
    6338:	00002a08 	andeq	r2, r0, r8, lsl #20
    633c:	039c0100 	orrseq	r0, ip, #0, 2
    6340:	1700000a 	strne	r0, [r0, -sl]
    6344:	00002cfb 	strdeq	r2, [r0], -fp
    6348:	d702a901 	strle	sl, [r2, -r1, lsl #18]
    634c:	02000009 	andeq	r0, r0, #9
    6350:	16007491 			; <UNDEFINED> instruction: 0x16007491
    6354:	00003184 	andeq	r3, r0, r4, lsl #3
    6358:	c402bd01 	strgt	fp, [r2], #-3329	; 0xd01
    635c:	dc08004b 	stcle	0, cr0, [r8], {75}	; 0x4b
    6360:	01000000 	mrseq	r0, (UNDEF: 0)
    6364:	000aa19c 	muleq	sl, ip, r1
    6368:	2bd61700 	blcs	ff58bf70 <_estack+0xdf55bf70>
    636c:	bd010000 	stclt	0, cr0, [r1, #-0]
    6370:	0007bc02 	andeq	fp, r7, r2, lsl #24
    6374:	5c910200 	lfmpl	f0, 4, [r1], {0}
    6378:	002f9c17 	eoreq	r9, pc, r7, lsl ip	; <UNPREDICTABLE>
    637c:	02bd0100 	adcseq	r0, sp, #0, 2
    6380:	000000a2 	andeq	r0, r0, r2, lsr #1
    6384:	175a9102 	ldrbne	r9, [sl, -r2, lsl #2]
    6388:	00002fa4 	andeq	r2, r0, r4, lsr #31
    638c:	a202bd01 	andge	fp, r2, #1, 26	; 0x40
    6390:	02000000 	andeq	r0, r0, #0
    6394:	3b195891 	blcc	65c5e0 <_Min_Stack_Size+0x65c1e0>
    6398:	0100002f 	tsteq	r0, pc, lsr #32
    639c:	00b802c0 	adcseq	r0, r8, r0, asr #5
    63a0:	91020000 	mrsls	r0, (UNDEF: 2)
    63a4:	08f81970 	ldmeq	r8!, {r4, r5, r6, r8, fp, ip}^
    63a8:	c0010000 	andgt	r0, r1, r0
    63ac:	0000b802 	andeq	fp, r0, r2, lsl #16
    63b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    63b4:	002fc419 	eoreq	ip, pc, r9, lsl r4	; <UNPREDICTABLE>
    63b8:	02c10100 	sbceq	r0, r1, #0, 2
    63bc:	000000b8 	strheq	r0, [r0], -r8
    63c0:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    63c4:	00002c1a 	andeq	r2, r0, sl, lsl ip
    63c8:	b802c201 	stmdalt	r2, {r0, r9, lr, pc}
    63cc:	02000000 	andeq	r0, r0, #0
    63d0:	81196491 			; <UNDEFINED> instruction: 0x81196491
    63d4:	0100002b 	tsteq	r0, fp, lsr #32
    63d8:	00b802c3 	adcseq	r0, r8, r3, asr #5
    63dc:	91020000 	mrsls	r0, (UNDEF: 2)
    63e0:	30ab1968 	adccc	r1, fp, r8, ror #18
    63e4:	c4010000 	strgt	r0, [r1], #-0
    63e8:	0000b802 	andeq	fp, r0, r2, lsl #16
    63ec:	60910200 	addsvs	r0, r1, r0, lsl #4
    63f0:	2ea31600 	cdpcs	6, 10, cr1, cr3, cr0, {0}
    63f4:	fa010000 	blx	463fc <_Min_Stack_Size+0x45ffc>
    63f8:	004ca002 	subeq	sl, ip, r2
    63fc:	00001c08 	andeq	r1, r0, r8, lsl #24
    6400:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    6404:	1700000a 	strne	r0, [r0, -sl]
    6408:	00002bd6 	ldrdeq	r2, [r0], -r6
    640c:	bc02fa01 	stclt	10, cr15, [r2], {1}
    6410:	02000007 	andeq	r0, r0, #7
    6414:	20177491 	mulscs	r7, r1, r4
    6418:	0100002e 	tsteq	r0, lr, lsr #32
    641c:	009702fa 			; <UNDEFINED> instruction: 0x009702fa
    6420:	91020000 	mrsls	r0, (UNDEF: 2)
    6424:	53160073 	tstpl	r6, #115	; 0x73
    6428:	0100002f 	tsteq	r0, pc, lsr #32
    642c:	4cbc0309 	ldcmi	3, cr0, [ip], #36	; 0x24
    6430:	001a0800 	andseq	r0, sl, r0, lsl #16
    6434:	9c010000 	stcls	0, cr0, [r1], {-0}
    6438:	00000b0b 	andeq	r0, r0, fp, lsl #22
    643c:	002bd617 	eoreq	sp, fp, r7, lsl r6
    6440:	03090100 	movweq	r0, #37120	; 0x9100
    6444:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    6448:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    644c:	00001407 	andeq	r1, r0, r7, lsl #8
    6450:	b8030901 	stmdalt	r3, {r0, r8, fp}
    6454:	02000000 	andeq	r0, r0, #0
    6458:	16007091 			; <UNDEFINED> instruction: 0x16007091
    645c:	00002b72 	andeq	r2, r0, r2, ror fp
    6460:	d8031901 	stmdale	r3, {r0, r8, fp, ip}
    6464:	ca08004c 	bgt	20659c <_Min_Stack_Size+0x20619c>
    6468:	01000000 	mrseq	r0, (UNDEF: 0)
    646c:	000ba99c 	muleq	fp, ip, r9
    6470:	2bd61700 	blcs	ff58c078 <_estack+0xdf55c078>
    6474:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    6478:	0007bc03 	andeq	fp, r7, r3, lsl #24
    647c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    6480:	0031b517 	eorseq	fp, r1, r7, lsl r5
    6484:	03190100 	tsteq	r9, #0, 2
    6488:	000000b8 	strheq	r0, [r0], -r8
    648c:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
    6490:	000003f3 	strdeq	r0, [r0], -r3
    6494:	b8031901 	stmdalt	r3, {r0, r8, fp, ip}
    6498:	02000000 	andeq	r0, r0, #0
    649c:	f8195491 			; <UNDEFINED> instruction: 0xf8195491
    64a0:	01000008 	tsteq	r0, r8
    64a4:	0097031c 	addseq	r0, r7, ip, lsl r3
    64a8:	91020000 	mrsls	r0, (UNDEF: 2)
    64ac:	2f3b1977 	svccs	0x003b1977
    64b0:	1d010000 	stcne	0, cr0, [r1, #-0]
    64b4:	0000b803 	andeq	fp, r0, r3, lsl #16
    64b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    64bc:	002fc419 	eoreq	ip, pc, r9, lsl r4	; <UNPREDICTABLE>
    64c0:	031e0100 	tsteq	lr, #0, 2
    64c4:	000000b8 	strheq	r0, [r0], -r8
    64c8:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    64cc:	00002c1a 	andeq	r2, r0, sl, lsl ip
    64d0:	b8031f01 	stmdalt	r3, {r0, r8, r9, sl, fp, ip}
    64d4:	02000000 	andeq	r0, r0, #0
    64d8:	81196891 			; <UNDEFINED> instruction: 0x81196891
    64dc:	0100002b 	tsteq	r0, fp, lsr #32
    64e0:	00b80320 	adcseq	r0, r8, r0, lsr #6
    64e4:	91020000 	mrsls	r0, (UNDEF: 2)
    64e8:	30ab1964 	adccc	r1, fp, r4, ror #18
    64ec:	21010000 	mrscs	r0, (UNDEF: 1)
    64f0:	0000b803 	andeq	fp, r0, r3, lsl #16
    64f4:	60910200 	addsvs	r0, r1, r0, lsl #4
    64f8:	2aa71600 	bcs	fe9cbd00 <_estack+0xde99bd00>
    64fc:	57010000 	strpl	r0, [r1, -r0]
    6500:	004da403 	subeq	sl, sp, r3, lsl #8
    6504:	0000c008 	andeq	ip, r0, r8
    6508:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    650c:	1700000b 	strne	r0, [r0, -fp]
    6510:	00002bd6 	ldrdeq	r2, [r0], -r6
    6514:	bc035701 	stclt	7, cr5, [r3], {1}
    6518:	02000007 	andeq	r0, r0, #7
    651c:	48176c91 	ldmdami	r7, {r0, r4, r7, sl, fp, sp, lr}
    6520:	01000030 	tsteq	r0, r0, lsr r0
    6524:	00b80357 	adcseq	r0, r8, r7, asr r3
    6528:	91020000 	mrsls	r0, (UNDEF: 2)
    652c:	08f81968 	ldmeq	r8!, {r3, r5, r6, r8, fp, ip}^
    6530:	5a010000 	bpl	46538 <_Min_Stack_Size+0x46138>
    6534:	00009703 	andeq	r9, r0, r3, lsl #14
    6538:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    653c:	002f3b19 	eoreq	r3, pc, r9, lsl fp	; <UNPREDICTABLE>
    6540:	035b0100 	cmpeq	fp, #0, 2
    6544:	000000b8 	strheq	r0, [r0], -r8
    6548:	00709102 	rsbseq	r9, r0, r2, lsl #2
    654c:	00319716 	eorseq	r9, r1, r6, lsl r7
    6550:	03c90100 	biceq	r0, r9, #0, 2
    6554:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
    6558:	0000003c 	andeq	r0, r0, ip, lsr r0
    655c:	0c319c01 	ldceq	12, cr9, [r1], #-4
    6560:	91170000 	tstls	r7, r0
    6564:	0100002d 	tsteq	r0, sp, lsr #32
    6568:	00b803c9 	adcseq	r0, r8, r9, asr #7
    656c:	91020000 	mrsls	r0, (UNDEF: 2)
    6570:	07561774 			; <UNDEFINED> instruction: 0x07561774
    6574:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    6578:	00013803 	andeq	r3, r1, r3, lsl #16
    657c:	73910200 	orrsvc	r0, r1, #0, 4
    6580:	2e6d1800 	cdpcs	8, 6, cr1, cr13, cr0, {0}
    6584:	e3010000 	movw	r0, #4096	; 0x1000
    6588:	00010a03 	andeq	r0, r1, r3, lsl #20
    658c:	004ea000 	subeq	sl, lr, r0
    6590:	00003408 	andeq	r3, r0, r8, lsl #8
    6594:	6a9c0100 	bvs	fe70699c <_estack+0xde6d699c>
    6598:	1700000c 	strne	r0, [r0, -ip]
    659c:	00003054 	andeq	r3, r0, r4, asr r0
    65a0:	b803e301 	stmdalt	r3, {r0, r8, r9, sp, lr, pc}
    65a4:	02000000 	andeq	r0, r0, #0
    65a8:	74196c91 	ldrvc	r6, [r9], #-3217	; 0xc91
    65ac:	01000009 	tsteq	r0, r9
    65b0:	010a03e5 	smlatteq	sl, r5, r3, r0
    65b4:	91020000 	mrsls	r0, (UNDEF: 2)
    65b8:	28160077 	ldmdacs	r6, {r0, r1, r2, r4, r5, r6}
    65bc:	0100002a 	tsteq	r0, sl, lsr #32
    65c0:	4ed403ff 	mrcmi	3, 6, r0, cr4, cr15, {7}
    65c4:	001c0800 	andseq	r0, ip, r0, lsl #16
    65c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    65cc:	00000c90 	muleq	r0, r0, ip
    65d0:	00305417 	eorseq	r5, r0, r7, lsl r4
    65d4:	03ff0100 	mvnseq	r0, #0, 2
    65d8:	000000b8 	strheq	r0, [r0], -r8
    65dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    65e0:	002c6f18 	eoreq	r6, ip, r8, lsl pc
    65e4:	04120100 	ldreq	r0, [r2], #-256	; 0x100
    65e8:	00000116 	andeq	r0, r0, r6, lsl r1
    65ec:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
    65f0:	00000050 	andeq	r0, r0, r0, asr r0
    65f4:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    65f8:	91170000 	tstls	r7, r0
    65fc:	0100002d 	tsteq	r0, sp, lsr #32
    6600:	00b80412 	adcseq	r0, r8, r2, lsl r4
    6604:	91020000 	mrsls	r0, (UNDEF: 2)
    6608:	0974196c 	ldmdbeq	r4!, {r2, r3, r5, r6, r8, fp, ip}^
    660c:	14010000 	strne	r0, [r1], #-0
    6610:	00011604 	andeq	r1, r1, r4, lsl #12
    6614:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    6618:	2ee71600 	cdpcs	6, 14, cr1, cr7, cr0, {0}
    661c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    6620:	004f4004 	subeq	r4, pc, r4
    6624:	00001c08 	andeq	r1, r0, r8, lsl #24
    6628:	ef9c0100 	svc	0x009c0100
    662c:	1700000c 	strne	r0, [r0, -ip]
    6630:	00002d91 	muleq	r0, r1, sp
    6634:	b8043801 	stmdalt	r4, {r0, fp, ip, sp}
    6638:	02000000 	andeq	r0, r0, #0
    663c:	1b007491 	blne	23888 <_Min_Stack_Size+0x23488>
    6640:	00000414 	andeq	r0, r0, r4, lsl r4
    6644:	ef06a706 	svc	0x0006a706
    6648:	00000000 	andeq	r0, r0, r0
    664c:	00000c86 	andeq	r0, r0, r6, lsl #25
    6650:	12e70004 	rscne	r0, r7, #4
    6654:	01040000 	mrseq	r0, (UNDEF: 4)
    6658:	0000012a 	andeq	r0, r0, sl, lsr #2
    665c:	0032cb01 	eorseq	ip, r2, r1, lsl #22
    6660:	00036900 	andeq	r6, r3, r0, lsl #18
    6664:	00086000 	andeq	r6, r8, r0
    6668:	00000000 	andeq	r0, r0, r0
    666c:	002cbb00 	eoreq	fp, ip, r0, lsl #22
    6670:	06010200 	streq	r0, [r1], -r0, lsl #4
    6674:	000002a6 	andeq	r0, r0, r6, lsr #5
    6678:	a4080102 	strge	r0, [r8], #-258	; 0x102
    667c:	02000002 	andeq	r0, r0, #2
    6680:	003a0502 	eorseq	r0, sl, r2, lsl #10
    6684:	02020000 	andeq	r0, r2, #0
    6688:	00034b07 	andeq	r4, r3, r7, lsl #22
    668c:	04450300 	strbeq	r0, [r5], #-768	; 0x300
    6690:	3f020000 	svccc	0x00020000
    6694:	0000004c 	andeq	r0, r0, ip, asr #32
    6698:	00050402 	andeq	r0, r5, r2, lsl #8
    669c:	03000001 	movweq	r0, #1
    66a0:	00000060 	andeq	r0, r0, r0, rrx
    66a4:	005e4102 	subseq	r4, lr, r2, lsl #2
    66a8:	04020000 	streq	r0, [r2], #-0
    66ac:	0002f507 	andeq	pc, r2, r7, lsl #10
    66b0:	05080200 	streq	r0, [r8, #-512]	; 0x200
    66b4:	000000fb 	strdeq	r0, [r0], -fp
    66b8:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
    66bc:	04000002 	streq	r0, [r0], #-2
    66c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    66c4:	04020074 	streq	r0, [r2], #-116	; 0x74
    66c8:	0002fa07 	andeq	pc, r2, r7, lsl #20
    66cc:	04470300 	strbeq	r0, [r7], #-768	; 0x300
    66d0:	41030000 	mrsmi	r0, (UNDEF: 3)
    66d4:	00000041 	andeq	r0, r0, r1, asr #32
    66d8:	00006203 	andeq	r6, r0, r3, lsl #4
    66dc:	53420300 	movtpl	r0, #8960	; 0x2300
    66e0:	05000000 	streq	r0, [r0, #-0]
    66e4:	0000008c 	andeq	r0, r0, ip, lsl #1
    66e8:	000000a7 	andeq	r0, r0, r7, lsr #1
    66ec:	0000a706 	andeq	sl, r0, r6, lsl #14
    66f0:	02000700 	andeq	r0, r0, #0, 14
    66f4:	00440704 	subeq	r0, r4, r4, lsl #14
    66f8:	8c070000 	stchi	0, cr0, [r7], {-0}
    66fc:	05000000 	streq	r0, [r0, #-0]
    6700:	0000008c 	andeq	r0, r0, ip, lsl #1
    6704:	000000c3 	andeq	r0, r0, r3, asr #1
    6708:	0000a706 	andeq	sl, r0, r6, lsl #14
    670c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6710:	00000081 	andeq	r0, r0, r1, lsl #1
    6714:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    6718:	0000de01 	andeq	sp, r0, r1, lsl #28
    671c:	09180900 	ldmdbeq	r8, {r8, fp}
    6720:	0a000000 	beq	6728 <_Min_Stack_Size+0x6328>
    6724:	00544553 	subseq	r4, r4, r3, asr r5
    6728:	990b0001 	stmdbls	fp, {r0}
    672c:	0400001d 	streq	r0, [r0], #-29
    6730:	00c801f7 	strdeq	r0, [r8], #23
    6734:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    6738:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    673c:	00c801f7 	strdeq	r0, [r8], #23
    6740:	01080000 	mrseq	r0, (UNDEF: 8)
    6744:	0c01f904 	stceq	9, cr15, [r1], {4}
    6748:	09000001 	stmdbeq	r0, {r0}
    674c:	0000039d 	muleq	r0, sp, r3
    6750:	00b20900 	adcseq	r0, r2, r0, lsl #18
    6754:	00010000 	andeq	r0, r1, r0
    6758:	00083e0b 	andeq	r3, r8, fp, lsl #28
    675c:	01f90400 	mvnseq	r0, r0, lsl #8
    6760:	000000f6 	strdeq	r0, [r0], -r6
    6764:	8b04200c 	blhi	10e79c <_Min_Stack_Size+0x10e39c>
    6768:	00012f03 	andeq	r2, r1, r3, lsl #30
    676c:	3a970d00 	bcc	fe5c9b74 <_estack+0xde599b74>
    6770:	8d040000 	stchi	0, cr0, [r4, #-0]
    6774:	00012f03 	andeq	r2, r1, r3, lsl #30
    6778:	07000000 	streq	r0, [r0, -r0]
    677c:	00000097 	muleq	r0, r7, r0
    6780:	00332f0b 	eorseq	r2, r3, fp, lsl #30
    6784:	038e0400 	orreq	r0, lr, #0, 8
    6788:	00000118 	andeq	r0, r0, r8, lsl r1
    678c:	94041c0c 	strls	r1, [r4], #-3084	; 0xc0c
    6790:	00015703 	andeq	r5, r1, r3, lsl #14
    6794:	38810d00 	stmcc	r1, {r8, sl, fp}
    6798:	96040000 	strls	r0, [r4], -r0
    679c:	00016703 	andeq	r6, r1, r3, lsl #14
    67a0:	05000000 	streq	r0, [r0, #-0]
    67a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    67a8:	00000167 	andeq	r0, r0, r7, ror #2
    67ac:	0000a706 	andeq	sl, r0, r6, lsl #14
    67b0:	07000600 	streq	r0, [r0, -r0, lsl #12]
    67b4:	00000157 	andeq	r0, r0, r7, asr r1
    67b8:	00377d0b 	eorseq	r7, r7, fp, lsl #26
    67bc:	03970400 	orrseq	r0, r7, #0, 8
    67c0:	00000140 	andeq	r0, r0, r0, asr #2
    67c4:	9d04180c 	stcls	8, cr1, [r4, #-48]	; 0xffffffd0
    67c8:	0001d003 	andeq	sp, r1, r3
    67cc:	36810d00 	strcc	r0, [r1], r0, lsl #26
    67d0:	9f040000 	svcls	0x00040000
    67d4:	0000ae03 	andeq	sl, r0, r3, lsl #28
    67d8:	530e0000 	movwpl	r0, #57344	; 0xe000
    67dc:	04003252 	streq	r3, [r0], #-594	; 0x252
    67e0:	00ae03a0 	adceq	r0, lr, r0, lsr #7
    67e4:	0d040000 	stceq	0, cr0, [r4, #-0]
    67e8:	000031cc 	andeq	r3, r0, ip, asr #3
    67ec:	ae03a104 	mvfges	f2, f4
    67f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    67f4:	0036eb0d 	eorseq	lr, r6, sp, lsl #22
    67f8:	03a20400 			; <UNDEFINED> instruction: 0x03a20400
    67fc:	000000ae 	andeq	r0, r0, lr, lsr #1
    6800:	06550d0c 	ldrbeq	r0, [r5], -ip, lsl #26
    6804:	a3040000 	movwge	r0, #16384	; 0x4000
    6808:	00008c03 	andeq	r8, r0, r3, lsl #24
    680c:	b20d1000 	andlt	r1, sp, #0
    6810:	04000033 	streq	r0, [r0], #-51	; 0x33
    6814:	00ae03a4 	adceq	r0, lr, r4, lsr #7
    6818:	00140000 	andseq	r0, r4, r0
    681c:	0034db0b 	eorseq	sp, r4, fp, lsl #22
    6820:	03a50400 			; <UNDEFINED> instruction: 0x03a50400
    6824:	00000178 	andeq	r0, r0, r8, ror r1
    6828:	ab04180c 	blge	10c860 <_Min_Stack_Size+0x10c460>
    682c:	00023403 	andeq	r3, r2, r3, lsl #8
    6830:	36860d00 	strcc	r0, [r6], r0, lsl #26
    6834:	ad040000 	stcge	0, cr0, [r4, #-0]
    6838:	0000ae03 	andeq	sl, r0, r3, lsl #28
    683c:	530e0000 	movwpl	r0, #57344	; 0xe000
    6840:	04003352 	streq	r3, [r0], #-850	; 0x352
    6844:	00ae03ae 	adceq	r0, lr, lr, lsr #7
    6848:	0d040000 	stceq	0, cr0, [r4, #-0]
    684c:	00003248 	andeq	r3, r0, r8, asr #4
    6850:	ae03af04 	cdpge	15, 0, cr10, cr3, cr4, {0}
    6854:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6858:	0036f10d 	eorseq	pc, r6, sp, lsl #2
    685c:	03b00400 	movseq	r0, #0, 8
    6860:	000000ae 	andeq	r0, r0, lr, lsr #1
    6864:	06550d0c 	ldrbeq	r0, [r5], -ip, lsl #26
    6868:	b1040000 	mrslt	r0, (UNDEF: 4)
    686c:	00008c03 	andeq	r8, r0, r3, lsl #24
    6870:	850d1000 	strhi	r1, [sp, #-0]
    6874:	04000033 	streq	r0, [r0], #-51	; 0x33
    6878:	00ae03b2 	strhteq	r0, [lr], r2
    687c:	00140000 	andseq	r0, r4, r0
    6880:	0037480b 	eorseq	r4, r7, fp, lsl #16
    6884:	03b30400 			; <UNDEFINED> instruction: 0x03b30400
    6888:	000001dc 	ldrdeq	r0, [r0], -ip
    688c:	b904140c 	stmdblt	r4, {r2, r3, sl, ip}
    6890:	00028b03 	andeq	r8, r2, r3, lsl #22
    6894:	368b0d00 	strcc	r0, [fp], r0, lsl #26
    6898:	bb040000 	bllt	1068a0 <_Min_Stack_Size+0x1064a0>
    689c:	0000ae03 	andeq	sl, r0, r3, lsl #28
    68a0:	530e0000 	movwpl	r0, #57344	; 0xe000
    68a4:	04003452 	streq	r3, [r0], #-1106	; 0x452
    68a8:	00ae03bc 	strhteq	r0, [lr], ip
    68ac:	0d040000 	stceq	0, cr0, [r4, #-0]
    68b0:	000031e3 	andeq	r3, r0, r3, ror #3
    68b4:	ae03bd04 	cdpge	13, 0, cr11, cr3, cr4, {0}
    68b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    68bc:	0038520d 	eorseq	r5, r8, sp, lsl #4
    68c0:	03be0400 			; <UNDEFINED> instruction: 0x03be0400
    68c4:	000000ae 	andeq	r0, r0, lr, lsr #1
    68c8:	3a6f0d0c 	bcc	1bc9d00 <_Min_Stack_Size+0x1bc9900>
    68cc:	bf040000 	svclt	0x00040000
    68d0:	0000ae03 	andeq	sl, r0, r3, lsl #28
    68d4:	0b001000 	bleq	a8dc <_Min_Stack_Size+0xa4dc>
    68d8:	000037bb 			; <UNDEFINED> instruction: 0x000037bb
    68dc:	4003c004 	andmi	ip, r3, r4
    68e0:	0c000002 	stceq	0, cr0, [r0], {2}
    68e4:	03c6041c 	biceq	r0, r6, #28, 8	; 0x1c000000
    68e8:	000002e2 	andeq	r0, r0, r2, ror #5
    68ec:	0031f70d 	eorseq	pc, r1, sp, lsl #14
    68f0:	03c80400 	biceq	r0, r8, #0, 8
    68f4:	000002e2 	andeq	r0, r0, r2, ror #5
    68f8:	33460d00 	movtcc	r0, #27904	; 0x6d00
    68fc:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    6900:	0002e703 	andeq	lr, r2, r3, lsl #14
    6904:	2c0d0800 	stccs	8, cr0, [sp], {-0}
    6908:	04000035 	streq	r0, [r0], #-53	; 0x35
    690c:	00ae03ca 	adceq	r0, lr, sl, asr #7
    6910:	0d100000 	ldceq	0, cr0, [r0, #-0]
    6914:	00003280 	andeq	r3, r0, r0, lsl #5
    6918:	ae03cb04 	vmlage.f64	d12, d3, d4
    691c:	14000000 	strne	r0, [r0], #-0
    6920:	0033410d 	eorseq	r4, r3, sp, lsl #2
    6924:	03cc0400 	biceq	r0, ip, #0, 8
    6928:	000000ae 	andeq	r0, r0, lr, lsr #1
    692c:	b3070018 	movwlt	r0, #28696	; 0x7018
    6930:	07000000 	streq	r0, [r0, -r0]
    6934:	000000b3 	strheq	r0, [r0], -r3
    6938:	0031fc0b 	eorseq	pc, r1, fp, lsl #24
    693c:	03cd0400 	biceq	r0, sp, #0, 8
    6940:	00000297 	muleq	r0, r7, r2
    6944:	2f051c0f 	svccs	0x00051c0f
    6948:	00000355 	andeq	r0, r0, r5, asr r3
    694c:	00382b10 	eorseq	r2, r8, r0, lsl fp
    6950:	8c310500 	cfldr32hi	mvfx0, [r1], #-0
    6954:	00000000 	andeq	r0, r0, r0
    6958:	00366210 	eorseq	r6, r6, r0, lsl r2
    695c:	8c360500 	cfldr32hi	mvfx0, [r6], #-0
    6960:	04000000 	streq	r0, [r0], #-0
    6964:	00349810 	eorseq	r9, r4, r0, lsl r8
    6968:	8c3b0500 	cfldr32hi	mvfx0, [fp], #-0
    696c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6970:	00361a10 	eorseq	r1, r6, r0, lsl sl
    6974:	8c400500 	cfstr64hi	mvdx0, [r0], {-0}
    6978:	0c000000 	stceq	0, cr0, [r0], {-0}
    697c:	003a8710 	eorseq	r8, sl, r0, lsl r7
    6980:	8c450500 	cfstr64hi	mvdx0, [r5], {-0}
    6984:	10000000 	andne	r0, r0, r0
    6988:	0038cc10 	eorseq	ip, r8, r0, lsl ip
    698c:	8c490500 	cfstr64hi	mvdx0, [r9], {-0}
    6990:	14000000 	strne	r0, [r0], #-0
    6994:	00370c10 	eorseq	r0, r7, r0, lsl ip
    6998:	8c510500 	cfldr64hi	mvdx0, [r1], {-0}
    699c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    69a0:	372b0300 	strcc	r0, [fp, -r0, lsl #6]!
    69a4:	53050000 	movwpl	r0, #20480	; 0x5000
    69a8:	000002f8 	strdeq	r0, [r0], -r8
    69ac:	5805400f 	stmdapl	r5, {r0, r1, r2, r3, lr}
    69b0:	00000429 	andeq	r0, r0, r9, lsr #8
    69b4:	0037a510 	eorseq	sl, r7, r0, lsl r5
    69b8:	8c5a0500 	cfldr64hi	mvdx0, [sl], {-0}
    69bc:	00000000 	andeq	r0, r0, r0
    69c0:	003a7410 	eorseq	r7, sl, r0, lsl r4
    69c4:	8c5d0500 	cfldr64hi	mvdx0, [sp], {-0}
    69c8:	04000000 	streq	r0, [r0], #-0
    69cc:	00385810 	eorseq	r5, r8, r0, lsl r8
    69d0:	8c610500 	cfstr64hi	mvdx0, [r1], #-0
    69d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    69d8:	00399010 	eorseq	r9, r9, r0, lsl r0
    69dc:	8c650500 	cfstr64hi	mvdx0, [r5], #-0
    69e0:	0c000000 	stceq	0, cr0, [r0], {-0}
    69e4:	0034ff10 	eorseq	pc, r4, r0, lsl pc	; <UNPREDICTABLE>
    69e8:	8c680500 	cfstr64hi	mvdx0, [r8], #-0
    69ec:	10000000 	andne	r0, r0, r0
    69f0:	00324e10 	eorseq	r4, r2, r0, lsl lr
    69f4:	8c6c0500 	cfstr64hi	mvdx0, [ip], #-0
    69f8:	14000000 	strne	r0, [r0], #-0
    69fc:	0037ae10 	eorseq	sl, r7, r0, lsl lr
    6a00:	8c700500 	cfldr64hi	mvdx0, [r0], #-0
    6a04:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6a08:	00355310 	eorseq	r5, r5, r0, lsl r3
    6a0c:	8c740500 	cfldr64hi	mvdx0, [r4], #-0
    6a10:	1c000000 	stcne	0, cr0, [r0], {-0}
    6a14:	0035fa10 	eorseq	pc, r5, r0, lsl sl	; <UNPREDICTABLE>
    6a18:	8c790500 	cfldr64hi	mvdx0, [r9], #-0
    6a1c:	20000000 	andcs	r0, r0, r0
    6a20:	00365310 	eorseq	r5, r6, r0, lsl r3
    6a24:	8c7c0500 	cfldr64hi	mvdx0, [ip], #-0
    6a28:	24000000 	strcs	r0, [r0], #-0
    6a2c:	0031d210 	eorseq	sp, r1, r0, lsl r2
    6a30:	8c800500 	cfstr32hi	mvfx0, [r0], {0}
    6a34:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6a38:	0039e310 	eorseq	lr, r9, r0, lsl r3
    6a3c:	8c830500 	cfstr32hi	mvfx0, [r3], {0}
    6a40:	2c000000 	stccs	0, cr0, [r0], {-0}
    6a44:	00375a10 	eorseq	r5, r7, r0, lsl sl
    6a48:	8c870500 	cfstr32hi	mvfx0, [r7], {0}
    6a4c:	30000000 	andcc	r0, r0, r0
    6a50:	0032a210 	eorseq	sl, r2, r0, lsl r2
    6a54:	8c8a0500 	cfstr32hi	mvfx0, [sl], {0}
    6a58:	34000000 	strcc	r0, [r0], #-0
    6a5c:	00386710 	eorseq	r6, r8, r0, lsl r7
    6a60:	29900500 	ldmibcs	r0, {r8, sl}
    6a64:	38000004 	stmdacc	r0, {r2}
    6a68:	0033eb10 	eorseq	lr, r3, r0, lsl fp
    6a6c:	29920500 	ldmibcs	r2, {r8, sl}
    6a70:	3c000004 	stccc	0, cr0, [r0], {4}
    6a74:	55041100 	strpl	r1, [r4, #-256]	; 0x100
    6a78:	03000003 	movweq	r0, #3
    6a7c:	0000334b 	andeq	r3, r0, fp, asr #6
    6a80:	03609305 	cmneq	r0, #335544320	; 0x14000000
    6a84:	100f0000 	andne	r0, pc, r0
    6a88:	04739805 	ldrbteq	r9, [r3], #-2053	; 0x805
    6a8c:	68100000 	ldmdavs	r0, {}	; <UNPREDICTABLE>
    6a90:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6a94:	00008c9a 	muleq	r0, sl, ip
    6a98:	ab100000 	blge	406aa0 <_Min_Stack_Size+0x4066a0>
    6a9c:	05000038 	streq	r0, [r0, #-56]	; 0x38
    6aa0:	00008ca0 	andeq	r8, r0, r0, lsr #25
    6aa4:	cd100400 	cfldrsgt	mvf0, [r0, #-0]
    6aa8:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6aac:	00008ca6 	andeq	r8, r0, r6, lsr #25
    6ab0:	62100800 	andsvs	r0, r0, #0, 16
    6ab4:	05000033 	streq	r0, [r0, #-51]	; 0x33
    6ab8:	00008cad 	andeq	r8, r0, sp, lsr #25
    6abc:	03000c00 	movweq	r0, #3072	; 0xc00
    6ac0:	000033ca 	andeq	r3, r0, sl, asr #7
    6ac4:	043ab205 	ldrteq	fp, [sl], #-517	; 0x205
    6ac8:	240f0000 	strcs	r0, [pc], #-0	; 6ad0 <_Min_Stack_Size+0x66d0>
    6acc:	04f3b705 	ldrbteq	fp, [r3], #1797	; 0x705
    6ad0:	a5100000 	ldrge	r0, [r0, #-0]
    6ad4:	05000037 	streq	r0, [r0, #-55]	; 0x37
    6ad8:	00008cb9 			; <UNDEFINED> instruction: 0x00008cb9
    6adc:	5f100000 	svcpl	0x00100000
    6ae0:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6ae4:	00008cbc 			; <UNDEFINED> instruction: 0x00008cbc
    6ae8:	90100400 	andsls	r0, r0, r0, lsl #8
    6aec:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6af0:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    6af4:	88100800 	ldmdahi	r0, {fp}
    6af8:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6afc:	00008cc2 	andeq	r8, r0, r2, asr #25
    6b00:	3b100c00 	blcc	409b08 <_Min_Stack_Size+0x409708>
    6b04:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6b08:	00008cc5 	andeq	r8, r0, r5, asr #25
    6b0c:	ed101000 	ldc	0, cr1, [r0, #-0]
    6b10:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6b14:	00008cc8 	andeq	r8, r0, r8, asr #25
    6b18:	a3101400 	tstge	r0, #0, 8
    6b1c:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6b20:	00008ccc 	andeq	r8, r0, ip, asr #25
    6b24:	86101800 	ldrhi	r1, [r0], -r0, lsl #16
    6b28:	05000032 	streq	r0, [r0, #-50]	; 0x32
    6b2c:	0004f3d0 	ldrdeq	pc, [r4], -r0
    6b30:	5a101c00 	bpl	40db38 <_Min_Stack_Size+0x40d738>
    6b34:	05000034 	streq	r0, [r0, #-52]	; 0x34
    6b38:	0004f3d2 	ldrdeq	pc, [r4], -r2
    6b3c:	11002000 	mrsne	r2, (UNDEF: 0)
    6b40:	00047304 	andeq	r7, r4, r4, lsl #6
    6b44:	37690300 	strbcc	r0, [r9, -r0, lsl #6]!
    6b48:	d3050000 	movwle	r0, #20480	; 0x5000
    6b4c:	0000047e 	andeq	r0, r0, lr, ror r4
    6b50:	d905180f 	stmdble	r5, {r0, r1, r2, r3, fp, ip}
    6b54:	00000555 	andeq	r0, r0, r5, asr r5
    6b58:	003a5f10 	eorseq	r5, sl, r0, lsl pc
    6b5c:	8cdb0500 	cfldr64hi	mvdx0, [fp], {0}
    6b60:	00000000 	andeq	r0, r0, r0
    6b64:	0034ed10 	eorseq	lr, r4, r0, lsl sp
    6b68:	8cde0500 	cfldr64hi	mvdx0, [lr], {0}
    6b6c:	04000000 	streq	r0, [r0], #-0
    6b70:	0035a310 	eorseq	sl, r5, r0, lsl r3
    6b74:	8ce20500 	cfstr64hi	mvdx0, [r2]
    6b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6b7c:	00328610 	eorseq	r8, r2, r0, lsl r6
    6b80:	f3e70500 	vabal.u32	q8, d7, d0
    6b84:	0c000004 	stceq	0, cr0, [r0], {4}
    6b88:	00345a10 	eorseq	r5, r4, r0, lsl sl
    6b8c:	f3e90500 	vabal.u32	q8, d9, d0
    6b90:	10000004 	andne	r0, r0, r4
    6b94:	003a1110 	eorseq	r1, sl, r0, lsl r1
    6b98:	f3eb0500 	vabal.u32	q8, d11, d0
    6b9c:	14000004 	strne	r0, [r0], #-4
    6ba0:	36900300 	ldrcc	r0, [r0], r0, lsl #6
    6ba4:	ec050000 	stc	0, cr0, [r5], {-0}
    6ba8:	00000504 	andeq	r0, r0, r4, lsl #10
    6bac:	f2051c0f 			; <UNDEFINED> instruction: 0xf2051c0f
    6bb0:	000005c1 	andeq	r0, r0, r1, asr #11
    6bb4:	0038f410 	eorseq	pc, r8, r0, lsl r4	; <UNPREDICTABLE>
    6bb8:	8cf40500 	cfldr64hi	mvdx0, [r4]
    6bbc:	00000000 	andeq	r0, r0, r0
    6bc0:	00340110 	eorseq	r0, r4, r0, lsl r1
    6bc4:	8cf80500 	cfldr64hi	mvdx0, [r8]
    6bc8:	04000000 	streq	r0, [r0], #-0
    6bcc:	00323410 	eorseq	r3, r2, r0, lsl r4
    6bd0:	8cfc0500 	cfldr64hi	mvdx0, [ip]
    6bd4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6bd8:	0035b40d 	eorseq	fp, r5, sp, lsl #8
    6bdc:	01000500 	tsteq	r0, r0, lsl #10
    6be0:	0000008c 	andeq	r0, r0, ip, lsl #1
    6be4:	32b50d0c 	adcscc	r0, r5, #12, 26	; 0x300
    6be8:	05050000 	streq	r0, [r5, #-0]
    6bec:	00008c01 	andeq	r8, r0, r1, lsl #24
    6bf0:	a60d1000 	strge	r1, [sp], -r0
    6bf4:	05000036 	streq	r0, [r0, #-54]	; 0x36
    6bf8:	008c0108 	addeq	r0, ip, r8, lsl #2
    6bfc:	0d140000 	ldceq	0, cr0, [r4, #-0]
    6c00:	00003532 	andeq	r3, r0, r2, lsr r5
    6c04:	8c010c05 	stchi	12, cr0, [r1], {5}
    6c08:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6c0c:	396d0b00 	stmdbcc	sp!, {r8, r9, fp}^
    6c10:	10050000 	andne	r0, r5, r0
    6c14:	00056001 	andeq	r6, r5, r1
    6c18:	05100c00 	ldreq	r0, [r0, #-3072]	; 0xc00
    6c1c:	060b0117 			; <UNDEFINED> instruction: 0x060b0117
    6c20:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
    6c24:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6c28:	008c0119 	addeq	r0, ip, r9, lsl r1
    6c2c:	0d000000 	stceq	0, cr0, [r0, #-0]
    6c30:	00003807 	andeq	r3, r0, r7, lsl #16
    6c34:	8c011c05 	stchi	12, cr1, [r1], {5}
    6c38:	04000000 	streq	r0, [r0], #-0
    6c3c:	0034c50d 	eorseq	ip, r4, sp, lsl #10
    6c40:	011f0500 	tsteq	pc, r0, lsl #10
    6c44:	0000008c 	andeq	r0, r0, ip, lsl #1
    6c48:	32650d08 	rsbcc	r0, r5, #8, 26	; 0x200
    6c4c:	23050000 	movwcs	r0, #20480	; 0x5000
    6c50:	00008c01 	andeq	r8, r0, r1, lsl #24
    6c54:	0b000c00 	bleq	9c5c <_Min_Stack_Size+0x985c>
    6c58:	000038dc 	ldrdeq	r3, [r0], -ip
    6c5c:	cd012505 	cfstr32gt	mvfx2, [r1, #-20]	; 0xffffffec
    6c60:	0c000005 	stceq	0, cr0, [r0], {5}
    6c64:	012b052c 	teqeq	fp, ip, lsr #10
    6c68:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    6c6c:	0037a50d 	eorseq	sl, r7, sp, lsl #10
    6c70:	012d0500 	teqeq	sp, r0, lsl #10
    6c74:	0000008c 	andeq	r0, r0, ip, lsl #1
    6c78:	36f70d00 	ldrbtcc	r0, [r7], r0, lsl #26
    6c7c:	30050000 	andcc	r0, r5, r0
    6c80:	00008c01 	andeq	r8, r0, r1, lsl #24
    6c84:	400d0400 	andmi	r0, sp, r0, lsl #8
    6c88:	05000038 	streq	r0, [r0, #-56]	; 0x38
    6c8c:	008c0133 	addeq	r0, ip, r3, lsr r1
    6c90:	0d080000 	stceq	0, cr0, [r8, #-0]
    6c94:	00003435 	andeq	r3, r0, r5, lsr r4
    6c98:	8c013605 	stchi	6, cr3, [r1], {5}
    6c9c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6ca0:	0036340d 	eorseq	r3, r6, sp, lsl #8
    6ca4:	01390500 	teqeq	r9, r0, lsl #10
    6ca8:	0000008c 	andeq	r0, r0, ip, lsl #1
    6cac:	321e0d10 	andscc	r0, lr, #16, 26	; 0x400
    6cb0:	3c050000 	stccc	0, cr0, [r5], {-0}
    6cb4:	00008c01 	andeq	r8, r0, r1, lsl #24
    6cb8:	c80d1400 	stmdagt	sp, {sl, ip}
    6cbc:	05000039 	streq	r0, [r0, #-57]	; 0x39
    6cc0:	008c013f 	addeq	r0, ip, pc, lsr r1
    6cc4:	0d180000 	ldceq	0, cr0, [r8, #-0]
    6cc8:	0000390a 	andeq	r3, r0, sl, lsl #18
    6ccc:	8c014205 	sfmhi	f4, 4, [r1], {5}
    6cd0:	1c000000 	stcne	0, cr0, [r0], {-0}
    6cd4:	00392d0d 	eorseq	r2, r9, sp, lsl #26
    6cd8:	01460500 	cmpeq	r6, r0, lsl #10
    6cdc:	0000008c 	andeq	r0, r0, ip, lsl #1
    6ce0:	35130d20 	ldrcc	r0, [r3, #-3360]	; 0xd20
    6ce4:	4a050000 	bmi	146cec <_Min_Stack_Size+0x1468ec>
    6ce8:	00008c01 	andeq	r8, r0, r1, lsl #24
    6cec:	290d2400 	stmdbcs	sp, {sl, sp}
    6cf0:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    6cf4:	06b0014d 	ldrteq	r0, [r0], sp, asr #2
    6cf8:	00280000 	eoreq	r0, r8, r0
    6cfc:	05c10411 	strbeq	r0, [r1, #1041]	; 0x411
    6d00:	c60b0000 	strgt	r0, [fp], -r0
    6d04:	05000035 	streq	r0, [r0, #-53]	; 0x35
    6d08:	0617014f 	ldreq	r0, [r7], -pc, asr #2
    6d0c:	b8120000 	ldmdalt	r2, {}	; <UNPREDICTABLE>
    6d10:	01000033 	tsteq	r0, r3, lsr r0
    6d14:	004f5c82 	subeq	r5, pc, r2, lsl #25
    6d18:	00005808 	andeq	r5, r0, r8, lsl #16
    6d1c:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    6d20:	13000006 	movwne	r0, #6
    6d24:	000037a5 	andeq	r3, r0, r5, lsr #15
    6d28:	008c8201 	addeq	r8, ip, r1, lsl #4
    6d2c:	91020000 	mrsls	r0, (UNDEF: 2)
    6d30:	1b120074 	blne	486f08 <_Min_Stack_Size+0x486b08>
    6d34:	01000037 	tsteq	r0, r7, lsr r0
    6d38:	004fb49d 	umaaleq	fp, pc, sp, r4	; <UNPREDICTABLE>
    6d3c:	00019408 	andeq	r9, r1, r8, lsl #8
    6d40:	189c0100 	ldmne	ip, {r8}
    6d44:	13000007 	movwne	r0, #7
    6d48:	000034aa 	andeq	r3, r0, sl, lsr #9
    6d4c:	07189d01 	ldreq	r9, [r8, -r1, lsl #26]
    6d50:	91020000 	mrsls	r0, (UNDEF: 2)
    6d54:	34c0146c 	strbcc	r1, [r0], #1132	; 0x46c
    6d58:	9f010000 	svcls	0x00010000
    6d5c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6d60:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6d64:	042f0411 	strteq	r0, [pc], #-1041	; 6d6c <_Min_Stack_Size+0x696c>
    6d68:	8b150000 	blhi	546d70 <_Min_Stack_Size+0x546970>
    6d6c:	01000033 	tsteq	r0, r3, lsr r0
    6d70:	51480101 	cmppl	r8, r1, lsl #2
    6d74:	00da0800 	sbcseq	r0, sl, r0, lsl #16
    6d78:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d7c:	00000744 	andeq	r0, r0, r4, asr #14
    6d80:	0034aa16 	eorseq	sl, r4, r6, lsl sl
    6d84:	01010100 	mrseq	r0, (UNDEF: 17)
    6d88:	00000718 	andeq	r0, r0, r8, lsl r7
    6d8c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6d90:	0035db15 	eorseq	sp, r5, r5, lsl fp
    6d94:	012e0100 	teqeq	lr, r0, lsl #2
    6d98:	08005224 	stmdaeq	r0, {r2, r5, r9, ip, lr}
    6d9c:	00000054 	andeq	r0, r0, r4, asr r0
    6da0:	07799c01 	ldrbeq	r9, [r9, -r1, lsl #24]!
    6da4:	a5160000 	ldrge	r0, [r6, #-0]
    6da8:	01000037 	tsteq	r0, r7, lsr r0
    6dac:	008c012e 	addeq	r0, ip, lr, lsr #2
    6db0:	91020000 	mrsls	r0, (UNDEF: 2)
    6db4:	07561674 			; <UNDEFINED> instruction: 0x07561674
    6db8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6dbc:	00010c01 	andeq	r0, r1, r1, lsl #24
    6dc0:	73910200 	orrsvc	r0, r1, #0, 4
    6dc4:	389c1500 	ldmcc	ip, {r8, sl, ip}
    6dc8:	77010000 	strvc	r0, [r1, -r0]
    6dcc:	00527801 	subseq	r7, r2, r1, lsl #16
    6dd0:	00005c08 	andeq	r5, r0, r8, lsl #24
    6dd4:	9f9c0100 	svcls	0x009c0100
    6dd8:	16000007 	strne	r0, [r0], -r7
    6ddc:	000037a5 	andeq	r3, r0, r5, lsr #15
    6de0:	8c017701 	stchi	7, cr7, [r1], {1}
    6de4:	02000000 	andeq	r0, r0, #0
    6de8:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    6dec:	0000360d 	andeq	r3, r0, sp, lsl #12
    6df0:	d4019601 	strle	r9, [r1], #-1537	; 0x601
    6df4:	cc080052 	stcgt	0, cr0, [r8], {82}	; 0x52
    6df8:	01000000 	mrseq	r0, (UNDEF: 0)
    6dfc:	0007f29c 	muleq	r7, ip, r2
    6e00:	37df1600 	ldrbcc	r1, [pc, r0, lsl #12]
    6e04:	96010000 	strls	r0, [r1], -r0
    6e08:	0007f201 	andeq	pc, r7, r1, lsl #4
    6e0c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6e10:	00352517 	eorseq	r2, r5, r7, lsl r5
    6e14:	01980100 	orrseq	r0, r8, r0, lsl #2
    6e18:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e1c:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    6e20:	0000364b 	andeq	r3, r0, fp, asr #12
    6e24:	8c019801 	stchi	8, cr9, [r1], {1}
    6e28:	02000000 	andeq	r0, r0, #0
    6e2c:	1a177091 	bne	5e3078 <_Min_Stack_Size+0x5e2c78>
    6e30:	01000034 	tsteq	r0, r4, lsr r0
    6e34:	008c0198 	umulleq	r0, ip, r8, r1
    6e38:	91020000 	mrsls	r0, (UNDEF: 2)
    6e3c:	0411006c 	ldreq	r0, [r1], #-108	; 0x6c
    6e40:	000004f9 	strdeq	r0, [r0], -r9
    6e44:	00359015 	eorseq	r9, r5, r5, lsl r0
    6e48:	01d70100 	bicseq	r0, r7, r0, lsl #2
    6e4c:	080053a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, lr}
    6e50:	0000007c 	andeq	r0, r0, ip, ror r0
    6e54:	081e9c01 	ldmdaeq	lr, {r0, sl, fp, ip, pc}
    6e58:	df160000 	svcle	0x00160000
    6e5c:	01000037 	tsteq	r0, r7, lsr r0
    6e60:	07f201d7 	ubfxeq	r0, r7, #3, #19
    6e64:	91020000 	mrsls	r0, (UNDEF: 2)
    6e68:	48150074 	ldmdami	r5, {r2, r4, r5, r6}
    6e6c:	0100003a 	tsteq	r0, sl, lsr r0
    6e70:	541c01f4 	ldrpl	r0, [ip], #-500	; 0x1f4
    6e74:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    6e78:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e7c:	00000853 	andeq	r0, r0, r3, asr r8
    6e80:	0037a516 	eorseq	sl, r7, r6, lsl r5
    6e84:	01f40100 	mvnseq	r0, r0, lsl #2
    6e88:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e8c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    6e90:	00000756 	andeq	r0, r0, r6, asr r7
    6e94:	0c01f401 	cfstrseq	mvf15, [r1], {1}
    6e98:	02000001 	andeq	r0, r0, #1
    6e9c:	15007391 	strne	r7, [r0, #-913]	; 0x391
    6ea0:	000038bd 			; <UNDEFINED> instruction: 0x000038bd
    6ea4:	88021c01 	stmdahi	r2, {r0, sl, fp, ip}
    6ea8:	6c080054 	stcvs	0, cr0, [r8], {84}	; 0x54
    6eac:	01000000 	mrseq	r0, (UNDEF: 0)
    6eb0:	0008889c 	muleq	r8, ip, r8
    6eb4:	37a51600 	strcc	r1, [r5, r0, lsl #12]!
    6eb8:	1c010000 	stcne	0, cr0, [r1], {-0}
    6ebc:	00008c02 	andeq	r8, r0, r2, lsl #24
    6ec0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6ec4:	00075616 	andeq	r5, r7, r6, lsl r6
    6ec8:	021c0100 	andseq	r0, ip, #0, 2
    6ecc:	0000010c 	andeq	r0, r0, ip, lsl #2
    6ed0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6ed4:	00392218 	eorseq	r2, r9, r8, lsl r2
    6ed8:	02430100 	subeq	r0, r3, #0, 2
    6edc:	0000008c 	andeq	r0, r0, ip, lsl #1
    6ee0:	080054f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, lr}
    6ee4:	00000038 	andeq	r0, r0, r8, lsr r0
    6ee8:	08c19c01 	stmiaeq	r1, {r0, sl, fp, ip, pc}^
    6eec:	a5160000 	ldrge	r0, [r6, #-0]
    6ef0:	01000037 	tsteq	r0, r7, lsr r0
    6ef4:	008c0243 	addeq	r0, ip, r3, asr #4
    6ef8:	91020000 	mrsls	r0, (UNDEF: 2)
    6efc:	322d176c 	eorcc	r1, sp, #108, 14	; 0x1b00000
    6f00:	45010000 	strmi	r0, [r1, #-0]
    6f04:	00008c02 	andeq	r8, r0, r2, lsl #24
    6f08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6f0c:	33a11900 			; <UNDEFINED> instruction: 0x33a11900
    6f10:	83010000 	movwhi	r0, #4096	; 0x1000
    6f14:	00552c02 	subseq	r2, r5, r2, lsl #24
    6f18:	00003408 	andeq	r3, r0, r8, lsl #8
    6f1c:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    6f20:	0000344b 	andeq	r3, r0, fp, asr #8
    6f24:	60029401 	andvs	r9, r2, r1, lsl #8
    6f28:	ac080055 	stcge	0, cr0, [r8], {85}	; 0x55
    6f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    6f30:	0008f99c 	muleq	r8, ip, r9
    6f34:	39581600 	ldmdbcc	r8, {r9, sl, ip}^
    6f38:	94010000 	strls	r0, [r1], #-0
    6f3c:	0008f902 	andeq	pc, r8, r2, lsl #18
    6f40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6f44:	55041100 	strpl	r1, [r4, #-256]	; 0x100
    6f48:	15000005 	strne	r0, [r0, #-5]
    6f4c:	00003790 	muleq	r0, r0, r7
    6f50:	0c02c801 	stceq	8, cr12, [r2], {1}
    6f54:	84080056 	strhi	r0, [r8], #-86	; 0x56
    6f58:	01000000 	mrseq	r0, (UNDEF: 0)
    6f5c:	0009259c 	muleq	r9, ip, r5
    6f60:	39581600 	ldmdbcc	r8, {r9, sl, ip}^
    6f64:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    6f68:	0008f902 	andeq	pc, r8, r2, lsl #18
    6f6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6f70:	37f21500 	ldrbcc	r1, [r2, r0, lsl #10]!
    6f74:	e2010000 	and	r0, r1, #0
    6f78:	00569002 	subseq	r9, r6, r2
    6f7c:	00003c08 	andeq	r3, r0, r8, lsl #24
    6f80:	4b9c0100 	blmi	fe707388 <_estack+0xde6d7388>
    6f84:	16000009 	strne	r0, [r0], -r9
    6f88:	00000756 	andeq	r0, r0, r6, asr r7
    6f8c:	0c02e201 	sfmeq	f6, 1, [r2], {1}
    6f90:	02000001 	andeq	r0, r0, #1
    6f94:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    6f98:	000035ea 	andeq	r3, r0, sl, ror #11
    6f9c:	cc032a01 	stcgt	10, cr2, [r3], {1}
    6fa0:	44080056 	strmi	r0, [r8], #-86	; 0x56
    6fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    6fa8:	0009719c 	muleq	r9, ip, r1
    6fac:	37a51600 	strcc	r1, [r5, r0, lsl #12]!
    6fb0:	2a010000 	bcs	46fb8 <_Min_Stack_Size+0x46bb8>
    6fb4:	00008c03 	andeq	r8, r0, r3, lsl #24
    6fb8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6fbc:	32101500 	andscc	r1, r0, #0, 10
    6fc0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    6fc4:	00571003 	subseq	r1, r7, r3
    6fc8:	00015c08 	andeq	r5, r1, r8, lsl #24
    6fcc:	d39c0100 	orrsle	r0, ip, #0, 2
    6fd0:	16000009 	strne	r0, [r0], -r9
    6fd4:	0000331b 	andeq	r3, r0, fp, lsl r3
    6fd8:	d3033e01 	movwle	r3, #15873	; 0x3e01
    6fdc:	02000009 	andeq	r0, r0, #9
    6fe0:	c2176491 	andsgt	r6, r7, #-1862270976	; 0x91000000
    6fe4:	01000036 	tsteq	r0, r6, lsr r0
    6fe8:	008c0341 	addeq	r0, ip, r1, asr #6
    6fec:	91020000 	mrsls	r0, (UNDEF: 2)
    6ff0:	36c81774 			; <UNDEFINED> instruction: 0x36c81774
    6ff4:	42010000 	andmi	r0, r1, #0
    6ff8:	00008c03 	andeq	r8, r0, r3, lsl #24
    6ffc:	70910200 	addsvc	r0, r1, r0, lsl #4
    7000:	0036ce17 	eorseq	ip, r6, r7, lsl lr
    7004:	03430100 	movteq	r0, #12544	; 0x3100
    7008:	0000008c 	andeq	r0, r0, ip, lsl #1
    700c:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    7010:	000039ae 	andeq	r3, r0, lr, lsr #19
    7014:	8c034401 	cfstrshi	mvf4, [r3], {1}
    7018:	02000000 	andeq	r0, r0, #0
    701c:	11006891 			; <UNDEFINED> instruction: 0x11006891
    7020:	0006b604 	andeq	fp, r6, r4, lsl #12
    7024:	39b41500 	ldmibcc	r4!, {r8, sl, ip}
    7028:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    702c:	00586c03 	subseq	r6, r8, r3, lsl #24
    7030:	00008808 	andeq	r8, r0, r8, lsl #16
    7034:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    7038:	16000009 	strne	r0, [r0], -r9
    703c:	0000331b 	andeq	r3, r0, fp, lsl r3
    7040:	d3039801 	movwle	r9, #14337	; 0x3801
    7044:	02000009 	andeq	r0, r0, #9
    7048:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    704c:	00003422 	andeq	r3, r0, r2, lsr #8
    7050:	f403b601 	vst1.8	{d11-d13}, [r3], r1
    7054:	40080058 	andmi	r0, r8, r8, asr r0
    7058:	01000000 	mrseq	r0, (UNDEF: 0)
    705c:	000a349c 	muleq	sl, ip, r4
    7060:	36d41600 	ldrbcc	r1, [r4], r0, lsl #12
    7064:	b6010000 	strlt	r0, [r1], -r0
    7068:	000a3403 	andeq	r3, sl, r3, lsl #8
    706c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7070:	0034c017 	eorseq	ip, r4, r7, lsl r0
    7074:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    7078:	0000008c 	andeq	r0, r0, ip, lsl #1
    707c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    7080:	060b0411 			; <UNDEFINED> instruction: 0x060b0411
    7084:	73180000 	tstvc	r8, #0
    7088:	01000033 	tsteq	r0, r3, lsr r0
    708c:	008c03d0 	ldrdeq	r0, [ip], r0	; <UNPREDICTABLE>
    7090:	59340000 	ldmdbpl	r4!, {}	; <UNPREDICTABLE>
    7094:	003c0800 	eorseq	r0, ip, r0, lsl #16
    7098:	9c010000 	stcls	0, cr0, [r1], {-0}
    709c:	00000a73 	andeq	r0, r0, r3, ror sl
    70a0:	003a5416 	eorseq	r5, sl, r6, lsl r4
    70a4:	03d00100 	bicseq	r0, r0, #0, 2
    70a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    70ac:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    70b0:	00000b89 	andeq	r0, r0, r9, lsl #23
    70b4:	8c03d201 	sfmhi	f5, 1, [r3], {1}
    70b8:	02000000 	andeq	r0, r0, #0
    70bc:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    70c0:	0000353f 	andeq	r3, r0, pc, lsr r5
    70c4:	7003ea01 	andvc	lr, r3, r1, lsl #20
    70c8:	24080059 	strcs	r0, [r8], #-89	; 0x59
    70cc:	01000000 	mrseq	r0, (UNDEF: 0)
    70d0:	000a999c 	muleq	sl, ip, r9
    70d4:	39a41600 	stmibcc	r4!, {r9, sl, ip}
    70d8:	ea010000 	b	470e0 <_Min_Stack_Size+0x46ce0>
    70dc:	00008c03 	andeq	r8, r0, r3, lsl #24
    70e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    70e4:	35761500 	ldrbcc	r1, [r6, #-1280]!	; 0x500
    70e8:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    70ec:	00599403 	subseq	r9, r9, r3, lsl #8
    70f0:	00002408 	andeq	r2, r0, r8, lsl #8
    70f4:	bf9c0100 	svclt	0x009c0100
    70f8:	1600000a 	strne	r0, [r0], -sl
    70fc:	00003676 	andeq	r3, r0, r6, ror r6
    7100:	8c03f801 	stchi	8, cr15, [r3], {1}
    7104:	02000000 	andeq	r0, r0, #0
    7108:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    710c:	00003479 	andeq	r3, r0, r9, ror r4
    7110:	b8040801 	stmdalt	r4, {r0, fp}
    7114:	4c080059 	stcmi	0, cr0, [r8], {89}	; 0x59
    7118:	01000000 	mrseq	r0, (UNDEF: 0)
    711c:	000af49c 	muleq	sl, ip, r4
    7120:	3a541600 	bcc	150c928 <_Min_Stack_Size+0x150c528>
    7124:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7128:	00008c04 	andeq	r8, r0, r4, lsl #24
    712c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7130:	00075616 	andeq	r5, r7, r6, lsl r6
    7134:	04080100 	streq	r0, [r8], #-256	; 0x100
    7138:	0000010c 	andeq	r0, r0, ip, lsl #2
    713c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    7140:	00394b15 	eorseq	r4, r9, r5, lsl fp
    7144:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    7148:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    714c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7150:	0b389c01 	bleq	e2e15c <_Min_Stack_Size+0xe2dd5c>
    7154:	a5160000 	ldrge	r0, [r6, #-0]
    7158:	01000037 	tsteq	r0, r7, lsr r0
    715c:	008c043c 	addeq	r0, ip, ip, lsr r4
    7160:	91020000 	mrsls	r0, (UNDEF: 2)
    7164:	39dc1674 	ldmibcc	ip, {r2, r4, r5, r6, r9, sl, ip}^
    7168:	3c010000 	stccc	0, cr0, [r1], {-0}
    716c:	00008c04 	andeq	r8, r0, r4, lsl #24
    7170:	70910200 	addsvc	r0, r1, r0, lsl #4
    7174:	00075616 	andeq	r5, r7, r6, lsl r6
    7178:	043c0100 	ldrteq	r0, [ip], #-256	; 0x100
    717c:	0000010c 	andeq	r0, r0, ip, lsl #2
    7180:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    7184:	00381918 	eorseq	r1, r8, r8, lsl r9
    7188:	04890100 	streq	r0, [r9], #256	; 0x100
    718c:	000000de 	ldrdeq	r0, [r0], -lr
    7190:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
    7194:	0000007c 	andeq	r0, r0, ip, ror r0
    7198:	0b8f9c01 	bleq	fe3ee1a4 <_estack+0xde3be1a4>
    719c:	a5160000 	ldrge	r0, [r6, #-0]
    71a0:	01000037 	tsteq	r0, r7, lsr r0
    71a4:	008c0489 	addeq	r0, ip, r9, lsl #9
    71a8:	91020000 	mrsls	r0, (UNDEF: 2)
    71ac:	3a3f166c 	bcc	fccb64 <_Min_Stack_Size+0xfcc764>
    71b0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    71b4:	00008c04 	andeq	r8, r0, r4, lsl #24
    71b8:	68910200 	ldmvs	r1, {r9}
    71bc:	00097417 	andeq	r7, r9, r7, lsl r4
    71c0:	048b0100 	streq	r0, [fp], #256	; 0x100
    71c4:	000000de 	ldrdeq	r0, [r0], -lr
    71c8:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
    71cc:	0000391c 	andeq	r3, r0, ip, lsl r9
    71d0:	8c048c01 	stchi	12, cr8, [r4], {1}
    71d4:	02000000 	andeq	r0, r0, #0
    71d8:	15007091 	strne	r7, [r0, #-145]	; 0x91
    71dc:	000031e9 	andeq	r3, r0, r9, ror #3
    71e0:	5004c101 	andpl	ip, r4, r1, lsl #2
    71e4:	7808005b 	stmdavc	r8, {r0, r1, r3, r4, r6}
    71e8:	01000000 	mrseq	r0, (UNDEF: 0)
    71ec:	000bc49c 	muleq	fp, ip, r4
    71f0:	37a51600 	strcc	r1, [r5, r0, lsl #12]!
    71f4:	c1010000 	mrsgt	r0, (UNDEF: 1)
    71f8:	00008c04 	andeq	r8, r0, r4, lsl #24
    71fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7200:	003a3f16 	eorseq	r3, sl, r6, lsl pc
    7204:	04c10100 	strbeq	r0, [r1], #256	; 0x100
    7208:	0000008c 	andeq	r0, r0, ip, lsl #1
    720c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    7210:	0036b218 	eorseq	fp, r6, r8, lsl r2
    7214:	04ec0100 	strbteq	r0, [ip], #256	; 0x100
    7218:	000000ea 	andeq	r0, r0, sl, ror #1
    721c:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
    7220:	000000b4 	strheq	r0, [r0], -r4
    7224:	0c489c01 	mcrreq	12, 0, r9, r8, cr1
    7228:	a5160000 	ldrge	r0, [r6, #-0]
    722c:	01000037 	tsteq	r0, r7, lsr r0
    7230:	008c04ec 	addeq	r0, ip, ip, ror #9
    7234:	91020000 	mrsls	r0, (UNDEF: 2)
    7238:	39dc165c 	ldmibcc	ip, {r2, r3, r4, r6, r9, sl, ip}^
    723c:	ec010000 	stc	0, cr0, [r1], {-0}
    7240:	00008c04 	andeq	r8, r0, r4, lsl #24
    7244:	58910200 	ldmpl	r1, {r9}
    7248:	00097417 	andeq	r7, r9, r7, lsl r4
    724c:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    7250:	000000ea 	andeq	r0, r0, sl, ror #1
    7254:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
    7258:	0000391c 	andeq	r3, r0, ip, lsl r9
    725c:	8c04ef01 	stchi	15, cr14, [r4], {1}
    7260:	02000000 	andeq	r0, r0, #0
    7264:	00177091 	mulseq	r7, r1, r0
    7268:	01000038 	tsteq	r0, r8, lsr r0
    726c:	008c04f0 	strdeq	r0, [ip], r0	; <UNPREDICTABLE>
    7270:	91020000 	mrsls	r0, (UNDEF: 2)
    7274:	0975176c 	ldmdbeq	r5!, {r2, r3, r5, r6, r8, r9, sl, ip}^
    7278:	f1010000 	setend	le
    727c:	00008c04 	andeq	r8, r0, r4, lsl #24
    7280:	68910200 	ldmvs	r1, {r9}
    7284:	003a0817 	eorseq	r0, sl, r7, lsl r8
    7288:	04f20100 	ldrbteq	r0, [r2], #256	; 0x100
    728c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7290:	00649102 	rsbeq	r9, r4, r2, lsl #2
    7294:	00388615 	eorseq	r8, r8, r5, lsl r6
    7298:	05340100 	ldreq	r0, [r4, #-256]!	; 0x100
    729c:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
    72a0:	0000007c 	andeq	r0, r0, ip, ror r0
    72a4:	0c7d9c01 	ldcleq	12, cr9, [sp], #-4
    72a8:	a5160000 	ldrge	r0, [r6, #-0]
    72ac:	01000037 	tsteq	r0, r7, lsr r0
    72b0:	008c0534 	addeq	r0, ip, r4, lsr r5
    72b4:	91020000 	mrsls	r0, (UNDEF: 2)
    72b8:	39dc1674 	ldmibcc	ip, {r2, r4, r5, r6, r9, sl, ip}^
    72bc:	34010000 	strcc	r0, [r1], #-0
    72c0:	00008c05 	andeq	r8, r0, r5, lsl #24
    72c4:	70910200 	addsvc	r0, r1, r0, lsl #4
    72c8:	04141a00 	ldreq	r1, [r4], #-2560	; 0xa00
    72cc:	a7060000 	strge	r0, [r6, -r0]
    72d0:	0000c306 	andeq	ip, r0, r6, lsl #6
    72d4:	027f0000 	rsbseq	r0, pc, #0
    72d8:	00040000 	andeq	r0, r4, r0
    72dc:	00001468 	andeq	r1, r0, r8, ror #8
    72e0:	012a0104 	teqeq	sl, r4, lsl #2
    72e4:	0a010000 	beq	472ec <_Min_Stack_Size+0x46eec>
    72e8:	6900003b 	stmdbvs	r0, {r0, r1, r3, r4, r5}
    72ec:	40000003 	andmi	r0, r0, r3
    72f0:	00000009 	andeq	r0, r0, r9
    72f4:	e1000000 	mrs	r0, (UNDEF: 0)
    72f8:	02000031 	andeq	r0, r0, #49	; 0x31
    72fc:	02a60601 	adceq	r0, r6, #1048576	; 0x100000
    7300:	33030000 	movwcc	r0, #12288	; 0x3000
    7304:	02000002 	andeq	r0, r0, #2
    7308:	0000371d 	andeq	r3, r0, sp, lsl r7
    730c:	08010200 	stmdaeq	r1, {r9}
    7310:	000002a4 	andeq	r0, r0, r4, lsr #5
    7314:	3a050202 	bcc	147b24 <_Min_Stack_Size+0x147724>
    7318:	02000000 	andeq	r0, r0, #0
    731c:	034b0702 	movteq	r0, #46850	; 0xb702
    7320:	45030000 	strmi	r0, [r3, #-0]
    7324:	02000004 	andeq	r0, r0, #4
    7328:	0000573f 	andeq	r5, r0, pc, lsr r7
    732c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    7330:	00000100 	andeq	r0, r0, r0, lsl #2
    7334:	00006003 	andeq	r6, r0, r3
    7338:	69410200 	stmdbvs	r1, {r9}^
    733c:	02000000 	andeq	r0, r0, #0
    7340:	02f50704 	rscseq	r0, r5, #4, 14	; 0x100000
    7344:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7348:	0000fb05 	andeq	pc, r0, r5, lsl #22
    734c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7350:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7354:	69050404 	stmdbvs	r5, {r2, sl}
    7358:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    735c:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    7360:	35030000 	strcc	r0, [r3, #-0]
    7364:	03000002 	movweq	r0, #2
    7368:	00002c2a 	andeq	r2, r0, sl, lsr #24
    736c:	04470300 	strbeq	r0, [r7], #-768	; 0x300
    7370:	41030000 	mrsmi	r0, (UNDEF: 3)
    7374:	0000004c 	andeq	r0, r0, ip, asr #32
    7378:	00006203 	andeq	r6, r0, r3, lsl #4
    737c:	5e420300 	cdppl	3, 4, cr0, cr2, cr0, {0}
    7380:	02000000 	andeq	r0, r0, #0
    7384:	00440704 	subeq	r0, r4, r4, lsl #14
    7388:	a2050000 	andge	r0, r5, #0
    738c:	05000000 	streq	r0, [r0, #-0]
    7390:	00000097 	muleq	r0, r7, r0
    7394:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    7398:	0000d401 	andeq	sp, r0, r1, lsl #8
    739c:	09180700 	ldmdbeq	r8, {r8, r9, sl}
    73a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    73a4:	00544553 	subseq	r4, r4, r3, asr r5
    73a8:	99090001 	stmdbls	r9, {r0}
    73ac:	0400001d 	streq	r0, [r0], #-29
    73b0:	00be01f7 	ldrshteq	r0, [lr], r7
    73b4:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    73b8:	0400004d 	streq	r0, [r0], #-77	; 0x4d
    73bc:	00be01f7 	ldrshteq	r0, [lr], r7
    73c0:	01060000 	mrseq	r0, (UNDEF: 6)
    73c4:	0201f904 	andeq	pc, r1, #4, 18	; 0x10000
    73c8:	07000001 	streq	r0, [r0, -r1]
    73cc:	0000039d 	muleq	r0, sp, r3
    73d0:	00b20700 	adcseq	r0, r2, r0, lsl #14
    73d4:	00010000 	andeq	r0, r1, r0
    73d8:	00083e09 	andeq	r3, r8, r9, lsl #28
    73dc:	01f90400 	mvnseq	r0, r0, lsl #8
    73e0:	000000ec 	andeq	r0, r0, ip, ror #1
    73e4:	8c040c0a 	stchi	12, cr0, [r4], {10}
    73e8:	00013c05 	andeq	r3, r1, r5, lsl #24
    73ec:	52430b00 	subpl	r0, r3, #0, 22
    73f0:	058e0400 	streq	r0, [lr, #1024]	; 0x400
    73f4:	000000b4 	strheq	r0, [r0], -r4
    73f8:	52530b00 	subspl	r0, r3, #0, 22
    73fc:	058f0400 	streq	r0, [pc, #1024]	; 7804 <_Min_Stack_Size+0x7404>
    7400:	000000b4 	strheq	r0, [r0], -r4
    7404:	52440b04 	subpl	r0, r4, #4, 22	; 0x1000
    7408:	05900400 	ldreq	r0, [r0, #1024]	; 0x400
    740c:	000000b4 	strheq	r0, [r0], -r4
    7410:	d7090008 	strle	r0, [r9, -r8]
    7414:	0400003a 	streq	r0, [r0], #-58	; 0x3a
    7418:	010e0591 			; <UNDEFINED> instruction: 0x010e0591
    741c:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    7420:	0100003a 	tsteq	r0, sl, lsr r0
    7424:	005cf863 	subseq	pc, ip, r3, ror #16
    7428:	00001608 	andeq	r1, r0, r8, lsl #12
    742c:	0d9c0100 	ldfeqs	f0, [ip]
    7430:	00003aa9 	andeq	r3, r0, r9, lsr #21
    7434:	5d107201 	lfmpl	f7, 4, [r0, #-4]
    7438:	00380800 	eorseq	r0, r8, r0, lsl #16
    743c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7440:	0000017d 	andeq	r0, r0, sp, ror r1
    7444:	0007560e 	andeq	r5, r7, lr, lsl #12
    7448:	02720100 	rsbseq	r0, r2, #0, 2
    744c:	02000001 	andeq	r0, r0, #1
    7450:	0f007791 	svceq	0x00007791
    7454:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
    7458:	00a2b001 	adceq	fp, r2, r1
    745c:	5d480000 	stclpl	0, cr0, [r8, #-0]
    7460:	00180800 	andseq	r0, r8, r0, lsl #16
    7464:	9c010000 	stcls	0, cr0, [r1], {-0}
    7468:	003a9c10 	eorseq	r9, sl, r0, lsl ip
    746c:	010b0100 	mrseq	r0, (UNDEF: 27)
    7470:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
    7474:	00000038 	andeq	r0, r0, r8, lsr r0
    7478:	01b89c01 			; <UNDEFINED> instruction: 0x01b89c01
    747c:	56110000 	ldrpl	r0, [r1], -r0
    7480:	01000007 	tsteq	r0, r7
    7484:	0102010b 	tsteq	r2, fp, lsl #2
    7488:	91020000 	mrsls	r0, (UNDEF: 2)
    748c:	70120077 	andsvc	r0, r2, r7, ror r0
    7490:	0100003b 	tsteq	r0, fp, lsr r0
    7494:	00d40125 	sbcseq	r0, r4, r5, lsr #2
    7498:	5d980000 	ldcpl	0, cr0, [r8]
    749c:	00380800 	eorseq	r0, r8, r0, lsl #16
    74a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    74a4:	000001f1 	strdeq	r0, [r0], -r1
    74a8:	003ae311 	eorseq	lr, sl, r1, lsl r3
    74ac:	01250100 	teqeq	r5, r0, lsl #2
    74b0:	0000008c 	andeq	r0, r0, ip, lsl #1
    74b4:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    74b8:	00000974 	andeq	r0, r0, r4, ror r9
    74bc:	d4012701 	strle	r2, [r1], #-1793	; 0x701
    74c0:	02000000 	andeq	r0, r0, #0
    74c4:	10007791 	mulne	r0, r1, r7
    74c8:	00003aec 	andeq	r3, r0, ip, ror #21
    74cc:	d0014601 	andle	r4, r1, r1, lsl #12
    74d0:	2408005d 	strcs	r0, [r8], #-93	; 0x5d
    74d4:	01000000 	mrseq	r0, (UNDEF: 0)
    74d8:	0002179c 	muleq	r2, ip, r7
    74dc:	3ae31100 	bcc	ff8cb8e4 <_estack+0xdf89b8e4>
    74e0:	46010000 	strmi	r0, [r1], -r0
    74e4:	00008c01 	andeq	r8, r0, r1, lsl #24
    74e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    74ec:	3afa1200 	bcc	ffe8bcf4 <_estack+0xdfe5bcf4>
    74f0:	56010000 	strpl	r0, [r1], -r0
    74f4:	0000e001 	andeq	lr, r0, r1
    74f8:	005df400 	subseq	pc, sp, r0, lsl #8
    74fc:	00003808 	andeq	r3, r0, r8, lsl #16
    7500:	509c0100 	addspl	r0, ip, r0, lsl #2
    7504:	11000002 	tstne	r0, r2
    7508:	00003ab1 			; <UNDEFINED> instruction: 0x00003ab1
    750c:	8c015601 	stchi	6, cr5, [r1], {1}
    7510:	02000000 	andeq	r0, r0, #0
    7514:	74136f91 	ldrvc	r6, [r3], #-3985	; 0xf91
    7518:	01000009 	tsteq	r0, r9
    751c:	00e00158 	rsceq	r0, r0, r8, asr r1
    7520:	91020000 	mrsls	r0, (UNDEF: 2)
    7524:	5a100077 	bpl	407708 <_Min_Stack_Size+0x407308>
    7528:	0100003b 	tsteq	r0, fp, lsr r0
    752c:	5e2c0174 	mcrpl	1, 1, r0, cr12, cr4, {3}
    7530:	00240800 	eoreq	r0, r4, r0, lsl #16
    7534:	9c010000 	stcls	0, cr0, [r1], {-0}
    7538:	00000276 	andeq	r0, r0, r6, ror r2
    753c:	003ab111 	eorseq	fp, sl, r1, lsl r1
    7540:	01740100 	cmneq	r4, r0, lsl #2
    7544:	0000008c 	andeq	r0, r0, ip, lsl #1
    7548:	00779102 	rsbseq	r9, r7, r2, lsl #2
    754c:	00041414 	andeq	r1, r4, r4, lsl r4
    7550:	06a70500 	strteq	r0, [r7], r0, lsl #10
    7554:	000000b9 	strheq	r0, [r0], -r9
    7558:	000b8f00 	andeq	r8, fp, r0, lsl #30
    755c:	ae000400 	cfcpysge	mvf0, mvf0
    7560:	04000015 	streq	r0, [r0], #-21
    7564:	00012a01 	andeq	r2, r1, r1, lsl #20
    7568:	42700100 	rsbsmi	r0, r0, #0, 2
    756c:	03690000 	cmneq	r9, #0
    7570:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    7574:	00000000 	andeq	r0, r0, r0
    7578:	33cd0000 	biccc	r0, sp, #0
    757c:	d9020000 	stmdble	r2, {}	; <UNPREDICTABLE>
    7580:	01000041 	tsteq	r0, r1, asr #32
    7584:	029fab04 	addseq	sl, pc, #4, 22	; 0x1000
    7588:	6d030000 	stcvs	0, cr0, [r3, #-0]
    758c:	7200003e 	andvc	r0, r0, #62	; 0x3e
    7590:	003e9c03 	eorseq	r9, lr, r3, lsl #24
    7594:	00037400 	andeq	r7, r3, r0, lsl #8
    7598:	7500003f 	strvc	r0, [r0, #-63]	; 0x3f
    759c:	003d7003 	eorseq	r7, sp, r3
    75a0:	5a037600 	bpl	e4da8 <_Min_Stack_Size+0xe49a8>
    75a4:	7b00003f 	blvc	76a8 <_Min_Stack_Size+0x72a8>
    75a8:	00417003 	subeq	r7, r1, r3
    75ac:	b5037c00 	strlt	r7, [r3, #-3072]	; 0xc00
    75b0:	7e000042 	cdpvc	0, 0, cr0, cr0, cr2, {2}
    75b4:	003cd903 	eorseq	sp, ip, r3, lsl #18
    75b8:	81037f00 	tsthi	r3, r0, lsl #30
    75bc:	0000003e 	andeq	r0, r0, lr, lsr r0
    75c0:	00413803 	subeq	r3, r1, r3, lsl #16
    75c4:	b2030100 	andlt	r0, r3, #0, 2
    75c8:	0200003e 	andeq	r0, r0, #62	; 0x3e
    75cc:	003b9203 	eorseq	r9, fp, r3, lsl #4
    75d0:	21030300 	mrscs	r0, SP_svc
    75d4:	0400003c 	streq	r0, [r0], #-60	; 0x3c
    75d8:	0041b003 	subeq	fp, r1, r3
    75dc:	41030500 	tstmi	r3, r0, lsl #10
    75e0:	06000041 	streq	r0, [r0], -r1, asr #32
    75e4:	003e0d03 	eorseq	r0, lr, r3, lsl #26
    75e8:	a0030700 	andge	r0, r3, r0, lsl #14
    75ec:	0800003b 	stmdaeq	r0, {r0, r1, r3, r4, r5}
    75f0:	0042aa03 	subeq	sl, r2, r3, lsl #20
    75f4:	c4030900 	strgt	r0, [r3], #-2304	; 0x900
    75f8:	0a00003f 	beq	76fc <_Min_Stack_Size+0x72fc>
    75fc:	00407e03 	subeq	r7, r0, r3, lsl #28
    7600:	13030b00 	movwne	r0, #15104	; 0x3b00
    7604:	0c000040 	stceq	0, cr0, [r0], {64}	; 0x40
    7608:	003d0a03 	eorseq	r0, sp, r3, lsl #20
    760c:	b9030d00 	stmdblt	r3, {r8, sl, fp}
    7610:	0e000041 	cdpeq	0, 0, cr0, cr0, cr1, {2}
    7614:	00414c03 	subeq	r4, r1, r3, lsl #24
    7618:	25030f00 	strcs	r0, [r3, #-3840]	; 0xf00
    761c:	1000003e 	andne	r0, r0, lr, lsr r0
    7620:	003bab03 	eorseq	sl, fp, r3, lsl #22
    7624:	23031100 	movwcs	r1, #12544	; 0x3100
    7628:	12000041 	andne	r0, r0, #65	; 0x41
    762c:	003e1803 	eorseq	r1, lr, r3, lsl #16
    7630:	8a031300 	bhi	cc238 <_Min_Stack_Size+0xcbe38>
    7634:	1400003d 	strne	r0, [r0], #-61	; 0x3d
    7638:	00422703 	subeq	r2, r2, r3, lsl #14
    763c:	c2031500 	andgt	r1, r3, #0, 10
    7640:	1600003e 			; <UNDEFINED> instruction: 0x1600003e
    7644:	00425603 	subeq	r5, r2, r3, lsl #12
    7648:	19031700 	stmdbne	r3, {r8, r9, sl, ip}
    764c:	1800003f 	stmdane	r0, {r0, r1, r2, r3, r4, r5}
    7650:	0041cb03 	subeq	ip, r1, r3, lsl #22
    7654:	b7031900 	strlt	r1, [r3, -r0, lsl #18]
    7658:	1a00003c 	bne	7750 <_Min_Stack_Size+0x7350>
    765c:	003df203 	eorseq	pc, sp, r3, lsl #4
    7660:	41031b00 	tstmi	r3, r0, lsl #22
    7664:	1c00003c 	stcne	0, cr0, [r0], {60}	; 0x3c
    7668:	0040eb03 	subeq	lr, r0, r3, lsl #22
    766c:	ac031d00 	stcge	13, cr1, [r3], {-0}
    7670:	1e00003d 	mcrne	0, 0, r0, cr0, cr13, {1}
    7674:	003ddd03 	eorseq	sp, sp, r3, lsl #26
    7678:	38031f00 	stmdacc	r3, {r8, r9, sl, fp, ip}
    767c:	2000003d 	andcs	r0, r0, sp, lsr r0
    7680:	003fe803 	eorseq	lr, pc, r3, lsl #16
    7684:	f3032100 	vrhadd.u8	d2, d3, d0
    7688:	2200003e 	andcs	r0, r0, #62	; 0x3e
    768c:	003f5003 	eorseq	r5, pc, r3
    7690:	78032300 	stmdavc	r3, {r8, r9, sp}
    7694:	2400003c 	strcs	r0, [r0], #-60	; 0x3c
    7698:	0040f503 	subeq	pc, r0, r3, lsl #10
    769c:	b6032500 	strlt	r2, [r3], -r0, lsl #10
    76a0:	2600003d 			; <UNDEFINED> instruction: 0x2600003d
    76a4:	003ce603 	eorseq	lr, ip, r3, lsl #12
    76a8:	dc032700 	stcle	7, cr2, [r3], {-0}
    76ac:	28000040 	stmdacs	r0, {r6}
    76b0:	0040a303 	subeq	sl, r0, r3, lsl #6
    76b4:	a2032900 	andge	r2, r3, #0, 18
    76b8:	2a00003f 	bcs	77bc <_Min_Stack_Size+0x73bc>
    76bc:	003c8203 	eorseq	r8, ip, r3, lsl #4
    76c0:	bd032b00 	vstrlt	d2, [r3, #-0]
    76c4:	2c00003b 	stccs	0, cr0, [r0], {59}	; 0x3b
    76c8:	003e3703 	eorseq	r3, lr, r3, lsl #14
    76cc:	63032d00 	movwvs	r2, #15616	; 0x3d00
    76d0:	2e000042 	cdpcs	0, 0, cr0, cr0, cr2, {2}
    76d4:	0042d403 	subeq	sp, r2, r3, lsl #8
    76d8:	bc032f00 	stclt	15, cr2, [r3], {-0}
    76dc:	30000040 	andcc	r0, r0, r0, asr #32
    76e0:	00407403 	subeq	r7, r0, r3, lsl #8
    76e4:	66033100 	strvs	r3, [r3], -r0, lsl #2
    76e8:	3200003d 	andcc	r0, r0, #61	; 0x3d
    76ec:	003c1703 	eorseq	r1, ip, r3, lsl #14
    76f0:	97033300 	strls	r3, [r3, -r0, lsl #6]
    76f4:	3400003f 	strcc	r0, [r0], #-63	; 0x3f
    76f8:	003f0e03 	eorseq	r0, pc, r3, lsl #28
    76fc:	cf033500 	svcgt	0x00033500
    7700:	3600003f 			; <UNDEFINED> instruction: 0x3600003f
    7704:	003f2c03 	eorseq	r2, pc, r3, lsl #24
    7708:	d0033700 	andle	r3, r3, r0, lsl #14
    770c:	3800003e 	stmdacc	r0, {r1, r2, r3, r4, r5}
    7710:	003c0503 	eorseq	r0, ip, r3, lsl #10
    7714:	e6033900 	str	r3, [r3], -r0, lsl #18
    7718:	3a000042 	bcc	7828 <_Min_Stack_Size+0x7428>
    771c:	00402f03 	subeq	r2, r0, r3, lsl #30
    7720:	1c033b00 	stcne	11, cr3, [r3], {-0}
    7724:	3c00003d 	stccc	0, cr0, [r0], {61}	; 0x3d
    7728:	00419b03 	subeq	r9, r1, r3, lsl #22
    772c:	36033d00 	strcc	r3, [r3], -r0, lsl #26
    7730:	3e00003f 	mcrcc	0, 0, r0, cr0, cr15, {1}
    7734:	00404103 	subeq	r4, r0, r3, lsl #2
    7738:	5e033f00 	cdppl	15, 0, cr3, cr3, cr0, {0}
    773c:	c000003c 	andgt	r0, r0, ip, lsr r0
    7740:	41150300 	tstmi	r5, r0, lsl #6
    7744:	00c10000 	sbceq	r0, r1, r0
    7748:	003d4503 	eorseq	r4, sp, r3, lsl #10
    774c:	0300c200 	movweq	ip, #512	; 0x200
    7750:	00003e61 	andeq	r3, r0, r1, ror #28
    7754:	a50300c3 	strge	r0, [r3, #-195]	; 0xc3
    7758:	c400003c 	strgt	r0, [r0], #-60	; 0x3c
    775c:	415e0300 	cmpmi	lr, r0, lsl #6
    7760:	00c50000 	sbceq	r0, r5, r0
    7764:	003e4f03 	eorseq	r4, lr, r3, lsl #30
    7768:	0300c600 	movweq	ip, #1536	; 0x600
    776c:	00003c6c 	andeq	r3, r0, ip, ror #24
    7770:	8e0300c7 	cdphi	0, 0, cr0, cr3, cr7, {6}
    7774:	c8000041 	stmdagt	r0, {r0, r6}
    7778:	40c50300 	sbcmi	r0, r5, r0, lsl #6
    777c:	00c90000 	sbceq	r0, r9, r0
    7780:	00421303 	subeq	r1, r2, r3, lsl #6
    7784:	0300ca00 	movweq	ip, #2560	; 0xa00
    7788:	000042c1 	andeq	r4, r0, r1, asr #5
    778c:	8b0300cb 	blhi	c7ac0 <_Min_Stack_Size+0xc76c0>
    7790:	cc00003e 	stcgt	0, cr0, [r0], {62}	; 0x3e
    7794:	3f440300 	svccc	0x00440300
    7798:	00cd0000 	sbceq	r0, sp, r0
    779c:	003c3703 	eorseq	r3, ip, r3, lsl #14
    77a0:	0300ce00 	movweq	ip, #3584	; 0xe00
    77a4:	000040d2 	ldrdeq	r4, [r0], -r2
    77a8:	ff0300cf 			; <UNDEFINED> instruction: 0xff0300cf
    77ac:	d000003d 	andle	r0, r0, sp, lsr r0
    77b0:	3f8e0300 	svccc	0x008e0300
    77b4:	00d10000 	sbcseq	r0, r1, r0
    77b8:	00410103 	subeq	r0, r1, r3, lsl #2
    77bc:	0300d200 	movweq	sp, #512	; 0x200
    77c0:	00003dc2 	andeq	r3, r0, r2, asr #27
    77c4:	b20300d3 	andlt	r0, r3, #211	; 0xd3
    77c8:	d4000040 	strle	r0, [r0], #-64	; 0x40
    77cc:	3d980300 	ldccc	3, cr0, [r8]
    77d0:	00d50000 	sbcseq	r0, r5, r0
    77d4:	003d2e03 	eorseq	r2, sp, r3, lsl #28
    77d8:	0300d600 	movweq	sp, #1536	; 0x600
    77dc:	00003da2 	andeq	r3, r0, r2, lsr #27
    77e0:	800300d7 	ldrdhi	r0, [r3], -r7
    77e4:	d800003d 	stmdale	r0, {r0, r2, r3, r4, r5}
    77e8:	42060300 	andmi	r0, r6, #0, 6
    77ec:	00d90000 	sbcseq	r0, r9, r0
    77f0:	003fdd03 	eorseq	sp, pc, r3, lsl #26
    77f4:	0000da00 	andeq	sp, r0, r0, lsl #20
    77f8:	a6060104 	strge	r0, [r6], -r4, lsl #2
    77fc:	05000002 	streq	r0, [r0, #-2]
    7800:	00000233 	andeq	r0, r0, r3, lsr r2
    7804:	02b11d02 	adcseq	r1, r1, #2, 26	; 0x80
    7808:	01040000 	mrseq	r0, (UNDEF: 4)
    780c:	0002a408 	andeq	sl, r2, r8, lsl #8
    7810:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    7814:	0000003a 	andeq	r0, r0, sl, lsr r0
    7818:	00007c05 	andeq	r7, r0, r5, lsl #24
    781c:	ca2b0200 	bgt	ac8024 <_Min_Stack_Size+0xac7c24>
    7820:	04000002 	streq	r0, [r0], #-2
    7824:	034b0702 	movteq	r0, #46850	; 0xb702
    7828:	45050000 	strmi	r0, [r5, #-0]
    782c:	02000004 	andeq	r0, r0, #4
    7830:	0002dc3f 	andeq	sp, r2, pc, lsr ip
    7834:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    7838:	00000100 	andeq	r0, r0, r0, lsl #2
    783c:	00006005 	andeq	r6, r0, r5
    7840:	ee410200 	cdp	2, 4, cr0, cr1, cr0, {0}
    7844:	04000002 	streq	r0, [r0], #-2
    7848:	02f50704 	rscseq	r0, r5, #4, 14	; 0x100000
    784c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7850:	0000fb05 	andeq	pc, r0, r5, lsl #22
    7854:	07080400 	streq	r0, [r8, -r0, lsl #8]
    7858:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    785c:	69050406 	stmdbvs	r5, {r1, r2, sl}
    7860:	0400746e 	streq	r7, [r0], #-1134	; 0x46e
    7864:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    7868:	35050000 	strcc	r0, [r5, #-0]
    786c:	03000002 	movweq	r0, #2
    7870:	0002a62a 	andeq	sl, r2, sl, lsr #12
    7874:	007e0500 	rsbseq	r0, lr, r0, lsl #10
    7878:	36030000 	strcc	r0, [r3], -r0
    787c:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    7880:	00044705 	andeq	r4, r4, r5, lsl #14
    7884:	d1410300 	mrsle	r0, (UNDEF: 113)
    7888:	05000002 	streq	r0, [r0, #-2]
    788c:	00000062 	andeq	r0, r0, r2, rrx
    7890:	02e34203 	rsceq	r4, r3, #805306368	; 0x30000000
    7894:	04040000 	streq	r0, [r4], #-0
    7898:	00004407 	andeq	r4, r0, r7, lsl #8
    789c:	03320700 	teqeq	r2, #0, 14
    78a0:	32080000 	andcc	r0, r8, #0
    78a4:	59000003 	stmdbpl	r0, {r0, r1}
    78a8:	09000003 	stmdbeq	r0, {r0, r1}
    78ac:	0000033d 	andeq	r0, r0, sp, lsr r3
    78b0:	32080001 	andcc	r0, r8, #1
    78b4:	69000003 	stmdbvs	r0, {r0, r1}
    78b8:	09000003 	stmdbeq	r0, {r0, r1}
    78bc:	0000033d 	andeq	r0, r0, sp, lsr r3
    78c0:	1c070000 	stcne	0, cr0, [r7], {-0}
    78c4:	07000003 	streq	r0, [r0, -r3]
    78c8:	00000327 	andeq	r0, r0, r7, lsr #6
    78cc:	f904010a 			; <UNDEFINED> instruction: 0xf904010a
    78d0:	00038901 	andeq	r8, r3, r1, lsl #18
    78d4:	039d0300 	orrseq	r0, sp, #0, 6
    78d8:	03000000 	movweq	r0, #0
    78dc:	000000b2 	strheq	r0, [r0], -r2
    78e0:	3e0b0001 	cdpcc	0, 0, cr0, cr11, cr1, {0}
    78e4:	04000008 	streq	r0, [r0], #-8
    78e8:	037301f9 	cmneq	r3, #1073741886	; 0x4000003e
    78ec:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    78f0:	ec02b104 	stfd	f3, [r2], {4}
    78f4:	0d000003 	stceq	0, cr0, [r0, #-12]
    78f8:	04005243 	streq	r5, [r0], #-579	; 0x243
    78fc:	034402b3 	movteq	r0, #17075	; 0x42b3
    7900:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7904:	00001e2d 	andeq	r1, r0, sp, lsr #28
    7908:	4402b404 	strmi	fp, [r2], #-1028	; 0x404
    790c:	04000003 	streq	r0, [r0], #-3
    7910:	5241500d 	subpl	r5, r1, #13
    7914:	02b50400 	adcseq	r0, r5, #0, 8
    7918:	00000344 	andeq	r0, r0, r4, asr #6
    791c:	1daa0e08 	stcne	14, cr0, [sl, #32]!
    7920:	b6040000 	strlt	r0, [r4], -r0
    7924:	00034402 	andeq	r4, r3, r2, lsl #8
    7928:	380e0c00 	stmdacc	lr, {sl, fp}
    792c:	0400001d 	streq	r0, [r0], #-29
    7930:	034402b7 	movteq	r0, #17079	; 0x42b7
    7934:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7938:	00524346 	subseq	r4, r2, r6, asr #6
    793c:	4402b804 	strmi	fp, [r2], #-2052	; 0x804
    7940:	14000003 	strne	r0, [r0], #-3
    7944:	1b400b00 	blne	100a54c <_Min_Stack_Size+0x100a14c>
    7948:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    794c:	00039502 	andeq	r9, r3, r2, lsl #10
    7950:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
    7954:	048403d4 	streq	r0, [r4], #980	; 0x3d4
    7958:	2d0e0000 	stccs	0, cr0, [lr, #-0]
    795c:	04000002 	streq	r0, [r0], #-2
    7960:	034403d6 	movteq	r0, #17366	; 0x43d6
    7964:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7968:	000000e9 	andeq	r0, r0, r9, ror #1
    796c:	4403d704 	strmi	sp, [r3], #-1796	; 0x704
    7970:	04000003 	streq	r0, [r0], #-3
    7974:	0003eb0e 	andeq	lr, r3, lr, lsl #22
    7978:	03d80400 	bicseq	r0, r8, #0, 8
    797c:	00000344 	andeq	r0, r0, r4, asr #6
    7980:	01170e08 	tsteq	r7, r8, lsl #28
    7984:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    7988:	00034403 	andeq	r4, r3, r3, lsl #8
    798c:	490d0c00 	stmdbmi	sp, {sl, fp}
    7990:	04005244 	streq	r5, [r0], #-580	; 0x244
    7994:	034403da 	movteq	r0, #17370	; 0x43da
    7998:	0d100000 	ldceq	0, cr0, [r0, #-0]
    799c:	0052444f 	subseq	r4, r2, pc, asr #8
    79a0:	4403db04 	strmi	sp, [r3], #-2820	; 0xb04
    79a4:	14000003 	strne	r0, [r0], #-3
    79a8:	0004920e 	andeq	r9, r4, lr, lsl #4
    79ac:	03dc0400 	bicseq	r0, ip, #0, 8
    79b0:	00000369 	andeq	r0, r0, r9, ror #6
    79b4:	02150e18 	andseq	r0, r5, #24, 28	; 0x180
    79b8:	dd040000 	stcle	0, cr0, [r4, #-0]
    79bc:	00036903 	andeq	r6, r3, r3, lsl #18
    79c0:	980e1a00 	stmdals	lr, {r9, fp, ip}
    79c4:	04000004 	streq	r0, [r0], #-4
    79c8:	034403de 	movteq	r0, #17374	; 0x43de
    79cc:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    79d0:	00524641 	subseq	r4, r2, r1, asr #12
    79d4:	8403df04 	strhi	sp, [r3], #-3844	; 0xf04
    79d8:	20000004 	andcs	r0, r0, r4
    79dc:	03490700 	movteq	r0, #38656	; 0x9700
    79e0:	000b0000 	andeq	r0, fp, r0
    79e4:	04000000 	streq	r0, [r0], #-0
    79e8:	03f803e0 	mvnseq	r0, #224, 6	; 0x80000003
    79ec:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    79f0:	a203f304 	andge	pc, r3, #4, 6	; 0x10000000
    79f4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    79f8:	00315243 	eorseq	r5, r1, r3, asr #4
    79fc:	6903f504 	stmdbvs	r3, {r2, r8, sl, ip, sp, lr, pc}
    7a00:	00000003 	andeq	r0, r0, r3
    7a04:	0006550e 	andeq	r5, r6, lr, lsl #10
    7a08:	03f60400 	mvnseq	r0, #0, 8
    7a0c:	0000031c 	andeq	r0, r0, ip, lsl r3
    7a10:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    7a14:	f7040032 			; <UNDEFINED> instruction: 0xf7040032
    7a18:	00036903 	andeq	r6, r3, r3, lsl #18
    7a1c:	5f0e0400 	svcpl	0x000e0400
    7a20:	04000006 	streq	r0, [r0], #-6
    7a24:	031c03f8 	tsteq	ip, #248, 6	; 0xe0000003
    7a28:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    7a2c:	000017da 	ldrdeq	r1, [r0], -sl
    7a30:	6903f904 	stmdbvs	r3, {r2, r8, fp, ip, sp, lr, pc}
    7a34:	08000003 	stmdaeq	r0, {r0, r1}
    7a38:	0006690e 	andeq	r6, r6, lr, lsl #18
    7a3c:	03fa0400 	mvnseq	r0, #0, 8
    7a40:	0000031c 	andeq	r0, r0, ip, lsl r3
    7a44:	1ad30e0a 	bne	ff4cb274 <_estack+0xdf49b274>
    7a48:	fb040000 	blx	107a52 <_Min_Stack_Size+0x107652>
    7a4c:	00036903 	andeq	r6, r3, r3, lsl #18
    7a50:	550e0c00 	strpl	r0, [lr, #-3072]	; 0xc00
    7a54:	04000005 	streq	r0, [r0], #-5
    7a58:	031c03fc 	tsteq	ip, #252, 6	; 0xf0000003
    7a5c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    7a60:	04005244 	streq	r5, [r0], #-580	; 0x244
    7a64:	036903fd 	cmneq	r9, #-201326589	; 0xf4000003
    7a68:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    7a6c:	0000067f 	andeq	r0, r0, pc, ror r6
    7a70:	1c03fe04 	stcne	14, cr15, [r3], {4}
    7a74:	12000003 	andne	r0, r0, #3
    7a78:	3152530d 	cmpcc	r2, sp, lsl #6
    7a7c:	03ff0400 	mvnseq	r0, #0, 8
    7a80:	00000369 	andeq	r0, r0, r9, ror #6
    7a84:	06890e14 	pkhbteq	r0, r9, r4, lsl #28
    7a88:	00040000 	andeq	r0, r4, r0
    7a8c:	00031c04 	andeq	r1, r3, r4, lsl #24
    7a90:	530d1600 	movwpl	r1, #54784	; 0xd600
    7a94:	04003252 	streq	r3, [r0], #-594	; 0x252
    7a98:	03690401 	cmneq	r9, #16777216	; 0x1000000
    7a9c:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    7aa0:	00000693 	muleq	r0, r3, r6
    7aa4:	1c040204 	sfmne	f0, 4, [r4], {4}
    7aa8:	1a000003 	bne	7abc <_Min_Stack_Size+0x76bc>
    7aac:	5243430d 	subpl	r4, r3, #872415232	; 0x34000000
    7ab0:	04030400 	streq	r0, [r3], #-1024	; 0x400
    7ab4:	00000369 	andeq	r0, r0, r9, ror #6
    7ab8:	19850e1c 	stmibne	r5, {r2, r3, r4, r9, sl, fp}
    7abc:	04040000 	streq	r0, [r4], #-0
    7ac0:	00031c04 	andeq	r1, r3, r4, lsl #24
    7ac4:	3c0e1e00 	stccc	14, cr1, [lr], {-0}
    7ac8:	04000017 	streq	r0, [r0], #-23
    7acc:	03690405 	cmneq	r9, #83886080	; 0x5000000
    7ad0:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    7ad4:	0000198f 	andeq	r1, r0, pc, lsl #19
    7ad8:	1c040604 	stcne	6, cr0, [r4], {4}
    7adc:	22000003 	andcs	r0, r0, #3
    7ae0:	0017df0e 	andseq	sp, r7, lr, lsl #30
    7ae4:	04070400 	streq	r0, [r7], #-1024	; 0x400
    7ae8:	00000369 	andeq	r0, r0, r9, ror #6
    7aec:	19990e24 	ldmibne	r9, {r2, r5, r9, sl, fp}
    7af0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7af4:	00031c04 	andeq	r1, r3, r4, lsl #24
    7af8:	0b002600 	bleq	11300 <_Min_Stack_Size+0x10f00>
    7afc:	00001810 	andeq	r1, r0, r0, lsl r8
    7b00:	95040904 	strls	r0, [r4, #-2308]	; 0x904
    7b04:	0f000004 	svceq	0x00000004
    7b08:	6b36053c 	blvs	d89000 <_Min_Stack_Size+0xd88c00>
    7b0c:	10000006 	andne	r0, r0, r6
    7b10:	00001e32 	andeq	r1, r0, r2, lsr lr
    7b14:	03323805 	teqeq	r2, #327680	; 0x50000
    7b18:	10000000 	andne	r0, r0, r0
    7b1c:	00001bfd 	strdeq	r1, [r0], -sp
    7b20:	03323b05 	teqeq	r2, #5120	; 0x1400
    7b24:	10040000 	andne	r0, r4, r0
    7b28:	00001e4d 	andeq	r1, r0, sp, asr #28
    7b2c:	03323d05 	teqeq	r2, #320	; 0x140
    7b30:	10080000 	andne	r0, r8, r0
    7b34:	00001bf5 	strdeq	r1, [r0], -r5
    7b38:	03324105 	teqeq	r2, #1073741825	; 0x40000001
    7b3c:	100c0000 	andne	r0, ip, r0
    7b40:	00001e61 	andeq	r1, r0, r1, ror #28
    7b44:	03324505 	teqeq	r2, #20971520	; 0x1400000
    7b48:	10100000 	andsne	r0, r0, r0
    7b4c:	00001c58 	andeq	r1, r0, r8, asr ip
    7b50:	03324905 	teqeq	r2, #81920	; 0x14000
    7b54:	10140000 	andsne	r0, r4, r0
    7b58:	00001c14 	andeq	r1, r0, r4, lsl ip
    7b5c:	03324c05 	teqeq	r2, #1280	; 0x500
    7b60:	10180000 	andsne	r0, r8, r0
    7b64:	00001cb5 			; <UNDEFINED> instruction: 0x00001cb5
    7b68:	03324f05 	teqeq	r2, #5, 30
    7b6c:	101c0000 	andsne	r0, ip, r0
    7b70:	00001ea4 	andeq	r1, r0, r4, lsr #29
    7b74:	03325205 	teqeq	r2, #1342177280	; 0x50000000
    7b78:	10200000 	eorne	r0, r0, r0
    7b7c:	00001e70 	andeq	r1, r0, r0, ror lr
    7b80:	03325505 	teqeq	r2, #20971520	; 0x1400000
    7b84:	10240000 	eorne	r0, r4, r0
    7b88:	00001b59 	andeq	r1, r0, r9, asr fp
    7b8c:	03325a05 	teqeq	r2, #20480	; 0x5000
    7b90:	10280000 	eorne	r0, r8, r0
    7b94:	00001e0f 	andeq	r1, r0, pc, lsl #28
    7b98:	03325d05 	teqeq	r2, #320	; 0x140
    7b9c:	102c0000 	eorne	r0, ip, r0
    7ba0:	00001cf7 	strdeq	r1, [r0], -r7
    7ba4:	03326205 	teqeq	r2, #1342177280	; 0x50000000
    7ba8:	10300000 	eorsne	r0, r0, r0
    7bac:	00001b66 	andeq	r1, r0, r6, ror #22
    7bb0:	03326505 	teqeq	r2, #20971520	; 0x1400000
    7bb4:	10340000 	eorsne	r0, r4, r0
    7bb8:	00001b85 	andeq	r1, r0, r5, lsl #23
    7bbc:	03326a05 	teqeq	r2, #20480	; 0x5000
    7bc0:	00380000 	eorseq	r0, r8, r0
    7bc4:	001ccc05 	andseq	ip, ip, r5, lsl #24
    7bc8:	ae6e0500 	cdpge	5, 6, cr0, cr14, cr0, {0}
    7bcc:	11000005 	tstne	r0, r5
    7bd0:	8b370601 	blhi	dc93dc <_Min_Stack_Size+0xdc8fdc>
    7bd4:	03000006 	movweq	r0, #6
    7bd8:	000022cf 	andeq	r2, r0, pc, asr #5
    7bdc:	22850300 	addcs	r0, r5, #0, 6
    7be0:	00040000 	andeq	r0, r4, r0
    7be4:	0022f205 	eoreq	pc, r2, r5, lsl #4
    7be8:	763a0600 	ldrtvc	r0, [sl], -r0, lsl #12
    7bec:	11000006 	tstne	r0, r6
    7bf0:	b1430601 	cmplt	r3, r1, lsl #12
    7bf4:	03000006 	movweq	r0, #6
    7bf8:	00002315 	andeq	r2, r0, r5, lsl r3
    7bfc:	239a0308 	orrscs	r0, sl, #8, 6	; 0x20000000
    7c00:	030c0000 	movweq	r0, #49152	; 0xc000
    7c04:	00002329 	andeq	r2, r0, r9, lsr #6
    7c08:	b4050010 	strlt	r0, [r5], #-16
    7c0c:	06000023 	streq	r0, [r0], -r3, lsr #32
    7c10:	00069647 	andeq	r9, r6, r7, asr #12
    7c14:	06080f00 	streq	r0, [r8], -r0, lsl #30
    7c18:	0006f550 	andeq	pc, r6, r0, asr r5	; <UNPREDICTABLE>
    7c1c:	22571000 	subscs	r1, r7, #0
    7c20:	52060000 	andpl	r0, r6, #0
    7c24:	00000332 	andeq	r0, r0, r2, lsr r3
    7c28:	22611000 	rsbcs	r1, r1, #0
    7c2c:	55060000 	strpl	r0, [r6, #-0]
    7c30:	0000068b 	andeq	r0, r0, fp, lsl #13
    7c34:	22781004 	rsbscs	r1, r8, #4
    7c38:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    7c3c:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    7c40:	226b1005 	rsbcs	r1, fp, #5
    7c44:	5b060000 	blpl	187c4c <_Min_Stack_Size+0x18784c>
    7c48:	00000389 	andeq	r0, r0, r9, lsl #7
    7c4c:	ae050006 	cdpge	0, 0, cr0, cr5, cr6, {0}
    7c50:	06000022 	streq	r0, [r0], -r2, lsr #32
    7c54:	0006bc5d 	andeq	fp, r6, sp, asr ip
    7c58:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7c5c:	00072142 	andeq	r2, r7, r2, asr #2
    7c60:	011d0300 	tsteq	sp, r0, lsl #6
    7c64:	03000000 	movweq	r0, #0
    7c68:	00000109 	andeq	r0, r0, r9, lsl #2
    7c6c:	00920301 	addseq	r0, r2, r1, lsl #6
    7c70:	03020000 	movweq	r0, #8192	; 0x2000
    7c74:	000000c4 	andeq	r0, r0, r4, asr #1
    7c78:	1c050003 	stcne	0, cr0, [r5], {3}
    7c7c:	07000000 	streq	r0, [r0, -r0]
    7c80:	00070047 	andeq	r0, r7, r7, asr #32
    7c84:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7c88:	0007414f 	andeq	r4, r7, pc, asr #2
    7c8c:	027d0300 	rsbseq	r0, sp, #0, 6
    7c90:	03000000 	movweq	r0, #0
    7c94:	0000004d 	andeq	r0, r0, sp, asr #32
    7c98:	d7050001 	strle	r0, [r5, -r1]
    7c9c:	07000000 	streq	r0, [r0, -r0]
    7ca0:	00072c52 	andeq	r2, r7, r2, asr ip
    7ca4:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7ca8:	00076d5a 	andeq	r6, r7, sl, asr sp
    7cac:	03ca0300 	biceq	r0, sl, #0, 6
    7cb0:	03000000 	movweq	r0, #0
    7cb4:	000003d9 	ldrdeq	r0, [r0], -r9
    7cb8:	038d0301 	orreq	r0, sp, #67108864	; 0x4000000
    7cbc:	03020000 	movweq	r0, #8192	; 0x2000
    7cc0:	0000023d 	andeq	r0, r0, sp, lsr r2
    7cc4:	8b050003 	blhi	147cd8 <_Min_Stack_Size+0x1478d8>
    7cc8:	07000002 	streq	r0, [r0, -r2]
    7ccc:	00074c5f 	andeq	r4, r7, pc, asr ip
    7cd0:	07011100 	streq	r1, [r1, -r0, lsl #2]
    7cd4:	0007936e 	andeq	r9, r7, lr, ror #6
    7cd8:	04210300 	strteq	r0, [r1], #-768	; 0x300
    7cdc:	03000000 	movweq	r0, #0
    7ce0:	0000002d 	andeq	r0, r0, sp, lsr #32
    7ce4:	04050301 	streq	r0, [r5], #-769	; 0x301
    7ce8:	00020000 	andeq	r0, r2, r0
    7cec:	00046605 	andeq	r6, r4, r5, lsl #12
    7cf0:	78720700 	ldmdavc	r2!, {r8, r9, sl}^
    7cf4:	0f000007 	svceq	0x00000007
    7cf8:	e3840708 	orr	r0, r4, #8, 14	; 0x200000
    7cfc:	10000007 	andne	r0, r0, r7
    7d00:	0000000d 	andeq	r0, r0, sp
    7d04:	03328607 	teqeq	r2, #7340032	; 0x700000
    7d08:	10000000 	andne	r0, r0, r0
    7d0c:	000004a8 	andeq	r0, r0, r8, lsr #9
    7d10:	07218907 	streq	r8, [r1, -r7, lsl #18]!
    7d14:	10040000 	andne	r0, r4, r0
    7d18:	000000b9 	strheq	r0, [r0], -r9
    7d1c:	076d8c07 	strbeq	r8, [sp, -r7, lsl #24]!
    7d20:	10050000 	andne	r0, r5, r0
    7d24:	00000087 	andeq	r0, r0, r7, lsl #1
    7d28:	07418f07 	strbeq	r8, [r1, -r7, lsl #30]
    7d2c:	10060000 	andne	r0, r6, r0
    7d30:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    7d34:	07939207 	ldreq	r9, [r3, r7, lsl #4]
    7d38:	00070000 	andeq	r0, r7, r0
    7d3c:	00031a05 	andeq	r1, r3, r5, lsl #20
    7d40:	9e940700 	cdpls	7, 9, cr0, cr4, cr0, {0}
    7d44:	0f000007 	svceq	0x00000007
    7d48:	27360804 	ldrcs	r0, [r6, -r4, lsl #16]!
    7d4c:	10000008 	andne	r0, r0, r8
    7d50:	000007e7 	andeq	r0, r0, r7, ror #15
    7d54:	03113808 	tsteq	r1, #8, 16	; 0x80000
    7d58:	10000000 	andne	r0, r0, r0
    7d5c:	0000081c 	andeq	r0, r0, ip, lsl r8
    7d60:	03113d08 	tsteq	r1, #8, 26	; 0x200
    7d64:	10010000 	andne	r0, r1, r0
    7d68:	000007f7 	strdeq	r0, [r0], -r7
    7d6c:	03114208 	tsteq	r1, #8, 4	; 0x80000000
    7d70:	10020000 	andne	r0, r2, r0
    7d74:	000006f8 	strdeq	r0, [r0], -r8
    7d78:	03894708 	orreq	r4, r9, #8, 14	; 0x200000
    7d7c:	00030000 	andeq	r0, r3, r0
    7d80:	0006e705 	andeq	lr, r6, r5, lsl #14
    7d84:	ee4a0800 	cdp	8, 4, cr0, cr10, cr0, {0}
    7d88:	11000007 	tstne	r0, r7
    7d8c:	473c0901 	ldrmi	r0, [ip, -r1, lsl #18]!
    7d90:	03000008 	movweq	r0, #8
    7d94:	00004025 	andeq	r4, r0, r5, lsr #32
    7d98:	402a0300 	eormi	r0, sl, r0, lsl #6
    7d9c:	00010000 	andeq	r0, r1, r0
    7da0:	0041a405 	subeq	sl, r1, r5, lsl #8
    7da4:	323f0900 	eorscc	r0, pc, #0, 18
    7da8:	11000008 	tstne	r0, r8
    7dac:	61420901 	cmpvs	r2, r1, lsl #18
    7db0:	03000008 	movweq	r0, #8
    7db4:	00004068 	andeq	r4, r0, r8, rrx
    7db8:	fb050000 	blx	147dc2 <_Min_Stack_Size+0x1479c2>
    7dbc:	0900003c 	stmdbeq	r0, {r2, r3, r4, r5}
    7dc0:	00085244 	andeq	r5, r8, r4, asr #4
    7dc4:	09011100 	stmdbeq	r1, {r8, ip}
    7dc8:	00088147 	andeq	r8, r8, r7, asr #2
    7dcc:	3fb30300 	svccc	0x00b30300
    7dd0:	03000000 	movweq	r0, #0
    7dd4:	00003f66 	andeq	r3, r0, r6, ror #30
    7dd8:	90050001 	andls	r0, r5, r1
    7ddc:	09000040 	stmdbeq	r0, {r6}
    7de0:	00086c4a 	andeq	r6, r8, sl, asr #24
    7de4:	3ee21200 	cdpcc	2, 14, cr1, cr2, cr0, {0}
    7de8:	7a010000 	bvc	47df0 <_Min_Stack_Size+0x479f0>
    7dec:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
    7df0:	0000005c 	andeq	r0, r0, ip, asr r0
    7df4:	08be9c01 	ldmeq	lr!, {r0, sl, fp, ip, pc}
    7df8:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    7dfc:	01006465 	tsteq	r0, r5, ror #8
    7e00:	0008477a 	andeq	r4, r8, sl, ror r7
    7e04:	6f910200 	svcvs	0x00910200
    7e08:	00043214 	andeq	r3, r4, r4, lsl r2
    7e0c:	e37c0100 	cmn	ip, #0, 2
    7e10:	02000007 	andeq	r0, r0, #7
    7e14:	15007091 	strne	r7, [r0, #-145]	; 0x91
    7e18:	00003c96 	muleq	r0, r6, ip
    7e1c:	5eac9201 	cdppl	2, 10, cr9, cr12, cr1, {0}
    7e20:	00300800 	eorseq	r0, r0, r0, lsl #16
    7e24:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e28:	000008e2 	andeq	r0, r0, r2, ror #17
    7e2c:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    7e30:	47920100 	ldrmi	r0, [r2, r0, lsl #2]
    7e34:	02000008 	andeq	r0, r0, #8
    7e38:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    7e3c:	00003dcd 	andeq	r3, r0, sp, asr #27
    7e40:	5edc9f01 	cdppl	15, 13, cr9, cr12, cr1, {0}
    7e44:	00300800 	eorseq	r0, r0, r0, lsl #16
    7e48:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e4c:	00000906 	andeq	r0, r0, r6, lsl #18
    7e50:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    7e54:	479f0100 	ldrmi	r0, [pc, r0, lsl #2]
    7e58:	02000008 	andeq	r0, r0, #8
    7e5c:	15007791 	strne	r7, [r0, #-1937]	; 0x791
    7e60:	00003ff5 	strdeq	r3, [r0], -r5
    7e64:	5f0cac01 	svcpl	0x000cac01
    7e68:	003c0800 	eorseq	r0, ip, r0, lsl #16
    7e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e70:	0000092a 	andeq	r0, r0, sl, lsr #18
    7e74:	64654c13 	strbtvs	r4, [r5], #-3091	; 0xc13
    7e78:	47ac0100 	strmi	r0, [ip, r0, lsl #2]!
    7e7c:	02000008 	andeq	r0, r0, #8
    7e80:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    7e84:	00003b82 	andeq	r3, r0, r2, lsl #23
    7e88:	5f48bc01 	svcpl	0x0048bc01
    7e8c:	00940800 	addseq	r0, r4, r0, lsl #16
    7e90:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e94:	00000986 	andeq	r0, r0, r6, lsl #19
    7e98:	00406116 	subeq	r6, r0, r6, lsl r1
    7e9c:	61bc0100 			; <UNDEFINED> instruction: 0x61bc0100
    7ea0:	02000008 	andeq	r0, r0, #8
    7ea4:	35165f91 	ldrcc	r5, [r6, #-3985]	; 0xf91
    7ea8:	01000042 	tsteq	r0, r2, asr #32
    7eac:	000881bc 			; <UNDEFINED> instruction: 0x000881bc
    7eb0:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    7eb4:	00043214 	andeq	r3, r4, r4, lsl r2
    7eb8:	e3be0100 			; <UNDEFINED> instruction: 0xe3be0100
    7ebc:	02000007 	andeq	r0, r0, #7
    7ec0:	4e147091 	mrcmi	0, 0, r7, cr4, cr1, {4}
    7ec4:	01000040 	tsteq	r0, r0, asr #32
    7ec8:	0006f5bf 			; <UNDEFINED> instruction: 0x0006f5bf
    7ecc:	68910200 	ldmvs	r1, {r9}
    7ed0:	003c4b14 	eorseq	r4, ip, r4, lsl fp
    7ed4:	27c00100 	strbcs	r0, [r0, r0, lsl #2]
    7ed8:	02000008 	andeq	r0, r0, #8
    7edc:	17006491 			; <UNDEFINED> instruction: 0x17006491
    7ee0:	000041f2 	strdeq	r4, [r0], -r2
    7ee4:	0332e801 	teqeq	r2, #65536	; 0x10000
    7ee8:	5fdc0000 	svcpl	0x00dc0000
    7eec:	002c0800 	eoreq	r0, ip, r0, lsl #16
    7ef0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ef4:	000009ae 	andeq	r0, r0, lr, lsr #19
    7ef8:	00406116 	subeq	r6, r0, r6, lsl r1
    7efc:	61e80100 	mvnvs	r0, r0, lsl #2
    7f00:	02000008 	andeq	r0, r0, #8
    7f04:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    7f08:	000041de 	ldrdeq	r4, [r0], -lr
    7f0c:	6008f201 	andvs	pc, r8, r1, lsl #4
    7f10:	00b80800 	adcseq	r0, r8, r0, lsl #16
    7f14:	9c010000 	stcls	0, cr0, [r1], {-0}
    7f18:	000009d2 	ldrdeq	r0, [r0], -r2
    7f1c:	00043214 	andeq	r3, r4, r4, lsl r2
    7f20:	e3f40100 	mvns	r0, #0, 2
    7f24:	02000007 	andeq	r0, r0, #7
    7f28:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    7f2c:	00003bd0 	ldrdeq	r3, [r0], -r0
    7f30:	c0012301 	andgt	r2, r1, r1, lsl #6
    7f34:	98080060 	stmdals	r8, {r5, r6}
    7f38:	01000001 	tsteq	r0, r1
    7f3c:	0009f89c 	muleq	r9, ip, r8
    7f40:	04321900 	ldrteq	r1, [r2], #-2304	; 0x900
    7f44:	25010000 	strcs	r0, [r1, #-0]
    7f48:	0007e301 	andeq	lr, r7, r1, lsl #6
    7f4c:	70910200 	addsvc	r0, r1, r0, lsl #4
    7f50:	3f771800 	svccc	0x00771800
    7f54:	83010000 	movwhi	r0, #4096	; 0x1000
    7f58:	00625801 	rsbeq	r5, r2, r1, lsl #16
    7f5c:	00005c08 	andeq	r5, r0, r8, lsl #24
    7f60:	3c9c0100 	ldfccs	f0, [ip], {0}
    7f64:	1a00000a 	bne	7f94 <_Min_Stack_Size+0x7b94>
    7f68:	00003dea 	andeq	r3, r0, sl, ror #27
    7f6c:	32018301 	andcc	r8, r1, #67108864	; 0x4000000
    7f70:	02000003 	andeq	r0, r0, #3
    7f74:	651a7491 	ldrvs	r7, [sl, #-1169]	; 0x491
    7f78:	0100001e 	tsteq	r0, lr, lsl r0
    7f7c:	03320183 	teqeq	r2, #-1073741792	; 0xc0000020
    7f80:	91020000 	mrsls	r0, (UNDEF: 2)
    7f84:	18a31a70 	stmiane	r3!, {r4, r5, r6, r9, fp, ip}
    7f88:	83010000 	movwhi	r0, #4096	; 0x1000
    7f8c:	00033201 	andeq	r3, r3, r1, lsl #4
    7f90:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7f94:	04141b00 	ldreq	r1, [r4], #-2816	; 0xb00
    7f98:	a70a0000 	strge	r0, [sl, -r0]
    7f9c:	00036e06 	andeq	r6, r3, r6, lsl #28
    7fa0:	0a580800 	beq	1609fa8 <_Min_Stack_Size+0x1609ba8>
    7fa4:	0a580000 	beq	1607fac <_Min_Stack_Size+0x1607bac>
    7fa8:	3d090000 	stccc	0, cr0, [r9, #-0]
    7fac:	01000003 	tsteq	r0, r3
    7fb0:	89041c00 	stmdbhi	r4, {sl, fp, ip}
    7fb4:	1d000004 	stcne	0, cr0, [r0, #-16]
    7fb8:	00003ccf 	andeq	r3, r0, pc, asr #25
    7fbc:	0a484d01 	beq	121b3c8 <_Min_Stack_Size+0x121afc8>
    7fc0:	03050000 	movweq	r0, #20480	; 0x5000
    7fc4:	20000024 	andcs	r0, r0, r4, lsr #32
    7fc8:	00031c08 	andeq	r1, r3, r8, lsl #24
    7fcc:	000a7f00 	andeq	r7, sl, r0, lsl #30
    7fd0:	033d0900 	teqeq	sp, #0, 18
    7fd4:	00010000 	andeq	r0, r1, r0
    7fd8:	00410c1d 	subeq	r0, r1, sp, lsl ip
    7fdc:	904e0100 	subls	r0, lr, r0, lsl #2
    7fe0:	0500000a 	streq	r0, [r0, #-10]
    7fe4:	009fb803 	addseq	fp, pc, r3, lsl #16
    7fe8:	0a6f1e08 	beq	1bcf810 <_Min_Stack_Size+0x1bcf410>
    7fec:	f21d0000 	vhadd.s16	d0, d13, d0
    7ff0:	0100003c 	tsteq	r0, ip, lsr r0
    7ff4:	000aa64f 	andeq	sl, sl, pc, asr #12
    7ff8:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    7ffc:	1e08009f 	mcrne	0, 0, r0, cr8, cr15, {4}
    8000:	00000349 	andeq	r0, r0, r9, asr #6
    8004:	000a5808 	andeq	r5, sl, r8, lsl #16
    8008:	000abb00 	andeq	fp, sl, r0, lsl #22
    800c:	033d0900 	teqeq	sp, #0, 18
    8010:	00000000 	andeq	r0, r0, r0
    8014:	00412c1d 	subeq	r2, r1, sp, lsl ip
    8018:	ab510100 	blge	1448420 <_Min_Stack_Size+0x1448020>
    801c:	0500000a 	streq	r0, [r0, #-10]
    8020:	00002c03 	andeq	r2, r0, r3, lsl #24
    8024:	031c0820 	tsteq	ip, #32, 16	; 0x200000
    8028:	0adc0000 	beq	ff708030 <_estack+0xdf6d8030>
    802c:	3d090000 	stccc	0, cr0, [r9, #-0]
    8030:	00000003 	andeq	r0, r0, r3
    8034:	40081d00 	andmi	r1, r8, r0, lsl #26
    8038:	53010000 	movwpl	r0, #4096	; 0x1000
    803c:	00000aed 	andeq	r0, r0, sp, ror #21
    8040:	9fc40305 	svcls	0x00c40305
    8044:	cc1e0800 	ldcgt	8, cr0, [lr], {-0}
    8048:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    804c:	00003c2c 	andeq	r3, r0, ip, lsr #24
    8050:	0b035501 	bleq	dd45c <_Min_Stack_Size+0xdd05c>
    8054:	03050000 	movweq	r0, #20480	; 0x5000
    8058:	08009fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, pc}
    805c:	0003591e 	andeq	r5, r3, lr, lsl r9
    8060:	3be21d00 	blcc	ff88f468 <_estack+0xdf85f468>
    8064:	57010000 	strpl	r0, [r1, -r0]
    8068:	00000b19 	andeq	r0, r0, r9, lsl fp
    806c:	9fcc0305 	svcls	0x00cc0305
    8070:	cc1e0800 	ldcgt	8, cr0, [lr], {-0}
    8074:	0800000a 	stmdaeq	r0, {r1, r3}
    8078:	00000311 	andeq	r0, r0, r1, lsl r3
    807c:	00000b2e 	andeq	r0, r0, lr, lsr #22
    8080:	00033d09 	andeq	r3, r3, r9, lsl #26
    8084:	1d000000 	stcne	0, cr0, [r0, #-0]
    8088:	00003d53 	andeq	r3, r0, r3, asr sp
    808c:	0b3f5901 	bleq	fde498 <_Min_Stack_Size+0xfde098>
    8090:	03050000 	movweq	r0, #20480	; 0x5000
    8094:	08009fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip, pc}
    8098:	000b1e1e 	andeq	r1, fp, lr, lsl lr
    809c:	3bf31d00 	blcc	ffccf4a4 <_estack+0xdfc9f4a4>
    80a0:	5b010000 	blpl	480a8 <_Min_Stack_Size+0x47ca8>
    80a4:	00000b55 	andeq	r0, r0, r5, asr fp
    80a8:	9fd40305 	svcls	0x00d40305
    80ac:	1e1e0800 	cdpne	8, 1, cr0, cr14, cr0, {0}
    80b0:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    80b4:	00004182 	andeq	r4, r0, r2, lsl #3
    80b8:	0b6b5c01 	bleq	1adf0c4 <_Min_Stack_Size+0x1adecc4>
    80bc:	03050000 	movweq	r0, #20480	; 0x5000
    80c0:	08009fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}
    80c4:	000b1e1e 	andeq	r1, fp, lr, lsl lr
    80c8:	42411d00 	submi	r1, r1, #0, 26
    80cc:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    80d0:	0000066b 	andeq	r0, r0, fp, ror #12
    80d4:	00600305 	rsbeq	r0, r0, r5, lsl #6
    80d8:	4b1d2000 	blmi	7500e0 <_Min_Stack_Size+0x74fce0>
    80dc:	0100003c 	tsteq	r0, ip, lsr r0
    80e0:	0008275f 	andeq	r2, r8, pc, asr r7
    80e4:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    80e8:	00200000 	eoreq	r0, r0, r0
    80ec:	00000575 	andeq	r0, r0, r5, ror r5
    80f0:	176b0004 	strbne	r0, [fp, -r4]!
    80f4:	01040000 	mrseq	r0, (UNDEF: 4)
    80f8:	0000012a 	andeq	r0, r0, sl, lsr #2
    80fc:	0042f801 	subeq	pc, r2, r1, lsl #16
    8100:	00036900 	andeq	r6, r3, r0, lsl #18
    8104:	0009d800 	andeq	sp, r9, r0, lsl #16
    8108:	00000000 	andeq	r0, r0, r0
    810c:	0036ac00 	eorseq	sl, r6, r0, lsl #24
    8110:	06010200 	streq	r0, [r1], -r0, lsl #4
    8114:	000002a6 	andeq	r0, r0, r6, lsr #5
    8118:	00023303 	andeq	r3, r2, r3, lsl #6
    811c:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    8120:	02000000 	andeq	r0, r0, #0
    8124:	02a40801 	adceq	r0, r4, #65536	; 0x10000
    8128:	02020000 	andeq	r0, r2, #0
    812c:	00003a05 	andeq	r3, r0, r5, lsl #20
    8130:	007c0300 	rsbseq	r0, ip, r0, lsl #6
    8134:	2b020000 	blcs	8813c <_Min_Stack_Size+0x87d3c>
    8138:	00000050 	andeq	r0, r0, r0, asr r0
    813c:	4b070202 	blmi	1c894c <_Min_Stack_Size+0x1c854c>
    8140:	03000003 	movweq	r0, #3
    8144:	00000445 	andeq	r0, r0, r5, asr #8
    8148:	00623f02 	rsbeq	r3, r2, r2, lsl #30
    814c:	04020000 	streq	r0, [r2], #-0
    8150:	00010005 	andeq	r0, r1, r5
    8154:	00600300 	rsbeq	r0, r0, r0, lsl #6
    8158:	41020000 	mrsmi	r0, (UNDEF: 2)
    815c:	00000074 	andeq	r0, r0, r4, ror r0
    8160:	f5070402 			; <UNDEFINED> instruction: 0xf5070402
    8164:	02000002 	andeq	r0, r0, #2
    8168:	00fb0508 	rscseq	r0, fp, r8, lsl #10
    816c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8170:	0002f007 	andeq	pc, r2, r7
    8174:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    8178:	00746e69 	rsbseq	r6, r4, r9, ror #28
    817c:	fa070402 	blx	1c918c <_Min_Stack_Size+0x1c8d8c>
    8180:	03000002 	movweq	r0, #2
    8184:	00000235 	andeq	r0, r0, r5, lsr r2
    8188:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    818c:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
    8190:	03000000 	movweq	r0, #0
    8194:	00004536 	andeq	r4, r0, r6, lsr r5
    8198:	04470300 	strbeq	r0, [r7], #-768	; 0x300
    819c:	41030000 	mrsmi	r0, (UNDEF: 3)
    81a0:	00000057 	andeq	r0, r0, r7, asr r0
    81a4:	00006203 	andeq	r6, r0, r3, lsl #4
    81a8:	69420300 	stmdbvs	r2, {r8, r9}^
    81ac:	02000000 	andeq	r0, r0, #0
    81b0:	00440704 	subeq	r0, r4, r4, lsl #14
    81b4:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    81b8:	06000000 	streq	r0, [r0], -r0
    81bc:	000000b8 	strheq	r0, [r0], -r8
    81c0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    81c4:	0000c307 	andeq	ip, r0, r7, lsl #6
    81c8:	05000100 	streq	r0, [r0, #-256]	; 0x100
    81cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    81d0:	0000ad05 	andeq	sl, r0, r5, lsl #26
    81d4:	04010800 	streq	r0, [r1], #-2048	; 0x800
    81d8:	00ff01f7 	ldrshteq	r0, [pc], #23
    81dc:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    81e0:	00000009 	andeq	r0, r0, r9
    81e4:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    81e8:	08000100 	stmdaeq	r0, {r8}
    81ec:	01f90401 	mvnseq	r0, r1, lsl #8
    81f0:	00000115 	andeq	r0, r0, r5, lsl r1
    81f4:	00039d09 	andeq	r9, r3, r9, lsl #26
    81f8:	b2090000 	andlt	r0, r9, #0
    81fc:	01000000 	mrseq	r0, (UNDEF: 0)
    8200:	04280b00 	strteq	r0, [r8], #-2816	; 0xb00
    8204:	01a103d4 	ldrdeq	r0, [r1, r4]!
    8208:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    820c:	04000002 	streq	r0, [r0], #-2
    8210:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
    8214:	0c000000 	stceq	0, cr0, [r0], {-0}
    8218:	000000e9 	andeq	r0, r0, r9, ror #1
    821c:	ca03d704 	bgt	fde34 <_Min_Stack_Size+0xfda34>
    8220:	04000000 	streq	r0, [r0], #-0
    8224:	0003eb0c 	andeq	lr, r3, ip, lsl #22
    8228:	03d80400 	bicseq	r0, r8, #0, 8
    822c:	000000ca 	andeq	r0, r0, sl, asr #1
    8230:	01170c08 	tsteq	r7, r8, lsl #24
    8234:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    8238:	0000ca03 	andeq	ip, r0, r3, lsl #20
    823c:	490d0c00 	stmdbmi	sp, {sl, fp}
    8240:	04005244 	streq	r5, [r0], #-580	; 0x244
    8244:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
    8248:	0d100000 	ldceq	0, cr0, [r0, #-0]
    824c:	0052444f 	subseq	r4, r2, pc, asr #8
    8250:	ca03db04 	bgt	fee68 <_Min_Stack_Size+0xfea68>
    8254:	14000000 	strne	r0, [r0], #-0
    8258:	0004920c 	andeq	r9, r4, ip, lsl #4
    825c:	03dc0400 	bicseq	r0, ip, #0, 8
    8260:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8264:	02150c18 	andseq	r0, r5, #24, 24	; 0x1800
    8268:	dd040000 	stcle	0, cr0, [r4, #-0]
    826c:	0000df03 	andeq	sp, r0, r3, lsl #30
    8270:	980c1a00 	stmdals	ip, {r9, fp, ip}
    8274:	04000004 	streq	r0, [r0], #-4
    8278:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
    827c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8280:	00524641 	subseq	r4, r2, r1, asr #12
    8284:	a103df04 	tstge	r3, r4, lsl #30
    8288:	20000001 	andcs	r0, r0, r1
    828c:	00cf0500 	sbceq	r0, pc, r0, lsl #10
    8290:	000e0000 	andeq	r0, lr, r0
    8294:	04000000 	streq	r0, [r0], #-0
    8298:	011503e0 	tsteq	r5, r0, ror #7
    829c:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    82a0:	0213f205 	andseq	pc, r3, #1342177280	; 0x50000000
    82a4:	f4100000 			; <UNDEFINED> instruction: 0xf4100000
    82a8:	05000038 	streq	r0, [r0, #-56]	; 0x38
    82ac:	0000b8f4 	strdeq	fp, [r0], -r4
    82b0:	01100000 	tsteq	r0, r0
    82b4:	05000034 	streq	r0, [r0, #-52]	; 0x34
    82b8:	0000b8f8 	strdeq	fp, [r0], -r8
    82bc:	34100400 	ldrcc	r0, [r0], #-1024	; 0x400
    82c0:	05000032 	streq	r0, [r0, #-50]	; 0x32
    82c4:	0000b8fc 	strdeq	fp, [r0], -ip
    82c8:	b40c0800 	strlt	r0, [ip], #-2048	; 0x800
    82cc:	05000035 	streq	r0, [r0, #-53]	; 0x35
    82d0:	00b80100 	adcseq	r0, r8, r0, lsl #2
    82d4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    82d8:	000032b5 			; <UNDEFINED> instruction: 0x000032b5
    82dc:	b8010505 	stmdalt	r1, {r0, r2, r8, sl}
    82e0:	10000000 	andne	r0, r0, r0
    82e4:	0036a60c 	eorseq	sl, r6, ip, lsl #12
    82e8:	01080500 	tsteq	r8, r0, lsl #10
    82ec:	000000b8 	strheq	r0, [r0], -r8
    82f0:	35320c14 	ldrcc	r0, [r2, #-3092]!	; 0xc14
    82f4:	0c050000 	stceq	0, cr0, [r5], {-0}
    82f8:	0000b801 	andeq	fp, r0, r1, lsl #16
    82fc:	0e001800 	cdpeq	8, 0, cr1, cr0, cr0, {0}
    8300:	0000396d 	andeq	r3, r0, sp, ror #18
    8304:	b2011005 	andlt	r1, r1, #5
    8308:	0b000001 	bleq	8314 <_Min_Stack_Size+0x7f14>
    830c:	01170510 	tsteq	r7, r0, lsl r5
    8310:	0000025d 	andeq	r0, r0, sp, asr r2
    8314:	0039f80c 	eorseq	pc, r9, ip, lsl #16
    8318:	01190500 	tsteq	r9, r0, lsl #10
    831c:	000000b8 	strheq	r0, [r0], -r8
    8320:	38070c00 	stmdacc	r7, {sl, fp}
    8324:	1c050000 	stcne	0, cr0, [r5], {-0}
    8328:	0000b801 	andeq	fp, r0, r1, lsl #16
    832c:	c50c0400 	strgt	r0, [ip, #-1024]	; 0x400
    8330:	05000034 	streq	r0, [r0, #-52]	; 0x34
    8334:	00b8011f 	adcseq	r0, r8, pc, lsl r1
    8338:	0c080000 	stceq	0, cr0, [r8], {-0}
    833c:	00003265 	andeq	r3, r0, r5, ror #4
    8340:	b8012305 	stmdalt	r1, {r0, r2, r8, r9, sp}
    8344:	0c000000 	stceq	0, cr0, [r0], {-0}
    8348:	38dc0e00 	ldmcc	ip, {r9, sl, fp}^
    834c:	25050000 	strcs	r0, [r5, #-0]
    8350:	00021f01 	andeq	r1, r2, r1, lsl #30
    8354:	052c0b00 	streq	r0, [ip, #-2816]!	; 0xb00
    8358:	0302012b 	movweq	r0, #8491	; 0x212b
    835c:	a50c0000 	strge	r0, [ip, #-0]
    8360:	05000037 	streq	r0, [r0, #-55]	; 0x37
    8364:	00b8012d 	adcseq	r0, r8, sp, lsr #2
    8368:	0c000000 	stceq	0, cr0, [r0], {-0}
    836c:	000036f7 	strdeq	r3, [r0], -r7
    8370:	b8013005 	stmdalt	r1, {r0, r2, ip, sp}
    8374:	04000000 	streq	r0, [r0], #-0
    8378:	0038400c 	eorseq	r4, r8, ip
    837c:	01330500 	teqeq	r3, r0, lsl #10
    8380:	000000b8 	strheq	r0, [r0], -r8
    8384:	34350c08 	ldrtcc	r0, [r5], #-3080	; 0xc08
    8388:	36050000 	strcc	r0, [r5], -r0
    838c:	0000b801 	andeq	fp, r0, r1, lsl #16
    8390:	340c0c00 	strcc	r0, [ip], #-3072	; 0xc00
    8394:	05000036 	streq	r0, [r0, #-54]	; 0x36
    8398:	00b80139 	adcseq	r0, r8, r9, lsr r1
    839c:	0c100000 	ldceq	0, cr0, [r0], {-0}
    83a0:	0000321e 	andeq	r3, r0, lr, lsl r2
    83a4:	b8013c05 	stmdalt	r1, {r0, r2, sl, fp, ip, sp}
    83a8:	14000000 	strne	r0, [r0], #-0
    83ac:	0039c80c 	eorseq	ip, r9, ip, lsl #16
    83b0:	013f0500 	teqeq	pc, r0, lsl #10
    83b4:	000000b8 	strheq	r0, [r0], -r8
    83b8:	390a0c18 	stmdbcc	sl, {r3, r4, sl, fp}
    83bc:	42050000 	andmi	r0, r5, #0
    83c0:	0000b801 	andeq	fp, r0, r1, lsl #16
    83c4:	2d0c1c00 	stccs	12, cr1, [ip, #-0]
    83c8:	05000039 	streq	r0, [r0, #-57]	; 0x39
    83cc:	00b80146 	adcseq	r0, r8, r6, asr #2
    83d0:	0c200000 	stceq	0, cr0, [r0], #-0
    83d4:	00003513 	andeq	r3, r0, r3, lsl r5
    83d8:	b8014a05 	stmdalt	r1, {r0, r2, r9, fp, lr}
    83dc:	24000000 	strcs	r0, [r0], #-0
    83e0:	003a290c 	eorseq	r2, sl, ip, lsl #18
    83e4:	014d0500 	cmpeq	sp, r0, lsl #10
    83e8:	00000302 	andeq	r0, r0, r2, lsl #6
    83ec:	04110028 	ldreq	r0, [r1], #-40	; 0x28
    83f0:	00000213 	andeq	r0, r0, r3, lsl r2
    83f4:	0035c60e 	eorseq	ip, r5, lr, lsl #12
    83f8:	014f0500 	cmpeq	pc, r0, lsl #10
    83fc:	00000269 	andeq	r0, r0, r9, ror #4
    8400:	42060112 	andmi	r0, r6, #-2147483644	; 0x80000004
    8404:	00000335 	andeq	r0, r0, r5, lsr r3
    8408:	00011d09 	andeq	r1, r1, r9, lsl #26
    840c:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    8410:	01000001 	tsteq	r0, r1
    8414:	00009209 	andeq	r9, r0, r9, lsl #4
    8418:	c4090200 	strgt	r0, [r9], #-512	; 0x200
    841c:	03000000 	movweq	r0, #0
    8420:	001c0300 	andseq	r0, ip, r0, lsl #6
    8424:	47060000 	strmi	r0, [r6, -r0]
    8428:	00000314 	andeq	r0, r0, r4, lsl r3
    842c:	4f060112 	svcmi	0x00060112
    8430:	00000355 	andeq	r0, r0, r5, asr r3
    8434:	00027d09 	andeq	r7, r2, r9, lsl #26
    8438:	4d090000 	stcmi	0, cr0, [r9, #-0]
    843c:	01000000 	mrseq	r0, (UNDEF: 0)
    8440:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    8444:	52060000 	andpl	r0, r6, #0
    8448:	00000340 	andeq	r0, r0, r0, asr #6
    844c:	5a060112 	bpl	18889c <_Min_Stack_Size+0x18849c>
    8450:	00000381 	andeq	r0, r0, r1, lsl #7
    8454:	0003ca09 	andeq	ip, r3, r9, lsl #20
    8458:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    845c:	01000003 	tsteq	r0, r3
    8460:	00038d09 	andeq	r8, r3, r9, lsl #26
    8464:	3d090200 	sfmcc	f0, 4, [r9, #-0]
    8468:	03000002 	movweq	r0, #2
    846c:	028b0300 	addeq	r0, fp, #0, 6
    8470:	5f060000 	svcpl	0x00060000
    8474:	00000360 	andeq	r0, r0, r0, ror #6
    8478:	6e060112 	mcrvs	1, 0, r0, cr6, cr2, {0}
    847c:	000003a7 	andeq	r0, r0, r7, lsr #7
    8480:	00042109 	andeq	r2, r4, r9, lsl #2
    8484:	2d090000 	stccs	0, cr0, [r9, #-0]
    8488:	01000000 	mrseq	r0, (UNDEF: 0)
    848c:	00040509 	andeq	r0, r4, r9, lsl #10
    8490:	03000200 	movweq	r0, #512	; 0x200
    8494:	00000466 	andeq	r0, r0, r6, ror #8
    8498:	038c7206 	orreq	r7, ip, #1610612736	; 0x60000000
    849c:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    84a0:	03f78406 	mvnseq	r8, #100663296	; 0x6000000
    84a4:	0d100000 	ldceq	0, cr0, [r0, #-0]
    84a8:	06000000 	streq	r0, [r0], -r0
    84ac:	0000b886 	andeq	fp, r0, r6, lsl #17
    84b0:	a8100000 	ldmdage	r0, {}	; <UNPREDICTABLE>
    84b4:	06000004 	streq	r0, [r0], -r4
    84b8:	00033589 	andeq	r3, r3, r9, lsl #11
    84bc:	b9100400 	ldmdblt	r0, {sl}
    84c0:	06000000 	streq	r0, [r0], -r0
    84c4:	0003818c 	andeq	r8, r3, ip, lsl #3
    84c8:	87100500 	ldrhi	r0, [r0, -r0, lsl #10]
    84cc:	06000000 	streq	r0, [r0], -r0
    84d0:	0003558f 	andeq	r5, r3, pc, lsl #11
    84d4:	b2100600 	andslt	r0, r0, #0, 12
    84d8:	06000002 	streq	r0, [r0], -r2
    84dc:	0003a792 	muleq	r3, r2, r7
    84e0:	03000700 	movweq	r0, #1792	; 0x700
    84e4:	0000031a 	andeq	r0, r0, sl, lsl r3
    84e8:	03b29406 			; <UNDEFINED> instruction: 0x03b29406
    84ec:	b6130000 	ldrlt	r0, [r3], -r0
    84f0:	01000043 	tsteq	r0, r3, asr #32
    84f4:	0062b441 	rsbeq	fp, r2, r1, asr #8
    84f8:	00007408 	andeq	r7, r0, r8, lsl #8
    84fc:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    8500:	14000004 	strne	r0, [r0], #-4
    8504:	0000440c 	andeq	r4, r0, ip, lsl #8
    8508:	03084301 	movweq	r4, #33537	; 0x8301
    850c:	91020000 	mrsls	r0, (UNDEF: 2)
    8510:	4361144c 	cmnmi	r1, #76, 8	; 0x4c000000
    8514:	44010000 	strmi	r0, [r1], #-0
    8518:	00000213 	andeq	r0, r0, r3, lsl r2
    851c:	7fb09103 	svcvc	0x00b09103
    8520:	43921300 	orrsmi	r1, r2, #0, 6
    8524:	7a010000 	bvc	4852c <_Min_Stack_Size+0x4812c>
    8528:	08006328 	stmdaeq	r0, {r3, r5, r8, r9, sp, lr}
    852c:	00000214 	andeq	r0, r0, r4, lsl r2
    8530:	04599c01 	ldrbeq	r9, [r9], #-3073	; 0xc01
    8534:	32140000 	andscc	r0, r4, #0
    8538:	01000004 	tsteq	r0, r4
    853c:	0003f77c 	andeq	pc, r3, ip, ror r7	; <UNPREDICTABLE>
    8540:	70910200 	addsvc	r0, r1, r0, lsl #4
    8544:	43a31300 			; <UNDEFINED> instruction: 0x43a31300
    8548:	fa010000 	blx	48550 <_Min_Stack_Size+0x48150>
    854c:	0800653c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, sp, lr}
    8550:	000000ec 	andeq	r0, r0, ip, ror #1
    8554:	048b9c01 	streq	r9, [fp], #3073	; 0xc01
    8558:	f2140000 	vhadd.s16	d0, d4, d0
    855c:	01000043 	tsteq	r0, r3, asr #32
    8560:	00025dfc 	strdeq	r5, [r2], -ip
    8564:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8568:	0034c014 	eorseq	ip, r4, r4, lsl r0
    856c:	b8fd0100 	ldmlt	sp!, {r8}^
    8570:	02000000 	andeq	r0, r0, #0
    8574:	15007491 	strne	r7, [r0, #-1169]	; 0x491
    8578:	00004349 	andeq	r4, r0, r9, asr #6
    857c:	28015a01 	stmdacs	r1, {r0, r9, fp, ip, lr}
    8580:	54080066 	strpl	r0, [r8], #-102	; 0x66
    8584:	01000000 	mrseq	r0, (UNDEF: 0)
    8588:	0004de9c 	muleq	r4, ip, lr
    858c:	3dea1600 	stclcc	6, cr1, [sl]
    8590:	5a010000 	bpl	48598 <_Min_Stack_Size+0x48198>
    8594:	0004de01 	andeq	sp, r4, r1, lsl #28
    8598:	6c910200 	lfmvs	f0, 4, [r1], {0}
    859c:	0043c116 	subeq	ip, r3, r6, lsl r1
    85a0:	015a0100 	cmpeq	sl, r0, lsl #2
    85a4:	000000b8 	strheq	r0, [r0], -r8
    85a8:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    85ac:	000043d0 	ldrdeq	r4, [r0], -r0
    85b0:	b8015a01 	stmdalt	r1, {r0, r9, fp, ip, lr}
    85b4:	02000000 	andeq	r0, r0, #0
    85b8:	84176491 	ldrhi	r6, [r7], #-1169	; 0x491
    85bc:	01000043 	tsteq	r0, r3, asr #32
    85c0:	00ca015c 	sbceq	r0, sl, ip, asr r1
    85c4:	91020000 	mrsls	r0, (UNDEF: 2)
    85c8:	04110074 	ldreq	r0, [r1], #-116	; 0x74
    85cc:	000000b8 	strheq	r0, [r0], -r8
    85d0:	00433815 	subeq	r3, r3, r5, lsl r8
    85d4:	017a0100 	cmneq	sl, r0, lsl #2
    85d8:	0800667c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp, lr}
    85dc:	0000004a 	andeq	r0, r0, sl, asr #32
    85e0:	05379c01 	ldreq	r9, [r7, #-3073]!	; 0xc01
    85e4:	ea160000 	b	5885ec <_Min_Stack_Size+0x5881ec>
    85e8:	0100003d 	tsteq	r0, sp, lsr r0
    85ec:	04de017a 	ldrbeq	r0, [lr], #378	; 0x17a
    85f0:	91020000 	mrsls	r0, (UNDEF: 2)
    85f4:	43dd166c 	bicsmi	r1, sp, #108, 12	; 0x6c00000
    85f8:	7a010000 	bvc	48600 <_Min_Stack_Size+0x48200>
    85fc:	0000b801 	andeq	fp, r0, r1, lsl #16
    8600:	68910200 	ldmvs	r1, {r9}
    8604:	0043d016 	subeq	sp, r3, r6, lsl r0
    8608:	017a0100 	cmneq	sl, r0, lsl #2
    860c:	000000b8 	strheq	r0, [r0], -r8
    8610:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    8614:	00004384 	andeq	r4, r0, r4, lsl #7
    8618:	ca017c01 	bgt	67624 <_Min_Stack_Size+0x67224>
    861c:	02000000 	andeq	r0, r0, #0
    8620:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    8624:	0000437e 	andeq	r4, r0, lr, ror r3
    8628:	c8019401 	stmdagt	r1, {r0, sl, ip, pc}
    862c:	34080066 	strcc	r0, [r8], #-102	; 0x66
    8630:	01000000 	mrseq	r0, (UNDEF: 0)
    8634:	00056c9c 	muleq	r5, ip, ip
    8638:	43eb1600 	mvnmi	r1, #0, 12
    863c:	94010000 	strls	r0, [r1], #-0
    8640:	0000ca01 	andeq	ip, r0, r1, lsl #20
    8644:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8648:	00435b17 	subeq	r5, r3, r7, lsl fp
    864c:	01960100 	orrseq	r0, r6, r0, lsl #2
    8650:	000000ca 	andeq	r0, r0, sl, asr #1
    8654:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8658:	00041419 	andeq	r1, r4, r9, lsl r4
    865c:	06a70700 	strteq	r0, [r7], r0, lsl #14
    8660:	000000e4 	andeq	r0, r0, r4, ror #1
    8664:	0007af00 	andeq	sl, r7, r0, lsl #30
    8668:	ce000400 	cfcpysgt	mvf0, mvf0
    866c:	04000018 	streq	r0, [r0], #-24
    8670:	00012a01 	andeq	r2, r1, r1, lsl #20
    8674:	44cd0100 	strbmi	r0, [sp], #256	; 0x100
    8678:	03690000 	cmneq	r9, #0
    867c:	0a100000 	beq	408684 <_Min_Stack_Size+0x408284>
    8680:	00000000 	andeq	r0, r0, r0
    8684:	39a30000 	stmibcc	r3!, {}	; <UNPREDICTABLE>
    8688:	01020000 	mrseq	r0, (UNDEF: 2)
    868c:	0002a606 	andeq	sl, r2, r6, lsl #12
    8690:	02330300 	eorseq	r0, r3, #0, 6
    8694:	1d020000 	stcne	0, cr0, [r2, #-0]
    8698:	00000037 	andeq	r0, r0, r7, lsr r0
    869c:	a4080102 	strge	r0, [r8], #-258	; 0x102
    86a0:	02000002 	andeq	r0, r0, #2
    86a4:	003a0502 	eorseq	r0, sl, r2, lsl #10
    86a8:	7c030000 	stcvc	0, cr0, [r3], {-0}
    86ac:	02000000 	andeq	r0, r0, #0
    86b0:	0000502b 	andeq	r5, r0, fp, lsr #32
    86b4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    86b8:	0000034b 	andeq	r0, r0, fp, asr #6
    86bc:	00044503 	andeq	r4, r4, r3, lsl #10
    86c0:	623f0200 	eorsvs	r0, pc, #0, 4
    86c4:	02000000 	andeq	r0, r0, #0
    86c8:	01000504 	tsteq	r0, r4, lsl #10
    86cc:	60030000 	andvs	r0, r3, r0
    86d0:	02000000 	andeq	r0, r0, #0
    86d4:	00007441 	andeq	r7, r0, r1, asr #8
    86d8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    86dc:	000002f5 	strdeq	r0, [r0], -r5
    86e0:	fb050802 	blx	14a6f2 <_Min_Stack_Size+0x14a2f2>
    86e4:	02000000 	andeq	r0, r0, #0
    86e8:	02f00708 	rscseq	r0, r0, #8, 14	; 0x200000
    86ec:	04040000 	streq	r0, [r4], #-0
    86f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    86f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    86f8:	000002fa 	strdeq	r0, [r0], -sl
    86fc:	00023503 	andeq	r3, r2, r3, lsl #10
    8700:	2c2a0300 	stccs	3, cr0, [sl], #-0
    8704:	03000000 	movweq	r0, #0
    8708:	0000007e 	andeq	r0, r0, lr, ror r0
    870c:	00453603 	subeq	r3, r5, r3, lsl #12
    8710:	47030000 	strmi	r0, [r3, -r0]
    8714:	03000004 	movweq	r0, #4
    8718:	00005741 	andeq	r5, r0, r1, asr #14
    871c:	00620300 	rsbeq	r0, r2, r0, lsl #6
    8720:	42030000 	andmi	r0, r3, #0
    8724:	00000069 	andeq	r0, r0, r9, rrx
    8728:	44070402 	strmi	r0, [r7], #-1026	; 0x402
    872c:	05000000 	streq	r0, [r0, #-0]
    8730:	000000b8 	strheq	r0, [r0], -r8
    8734:	0000b806 	andeq	fp, r0, r6, lsl #16
    8738:	0000df00 	andeq	sp, r0, r0, lsl #30
    873c:	00c30700 	sbceq	r0, r3, r0, lsl #14
    8740:	00010000 	andeq	r0, r1, r0
    8744:	0000a205 	andeq	sl, r0, r5, lsl #4
    8748:	00ad0500 	adceq	r0, sp, r0, lsl #10
    874c:	01080000 	mrseq	r0, (UNDEF: 8)
    8750:	ff01f704 			; <UNDEFINED> instruction: 0xff01f704
    8754:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8758:	00000918 	andeq	r0, r0, r8, lsl r9
    875c:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    8760:	00010054 	andeq	r0, r1, r4, asr r0
    8764:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    8768:	00011501 	andeq	r1, r1, r1, lsl #10
    876c:	039d0900 	orrseq	r0, sp, #0, 18
    8770:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8774:	000000b2 	strheq	r0, [r0], -r2
    8778:	280b0001 	stmdacs	fp, {r0}
    877c:	a103d404 	tstge	r3, r4, lsl #8
    8780:	0c000001 	stceq	0, cr0, [r0], {1}
    8784:	0000022d 	andeq	r0, r0, sp, lsr #4
    8788:	ca03d604 	bgt	fdfa0 <_Min_Stack_Size+0xfdba0>
    878c:	00000000 	andeq	r0, r0, r0
    8790:	0000e90c 	andeq	lr, r0, ip, lsl #18
    8794:	03d70400 	bicseq	r0, r7, #0, 8
    8798:	000000ca 	andeq	r0, r0, sl, asr #1
    879c:	03eb0c04 	mvneq	r0, #4, 24	; 0x400
    87a0:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    87a4:	0000ca03 	andeq	ip, r0, r3, lsl #20
    87a8:	170c0800 	strne	r0, [ip, -r0, lsl #16]
    87ac:	04000001 	streq	r0, [r0], #-1
    87b0:	00ca03d9 	ldrdeq	r0, [sl], #57	; 0x39
    87b4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    87b8:	00524449 	subseq	r4, r2, r9, asr #8
    87bc:	ca03da04 	bgt	fefd4 <_Min_Stack_Size+0xfebd4>
    87c0:	10000000 	andne	r0, r0, r0
    87c4:	52444f0d 	subpl	r4, r4, #13, 30	; 0x34
    87c8:	03db0400 	bicseq	r0, fp, #0, 8
    87cc:	000000ca 	andeq	r0, r0, sl, asr #1
    87d0:	04920c14 	ldreq	r0, [r2], #3092	; 0xc14
    87d4:	dc040000 	stcle	0, cr0, [r4], {-0}
    87d8:	0000df03 	andeq	sp, r0, r3, lsl #30
    87dc:	150c1800 	strne	r1, [ip, #-2048]	; 0x800
    87e0:	04000002 	streq	r0, [r0], #-2
    87e4:	00df03dd 	ldrsbeq	r0, [pc], #61	; <UNPREDICTABLE>
    87e8:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    87ec:	00000498 	muleq	r0, r8, r4
    87f0:	ca03de04 	bgt	100008 <_Min_Stack_Size+0xffc08>
    87f4:	1c000000 	stcne	0, cr0, [r0], {-0}
    87f8:	5246410d 	subpl	r4, r6, #1073741827	; 0x40000003
    87fc:	03df0400 	bicseq	r0, pc, #0, 8
    8800:	000001a1 	andeq	r0, r0, r1, lsr #3
    8804:	cf050020 	svcgt	0x00050020
    8808:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    880c:	00000000 	andeq	r0, r0, r0
    8810:	1503e004 	strne	lr, [r3, #-4]
    8814:	0b000001 	bleq	8820 <_Min_Stack_Size+0x8420>
    8818:	04e00424 	strbteq	r0, [r0], #1060	; 0x424
    881c:	000002a4 	andeq	r0, r0, r4, lsr #5
    8820:	3152430d 	cmpcc	r2, sp, lsl #6
    8824:	04e20400 	strbteq	r0, [r2], #1024	; 0x400
    8828:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    882c:	06550c00 	ldrbeq	r0, [r5], -r0, lsl #24
    8830:	e3040000 	movw	r0, #16384	; 0x4000
    8834:	0000a204 	andeq	sl, r0, r4, lsl #4
    8838:	430d0200 	movwmi	r0, #53760	; 0xd200
    883c:	04003252 	streq	r3, [r0], #-594	; 0x252
    8840:	00df04e4 	sbcseq	r0, pc, r4, ror #9
    8844:	0c040000 	stceq	0, cr0, [r4], {-0}
    8848:	0000065f 	andeq	r0, r0, pc, asr r6
    884c:	a204e504 	andge	lr, r4, #4, 10	; 0x1000000
    8850:	06000000 	streq	r0, [r0], -r0
    8854:	0052530d 	subseq	r5, r2, sp, lsl #6
    8858:	df04e604 	svcle	0x0004e604
    885c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8860:	0006690c 	andeq	r6, r6, ip, lsl #18
    8864:	04e70400 	strbteq	r0, [r7], #1024	; 0x400
    8868:	000000a2 	andeq	r0, r0, r2, lsr #1
    886c:	52440d0a 	subpl	r0, r4, #640	; 0x280
    8870:	04e80400 	strbteq	r0, [r8], #1024	; 0x400
    8874:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8878:	05550c0c 	ldrbeq	r0, [r5, #-3084]	; 0xc0c
    887c:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    8880:	0000a204 	andeq	sl, r0, r4, lsl #4
    8884:	e00c0e00 	and	r0, ip, r0, lsl #28
    8888:	0400001e 	streq	r0, [r0], #-30
    888c:	00df04ea 	sbcseq	r0, pc, sl, ror #9
    8890:	0c100000 	ldceq	0, cr0, [r0], {-0}
    8894:	0000067f 	andeq	r0, r0, pc, ror r6
    8898:	a204eb04 	andge	lr, r4, #4, 22	; 0x1000
    889c:	12000000 	andne	r0, r0, #0
    88a0:	001eb70c 	andseq	fp, lr, ip, lsl #14
    88a4:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    88a8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    88ac:	06890c14 	pkhbteq	r0, r9, r4, lsl #24
    88b0:	ed040000 	stc	0, cr0, [r4, #-0]
    88b4:	0000a204 	andeq	sl, r0, r4, lsl #4
    88b8:	d90c1600 	stmdble	ip, {r9, sl, ip}
    88bc:	0400001f 	streq	r0, [r0], #-31
    88c0:	00df04ee 	sbcseq	r0, pc, lr, ror #9
    88c4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    88c8:	00000693 	muleq	r0, r3, r6
    88cc:	a204ef04 	andge	lr, r4, #4, 30
    88d0:	1a000000 	bne	88d8 <_Min_Stack_Size+0x84d8>
    88d4:	0004e60c 	andeq	lr, r4, ip, lsl #12
    88d8:	04f00400 	ldrbteq	r0, [r0], #1024	; 0x400
    88dc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    88e0:	19850c1c 	stmibne	r5, {r2, r3, r4, sl, fp}
    88e4:	f1040000 	cps	#0
    88e8:	0000a204 	andeq	sl, r0, r4, lsl #4
    88ec:	ba0c1e00 	blt	3100f4 <_Min_Stack_Size+0x30fcf4>
    88f0:	04000020 	streq	r0, [r0], #-32
    88f4:	00df04f2 	ldrsheq	r0, [pc], #66	; <UNPREDICTABLE>
    88f8:	0c200000 	stceq	0, cr0, [r0], #-0
    88fc:	0000198f 	andeq	r1, r0, pc, lsl #19
    8900:	a204f304 	andge	pc, r4, #4, 6	; 0x10000000
    8904:	22000000 	andcs	r0, r0, #0
    8908:	21420e00 	cmpcs	r2, r0, lsl #28
    890c:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    8910:	0001b204 	andeq	fp, r1, r4, lsl #4
    8914:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8918:	0002d142 	andeq	sp, r2, r2, asr #2
    891c:	011d0900 	tsteq	sp, r0, lsl #18
    8920:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8924:	00000109 	andeq	r0, r0, r9, lsl #2
    8928:	00920901 	addseq	r0, r2, r1, lsl #18
    892c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    8930:	000000c4 	andeq	r0, r0, r4, asr #1
    8934:	1c030003 	stcne	0, cr0, [r3], {3}
    8938:	05000000 	streq	r0, [r0, #-0]
    893c:	0002b047 	andeq	fp, r2, r7, asr #32
    8940:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8944:	0002f14f 	andeq	pc, r2, pc, asr #2
    8948:	027d0900 	rsbseq	r0, sp, #0, 18
    894c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8950:	0000004d 	andeq	r0, r0, sp, asr #32
    8954:	d7030001 	strle	r0, [r3, -r1]
    8958:	05000000 	streq	r0, [r0, #-0]
    895c:	0002dc52 	andeq	sp, r2, r2, asr ip
    8960:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8964:	00031d5a 	andeq	r1, r3, sl, asr sp
    8968:	03ca0900 	biceq	r0, sl, #0, 18
    896c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8970:	000003d9 	ldrdeq	r0, [r0], -r9
    8974:	038d0901 	orreq	r0, sp, #16384	; 0x4000
    8978:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    897c:	0000023d 	andeq	r0, r0, sp, lsr r2
    8980:	8b030003 	blhi	c8994 <_Min_Stack_Size+0xc8594>
    8984:	05000002 	streq	r0, [r0, #-2]
    8988:	0002fc5f 	andeq	pc, r2, pc, asr ip	; <UNPREDICTABLE>
    898c:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
    8990:	0003436e 	andeq	r4, r3, lr, ror #6
    8994:	04210900 	strteq	r0, [r1], #-2304	; 0x900
    8998:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    899c:	0000002d 	andeq	r0, r0, sp, lsr #32
    89a0:	04050901 	streq	r0, [r5], #-2305	; 0x901
    89a4:	00020000 	andeq	r0, r2, r0
    89a8:	00046603 	andeq	r6, r4, r3, lsl #12
    89ac:	28720500 	ldmdacs	r2!, {r8, sl}^
    89b0:	10000003 	andne	r0, r0, r3
    89b4:	93840508 	orrls	r0, r4, #8, 10	; 0x2000000
    89b8:	11000003 	tstne	r0, r3
    89bc:	0000000d 	andeq	r0, r0, sp
    89c0:	00b88605 	adcseq	r8, r8, r5, lsl #12
    89c4:	11000000 	mrsne	r0, (UNDEF: 0)
    89c8:	000004a8 	andeq	r0, r0, r8, lsr #9
    89cc:	02d18905 	sbcseq	r8, r1, #81920	; 0x14000
    89d0:	11040000 	mrsne	r0, (UNDEF: 4)
    89d4:	000000b9 	strheq	r0, [r0], -r9
    89d8:	031d8c05 	tsteq	sp, #1280	; 0x500
    89dc:	11050000 	mrsne	r0, (UNDEF: 5)
    89e0:	00000087 	andeq	r0, r0, r7, lsl #1
    89e4:	02f18f05 	rscseq	r8, r1, #5, 30
    89e8:	11060000 	mrsne	r0, (UNDEF: 6)
    89ec:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    89f0:	03439205 	movteq	r9, #12805	; 0x3205
    89f4:	00070000 	andeq	r0, r7, r0
    89f8:	00031a03 	andeq	r1, r3, r3, lsl #20
    89fc:	4e940500 	cdpmi	5, 9, cr0, cr4, cr0, {0}
    8a00:	10000003 	andne	r0, r0, r3
    8a04:	13360612 	teqne	r6, #18874368	; 0x1200000
    8a08:	11000004 	tstne	r0, r4
    8a0c:	00001fe0 	andeq	r1, r0, r0, ror #31
    8a10:	00a23806 	adceq	r3, r2, r6, lsl #16
    8a14:	11000000 	mrsne	r0, (UNDEF: 0)
    8a18:	0000214e 	andeq	r2, r0, lr, asr #2
    8a1c:	00a23b06 	adceq	r3, r2, r6, lsl #22
    8a20:	11020000 	mrsne	r0, (UNDEF: 2)
    8a24:	0000220a 	andeq	r2, r0, sl, lsl #4
    8a28:	00a23e06 	adceq	r3, r2, r6, lsl #28
    8a2c:	11040000 	mrsne	r0, (UNDEF: 4)
    8a30:	00002100 	andeq	r2, r0, r0, lsl #2
    8a34:	00a24106 	adceq	r4, r2, r6, lsl #2
    8a38:	11060000 	mrsne	r0, (UNDEF: 6)
    8a3c:	0000211e 	andeq	r2, r0, lr, lsl r1
    8a40:	00a24406 	adceq	r4, r2, r6, lsl #8
    8a44:	11080000 	mrsne	r0, (UNDEF: 8)
    8a48:	00002169 	andeq	r2, r0, r9, ror #2
    8a4c:	00a24706 	adceq	r4, r2, r6, lsl #14
    8a50:	110a0000 	mrsne	r0, (UNDEF: 10)
    8a54:	0000212c 	andeq	r2, r0, ip, lsr #2
    8a58:	00a24b06 	adceq	r4, r2, r6, lsl #22
    8a5c:	110c0000 	mrsne	r0, (UNDEF: 12)
    8a60:	00002111 	andeq	r2, r0, r1, lsl r1
    8a64:	00a25106 	adceq	r5, r2, r6, lsl #2
    8a68:	110e0000 	mrsne	r0, (UNDEF: 14)
    8a6c:	00002054 	andeq	r2, r0, r4, asr r0
    8a70:	00a25406 	adceq	r5, r2, r6, lsl #8
    8a74:	00100000 	andseq	r0, r0, r0
    8a78:	00206f03 	eoreq	r6, r0, r3, lsl #30
    8a7c:	9e550600 	cdpls	6, 5, cr0, cr5, cr0, {0}
    8a80:	10000003 	andne	r0, r0, r3
    8a84:	7b400707 	blvc	100a6a8 <_Min_Stack_Size+0x100a2a8>
    8a88:	11000004 	tstne	r0, r4
    8a8c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8a90:	00974207 	addseq	r4, r7, r7, lsl #4
    8a94:	11000000 	mrsne	r0, (UNDEF: 0)
    8a98:	000003a5 	andeq	r0, r0, r5, lsr #7
    8a9c:	00974307 	addseq	r4, r7, r7, lsl #6
    8aa0:	11010000 	mrsne	r0, (UNDEF: 1)
    8aa4:	0000045a 	andeq	r0, r0, sl, asr r4
    8aa8:	00974407 	addseq	r4, r7, r7, lsl #8
    8aac:	11020000 	mrsne	r0, (UNDEF: 2)
    8ab0:	000003fa 	strdeq	r0, [r0], -sl
    8ab4:	00974507 	addseq	r4, r7, r7, lsl #10
    8ab8:	11030000 	mrsne	r0, (UNDEF: 3)
    8abc:	0000006b 	andeq	r0, r0, fp, rrx
    8ac0:	00974607 	addseq	r4, r7, r7, lsl #12
    8ac4:	11040000 	mrsne	r0, (UNDEF: 4)
    8ac8:	0000035e 	andeq	r0, r0, lr, asr r3
    8acc:	00974707 	addseq	r4, r7, r7, lsl #14
    8ad0:	11050000 	mrsne	r0, (UNDEF: 5)
    8ad4:	0000044f 	andeq	r0, r0, pc, asr #8
    8ad8:	00974807 	addseq	r4, r7, r7, lsl #16
    8adc:	00060000 	andeq	r0, r6, r0
    8ae0:	00009f03 	andeq	r9, r0, r3, lsl #30
    8ae4:	1e490700 	cdpne	7, 4, cr0, cr9, cr0, {0}
    8ae8:	10000004 	andne	r0, r0, r4
    8aec:	a74c0702 	strbge	r0, [ip, -r2, lsl #14]
    8af0:	11000004 	tstne	r0, r4
    8af4:	000002d2 	ldrdeq	r0, [r0], -r2
    8af8:	00974e07 	addseq	r4, r7, r7, lsl #28
    8afc:	11000000 	mrsne	r0, (UNDEF: 0)
    8b00:	0000032b 	andeq	r0, r0, fp, lsr #6
    8b04:	00974f07 	addseq	r4, r7, r7, lsl #30
    8b08:	00010000 	andeq	r0, r1, r0
    8b0c:	00024d03 	andeq	r4, r2, r3, lsl #26
    8b10:	86500700 	ldrbhi	r0, [r0], -r0, lsl #14
    8b14:	10000004 	andne	r0, r0, r4
    8b18:	df530703 	svcle	0x00530703
    8b1c:	11000004 	tstne	r0, r4
    8b20:	00004445 	andeq	r4, r0, r5, asr #8
    8b24:	00975507 	addseq	r5, r7, r7, lsl #10
    8b28:	11000000 	mrsne	r0, (UNDEF: 0)
    8b2c:	00004635 	andeq	r4, r0, r5, lsr r6
    8b30:	00975607 	addseq	r5, r7, r7, lsl #12
    8b34:	11010000 	mrsne	r0, (UNDEF: 1)
    8b38:	000044a4 	andeq	r4, r0, r4, lsr #9
    8b3c:	00975707 	addseq	r5, r7, r7, lsl #14
    8b40:	00020000 	andeq	r0, r2, r0
    8b44:	00453c03 	subeq	r3, r5, r3, lsl #24
    8b48:	b2580700 	subslt	r0, r8, #0, 14
    8b4c:	12000004 	andne	r0, r0, #4
    8b50:	0000461a 	andeq	r4, r0, sl, lsl r6
    8b54:	66fc6201 	ldrbtvs	r6, [ip], r1, lsl #4
    8b58:	00760800 	rsbseq	r0, r6, r0, lsl #16
    8b5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b60:	0000052a 	andeq	r0, r0, sl, lsr #10
    8b64:	00442313 	subeq	r2, r4, r3, lsl r3
    8b68:	2a620100 	bcs	1888f70 <_Min_Stack_Size+0x1888b70>
    8b6c:	02000005 	andeq	r0, r0, #5
    8b70:	8c146c91 	ldchi	12, cr6, [r4], {145}	; 0x91
    8b74:	01000045 	tsteq	r0, r5, asr #32
    8b78:	00009764 	andeq	r9, r0, r4, ror #14
    8b7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8b80:	00459814 	subeq	r9, r5, r4, lsl r8
    8b84:	97640100 	strbls	r0, [r4, -r0, lsl #2]!
    8b88:	02000000 	andeq	r0, r0, #0
    8b8c:	15007691 	strne	r7, [r0, #-1681]	; 0x691
    8b90:	00047b04 	andeq	r7, r4, r4, lsl #22
    8b94:	44681200 	strbtmi	r1, [r8], #-512	; 0x200
    8b98:	7c010000 	stcvc	0, cr0, [r1], {-0}
    8b9c:	08006774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, sp, lr}
    8ba0:	0000002e 	andeq	r0, r0, lr, lsr #32
    8ba4:	05549c01 	ldrbeq	r9, [r4, #-3073]	; 0xc01
    8ba8:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    8bac:	0100000b 	tsteq	r0, fp
    8bb0:	0000977e 	andeq	r9, r0, lr, ror r7
    8bb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8bb8:	465c1200 	ldrbmi	r1, [ip], -r0, lsl #4
    8bbc:	90010000 	andls	r0, r1, r0
    8bc0:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
    8bc4:	00000082 	andeq	r0, r0, r2, lsl #1
    8bc8:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
    8bcc:	bf130000 	svclt	0x00130000
    8bd0:	01000045 	tsteq	r0, r5, asr #32
    8bd4:	00059490 	muleq	r5, r0, r4
    8bd8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8bdc:	00447914 	subeq	r7, r4, r4, lsl r9
    8be0:	97920100 	ldrls	r0, [r2, r0, lsl #2]
    8be4:	02000000 	andeq	r0, r0, #0
    8be8:	92147791 	andsls	r7, r4, #38010880	; 0x2440000
    8bec:	01000045 	tsteq	r0, r5, asr #32
    8bf0:	00009792 	muleq	r0, r2, r7
    8bf4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    8bf8:	df041500 	svcle	0x00041500
    8bfc:	12000004 	andne	r0, r0, #4
    8c00:	0000450e 	andeq	r4, r0, lr, lsl #10
    8c04:	6828b301 	stmdavs	r8!, {r0, r8, r9, ip, sp, pc}
    8c08:	00400800 	subeq	r0, r0, r0, lsl #16
    8c0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8c10:	000005cc 	andeq	r0, r0, ip, asr #11
    8c14:	00462613 	subeq	r2, r6, r3, lsl r6
    8c18:	97b30100 	ldrls	r0, [r3, r0, lsl #2]!
    8c1c:	02000000 	andeq	r0, r0, #0
    8c20:	89146f91 	ldmdbhi	r4, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    8c24:	0100000b 	tsteq	r0, fp
    8c28:	000097b5 			; <UNDEFINED> instruction: 0x000097b5
    8c2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8c30:	46441200 	strbmi	r1, [r4], -r0, lsl #4
    8c34:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    8c38:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
    8c3c:	00000040 	andeq	r0, r0, r0, asr #32
    8c40:	05fe9c01 	ldrbeq	r9, [lr, #3073]!	; 0xc01
    8c44:	26130000 	ldrcs	r0, [r3], -r0
    8c48:	01000046 	tsteq	r0, r6, asr #32
    8c4c:	000097c9 	andeq	r9, r0, r9, asr #15
    8c50:	6f910200 	svcvs	0x00910200
    8c54:	000b8914 	andeq	r8, fp, r4, lsl r9
    8c58:	97cb0100 	strbls	r0, [fp, r0, lsl #2]
    8c5c:	02000000 	andeq	r0, r0, #0
    8c60:	12007791 	andne	r7, r0, #38010880	; 0x2440000
    8c64:	0000459e 	muleq	r0, lr, r5
    8c68:	68a8dd01 	stmiavs	r8!, {r0, r8, sl, fp, ip, lr, pc}
    8c6c:	00480800 	subeq	r0, r8, r0, lsl #16
    8c70:	9c010000 	stcls	0, cr0, [r1], {-0}
    8c74:	00000630 	andeq	r0, r0, r0, lsr r6
    8c78:	0044b913 	subeq	fp, r4, r3, lsl r9
    8c7c:	30dd0100 	sbcscc	r0, sp, r0, lsl #2
    8c80:	02000006 	andeq	r0, r0, #6
    8c84:	89146c91 	ldmdbhi	r4, {r0, r4, r7, sl, fp, sp, lr}
    8c88:	0100000b 	tsteq	r0, fp
    8c8c:	000097df 	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    8c90:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8c94:	a7041500 	strge	r1, [r4, -r0, lsl #10]
    8c98:	12000004 	andne	r0, r0, #4
    8c9c:	000045d6 	ldrdeq	r4, [r0], -r6
    8ca0:	68f0f601 	ldmvs	r0!, {r0, r9, sl, ip, sp, lr, pc}^
    8ca4:	00400800 	subeq	r0, r0, r0, lsl #16
    8ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
    8cac:	00000668 	andeq	r0, r0, r8, ror #12
    8cb0:	00449013 	subeq	r9, r4, r3, lsl r0
    8cb4:	97f60100 	ldrbls	r0, [r6, r0, lsl #2]!
    8cb8:	02000000 	andeq	r0, r0, #0
    8cbc:	89146f91 	ldmdbhi	r4, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    8cc0:	0100000b 	tsteq	r0, fp
    8cc4:	000097f8 	strdeq	r9, [r0], -r8
    8cc8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8ccc:	44531600 	ldrbmi	r1, [r3], #-1536	; 0x600
    8cd0:	0a010000 	beq	48cd8 <_Min_Stack_Size+0x488d8>
    8cd4:	00009701 	andeq	r9, r0, r1, lsl #14
    8cd8:	00693000 	rsbeq	r3, r9, r0
    8cdc:	00001c08 	andeq	r1, r0, r8, lsl #24
    8ce0:	929c0100 	addsls	r0, ip, #0, 2
    8ce4:	17000006 	strne	r0, [r0, -r6]
    8ce8:	00000b89 	andeq	r0, r0, r9, lsl #23
    8cec:	97010c01 	strls	r0, [r1, -r1, lsl #24]
    8cf0:	02000000 	andeq	r0, r0, #0
    8cf4:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    8cf8:	000045b2 			; <UNDEFINED> instruction: 0x000045b2
    8cfc:	4c011b01 	stcmi	11, cr1, [r1], {1}
    8d00:	60080069 	andvs	r0, r8, r9, rrx
    8d04:	01000000 	mrseq	r0, (UNDEF: 0)
    8d08:	0006d69c 	muleq	r6, ip, r6
    8d0c:	3dea1900 	stclcc	9, cr1, [sl]
    8d10:	1b010000 	blne	48d18 <_Min_Stack_Size+0x48918>
    8d14:	0006d601 	andeq	sp, r6, r1, lsl #12
    8d18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8d1c:	00453219 	subeq	r3, r5, r9, lsl r2
    8d20:	011b0100 	tsteq	fp, r0, lsl #2
    8d24:	00000097 	muleq	r0, r7, r0
    8d28:	19739102 	ldmdbne	r3!, {r1, r8, ip, pc}^
    8d2c:	0000456f 	andeq	r4, r0, pc, ror #10
    8d30:	a2011b01 	andge	r1, r1, #1024	; 0x400
    8d34:	02000000 	andeq	r0, r0, #0
    8d38:	15007091 	strne	r7, [r0, #-145]	; 0x91
    8d3c:	00009704 	andeq	r9, r0, r4, lsl #14
    8d40:	45261800 	strmi	r1, [r6, #-2048]!	; 0x800
    8d44:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8d48:	0069ac01 	rsbeq	sl, r9, r1, lsl #24
    8d4c:	00006c08 	andeq	r6, r0, r8, lsl #24
    8d50:	209c0100 	addscs	r0, ip, r0, lsl #2
    8d54:	19000007 	stmdbne	r0, {r0, r1, r2}
    8d58:	00003dea 	andeq	r3, r0, sl, ror #27
    8d5c:	d6013e01 	strle	r3, [r1], -r1, lsl #28
    8d60:	02000006 	andeq	r0, r0, #6
    8d64:	77197491 			; <UNDEFINED> instruction: 0x77197491
    8d68:	01000046 	tsteq	r0, r6, asr #32
    8d6c:	0097013e 	addseq	r0, r7, lr, lsr r1
    8d70:	91020000 	mrsls	r0, (UNDEF: 2)
    8d74:	44821973 	strmi	r1, [r2], #2419	; 0x973
    8d78:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8d7c:	0000a201 	andeq	sl, r0, r1, lsl #4
    8d80:	70910200 	addsvc	r0, r1, r0, lsl #4
    8d84:	455a1a00 	ldrbmi	r1, [sl, #-2560]	; 0xa00
    8d88:	60010000 	andvs	r0, r1, r0
    8d8c:	006a1801 	rsbeq	r1, sl, r1, lsl #16
    8d90:	00013808 	andeq	r3, r1, r8, lsl #16
    8d94:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    8d98:	17000007 	strne	r0, [r0, -r7]
    8d9c:	00000432 	andeq	r0, r0, r2, lsr r4
    8da0:	93016201 	movwls	r6, #4609	; 0x1201
    8da4:	02000003 	andeq	r0, r0, #3
    8da8:	03177091 	tsteq	r7, #145	; 0x91
    8dac:	01000046 	tsteq	r0, r6, asr #32
    8db0:	04130163 	ldreq	r0, [r3], #-355	; 0x163
    8db4:	91020000 	mrsls	r0, (UNDEF: 2)
    8db8:	351b005c 	ldrcc	r0, [fp, #-92]	; 0x5c
    8dbc:	01000044 	tsteq	r0, r4, asr #32
    8dc0:	009701ba 			; <UNDEFINED> instruction: 0x009701ba
    8dc4:	6b500000 	blvs	1408dcc <_Min_Stack_Size+0x14089cc>
    8dc8:	00900800 	addseq	r0, r0, r0, lsl #16
    8dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8dd0:	0000077f 	andeq	r0, r0, pc, ror r7
    8dd4:	00461519 	subeq	r1, r6, r9, lsl r5
    8dd8:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    8ddc:	00000097 	muleq	r0, r7, r0
    8de0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8de4:	0045e71c 	subeq	lr, r5, ip, lsl r7
    8de8:	01d60100 	bicseq	r0, r6, r0, lsl #2
    8dec:	000000b8 	strheq	r0, [r0], -r8
    8df0:	08006be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp, lr}
    8df4:	00000006 	andeq	r0, r0, r6
    8df8:	141d9c01 	ldrne	r9, [sp], #-3073	; 0xc01
    8dfc:	08000004 	stmdaeq	r0, {r2}
    8e00:	00e406a7 	rsceq	r0, r4, r7, lsr #13
    8e04:	7e1e0000 	cdpvc	0, 1, cr0, cr14, cr0, {0}
    8e08:	01000045 	tsteq	r0, r5, asr #32
    8e0c:	0000ca4a 	andeq	ip, r0, sl, asr #20
    8e10:	30030500 	andcc	r0, r3, r0, lsl #10
    8e14:	00200000 	eoreq	r0, r0, r0
    8e18:	0000190a 	andeq	r1, r0, sl, lsl #18
    8e1c:	1aa10004 	bne	fe848e34 <_estack+0xde818e34>
    8e20:	01040000 	mrseq	r0, (UNDEF: 4)
    8e24:	0000012a 	andeq	r0, r0, sl, lsr #2
    8e28:	00479201 	subeq	r9, r7, r1, lsl #4
    8e2c:	00036900 	andeq	r6, r3, r0, lsl #18
    8e30:	000a8000 	andeq	r8, sl, r0
    8e34:	00000000 	andeq	r0, r0, r0
    8e38:	003ce400 	eorseq	lr, ip, r0, lsl #8
    8e3c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8e40:	000002a6 	andeq	r0, r0, r6, lsr #5
    8e44:	a4080102 	strge	r0, [r8], #-258	; 0x102
    8e48:	02000002 	andeq	r0, r0, #2
    8e4c:	003a0502 	eorseq	r0, sl, r2, lsl #10
    8e50:	7c030000 	stcvc	0, cr0, [r3], {-0}
    8e54:	02000000 	andeq	r0, r0, #0
    8e58:	0000452b 	andeq	r4, r0, fp, lsr #10
    8e5c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8e60:	0000034b 	andeq	r0, r0, fp, asr #6
    8e64:	00044503 	andeq	r4, r4, r3, lsl #10
    8e68:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    8e6c:	02000000 	andeq	r0, r0, #0
    8e70:	01000504 	tsteq	r0, r4, lsl #10
    8e74:	60030000 	andvs	r0, r3, r0
    8e78:	02000000 	andeq	r0, r0, #0
    8e7c:	00006941 	andeq	r6, r0, r1, asr #18
    8e80:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8e84:	000002f5 	strdeq	r0, [r0], -r5
    8e88:	fb050802 	blx	14ae9a <_Min_Stack_Size+0x14aa9a>
    8e8c:	02000000 	andeq	r0, r0, #0
    8e90:	02f00708 	rscseq	r0, r0, #8, 14	; 0x200000
    8e94:	04040000 	streq	r0, [r4], #-0
    8e98:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    8e9c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8ea0:	000002fa 	strdeq	r0, [r0], -sl
    8ea4:	00007e03 	andeq	r7, r0, r3, lsl #28
    8ea8:	3a360300 	bcc	d89ab0 <_Min_Stack_Size+0xd896b0>
    8eac:	03000000 	movweq	r0, #0
    8eb0:	00000447 	andeq	r0, r0, r7, asr #8
    8eb4:	004c4103 	subeq	r4, ip, r3, lsl #2
    8eb8:	62030000 	andvs	r0, r3, #0
    8ebc:	03000000 	movweq	r0, #0
    8ec0:	00005e42 	andeq	r5, r0, r2, asr #28
    8ec4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8ec8:	00000044 	andeq	r0, r0, r4, asr #32
    8ecc:	0000a205 	andeq	sl, r0, r5, lsl #4
    8ed0:	00a20600 	adceq	r0, r2, r0, lsl #12
    8ed4:	00c90000 	sbceq	r0, r9, r0
    8ed8:	ad070000 	stcge	0, cr0, [r7, #-0]
    8edc:	01000000 	mrseq	r0, (UNDEF: 0)
    8ee0:	008c0500 	addeq	r0, ip, r0, lsl #10
    8ee4:	97050000 	strls	r0, [r5, -r0]
    8ee8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8eec:	0000008c 	andeq	r0, r0, ip, lsl #1
    8ef0:	f7040109 			; <UNDEFINED> instruction: 0xf7040109
    8ef4:	0000ee01 	andeq	lr, r0, r1, lsl #28
    8ef8:	09180a00 	ldmdbeq	r8, {r9, fp}
    8efc:	0b000000 	bleq	8f04 <_Min_Stack_Size+0x8b04>
    8f00:	00544553 	subseq	r4, r4, r3, asr r5
    8f04:	01090001 	tsteq	r9, r1
    8f08:	0401f904 	streq	pc, [r1], #-2308	; 0x904
    8f0c:	0a000001 	beq	8f18 <_Min_Stack_Size+0x8b18>
    8f10:	0000039d 	muleq	r0, sp, r3
    8f14:	00b20a00 	adcseq	r0, r2, r0, lsl #20
    8f18:	00010000 	andeq	r0, r1, r0
    8f1c:	00083e0c 	andeq	r3, r8, ip, lsl #28
    8f20:	01f90400 	mvnseq	r0, r0, lsl #8
    8f24:	000000ee 	andeq	r0, r0, lr, ror #1
    8f28:	d404280d 	strle	r2, [r4], #-2061	; 0x80d
    8f2c:	00019c03 	andeq	r9, r1, r3, lsl #24
    8f30:	022d0e00 	eoreq	r0, sp, #0, 28
    8f34:	d6040000 	strle	r0, [r4], -r0
    8f38:	0000b403 	andeq	fp, r0, r3, lsl #8
    8f3c:	e90e0000 	stmdb	lr, {}	; <UNPREDICTABLE>
    8f40:	04000000 	streq	r0, [r0], #-0
    8f44:	00b403d7 	ldrsbteq	r0, [r4], r7
    8f48:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    8f4c:	000003eb 	andeq	r0, r0, fp, ror #7
    8f50:	b403d804 	strlt	sp, [r3], #-2052	; 0x804
    8f54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8f58:	0001170e 	andeq	r1, r1, lr, lsl #14
    8f5c:	03d90400 	bicseq	r0, r9, #0, 8
    8f60:	000000b4 	strheq	r0, [r0], -r4
    8f64:	44490f0c 	strbmi	r0, [r9], #-3852	; 0xf0c
    8f68:	da040052 	ble	1090b8 <_Min_Stack_Size+0x108cb8>
    8f6c:	0000b403 	andeq	fp, r0, r3, lsl #8
    8f70:	4f0f1000 	svcmi	0x000f1000
    8f74:	04005244 	streq	r5, [r0], #-580	; 0x244
    8f78:	00b403db 	ldrsbteq	r0, [r4], fp
    8f7c:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    8f80:	00000492 	muleq	r0, r2, r4
    8f84:	c903dc04 	stmdbgt	r3, {r2, sl, fp, ip, lr, pc}
    8f88:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8f8c:	0002150e 	andeq	r1, r2, lr, lsl #10
    8f90:	03dd0400 	bicseq	r0, sp, #0, 8
    8f94:	000000c9 	andeq	r0, r0, r9, asr #1
    8f98:	04980e1a 	ldreq	r0, [r8], #3610	; 0xe1a
    8f9c:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    8fa0:	0000b403 	andeq	fp, r0, r3, lsl #8
    8fa4:	410f1c00 	tstmi	pc, r0, lsl #24
    8fa8:	04005246 	streq	r5, [r0], #-582	; 0x246
    8fac:	019c03df 			; <UNDEFINED> instruction: 0x019c03df
    8fb0:	00200000 	eoreq	r0, r0, r0
    8fb4:	0000b905 	andeq	fp, r0, r5, lsl #18
    8fb8:	00000c00 	andeq	r0, r0, r0, lsl #24
    8fbc:	e0040000 	and	r0, r4, r0
    8fc0:	00011003 	andeq	r1, r1, r3
    8fc4:	04440d00 	strbeq	r0, [r4], #-3328	; 0xd00
    8fc8:	026c0434 	rsbeq	r0, ip, #52, 8	; 0x34000000
    8fcc:	430f0000 	movwmi	r0, #61440	; 0xf000
    8fd0:	36040052 			; <UNDEFINED> instruction: 0x36040052
    8fd4:	0000b404 	andeq	fp, r0, r4, lsl #8
    8fd8:	de0e0000 	cdple	0, 0, cr0, cr14, cr0, {0}
    8fdc:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    8fe0:	00b40437 	adcseq	r0, r4, r7, lsr r4
    8fe4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    8fe8:	00002ae0 	andeq	r2, r0, r0, ror #21
    8fec:	b4043804 	strlt	r3, [r4], #-2052	; 0x804
    8ff0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8ff4:	002d990e 	eoreq	r9, sp, lr, lsl #18
    8ff8:	04390400 	ldrteq	r0, [r9], #-1024	; 0x400
    8ffc:	000000b4 	strheq	r0, [r0], -r4
    9000:	31a50e0c 			; <UNDEFINED> instruction: 0x31a50e0c
    9004:	3a040000 	bcc	10900c <_Min_Stack_Size+0x108c0c>
    9008:	0000b404 	andeq	fp, r0, r4, lsl #8
    900c:	e20e1000 	and	r1, lr, #0
    9010:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    9014:	00b4043b 	adcseq	r0, r4, fp, lsr r4
    9018:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    901c:	000030a6 	andeq	r3, r0, r6, lsr #1
    9020:	b4043c04 	strlt	r3, [r4], #-3076	; 0xc04
    9024:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9028:	002dbb0e 	eoreq	fp, sp, lr, lsl #22
    902c:	043d0400 	ldrteq	r0, [sp], #-1024	; 0x400
    9030:	000000b4 	strheq	r0, [r0], -r4
    9034:	06550e1c 			; <UNDEFINED> instruction: 0x06550e1c
    9038:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    903c:	0000b904 	andeq	fp, r0, r4, lsl #18
    9040:	b30e2000 	movwlt	r2, #57344	; 0xe000
    9044:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    9048:	00b4043f 	adcseq	r0, r4, pc, lsr r4
    904c:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    9050:	00002a0f 	andeq	r2, r0, pc, lsl #20
    9054:	b4044004 	strlt	r4, [r4], #-4
    9058:	2c000000 	stccs	0, cr0, [r0], {-0}
    905c:	0029d20e 	eoreq	sp, r9, lr, lsl #4
    9060:	04410400 	strbeq	r0, [r1], #-1024	; 0x400
    9064:	000000b4 	strheq	r0, [r0], -r4
    9068:	065f0e30 			; <UNDEFINED> instruction: 0x065f0e30
    906c:	42040000 	andmi	r0, r4, #0
    9070:	00026c04 	andeq	r6, r2, r4, lsl #24
    9074:	5f0e3400 	svcpl	0x000e3400
    9078:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    907c:	00b40443 	adcseq	r0, r4, r3, asr #8
    9080:	00400000 	subeq	r0, r0, r0
    9084:	0000a206 	andeq	sl, r0, r6, lsl #4
    9088:	00027c00 	andeq	r7, r2, r0, lsl #24
    908c:	00ad0700 	adceq	r0, sp, r0, lsl #14
    9090:	00020000 	andeq	r0, r2, r0
    9094:	002bc30c 	eoreq	ip, fp, ip, lsl #6
    9098:	04450400 	strbeq	r0, [r5], #-1024	; 0x400
    909c:	000001ad 	andeq	r0, r0, sp, lsr #3
    90a0:	e004240d 	and	r2, r4, sp, lsl #8
    90a4:	00037a04 	andeq	r7, r3, r4, lsl #20
    90a8:	52430f00 	subpl	r0, r3, #0, 30
    90ac:	e2040031 	and	r0, r4, #49	; 0x31
    90b0:	0000c904 	andeq	ip, r0, r4, lsl #18
    90b4:	550e0000 	strpl	r0, [lr, #-0]
    90b8:	04000006 	streq	r0, [r0], #-6
    90bc:	008c04e3 	addeq	r0, ip, r3, ror #9
    90c0:	0f020000 	svceq	0x00020000
    90c4:	00325243 	eorseq	r5, r2, r3, asr #4
    90c8:	c904e404 	stmdbgt	r4, {r2, sl, sp, lr, pc}
    90cc:	04000000 	streq	r0, [r0], #-0
    90d0:	00065f0e 	andeq	r5, r6, lr, lsl #30
    90d4:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
    90d8:	0000008c 	andeq	r0, r0, ip, lsl #1
    90dc:	52530f06 	subspl	r0, r3, #6, 30
    90e0:	04e60400 	strbteq	r0, [r6], #1024	; 0x400
    90e4:	000000c9 	andeq	r0, r0, r9, asr #1
    90e8:	06690e08 	strbteq	r0, [r9], -r8, lsl #28
    90ec:	e7040000 	str	r0, [r4, -r0]
    90f0:	00008c04 	andeq	r8, r0, r4, lsl #24
    90f4:	440f0a00 	strmi	r0, [pc], #-2560	; 90fc <_Min_Stack_Size+0x8cfc>
    90f8:	e8040052 	stmda	r4, {r1, r4, r6}
    90fc:	0000c904 	andeq	ip, r0, r4, lsl #18
    9100:	550e0c00 	strpl	r0, [lr, #-3072]	; 0xc00
    9104:	04000005 	streq	r0, [r0], #-5
    9108:	008c04e9 	addeq	r0, ip, r9, ror #9
    910c:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    9110:	00001ee0 	andeq	r1, r0, r0, ror #29
    9114:	c904ea04 	stmdbgt	r4, {r2, r9, fp, sp, lr, pc}
    9118:	10000000 	andne	r0, r0, r0
    911c:	00067f0e 	andeq	r7, r6, lr, lsl #30
    9120:	04eb0400 	strbteq	r0, [fp], #1024	; 0x400
    9124:	0000008c 	andeq	r0, r0, ip, lsl #1
    9128:	1eb70e12 	mrcne	14, 5, r0, cr7, cr2, {0}
    912c:	ec040000 	stc	0, cr0, [r4], {-0}
    9130:	0000c904 	andeq	ip, r0, r4, lsl #18
    9134:	890e1400 	stmdbhi	lr, {sl, ip}
    9138:	04000006 	streq	r0, [r0], #-6
    913c:	008c04ed 	addeq	r0, ip, sp, ror #9
    9140:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    9144:	00001fd9 	ldrdeq	r1, [r0], -r9
    9148:	c904ee04 	stmdbgt	r4, {r2, r9, sl, fp, sp, lr, pc}
    914c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9150:	0006930e 	andeq	r9, r6, lr, lsl #6
    9154:	04ef0400 	strbteq	r0, [pc], #1024	; 915c <_Min_Stack_Size+0x8d5c>
    9158:	0000008c 	andeq	r0, r0, ip, lsl #1
    915c:	04e60e1a 	strbteq	r0, [r6], #3610	; 0xe1a
    9160:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    9164:	0000c904 	andeq	ip, r0, r4, lsl #18
    9168:	850e1c00 	strhi	r1, [lr, #-3072]	; 0xc00
    916c:	04000019 	streq	r0, [r0], #-25
    9170:	008c04f1 	strdeq	r0, [ip], r1
    9174:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    9178:	000020ba 	strheq	r2, [r0], -sl
    917c:	c904f204 	stmdbgt	r4, {r2, r9, ip, sp, lr, pc}
    9180:	20000000 	andcs	r0, r0, r0
    9184:	00198f0e 	andseq	r8, r9, lr, lsl #30
    9188:	04f30400 	ldrbteq	r0, [r3], #1024	; 0x400
    918c:	0000008c 	andeq	r0, r0, ip, lsl #1
    9190:	420c0022 	andmi	r0, ip, #34	; 0x22
    9194:	04000021 	streq	r0, [r0], #-33	; 0x21
    9198:	028804f4 	addeq	r0, r8, #244, 8	; 0xf4000000
    919c:	3c100000 	ldccc	0, cr0, [r0], {-0}
    91a0:	04433005 	strbeq	r3, [r3], #-5
    91a4:	e6110000 	ldr	r0, [r1], -r0
    91a8:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    91ac:	0000a232 	andeq	sl, r0, r2, lsr r2
    91b0:	5e110000 	cdppl	0, 1, cr0, cr1, cr0, {0}
    91b4:	05000031 	streq	r0, [r0, #-49]	; 0x31
    91b8:	0000a235 	andeq	sl, r0, r5, lsr r2
    91bc:	33110400 	tstcc	r1, #0, 8
    91c0:	05000030 	streq	r0, [r0, #-48]	; 0x30
    91c4:	0000a238 	andeq	sl, r0, r8, lsr r2
    91c8:	9e110800 	cdpls	8, 1, cr0, cr1, cr0, {0}
    91cc:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    91d0:	0000a23b 	andeq	sl, r0, fp, lsr r2
    91d4:	af110c00 	svcge	0x00110c00
    91d8:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    91dc:	0000a23e 	andeq	sl, r0, lr, lsr r2
    91e0:	5d111000 	ldcpl	0, cr1, [r1, #-0]
    91e4:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    91e8:	0000a241 	andeq	sl, r0, r1, asr #4
    91ec:	d5111400 	ldrle	r1, [r1, #-1024]	; 0x400
    91f0:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    91f4:	0000a244 	andeq	sl, r0, r4, asr #4
    91f8:	20111800 	andscs	r1, r1, r0, lsl #16
    91fc:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9200:	0000a247 	andeq	sl, r0, r7, asr #4
    9204:	5a111c00 	bpl	45020c <_Min_Stack_Size+0x44fe0c>
    9208:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    920c:	0000a24a 	andeq	sl, r0, sl, asr #4
    9210:	8f112000 	svchi	0x00112000
    9214:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    9218:	0000a24d 	andeq	sl, r0, sp, asr #4
    921c:	7c112400 	cfldrsvc	mvf2, [r1], {-0}
    9220:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9224:	0000a250 	andeq	sl, r0, r0, asr r2
    9228:	e9112800 	ldmdb	r1, {fp, sp}
    922c:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    9230:	0000a253 	andeq	sl, r0, r3, asr r2
    9234:	ac112c00 	ldcge	12, cr2, [r1], {-0}
    9238:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    923c:	0000a256 	andeq	sl, r0, r6, asr r2
    9240:	06113000 	ldreq	r3, [r1], -r0
    9244:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9248:	0000a259 	andeq	sl, r0, r9, asr r2
    924c:	b6113400 	ldrlt	r3, [r1], -r0, lsl #8
    9250:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    9254:	0000a25c 	andeq	sl, r0, ip, asr r2
    9258:	03003800 	movweq	r3, #2048	; 0x800
    925c:	000031bb 			; <UNDEFINED> instruction: 0x000031bb
    9260:	03865e05 	orreq	r5, r6, #5, 28	; 0x50
    9264:	40100000 	andsmi	r0, r0, r0
    9268:	05176405 	ldreq	r6, [r7, #-1029]	; 0x405
    926c:	3f110000 	svccc	0x00110000
    9270:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9274:	0000a266 	andeq	sl, r0, r6, ror #4
    9278:	80110000 	andshi	r0, r1, r0
    927c:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    9280:	0000a269 	andeq	sl, r0, r9, ror #4
    9284:	7c110400 	cfldrsvc	mvf0, [r1], {-0}
    9288:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    928c:	0000a26c 	andeq	sl, r0, ip, ror #4
    9290:	10110800 	andsne	r0, r1, r0, lsl #16
    9294:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9298:	0000a26f 	andeq	sl, r0, pc, ror #4
    929c:	43110c00 	tstmi	r1, #0, 24
    92a0:	05000030 	streq	r0, [r0, #-48]	; 0x30
    92a4:	0000a272 	andeq	sl, r0, r2, ror r2
    92a8:	1b111000 	blne	44d2b0 <_Min_Stack_Size+0x44ceb0>
    92ac:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    92b0:	0000a275 	andeq	sl, r0, r5, ror r2
    92b4:	34111400 	ldrcc	r1, [r1], #-1024	; 0x400
    92b8:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    92bc:	0000a278 	andeq	sl, r0, r8, ror r2
    92c0:	e4111800 	ldr	r1, [r1], #-2048	; 0x800
    92c4:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    92c8:	0000a27b 	andeq	sl, r0, fp, ror r2
    92cc:	67111c00 	ldrvs	r1, [r1, -r0, lsl #24]
    92d0:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    92d4:	0000a27e 	andeq	sl, r0, lr, ror r2
    92d8:	1e112000 	cdpne	0, 1, cr2, cr1, cr0, {0}
    92dc:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    92e0:	0000a281 	andeq	sl, r0, r1, lsl #5
    92e4:	7a112400 	bvc	4522ec <_Min_Stack_Size+0x451eec>
    92e8:	05000030 	streq	r0, [r0, #-48]	; 0x30
    92ec:	0000a284 	andeq	sl, r0, r4, lsl #5
    92f0:	90112800 	andsls	r2, r1, r0, lsl #16
    92f4:	05000030 	streq	r0, [r0, #-48]	; 0x30
    92f8:	0000a287 	andeq	sl, r0, r7, lsl #5
    92fc:	53112c00 	tstpl	r1, #0, 24
    9300:	0500002a 	streq	r0, [r0, #-42]	; 0x2a
    9304:	0000a28a 	andeq	sl, r0, sl, lsl #5
    9308:	4a113000 	bmi	455310 <_Min_Stack_Size+0x454f10>
    930c:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    9310:	0000a28c 	andeq	sl, r0, ip, lsl #5
    9314:	6e113400 	cfmulsvs	mvf3, mvf1, mvf0
    9318:	05000031 	streq	r0, [r0, #-49]	; 0x31
    931c:	0000a28f 	andeq	sl, r0, pc, lsl #5
    9320:	6f113800 	svcvs	0x00113800
    9324:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    9328:	0000a292 	muleq	r0, r2, r2
    932c:	03003c00 	movweq	r3, #3072	; 0xc00
    9330:	000029bb 			; <UNDEFINED> instruction: 0x000029bb
    9334:	044e9405 	strbeq	r9, [lr], #-1029	; 0x405
    9338:	0c100000 	ldceq	0, cr0, [r0], {-0}
    933c:	054fa705 	strbeq	sl, [pc, #-1797]	; 8c3f <_Min_Stack_Size+0x883f>
    9340:	01110000 	tsteq	r1, r0
    9344:	05000030 	streq	r0, [r0, #-48]	; 0x30
    9348:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    934c:	f6110000 			; <UNDEFINED> instruction: 0xf6110000
    9350:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9354:	0000a2ac 	andeq	sl, r0, ip, lsr #5
    9358:	66110400 	ldrvs	r0, [r1], -r0, lsl #8
    935c:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    9360:	0000a2af 	andeq	sl, r0, pc, lsr #5
    9364:	03000800 	movweq	r0, #2048	; 0x800
    9368:	00002d22 	andeq	r2, r0, r2, lsr #26
    936c:	0522b105 	streq	fp, [r2, #-261]!	; 0x105
    9370:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    9374:	05db3006 	ldrbeq	r3, [fp, #6]
    9378:	b5110000 	ldrlt	r0, [r1, #-0]
    937c:	06000025 	streq	r0, [r0], -r5, lsr #32
    9380:	0000a232 	andeq	sl, r0, r2, lsr r2
    9384:	46110000 	ldrmi	r0, [r1], -r0
    9388:	06000026 	streq	r0, [r0], -r6, lsr #32
    938c:	0000a235 	andeq	sl, r0, r5, lsr r2
    9390:	66110400 	ldrvs	r0, [r1], -r0, lsl #8
    9394:	06000024 	streq	r0, [r0], -r4, lsr #32
    9398:	0000a238 	andeq	sl, r0, r8, lsr r2
    939c:	be110800 	cdplt	8, 1, cr0, cr1, cr0, {0}
    93a0:	06000028 	streq	r0, [r0], -r8, lsr #32
    93a4:	0000a240 	andeq	sl, r0, r0, asr #4
    93a8:	a0110c00 	andsge	r0, r1, r0, lsl #24
    93ac:	06000028 	streq	r0, [r0], -r8, lsr #32
    93b0:	0000a248 	andeq	sl, r0, r8, asr #4
    93b4:	63111000 	tstvs	r1, #0
    93b8:	06000029 	streq	r0, [r0], -r9, lsr #32
    93bc:	0000a250 	andeq	sl, r0, r0, asr r2
    93c0:	7b111400 	blvc	44e3c8 <_Min_Stack_Size+0x44dfc8>
    93c4:	06000028 	streq	r0, [r0], -r8, lsr #32
    93c8:	0000a256 	andeq	sl, r0, r6, asr r2
    93cc:	3e111800 	cdpcc	8, 1, cr1, cr1, cr0, {0}
    93d0:	06000029 	streq	r0, [r0], -r9, lsr #32
    93d4:	0000a259 	andeq	sl, r0, r9, asr r2
    93d8:	6d111c00 	ldcvs	12, cr1, [r1, #-0]
    93dc:	06000026 	streq	r0, [r0], -r6, lsr #32
    93e0:	0000a25c 	andeq	sl, r0, ip, asr r2
    93e4:	93112000 	tstls	r1, #0
    93e8:	06000025 	streq	r0, [r0], -r5, lsr #32
    93ec:	0000a25f 	andeq	sl, r0, pc, asr r2
    93f0:	03002400 	movweq	r2, #1024	; 0x400
    93f4:	000027a8 	andeq	r2, r0, r8, lsr #15
    93f8:	055a6106 	ldrbeq	r6, [sl, #-262]	; 0x106
    93fc:	01120000 	tsteq	r2, r0
    9400:	06074207 	streq	r4, [r7], -r7, lsl #4
    9404:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    9408:	00000001 	andeq	r0, r0, r1
    940c:	0001090a 	andeq	r0, r1, sl, lsl #18
    9410:	920a0100 	andls	r0, sl, #0, 2
    9414:	02000000 	andeq	r0, r0, #0
    9418:	0000c40a 	andeq	ip, r0, sl, lsl #8
    941c:	03000300 	movweq	r0, #768	; 0x300
    9420:	0000001c 	andeq	r0, r0, ip, lsl r0
    9424:	05e64707 	strbeq	r4, [r6, #1799]!	; 0x707
    9428:	01120000 	tsteq	r2, r0
    942c:	06274f07 	strteq	r4, [r7], -r7, lsl #30
    9430:	7d0a0000 	stcvc	0, cr0, [sl, #-0]
    9434:	00000002 	andeq	r0, r0, r2
    9438:	00004d0a 	andeq	r4, r0, sl, lsl #26
    943c:	03000100 	movweq	r0, #256	; 0x100
    9440:	000000d7 	ldrdeq	r0, [r0], -r7
    9444:	06125207 	ldreq	r5, [r2], -r7, lsl #4
    9448:	01120000 	tsteq	r2, r0
    944c:	06535a07 	ldrbeq	r5, [r3], -r7, lsl #20
    9450:	ca0a0000 	bgt	289458 <_Min_Stack_Size+0x289058>
    9454:	00000003 	andeq	r0, r0, r3
    9458:	0003d90a 	andeq	sp, r3, sl, lsl #18
    945c:	8d0a0100 	stfhis	f0, [sl, #-0]
    9460:	02000003 	andeq	r0, r0, #3
    9464:	00023d0a 	andeq	r3, r2, sl, lsl #26
    9468:	03000300 	movweq	r0, #768	; 0x300
    946c:	0000028b 	andeq	r0, r0, fp, lsl #5
    9470:	06325f07 	ldrteq	r5, [r2], -r7, lsl #30
    9474:	01120000 	tsteq	r2, r0
    9478:	06796e07 	ldrbteq	r6, [r9], -r7, lsl #28
    947c:	210a0000 	mrscs	r0, (UNDEF: 10)
    9480:	00000004 	andeq	r0, r0, r4
    9484:	00002d0a 	andeq	r2, r0, sl, lsl #26
    9488:	050a0100 	streq	r0, [sl, #-256]	; 0x100
    948c:	02000004 	andeq	r0, r0, #4
    9490:	04660300 	strbteq	r0, [r6], #-768	; 0x300
    9494:	72070000 	andvc	r0, r7, #0
    9498:	0000065e 	andeq	r0, r0, lr, asr r6
    949c:	7a070112 	bvc	1c98ec <_Min_Stack_Size+0x1c94ec>
    94a0:	00000699 	muleq	r0, r9, r6
    94a4:	0009140a 	andeq	r1, r9, sl, lsl #8
    94a8:	d40a0000 	strle	r0, [sl], #-0
    94ac:	01000008 	tsteq	r0, r8
    94b0:	09cb0300 	stmibeq	fp, {r8, r9}^
    94b4:	7d070000 	stcvc	0, cr0, [r7, #-0]
    94b8:	00000684 	andeq	r0, r0, r4, lsl #13
    94bc:	84070810 	strhi	r0, [r7], #-2064	; 0x810
    94c0:	000006e9 	andeq	r0, r0, r9, ror #13
    94c4:	00000d11 	andeq	r0, r0, r1, lsl sp
    94c8:	a2860700 	addge	r0, r6, #0, 14
    94cc:	00000000 	andeq	r0, r0, r0
    94d0:	0004a811 	andeq	sl, r4, r1, lsl r8
    94d4:	07890700 	streq	r0, [r9, r0, lsl #14]
    94d8:	04000006 	streq	r0, [r0], #-6
    94dc:	0000b911 	andeq	fp, r0, r1, lsl r9
    94e0:	538c0700 	orrpl	r0, ip, #0, 14
    94e4:	05000006 	streq	r0, [r0, #-6]
    94e8:	00008711 	andeq	r8, r0, r1, lsl r7
    94ec:	278f0700 	strcs	r0, [pc, r0, lsl #14]
    94f0:	06000006 	streq	r0, [r0], -r6
    94f4:	0002b211 	andeq	fp, r2, r1, lsl r2
    94f8:	79920700 	ldmibvc	r2, {r8, r9, sl}
    94fc:	07000006 	streq	r0, [r0, -r6]
    9500:	031a0300 	tsteq	sl, #0, 6
    9504:	94070000 	strls	r0, [r7], #-0
    9508:	000006a4 	andeq	r0, r0, r4, lsr #13
    950c:	36081210 			; <UNDEFINED> instruction: 0x36081210
    9510:	00000769 	andeq	r0, r0, r9, ror #14
    9514:	001fe011 	andseq	lr, pc, r1, lsl r0	; <UNPREDICTABLE>
    9518:	8c380800 	ldchi	8, cr0, [r8], #-0
    951c:	00000000 	andeq	r0, r0, r0
    9520:	00214e11 	eoreq	r4, r1, r1, lsl lr
    9524:	8c3b0800 	ldchi	8, cr0, [fp], #-0
    9528:	02000000 	andeq	r0, r0, #0
    952c:	00220a11 	eoreq	r0, r2, r1, lsl sl
    9530:	8c3e0800 	ldchi	8, cr0, [lr], #-0
    9534:	04000000 	streq	r0, [r0], #-0
    9538:	00210011 	eoreq	r0, r1, r1, lsl r0
    953c:	8c410800 	mcrrhi	8, 0, r0, r1, cr0
    9540:	06000000 	streq	r0, [r0], -r0
    9544:	00211e11 	eoreq	r1, r1, r1, lsl lr
    9548:	8c440800 	mcrrhi	8, 0, r0, r4, cr0
    954c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9550:	00216911 	eoreq	r6, r1, r1, lsl r9
    9554:	8c470800 	mcrrhi	8, 0, r0, r7, cr0
    9558:	0a000000 	beq	9560 <_Min_Stack_Size+0x9160>
    955c:	00212c11 	eoreq	r2, r1, r1, lsl ip
    9560:	8c4b0800 	mcrrhi	8, 0, r0, fp, cr0
    9564:	0c000000 	stceq	0, cr0, [r0], {-0}
    9568:	00211111 	eoreq	r1, r1, r1, lsl r1
    956c:	8c510800 	mrrchi	8, 0, r0, r1, cr0
    9570:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9574:	00205411 	eoreq	r5, r0, r1, lsl r4
    9578:	8c540800 	mrrchi	8, 0, r0, r4, cr0
    957c:	10000000 	andne	r0, r0, r0
    9580:	206f0300 	rsbcs	r0, pc, r0, lsl #6
    9584:	55080000 	strpl	r0, [r8, #-0]
    9588:	000006f4 	strdeq	r0, [r0], -r4
    958c:	00029d13 	andeq	r9, r2, r3, lsl sp
    9590:	3a090800 	bcc	24b598 <_Min_Stack_Size+0x24b198>
    9594:	000007a5 	andeq	r0, r0, r5, lsr #15
    9598:	0000d111 	andeq	sp, r0, r1, lsl r1
    959c:	a53c0900 	ldrge	r0, [ip, #-2304]!	; 0x900
    95a0:	00000007 	andeq	r0, r0, r7
    95a4:	0031b511 	eorseq	fp, r1, r1, lsl r5
    95a8:	8c3d0900 	ldchi	9, cr0, [sp], #-0
    95ac:	04000000 	streq	r0, [r0], #-0
    95b0:	0003f311 	andeq	pc, r3, r1, lsl r3	; <UNPREDICTABLE>
    95b4:	8c3e0900 	ldchi	9, cr0, [lr], #-0
    95b8:	06000000 	streq	r0, [r0], -r0
    95bc:	d3041400 	movwle	r1, #17408	; 0x4400
    95c0:	03000000 	movweq	r0, #0
    95c4:	00000016 	andeq	r0, r0, r6, lsl r0
    95c8:	07744009 	ldrbeq	r4, [r4, -r9]!
    95cc:	04100000 	ldreq	r0, [r0], #-0
    95d0:	07d33f0a 	ldrbeq	r3, [r3, sl, lsl #30]
    95d4:	58150000 	ldmdapl	r5, {}	; <UNPREDICTABLE>
    95d8:	33410a00 	movtcc	r0, #6656	; 0x1a00
    95dc:	00000000 	andeq	r0, r0, r0
    95e0:	0a005915 	beq	1fa3c <_Min_Stack_Size+0x1f63c>
    95e4:	00003342 	andeq	r3, r0, r2, asr #6
    95e8:	03000200 	movweq	r0, #512	; 0x200
    95ec:	0000491e 	andeq	r4, r0, lr, lsl r9
    95f0:	07de430a 	ldrbeq	r4, [lr, sl, lsl #6]
    95f4:	04140000 	ldreq	r0, [r4], #-0
    95f8:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    95fc:	00478716 	subeq	r8, r7, r6, lsl r7
    9600:	e8720100 	ldmda	r2!, {r8}^
    9604:	2408006b 	strcs	r0, [r8], #-107	; 0x6b
    9608:	01000002 	tsteq	r0, r2
    960c:	0008089c 	muleq	r8, ip, r8
    9610:	04321700 	ldrteq	r1, [r2], #-1792	; 0x700
    9614:	74010000 	strvc	r0, [r1], #-0
    9618:	000006e9 	andeq	r0, r0, r9, ror #13
    961c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    9620:	0046f216 	subeq	pc, r6, r6, lsl r2	; <UNPREDICTABLE>
    9624:	0ce70100 	stfeqe	f0, [r7]
    9628:	b208006e 	andlt	r0, r8, #110	; 0x6e
    962c:	01000000 	mrseq	r0, (UNDEF: 0)
    9630:	00082d9c 	muleq	r8, ip, sp
    9634:	2af61700 	bcs	ffd8f23c <_estack+0xdfd5f23c>
    9638:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    963c:	00000443 	andeq	r0, r0, r3, asr #8
    9640:	7fbc9103 	svcvc	0x00bc9103
    9644:	47151800 	ldrmi	r1, [r5, -r0, lsl #16]
    9648:	3c010000 	stccc	0, cr0, [r1], {-0}
    964c:	006ec001 	rsbeq	ip, lr, r1
    9650:	0000b408 	andeq	fp, r0, r8, lsl #8
    9654:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    9658:	19000008 	stmdbne	r0, {r3}
    965c:	00002ec1 	andeq	r2, r0, r1, asr #29
    9660:	17013e01 	strne	r3, [r1, -r1, lsl #28]
    9664:	03000005 	movweq	r0, #5
    9668:	007fb891 			; <UNDEFINED> instruction: 0x007fb891
    966c:	0048a118 	subeq	sl, r8, r8, lsl r1
    9670:	018d0100 	orreq	r0, sp, r0, lsl #2
    9674:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
    9678:	0000002c 	andeq	r0, r0, ip, lsr #32
    967c:	087a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}^
    9680:	561a0000 	ldrpl	r0, [sl], -r0
    9684:	01000007 	tsteq	r0, r7
    9688:	0104018d 	smlabbeq	r4, sp, r1, r0
    968c:	91020000 	mrsls	r0, (UNDEF: 2)
    9690:	521b0077 	andspl	r0, fp, #119	; 0x77
    9694:	0100004b 	tsteq	r0, fp, asr #32
    9698:	6fa0019e 	svcvs	0x00a0019e
    969c:	00400800 	subeq	r0, r0, r0, lsl #16
    96a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    96a4:	000008a0 	andeq	r0, r0, r0, lsr #17
    96a8:	002bdb1a 	eoreq	sp, fp, sl, lsl fp
    96ac:	019e0100 	orrseq	r0, lr, r0, lsl #2
    96b0:	00000069 	andeq	r0, r0, r9, rrx
    96b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    96b8:	0048c51b 	subeq	ip, r8, fp, lsl r5
    96bc:	01b20100 			; <UNDEFINED> instruction: 0x01b20100
    96c0:	08006fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, lr}
    96c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    96c8:	08d59c01 	ldmeq	r5, {r0, sl, fp, ip, pc}^
    96cc:	931a0000 	tstls	sl, #0
    96d0:	01000046 	tsteq	r0, r6, asr #32
    96d4:	004501b2 	strheq	r0, [r5], #-18	; 0xffffffee
    96d8:	91020000 	mrsls	r0, (UNDEF: 2)
    96dc:	492c1a76 	stmdbmi	ip!, {r1, r2, r4, r5, r6, r9, fp, ip}
    96e0:	b2010000 	andlt	r0, r1, #0
    96e4:	00004501 	andeq	r4, r0, r1, lsl #10
    96e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    96ec:	4ae11b00 	bmi	ff8502f4 <_estack+0xdf8202f4>
    96f0:	c0010000 	andgt	r0, r1, r0
    96f4:	00700c01 	rsbseq	r0, r0, r1, lsl #24
    96f8:	00002c08 	andeq	r2, r0, r8, lsl #24
    96fc:	0a9c0100 	beq	fe709b04 <_estack+0xde6d9b04>
    9700:	1a000009 	bne	972c <_Min_Stack_Size+0x932c>
    9704:	00004693 	muleq	r0, r3, r6
    9708:	0a01c001 	beq	79714 <_Min_Stack_Size+0x79314>
    970c:	02000009 	andeq	r0, r0, #9
    9710:	2c1a7491 	cfldrscs	mvf7, [sl], {145}	; 0x91
    9714:	01000049 	tsteq	r0, r9, asr #32
    9718:	090a01c0 	stmdbeq	sl, {r6, r7, r8}
    971c:	91020000 	mrsls	r0, (UNDEF: 2)
    9720:	04140070 	ldreq	r0, [r4], #-112	; 0x70
    9724:	00000045 	andeq	r0, r0, r5, asr #32
    9728:	00468c1b 	subeq	r8, r6, fp, lsl ip
    972c:	01cb0100 	biceq	r0, fp, r0, lsl #2
    9730:	08007038 	stmdaeq	r0, {r3, r4, r5, ip, sp, lr}
    9734:	00000020 	andeq	r0, r0, r0, lsr #32
    9738:	09369c01 	ldmdbeq	r6!, {r0, sl, fp, ip, pc}
    973c:	301a0000 	andscc	r0, sl, r0
    9740:	01000049 	tsteq	r0, r9, asr #32
    9744:	004501cb 	subeq	r0, r5, fp, asr #3
    9748:	91020000 	mrsls	r0, (UNDEF: 2)
    974c:	251b0076 	ldrcs	r0, [fp, #-118]	; 0x76
    9750:	01000049 	tsteq	r0, r9, asr #32
    9754:	705801d5 	ldrsbvc	r0, [r8], #-21	; 0xffffffeb
    9758:	00200800 	eoreq	r0, r0, r0, lsl #16
    975c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9760:	0000095c 	andeq	r0, r0, ip, asr r9
    9764:	0049301a 	subeq	r3, r9, sl, lsl r0
    9768:	01d50100 	bicseq	r0, r5, r0, lsl #2
    976c:	00000045 	andeq	r0, r0, r5, asr #32
    9770:	00769102 	rsbseq	r9, r6, r2, lsl #2
    9774:	004b8c1b 	subeq	r8, fp, fp, lsl ip
    9778:	01df0100 	bicseq	r0, pc, r0, lsl #2
    977c:	08007078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, lr}
    9780:	0000001c 	andeq	r0, r0, ip, lsl r0
    9784:	09829c01 	stmibeq	r2, {r0, sl, fp, ip, pc}
    9788:	261a0000 	ldrcs	r0, [sl], -r0
    978c:	0100004c 	tsteq	r0, ip, asr #32
    9790:	098201df 	stmibeq	r2, {r0, r1, r2, r3, r4, r6, r7, r8}
    9794:	91020000 	mrsls	r0, (UNDEF: 2)
    9798:	04140074 	ldreq	r0, [r4], #-116	; 0x74
    979c:	000007ab 	andeq	r0, r0, fp, lsr #15
    97a0:	00481e18 	subeq	r1, r8, r8, lsl lr
    97a4:	01ea0100 	mvneq	r0, r0, lsl #2
    97a8:	08007094 	stmdaeq	r0, {r2, r4, r7, ip, sp, lr}
    97ac:	00000040 	andeq	r0, r0, r0, asr #32
    97b0:	09ae9c01 	stmibeq	lr!, {r0, sl, fp, ip, pc}
    97b4:	321a0000 	andscc	r0, sl, #0
    97b8:	01000048 	tsteq	r0, r8, asr #32
    97bc:	002c01ea 	eoreq	r0, ip, sl, ror #3
    97c0:	91020000 	mrsls	r0, (UNDEF: 2)
    97c4:	f41c0077 			; <UNDEFINED> instruction: 0xf41c0077
    97c8:	0100004b 	tsteq	r0, fp, asr #32
    97cc:	098201fc 	stmibeq	r2, {r2, r3, r4, r5, r6, r7, r8}
    97d0:	70d40000 	sbcsvc	r0, r4, r0
    97d4:	00180800 	andseq	r0, r8, r0, lsl #16
    97d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    97dc:	00469d18 	subeq	r9, r6, r8, lsl sp
    97e0:	020a0100 	andeq	r0, sl, #0, 2
    97e4:	080070ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, lr}
    97e8:	00000050 	andeq	r0, r0, r0, asr r0
    97ec:	09f99c01 	ldmibeq	r9!, {r0, sl, fp, ip, pc}^
    97f0:	5c1a0000 	ldcpl	0, cr0, [sl], {-0}
    97f4:	01000022 	tsteq	r0, r2, lsr #32
    97f8:	0045020a 	subeq	r0, r5, sl, lsl #4
    97fc:	91020000 	mrsls	r0, (UNDEF: 2)
    9800:	49f6196e 	ldmibmi	r6!, {r1, r2, r3, r5, r6, r8, fp, ip}^
    9804:	0c010000 	stceq	0, cr0, [r1], {-0}
    9808:	00004502 	andeq	r4, r0, r2, lsl #10
    980c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9810:	46bf1b00 	ldrtmi	r1, [pc], r0, lsl #22
    9814:	1c010000 	stcne	0, cr0, [r1], {-0}
    9818:	00713c02 	rsbseq	r3, r1, r2, lsl #24
    981c:	00004008 	andeq	r4, r0, r8
    9820:	2e9c0100 	fmlcse	f0, f4, f0
    9824:	1a00000a 	bne	9854 <_Min_Stack_Size+0x9454>
    9828:	00004930 	andeq	r4, r0, r0, lsr r9
    982c:	45021c01 	strmi	r1, [r2, #-3073]	; 0xc01
    9830:	02000000 	andeq	r0, r0, #0
    9834:	5b196e91 	blpl	665280 <_Min_Stack_Size+0x664e80>
    9838:	01000043 	tsteq	r0, r3, asr #32
    983c:	0069021e 	rsbeq	r0, r9, lr, lsl r2
    9840:	91020000 	mrsls	r0, (UNDEF: 2)
    9844:	d01d0074 	andsle	r0, sp, r4, ror r0
    9848:	01000047 	tsteq	r0, r7, asr #32
    984c:	0069022d 	rsbeq	r0, r9, sp, lsr #4
    9850:	717c0000 	cmnvc	ip, r0
    9854:	00380800 	eorseq	r0, r8, r0, lsl #16
    9858:	9c010000 	stcls	0, cr0, [r1], {-0}
    985c:	00000a67 	andeq	r0, r0, r7, ror #20
    9860:	004aef1a 	subeq	lr, sl, sl, lsl pc
    9864:	022d0100 	eoreq	r0, sp, #0, 2
    9868:	00000045 	andeq	r0, r0, r5, asr #32
    986c:	1a769102 	bne	1dadc7c <_Min_Stack_Size+0x1dad87c>
    9870:	00004819 	andeq	r4, r0, r9, lsl r8
    9874:	45022d01 	strmi	r2, [r2, #-3329]	; 0xd01
    9878:	02000000 	andeq	r0, r0, #0
    987c:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    9880:	0000476b 	andeq	r4, r0, fp, ror #14
    9884:	b4023701 	strlt	r3, [r2], #-1793	; 0x701
    9888:	68080071 	stmdavs	r8, {r0, r4, r5, r6}
    988c:	01000000 	mrseq	r0, (UNDEF: 0)
    9890:	000a9c9c 	muleq	sl, ip, ip
    9894:	48651a00 	stmdami	r5!, {r9, fp, ip}^
    9898:	37010000 	strcc	r0, [r1, -r0]
    989c:	00006902 	andeq	r6, r0, r2, lsl #18
    98a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    98a4:	002a3719 	eoreq	r3, sl, r9, lsl r7
    98a8:	02390100 	eorseq	r0, r9, #0, 2
    98ac:	0000054f 	andeq	r0, r0, pc, asr #10
    98b0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    98b4:	004bab18 	subeq	sl, fp, r8, lsl fp
    98b8:	02530100 	subseq	r0, r3, #0, 2
    98bc:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
    98c0:	00000048 	andeq	r0, r0, r8, asr #32
    98c4:	0ac29c01 	beq	ff0b08d0 <_estack+0xdf0808d0>
    98c8:	37190000 	ldrcc	r0, [r9, -r0]
    98cc:	0100002a 	tsteq	r0, sl, lsr #32
    98d0:	054f0255 	strbeq	r0, [pc, #-597]	; 9683 <_Min_Stack_Size+0x9283>
    98d4:	91020000 	mrsls	r0, (UNDEF: 2)
    98d8:	001b006c 	andseq	r0, fp, ip, rrx
    98dc:	0100004a 	tsteq	r0, sl, asr #32
    98e0:	7264026c 	rsbvc	r0, r4, #108, 4	; 0xc0000006
    98e4:	01200800 	teqeq	r0, r0, lsl #16
    98e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    98ec:	00000b40 	andeq	r0, r0, r0, asr #22
    98f0:	004aef1a 	subeq	lr, sl, sl, lsl pc
    98f4:	026c0100 	rsbeq	r0, ip, #0, 2
    98f8:	00000045 	andeq	r0, r0, r5, asr #32
    98fc:	1a669102 	bne	19add0c <_Min_Stack_Size+0x19ad90c>
    9900:	00004819 	andeq	r4, r0, r9, lsl r8
    9904:	45026c01 	strmi	r6, [r2, #-3073]	; 0xc01
    9908:	02000000 	andeq	r0, r0, #0
    990c:	631e6491 	tstvs	lr, #-1862270976	; 0x91000000
    9910:	026c0100 	rsbeq	r0, ip, #0, 2
    9914:	00000b40 	andeq	r0, r0, r0, asr #22
    9918:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    991c:	0000435b 	andeq	r4, r0, fp, asr r3
    9920:	69026e01 	stmdbvs	r2, {r0, r9, sl, fp, sp, lr}
    9924:	02000000 	andeq	r0, r0, #0
    9928:	4f197491 	svcmi	0x00197491
    992c:	01000010 	tsteq	r0, r0, lsl r0
    9930:	0069026e 	rsbeq	r0, r9, lr, ror #4
    9934:	91020000 	mrsls	r0, (UNDEF: 2)
    9938:	48031970 	stmdami	r3, {r4, r5, r6, r8, fp, ip}
    993c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    9940:	00006902 	andeq	r6, r0, r2, lsl #18
    9944:	68910200 	ldmvs	r1, {r9}
    9948:	00497219 	subeq	r7, r9, r9, lsl r2
    994c:	026f0100 	rsbeq	r0, pc, #0, 2
    9950:	00000069 	andeq	r0, r0, r9, rrx
    9954:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    9958:	0b460414 	bleq	118a9b0 <_Min_Stack_Size+0x118a5b0>
    995c:	45080000 	strmi	r0, [r8, #-0]
    9960:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9964:	00004740 	andeq	r4, r0, r0, asr #14
    9968:	84029401 	strhi	r9, [r2], #-1025	; 0x401
    996c:	48080073 	stmdami	r8, {r0, r1, r4, r5, r6}
    9970:	01000000 	mrseq	r0, (UNDEF: 0)
    9974:	000b8f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    9978:	225c1a00 	subscs	r1, ip, #0, 20
    997c:	94010000 	strls	r0, [r1], #-0
    9980:	00004502 	andeq	r4, r0, r2, lsl #10
    9984:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9988:	0048081a 	subeq	r0, r8, sl, lsl r8
    998c:	02940100 	addseq	r0, r4, #0, 2
    9990:	00000045 	andeq	r0, r0, r5, asr #32
    9994:	1a749102 	bne	1d2dda4 <_Min_Stack_Size+0x1d2d9a4>
    9998:	000046da 	ldrdeq	r4, [r0], -sl
    999c:	2c029401 	cfstrscs	mvf9, [r2], {1}
    99a0:	02000000 	andeq	r0, r0, #0
    99a4:	18007391 	stmdane	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    99a8:	0000484f 	andeq	r4, r0, pc, asr #16
    99ac:	cc02a301 	stcgt	3, cr10, [r2], {1}
    99b0:	78080073 	stmdavc	r8, {r0, r1, r4, r5, r6}
    99b4:	01000000 	mrseq	r0, (UNDEF: 0)
    99b8:	000bd39c 	muleq	fp, ip, r3
    99bc:	225c1a00 	subscs	r1, ip, #0, 20
    99c0:	a3010000 	movwge	r0, #4096	; 0x1000
    99c4:	00004502 	andeq	r4, r0, r2, lsl #10
    99c8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    99cc:	7274701e 	rsbsvc	r7, r4, #30
    99d0:	02a30100 	adceq	r0, r3, #0, 2
    99d4:	00000bd3 	ldrdeq	r0, [r0], -r3
    99d8:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    99dc:	000049f6 	strdeq	r4, [r0], -r6
    99e0:	4502a501 	strmi	sl, [r2, #-1281]	; 0x501
    99e4:	02000000 	andeq	r0, r0, #0
    99e8:	14007691 	strne	r7, [r0], #-1681	; 0x691
    99ec:	00002c04 	andeq	r2, r0, r4, lsl #24
    99f0:	47231800 	strmi	r1, [r3, -r0, lsl #16]!
    99f4:	ba010000 	blt	499fc <_Min_Stack_Size+0x495fc>
    99f8:	00744402 	rsbseq	r4, r4, r2, lsl #8
    99fc:	00007c08 	andeq	r7, r0, r8, lsl #24
    9a00:	2c9c0100 	ldfcss	f0, [ip], {0}
    9a04:	1a00000c 	bne	9a3c <_Min_Stack_Size+0x963c>
    9a08:	00004aef 	andeq	r4, r0, pc, ror #21
    9a0c:	4502ba01 	strmi	fp, [r2, #-2561]	; 0xa01
    9a10:	02000000 	andeq	r0, r0, #0
    9a14:	191a7691 	ldmdbne	sl, {r0, r4, r7, r9, sl, ip, sp, lr}
    9a18:	01000048 	tsteq	r0, r8, asr #32
    9a1c:	004502ba 	strheq	r0, [r5], #-42	; 0xffffffd6
    9a20:	91020000 	mrsls	r0, (UNDEF: 2)
    9a24:	03f31a74 	mvnseq	r1, #116, 20	; 0x74000
    9a28:	ba010000 	blt	49a30 <_Min_Stack_Size+0x49630>
    9a2c:	00004502 	andeq	r4, r0, r2, lsl #10
    9a30:	72910200 	addsvc	r0, r1, #0, 4
    9a34:	0031b51a 	eorseq	fp, r1, sl, lsl r5
    9a38:	02ba0100 	adcseq	r0, sl, #0, 2
    9a3c:	00000045 	andeq	r0, r0, r5, asr #32
    9a40:	00709102 	rsbseq	r9, r0, r2, lsl #2
    9a44:	004a371f 	subeq	r3, sl, pc, lsl r7
    9a48:	02d80100 	sbcseq	r0, r8, #0, 2
    9a4c:	080074c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, lr}
    9a50:	00000014 	andeq	r0, r0, r4, lsl r0
    9a54:	d4189c01 	ldrle	r9, [r8], #-3073	; 0xc01
    9a58:	0100004a 	tsteq	r0, sl, asr #32
    9a5c:	74d402e6 	ldrbvc	r0, [r4], #742	; 0x2e6
    9a60:	00c80800 	sbceq	r0, r8, r0, lsl #16
    9a64:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a68:	00000ce0 	andeq	r0, r0, r0, ror #25
    9a6c:	004aef1a 	subeq	lr, sl, sl, lsl pc
    9a70:	02e60100 	rsceq	r0, r6, #0, 2
    9a74:	00000045 	andeq	r0, r0, r5, asr #32
    9a78:	7fbe9103 	svcvc	0x00be9103
    9a7c:	0048191a 	subeq	r1, r8, sl, lsl r9
    9a80:	02e60100 	rsceq	r0, r6, #0, 2
    9a84:	00000045 	andeq	r0, r0, r5, asr #32
    9a88:	7fbc9103 	svcvc	0x00bc9103
    9a8c:	0011fa1a 	andseq	pc, r1, sl, lsl sl	; <UNPREDICTABLE>
    9a90:	02e60100 	rsceq	r0, r6, #0, 2
    9a94:	00000045 	andeq	r0, r0, r5, asr #32
    9a98:	7fba9103 	svcvc	0x00ba9103
    9a9c:	0018a31a 	andseq	sl, r8, sl, lsl r3
    9aa0:	02e60100 	rsceq	r0, r6, #0, 2
    9aa4:	0000002c 	andeq	r0, r0, ip, lsr #32
    9aa8:	7fb99103 	svcvc	0x00b99103
    9aac:	0025db19 	eoreq	sp, r5, r9, lsl fp
    9ab0:	02e80100 	rsceq	r0, r8, #0, 2
    9ab4:	000005db 	ldrdeq	r0, [r0], -fp
    9ab8:	19449102 	stmdbne	r4, {r1, r8, ip, pc}^
    9abc:	00004972 	andeq	r4, r0, r2, ror r9
    9ac0:	6902ea01 	stmdbvs	r2, {r0, r9, fp, sp, lr, pc}
    9ac4:	02000000 	andeq	r0, r0, #0
    9ac8:	b0197491 	mulslt	r9, r1, r4
    9acc:	01000048 	tsteq	r0, r8, asr #32
    9ad0:	004502eb 	subeq	r0, r5, fp, ror #5
    9ad4:	91020000 	mrsls	r0, (UNDEF: 2)
    9ad8:	49a71972 	stmibmi	r7!, {r1, r4, r5, r6, r8, fp, ip}
    9adc:	eb010000 	bl	49ae4 <_Min_Stack_Size+0x496e4>
    9ae0:	00004502 	andeq	r4, r0, r2, lsl #10
    9ae4:	70910200 	addsvc	r0, r1, r0, lsl #4
    9ae8:	00493619 	subeq	r3, r9, r9, lsl r6
    9aec:	02eb0100 	rsceq	r0, fp, #0, 2
    9af0:	00000045 	andeq	r0, r0, r5, asr #32
    9af4:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    9af8:	004a5918 	subeq	r5, sl, r8, lsl r9
    9afc:	031c0100 	tsteq	ip, #0, 2
    9b00:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    9b04:	00000068 	andeq	r0, r0, r8, rrx
    9b08:	0d339c01 	ldceq	12, cr9, [r3, #-4]!
    9b0c:	ef1a0000 	svc	0x001a0000
    9b10:	0100004a 	tsteq	r0, sl, asr #32
    9b14:	0045031c 	subeq	r0, r5, ip, lsl r3
    9b18:	91020000 	mrsls	r0, (UNDEF: 2)
    9b1c:	48191a76 	ldmdami	r9, {r1, r2, r4, r5, r6, r9, fp, ip}
    9b20:	1c010000 	stcne	0, cr0, [r1], {-0}
    9b24:	00004503 	andeq	r4, r0, r3, lsl #10
    9b28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9b2c:	0003f31a 	andeq	pc, r3, sl, lsl r3	; <UNPREDICTABLE>
    9b30:	031c0100 	tsteq	ip, #0, 2
    9b34:	00000045 	andeq	r0, r0, r5, asr #32
    9b38:	1a729102 	bne	1cadf48 <_Min_Stack_Size+0x1cadb48>
    9b3c:	000031b5 			; <UNDEFINED> instruction: 0x000031b5
    9b40:	45031c01 	strmi	r1, [r3, #-3073]	; 0xc01
    9b44:	02000000 	andeq	r0, r0, #0
    9b48:	1b007091 	blne	25d94 <_Min_Stack_Size+0x25994>
    9b4c:	00004ac5 	andeq	r4, r0, r5, asr #21
    9b50:	04032e01 	streq	r2, [r3], #-3585	; 0xe01
    9b54:	28080076 	stmdacs	r8, {r1, r2, r4, r5, r6}
    9b58:	01000001 	tsteq	r0, r1
    9b5c:	000dae9c 	muleq	sp, ip, lr
    9b60:	4aef1a00 	bmi	ffbd0368 <_estack+0xdfba0368>
    9b64:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9b68:	00004503 	andeq	r4, r0, r3, lsl #10
    9b6c:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    9b70:	0048191a 	subeq	r1, r8, sl, lsl r9
    9b74:	032e0100 	teqeq	lr, #0, 2
    9b78:	00000045 	andeq	r0, r0, r5, asr #32
    9b7c:	1a649102 	bne	192df8c <_Min_Stack_Size+0x192db8c>
    9b80:	0000470e 	andeq	r4, r0, lr, lsl #14
    9b84:	45032e01 	strmi	r2, [r3, #-3585]	; 0xe01
    9b88:	02000000 	andeq	r0, r0, #0
    9b8c:	78206291 	stmdavc	r0!, {r0, r4, r7, r9, sp, lr}
    9b90:	03300100 	teqeq	r0, #0, 2
    9b94:	0000007e 	andeq	r0, r0, lr, ror r0
    9b98:	20749102 	rsbscs	r9, r4, r2, lsl #2
    9b9c:	30010079 	andcc	r0, r1, r9, ror r0
    9ba0:	00007e03 	andeq	r7, r0, r3, lsl #28
    9ba4:	70910200 	addsvc	r0, r1, r0, lsl #4
    9ba8:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
    9bac:	03300100 	teqeq	r0, #0, 2
    9bb0:	0000007e 	andeq	r0, r0, lr, ror r0
    9bb4:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    9bb8:	01003265 	tsteq	r0, r5, ror #4
    9bbc:	007e0330 	rsbseq	r0, lr, r0, lsr r3
    9bc0:	91020000 	mrsls	r0, (UNDEF: 2)
    9bc4:	e5180068 	ldr	r0, [r8, #-104]	; 0x68
    9bc8:	01000047 	tsteq	r0, r7, asr #32
    9bcc:	772c0349 	strvc	r0, [ip, -r9, asr #6]!
    9bd0:	02bc0800 	adcseq	r0, ip, #0, 16
    9bd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9bd8:	00000e63 	andeq	r0, r0, r3, ror #28
    9bdc:	004aef1a 	subeq	lr, sl, sl, lsl pc
    9be0:	03490100 	movteq	r0, #37120	; 0x9100
    9be4:	0000007e 	andeq	r0, r0, lr, ror r0
    9be8:	1a549102 	bne	152dff8 <_Min_Stack_Size+0x152dbf8>
    9bec:	00004819 	andeq	r4, r0, r9, lsl r8
    9bf0:	7e034901 	cdpvc	9, 0, cr4, cr3, cr1, {0}
    9bf4:	02000000 	andeq	r0, r0, #0
    9bf8:	0e1a5091 	mrceq	0, 0, r5, cr10, cr1, {4}
    9bfc:	01000047 	tsteq	r0, r7, asr #32
    9c00:	007e0349 	rsbseq	r0, lr, r9, asr #6
    9c04:	91020000 	mrsls	r0, (UNDEF: 2)
    9c08:	47381a4c 	ldrmi	r1, [r8, -ip, asr #20]!
    9c0c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    9c10:	00007e03 	andeq	r7, r0, r3, lsl #28
    9c14:	48910200 	ldmmi	r1, {r9}
    9c18:	01007820 	tsteq	r0, r0, lsr #16
    9c1c:	007e034b 	rsbseq	r0, lr, fp, asr #6
    9c20:	91020000 	mrsls	r0, (UNDEF: 2)
    9c24:	00792074 	rsbseq	r2, r9, r4, ror r0
    9c28:	7e034b01 	vmlavc.f64	d4, d3, d1
    9c2c:	02000000 	andeq	r0, r0, #0
    9c30:	65207091 	strvs	r7, [r0, #-145]!	; 0x91
    9c34:	01007272 	tsteq	r0, r2, ror r2
    9c38:	007e034b 	rsbseq	r0, lr, fp, asr #6
    9c3c:	91020000 	mrsls	r0, (UNDEF: 2)
    9c40:	3265206c 	rsbcc	r2, r5, #108	; 0x6c
    9c44:	034b0100 	movteq	r0, #45312	; 0xb100
    9c48:	0000007e 	andeq	r0, r0, lr, ror r0
    9c4c:	20689102 	rsbcs	r9, r8, r2, lsl #2
    9c50:	4c01004b 	stcmi	0, cr0, [r1], {75}	; 0x4b
    9c54:	000e6303 	andeq	r6, lr, r3, lsl #6
    9c58:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9c5c:	004b3719 	subeq	r3, fp, r9, lsl r7
    9c60:	034c0100 	movteq	r0, #49408	; 0xc100
    9c64:	00000e63 	andeq	r0, r0, r3, ror #28
    9c68:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    9c6c:	00004b3c 	andeq	r4, r0, ip, lsr fp
    9c70:	63034c01 	movwvs	r4, #15361	; 0x3c01
    9c74:	0200000e 	andeq	r0, r0, #14
    9c78:	02005c91 	andeq	r5, r0, #37120	; 0x9100
    9c7c:	496c0404 	stmdbmi	ip!, {r2, sl}^
    9c80:	c41b0000 	ldrgt	r0, [fp], #-0
    9c84:	01000049 	tsteq	r0, r9, asr #32
    9c88:	79e80382 	stmibvc	r8!, {r1, r7, r8, r9}^
    9c8c:	03500800 	cmpeq	r0, #0, 16
    9c90:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c94:	00000f1f 	andeq	r0, r0, pc, lsl pc
    9c98:	004aef1a 	subeq	lr, sl, sl, lsl pc
    9c9c:	03820100 	orreq	r0, r2, #0, 2
    9ca0:	0000007e 	andeq	r0, r0, lr, ror r0
    9ca4:	1a549102 	bne	152e0b4 <_Min_Stack_Size+0x152dcb4>
    9ca8:	00004819 	andeq	r4, r0, r9, lsl r8
    9cac:	7e038201 	cdpvc	2, 0, cr8, cr3, cr1, {0}
    9cb0:	02000000 	andeq	r0, r0, #0
    9cb4:	0e1a5091 	mrceq	0, 0, r5, cr10, cr1, {4}
    9cb8:	01000047 	tsteq	r0, r7, asr #32
    9cbc:	007e0382 	rsbseq	r0, lr, r2, lsl #7
    9cc0:	91020000 	mrsls	r0, (UNDEF: 2)
    9cc4:	47381a4c 	ldrmi	r1, [r8, -ip, asr #20]!
    9cc8:	82010000 	andhi	r0, r1, #0
    9ccc:	00007e03 	andeq	r7, r0, r3, lsl #28
    9cd0:	48910200 	ldmmi	r1, {r9}
    9cd4:	01007820 	tsteq	r0, r0, lsr #16
    9cd8:	007e0384 	rsbseq	r0, lr, r4, lsl #7
    9cdc:	91020000 	mrsls	r0, (UNDEF: 2)
    9ce0:	00792074 	rsbseq	r2, r9, r4, ror r0
    9ce4:	7e038401 	cdpvc	4, 0, cr8, cr3, cr1, {0}
    9ce8:	02000000 	andeq	r0, r0, #0
    9cec:	65207091 	strvs	r7, [r0, #-145]!	; 0x91
    9cf0:	01007272 	tsteq	r0, r2, ror r2
    9cf4:	007e0384 	rsbseq	r0, lr, r4, lsl #7
    9cf8:	91020000 	mrsls	r0, (UNDEF: 2)
    9cfc:	3265206c 	rsbcc	r2, r5, #108	; 0x6c
    9d00:	03840100 	orreq	r0, r4, #0, 2
    9d04:	0000007e 	andeq	r0, r0, lr, ror r0
    9d08:	20689102 	rsbcs	r9, r8, r2, lsl #2
    9d0c:	8501004b 	strhi	r0, [r1, #-75]	; 0x4b
    9d10:	000e6303 	andeq	r6, lr, r3, lsl #6
    9d14:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9d18:	004b3719 	subeq	r3, fp, r9, lsl r7
    9d1c:	03850100 	orreq	r0, r5, #0, 2
    9d20:	00000e63 	andeq	r0, r0, r3, ror #28
    9d24:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    9d28:	00004b3c 	andeq	r4, r0, ip, lsr fp
    9d2c:	63038501 	movwvs	r8, #13569	; 0x3501
    9d30:	0200000e 	andeq	r0, r0, #14
    9d34:	1b005c91 	blne	20f80 <_Min_Stack_Size+0x20b80>
    9d38:	00004b41 	andeq	r4, r0, r1, asr #22
    9d3c:	3803b701 	stmdacc	r3, {r0, r8, r9, sl, ip, sp, pc}
    9d40:	7c08007d 	stcvc	0, cr0, [r8], {125}	; 0x7d
    9d44:	01000000 	mrseq	r0, (UNDEF: 0)
    9d48:	000f639c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    9d4c:	4b4d1a00 	blmi	1350554 <_Min_Stack_Size+0x1350154>
    9d50:	b7010000 	strlt	r0, [r1, -r0]
    9d54:	000f6303 	andeq	r6, pc, r3, lsl #6
    9d58:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9d5c:	00435b19 	subeq	r5, r3, r9, lsl fp
    9d60:	03b90100 			; <UNDEFINED> instruction: 0x03b90100
    9d64:	00000069 	andeq	r0, r0, r9, rrx
    9d68:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    9d6c:	0000104f 	andeq	r1, r0, pc, asr #32
    9d70:	6903b901 	stmdbvs	r3, {r0, r8, fp, ip, sp, pc}
    9d74:	02000000 	andeq	r0, r0, #0
    9d78:	14007091 	strne	r7, [r0], #-145	; 0x91
    9d7c:	000f6904 	andeq	r6, pc, r4, lsl #18
    9d80:	00690800 	rsbeq	r0, r9, r0, lsl #16
    9d84:	7b180000 	blvc	609d8c <_Min_Stack_Size+0x60998c>
    9d88:	01000049 	tsteq	r0, r9, asr #32
    9d8c:	7db403d1 	ldcvc	3, cr0, [r4, #836]!	; 0x344
    9d90:	01dc0800 	bicseq	r0, ip, r0, lsl #16
    9d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    9d98:	0000100c 	andeq	r1, r0, ip
    9d9c:	0048ba1a 	subeq	fp, r8, sl, lsl sl
    9da0:	03d10100 	bicseq	r0, r1, #0, 2
    9da4:	00000069 	andeq	r0, r0, r9, rrx
    9da8:	19549102 	ldmdbne	r4, {r1, r8, ip, pc}^
    9dac:	0000435b 	andeq	r4, r0, fp, asr r3
    9db0:	6903d301 	stmdbvs	r3, {r0, r8, r9, ip, lr, pc}
    9db4:	02000000 	andeq	r0, r0, #0
    9db8:	68197491 	ldmdavs	r9, {r0, r4, r7, sl, ip, sp, lr}
    9dbc:	01000026 	tsteq	r0, r6, lsr #32
    9dc0:	006903d3 	ldrdeq	r0, [r9], #-51	; 0xffffffcd	; <UNPREDICTABLE>
    9dc4:	91020000 	mrsls	r0, (UNDEF: 2)
    9dc8:	2d591964 	ldclcs	9, cr1, [r9, #-400]	; 0xfffffe70
    9dcc:	d3010000 	movwle	r0, #4096	; 0x1000
    9dd0:	00006903 	andeq	r6, r0, r3, lsl #18
    9dd4:	60910200 	addsvs	r0, r1, r0, lsl #4
    9dd8:	004ab819 	subeq	fp, sl, r9, lsl r8
    9ddc:	03d30100 	bicseq	r0, r3, #0, 2
    9de0:	00000069 	andeq	r0, r0, r9, rrx
    9de4:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    9de8:	0000495b 	andeq	r4, r0, fp, asr r9
    9dec:	6903d301 	stmdbvs	r3, {r0, r8, r9, ip, lr, pc}
    9df0:	02000000 	andeq	r0, r0, #0
    9df4:	07195891 			; <UNDEFINED> instruction: 0x07195891
    9df8:	01000014 	tsteq	r0, r4, lsl r0
    9dfc:	006903d4 	ldrdeq	r0, [r9], #-52	; 0xffffffcc	; <UNPREDICTABLE>
    9e00:	91020000 	mrsls	r0, (UNDEF: 2)
    9e04:	46801970 			; <UNDEFINED> instruction: 0x46801970
    9e08:	d5010000 	strle	r0, [r1, #-0]
    9e0c:	00006903 	andeq	r6, r0, r3, lsl #18
    9e10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9e14:	00470319 	subeq	r0, r7, r9, lsl r3
    9e18:	03d50100 	bicseq	r0, r5, #0, 2
    9e1c:	00000069 	andeq	r0, r0, r9, rrx
    9e20:	00689102 	rsbeq	r9, r8, r2, lsl #2
    9e24:	004af418 	subeq	pc, sl, r8, lsl r4	; <UNPREDICTABLE>
    9e28:	04410100 	strbeq	r0, [r1], #-256	; 0x100
    9e2c:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
    9e30:	000000c0 	andeq	r0, r0, r0, asr #1
    9e34:	10ae9c01 	adcne	r9, lr, r1, lsl #24
    9e38:	ef1a0000 	svc	0x001a0000
    9e3c:	0100004a 	tsteq	r0, sl, asr #32
    9e40:	00450441 	subeq	r0, r5, r1, asr #8
    9e44:	91030000 	mrsls	r0, (UNDEF: 3)
    9e48:	191a7fbe 	ldmdbne	sl, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    9e4c:	01000048 	tsteq	r0, r8, asr #32
    9e50:	00450441 	subeq	r0, r5, r1, asr #8
    9e54:	91030000 	mrsls	r0, (UNDEF: 3)
    9e58:	b51a7fbc 	ldrlt	r7, [sl, #-4028]	; 0xfbc
    9e5c:	01000031 	tsteq	r0, r1, lsr r0
    9e60:	00450441 	subeq	r0, r5, r1, asr #8
    9e64:	91030000 	mrsls	r0, (UNDEF: 3)
    9e68:	f31a7fba 	vmaxnm.f<illegal width 64>	d7, d26, d26
    9e6c:	01000003 	tsteq	r0, r3
    9e70:	00450441 	subeq	r0, r5, r1, asr #8
    9e74:	91030000 	mrsls	r0, (UNDEF: 3)
    9e78:	db197fb8 	blle	669d60 <_Min_Stack_Size+0x669960>
    9e7c:	01000025 	tsteq	r0, r5, lsr #32
    9e80:	05db0443 	ldrbeq	r0, [fp, #1091]	; 0x443
    9e84:	91020000 	mrsls	r0, (UNDEF: 2)
    9e88:	49721944 	ldmdbmi	r2!, {r2, r6, r8, fp, ip}^
    9e8c:	45010000 	strmi	r0, [r1, #-0]
    9e90:	00006904 	andeq	r6, r0, r4, lsl #18
    9e94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9e98:	0048b019 	subeq	fp, r8, r9, lsl r0
    9e9c:	04460100 	strbeq	r0, [r6], #-256	; 0x100
    9ea0:	00000045 	andeq	r0, r0, r5, asr #32
    9ea4:	19729102 	ldmdbne	r2!, {r1, r8, ip, pc}^
    9ea8:	000049a7 	andeq	r4, r0, r7, lsr #19
    9eac:	45044601 	strmi	r4, [r4, #-1537]	; 0x601
    9eb0:	02000000 	andeq	r0, r0, #0
    9eb4:	36197091 			; <UNDEFINED> instruction: 0x36197091
    9eb8:	01000049 	tsteq	r0, r9, asr #32
    9ebc:	00450446 	subeq	r0, r5, r6, asr #8
    9ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    9ec4:	6618006e 	ldrvs	r0, [r8], -lr, rrx
    9ec8:	0100004a 	tsteq	r0, sl, asr #32
    9ecc:	8050046e 	subshi	r0, r0, lr, ror #8
    9ed0:	01200800 	teqeq	r0, r0, lsl #16
    9ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ed8:	0000111d 	andeq	r1, r0, sp, lsl r1
    9edc:	004aef1a 	subeq	lr, sl, sl, lsl pc
    9ee0:	046e0100 	strbteq	r0, [lr], #-256	; 0x100
    9ee4:	00000045 	andeq	r0, r0, r5, asr #32
    9ee8:	1a669102 	bne	19ae2f8 <_Min_Stack_Size+0x19adef8>
    9eec:	00004819 	andeq	r4, r0, r9, lsl r8
    9ef0:	45046e01 	strmi	r6, [r4, #-3585]	; 0xe01
    9ef4:	02000000 	andeq	r0, r0, #0
    9ef8:	0e1a6491 	cfcmpseq	r6, mvf10, mvf1
    9efc:	01000047 	tsteq	r0, r7, asr #32
    9f00:	0045046e 	subeq	r0, r5, lr, ror #8
    9f04:	91020000 	mrsls	r0, (UNDEF: 2)
    9f08:	00442062 	subeq	r2, r4, r2, rrx
    9f0c:	57047001 	strpl	r7, [r4, -r1]
    9f10:	02000000 	andeq	r0, r0, #0
    9f14:	f9197491 			; <UNDEFINED> instruction: 0xf9197491
    9f18:	01000047 	tsteq	r0, r7, asr #32
    9f1c:	00690471 	rsbeq	r0, r9, r1, ror r4
    9f20:	91020000 	mrsls	r0, (UNDEF: 2)
    9f24:	47fe1970 			; <UNDEFINED> instruction: 0x47fe1970
    9f28:	72010000 	andvc	r0, r1, #0
    9f2c:	00006904 	andeq	r6, r0, r4, lsl #18
    9f30:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9f34:	475b1800 	ldrbmi	r1, [fp, -r0, lsl #16]
    9f38:	9d010000 	stcls	0, cr0, [r1, #-0]
    9f3c:	00817004 	addeq	r7, r1, r4
    9f40:	00016608 	andeq	r6, r1, r8, lsl #12
    9f44:	2b9c0100 	blcs	fe70a34c <_estack+0xde6da34c>
    9f48:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    9f4c:	01003178 	tsteq	r0, r8, ror r1
    9f50:	0045049d 	umaaleq	r0, r5, sp, r4
    9f54:	91020000 	mrsls	r0, (UNDEF: 2)
    9f58:	31791e56 	cmncc	r9, r6, asr lr
    9f5c:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    9f60:	00000045 	andeq	r0, r0, r5, asr #32
    9f64:	1e549102 	lognes	f1, f2
    9f68:	01003278 	tsteq	r0, r8, ror r2
    9f6c:	0045049d 	umaaleq	r0, r5, sp, r4
    9f70:	91020000 	mrsls	r0, (UNDEF: 2)
    9f74:	32791e52 	rsbscc	r1, r9, #1312	; 0x520
    9f78:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    9f7c:	00000045 	andeq	r0, r0, r5, asr #32
    9f80:	19509102 	ldmdbne	r0, {r1, r8, ip, pc}^
    9f84:	00004b14 	andeq	r4, r0, r4, lsl fp
    9f88:	33049f01 	movwcc	r9, #20225	; 0x4f01
    9f8c:	02000000 	andeq	r0, r0, #0
    9f90:	1b196091 	blne	6621dc <_Min_Stack_Size+0x661ddc>
    9f94:	0100004b 	tsteq	r0, fp, asr #32
    9f98:	0033049f 	mlaseq	r3, pc, r4, r0	; <UNPREDICTABLE>
    9f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    9fa0:	0078205e 	rsbseq	r2, r8, lr, asr r0
    9fa4:	33049f01 	movwcc	r9, #20225	; 0x4f01
    9fa8:	02000000 	andeq	r0, r0, #0
    9fac:	79207691 	stmdbvc	r0!, {r0, r4, r7, r9, sl, ip, sp, lr}
    9fb0:	049f0100 	ldreq	r0, [pc], #256	; 9fb8 <_Min_Stack_Size+0x9bb8>
    9fb4:	00000033 	andeq	r0, r0, r3, lsr r0
    9fb8:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    9fbc:	00004abf 			; <UNDEFINED> instruction: 0x00004abf
    9fc0:	33049f01 	movwcc	r9, #20225	; 0x4f01
    9fc4:	02000000 	andeq	r0, r0, #0
    9fc8:	3f197291 	svccc	0x00197291
    9fcc:	01000048 	tsteq	r0, r8, asr #32
    9fd0:	0033049f 	mlaseq	r3, pc, r4, r0	; <UNPREDICTABLE>
    9fd4:	91020000 	mrsls	r0, (UNDEF: 2)
    9fd8:	4a1a1970 	bmi	6905a0 <_Min_Stack_Size+0x6901a0>
    9fdc:	a0010000 	andge	r0, r1, r0
    9fe0:	00003304 	andeq	r3, r0, r4, lsl #6
    9fe4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    9fe8:	004a2019 	subeq	r2, sl, r9, lsl r0
    9fec:	04a00100 	strteq	r0, [r0], #256	; 0x100
    9ff0:	00000033 	andeq	r0, r0, r3, lsr r0
    9ff4:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    9ff8:	006e6564 	rsbeq	r6, lr, r4, ror #10
    9ffc:	3304a001 	movwcc	sl, #16385	; 0x4001
    a000:	02000000 	andeq	r0, r0, #0
    a004:	6e206a91 	mcrvs	10, 1, r6, cr0, cr1, {4}
    a008:	01006d75 	tsteq	r0, r5, ror sp
    a00c:	003304a0 	eorseq	r0, r3, r0, lsr #9
    a010:	91020000 	mrsls	r0, (UNDEF: 2)
    a014:	49651968 	stmdbmi	r5!, {r3, r5, r6, r8, fp, ip}^
    a018:	a0010000 	andge	r0, r1, r0
    a01c:	00003304 	andeq	r3, r0, r4, lsl #6
    a020:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    a024:	004bd119 	subeq	sp, fp, r9, lsl r1
    a028:	04a00100 	strteq	r0, [r0], #256	; 0x100
    a02c:	00000033 	andeq	r0, r0, r3, lsr r0
    a030:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    a034:	00004898 	muleq	r0, r8, r8
    a038:	3304a101 	movwcc	sl, #16641	; 0x4101
    a03c:	02000000 	andeq	r0, r0, #0
    a040:	18006291 	stmdane	r0, {r0, r4, r7, r9, sp, lr}
    a044:	00004a0d 	andeq	r4, r0, sp, lsl #20
    a048:	d804e501 	stmdale	r4, {r0, r8, sl, sp, lr, pc}
    a04c:	76080082 	strvc	r0, [r8], -r2, lsl #1
    a050:	01000000 	mrseq	r0, (UNDEF: 0)
    a054:	0012899c 	mulseq	r2, ip, r9
    a058:	4b851a00 	blmi	fe150860 <_estack+0xde120860>
    a05c:	e5010000 	str	r0, [r1, #-0]
    a060:	0007d304 	andeq	sp, r7, r4, lsl #6
    a064:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a068:	0049eb1a 	subeq	lr, r9, sl, lsl fp
    a06c:	04e50100 	strbteq	r0, [r5], #256	; 0x100
    a070:	00000045 	andeq	r0, r0, r5, asr #32
    a074:	206a9102 	rsbcs	r9, sl, r2, lsl #2
    a078:	e7010058 	smlsd	r1, r8, r0, r0
    a07c:	00003304 	andeq	r3, r0, r4, lsl #6
    a080:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    a084:	01005920 	tsteq	r0, r0, lsr #18
    a088:	003304e7 	eorseq	r0, r3, r7, ror #9
    a08c:	91020000 	mrsls	r0, (UNDEF: 2)
    a090:	49a11974 	stmibmi	r1!, {r2, r4, r5, r6, r8, fp, ip}
    a094:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    a098:	0007d304 	andeq	sp, r7, r4, lsl #6
    a09c:	70910200 	addsvc	r0, r1, r0, lsl #4
    a0a0:	49b31800 	ldmibmi	r3!, {fp, ip}
    a0a4:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a0a8:	00835004 	addeq	r5, r3, r4
    a0ac:	00016208 	andeq	r6, r1, r8, lsl #4
    a0b0:	b39c0100 	orrslt	r0, ip, #0, 2
    a0b4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    a0b8:	01003178 	tsteq	r0, r8, ror r1
    a0bc:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a0c0:	91020000 	mrsls	r0, (UNDEF: 2)
    a0c4:	32781e56 	rsbscc	r1, r8, #1376	; 0x560
    a0c8:	04ff0100 	ldrbteq	r0, [pc], #256	; a0d0 <_Min_Stack_Size+0x9cd0>
    a0cc:	00000045 	andeq	r0, r0, r5, asr #32
    a0d0:	1e549102 	lognes	f1, f2
    a0d4:	01003378 	tsteq	r0, r8, ror r3
    a0d8:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a0dc:	91020000 	mrsls	r0, (UNDEF: 2)
    a0e0:	31791e52 	cmncc	r9, r2, asr lr
    a0e4:	04ff0100 	ldrbteq	r0, [pc], #256	; a0ec <_Min_Stack_Size+0x9cec>
    a0e8:	00000045 	andeq	r0, r0, r5, asr #32
    a0ec:	1e509102 	lognes	f1, f2
    a0f0:	01003279 	tsteq	r0, r9, ror r2
    a0f4:	004504ff 	strdeq	r0, [r5], #-79	; 0xffffffb1
    a0f8:	91020000 	mrsls	r0, (UNDEF: 2)
    a0fc:	33791e00 	cmncc	r9, #0, 28
    a100:	04ff0100 	ldrbteq	r0, [pc], #256	; a108 <_Min_Stack_Size+0x9d08>
    a104:	00000045 	andeq	r0, r0, r5, asr #32
    a108:	19049102 	stmdbne	r4, {r1, r8, ip, pc}
    a10c:	00004b14 	andeq	r4, r0, r4, lsl fp
    a110:	33050201 	movwcc	r0, #20993	; 0x5201
    a114:	02000000 	andeq	r0, r0, #0
    a118:	1b196091 	blne	662364 <_Min_Stack_Size+0x661f64>
    a11c:	0100004b 	tsteq	r0, fp, asr #32
    a120:	00330502 	eorseq	r0, r3, r2, lsl #10
    a124:	91020000 	mrsls	r0, (UNDEF: 2)
    a128:	0078205e 	rsbseq	r2, r8, lr, asr r0
    a12c:	33050201 	movwcc	r0, #20993	; 0x5201
    a130:	02000000 	andeq	r0, r0, #0
    a134:	79207691 	stmdbvc	r0!, {r0, r4, r7, r9, sl, ip, sp, lr}
    a138:	05020100 	streq	r0, [r2, #-256]	; 0x100
    a13c:	00000033 	andeq	r0, r0, r3, lsr r0
    a140:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    a144:	00004abf 			; <UNDEFINED> instruction: 0x00004abf
    a148:	33050201 	movwcc	r0, #20993	; 0x5201
    a14c:	02000000 	andeq	r0, r0, #0
    a150:	3f197291 	svccc	0x00197291
    a154:	01000048 	tsteq	r0, r8, asr #32
    a158:	00330502 	eorseq	r0, r3, r2, lsl #10
    a15c:	91020000 	mrsls	r0, (UNDEF: 2)
    a160:	4a1a1970 	bmi	690728 <_Min_Stack_Size+0x690328>
    a164:	03010000 	movweq	r0, #4096	; 0x1000
    a168:	00003305 	andeq	r3, r0, r5, lsl #6
    a16c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    a170:	004a2019 	subeq	r2, sl, r9, lsl r0
    a174:	05030100 	streq	r0, [r3, #-256]	; 0x100
    a178:	00000033 	andeq	r0, r0, r3, lsr r0
    a17c:	206c9102 	rsbcs	r9, ip, r2, lsl #2
    a180:	006e6564 	rsbeq	r6, lr, r4, ror #10
    a184:	33050301 	movwcc	r0, #21249	; 0x5301
    a188:	02000000 	andeq	r0, r0, #0
    a18c:	6e206a91 	mcrvs	10, 1, r6, cr0, cr1, {4}
    a190:	01006d75 	tsteq	r0, r5, ror sp
    a194:	00330503 	eorseq	r0, r3, r3, lsl #10
    a198:	91020000 	mrsls	r0, (UNDEF: 2)
    a19c:	49651968 	stmdbmi	r5!, {r3, r5, r6, r8, fp, ip}^
    a1a0:	03010000 	movweq	r0, #4096	; 0x1000
    a1a4:	00003305 	andeq	r3, r0, r5, lsl #6
    a1a8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    a1ac:	004bd119 	subeq	sp, fp, r9, lsl r1
    a1b0:	05030100 	streq	r0, [r3, #-256]	; 0x100
    a1b4:	00000033 	andeq	r0, r0, r3, lsr r0
    a1b8:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    a1bc:	00004898 	muleq	r0, r8, r8
    a1c0:	33050401 	movwcc	r0, #21505	; 0x5401
    a1c4:	02000000 	andeq	r0, r0, #0
    a1c8:	18006291 	stmdane	r0, {r0, r4, r7, r9, sp, lr}
    a1cc:	0000486e 	andeq	r4, r0, lr, ror #16
    a1d0:	b4054b01 	strlt	r4, [r5], #-2817	; 0xb01
    a1d4:	56080084 	strpl	r0, [r8], -r4, lsl #1
    a1d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1dc:	0014029c 	mulseq	r4, ip, r2
    a1e0:	4b851a00 	blmi	fe1509e8 <_estack+0xde1209e8>
    a1e4:	4b010000 	blmi	4a1ec <_Min_Stack_Size+0x49dec>
    a1e8:	0007d305 	andeq	sp, r7, r5, lsl #6
    a1ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a1f0:	0049eb1a 	subeq	lr, r9, sl, lsl fp
    a1f4:	054b0100 	strbeq	r0, [fp, #-256]	; 0x100
    a1f8:	00000045 	andeq	r0, r0, r5, asr #32
    a1fc:	206a9102 	rsbcs	r9, sl, r2, lsl #2
    a200:	4d010058 	stcmi	0, cr0, [r1, #-352]	; 0xfffffea0
    a204:	00003305 	andeq	r3, r0, r5, lsl #6
    a208:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    a20c:	01005920 	tsteq	r0, r0, lsr #18
    a210:	0033054d 	eorseq	r0, r3, sp, asr #10
    a214:	91020000 	mrsls	r0, (UNDEF: 2)
    a218:	8c210074 	stchi	0, cr0, [r1], #-464	; 0xfffffe30
    a21c:	0100004a 	tsteq	r0, sl, asr #32
    a220:	850c0565 	strhi	r0, [ip, #-1381]	; 0x565
    a224:	00a00800 	adceq	r0, r0, r0, lsl #16
    a228:	9c010000 	stcls	0, cr0, [r1], {-0}
    a22c:	0000146f 	andeq	r1, r0, pc, ror #8
    a230:	004b851a 	subeq	r8, fp, sl, lsl r5
    a234:	05650100 	strbeq	r0, [r5, #-256]!	; 0x100
    a238:	000007d3 	ldrdeq	r0, [r0], -r3
    a23c:	1a649102 	bne	192e64c <_Min_Stack_Size+0x192e24c>
    a240:	000049eb 	andeq	r4, r0, fp, ror #19
    a244:	45056501 	strmi	r6, [r5, #-1281]	; 0x501
    a248:	02000000 	andeq	r0, r0, #0
    a24c:	a01a6291 	mulsge	sl, r1, r2
    a250:	0100004a 	tsteq	r0, sl, asr #32
    a254:	00450565 	subeq	r0, r5, r5, ror #10
    a258:	91020000 	mrsls	r0, (UNDEF: 2)
    a25c:	00582060 	subseq	r2, r8, r0, rrx
    a260:	33056701 	movwcc	r6, #22273	; 0x5701
    a264:	02000000 	andeq	r0, r0, #0
    a268:	59206e91 	stmdbpl	r0!, {r0, r4, r7, r9, sl, fp, sp, lr}
    a26c:	05670100 	strbeq	r0, [r7, #-256]!	; 0x100
    a270:	00000033 	andeq	r0, r0, r3, lsr r0
    a274:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    a278:	000049a1 	andeq	r4, r0, r1, lsr #19
    a27c:	d3056801 	movwle	r6, #22529	; 0x5801
    a280:	02000007 	andeq	r0, r0, #7
    a284:	18006891 	stmdane	r0, {r0, r4, r7, fp, sp, lr}
    a288:	00004a79 	andeq	r4, r0, r9, ror sl
    a28c:	ac058301 	stcge	3, cr8, [r5], {1}
    a290:	50080085 	andpl	r0, r8, r5, lsl #1
    a294:	01000000 	mrseq	r0, (UNDEF: 0)
    a298:	0014a49c 	mulseq	r4, ip, r4
    a29c:	4b851a00 	blmi	fe150aa4 <_estack+0xde120aa4>
    a2a0:	83010000 	movwhi	r0, #4096	; 0x1000
    a2a4:	0007d305 	andeq	sp, r7, r5, lsl #6
    a2a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a2ac:	0049eb1a 	subeq	lr, r9, sl, lsl fp
    a2b0:	05830100 	streq	r0, [r3, #256]	; 0x100
    a2b4:	00000045 	andeq	r0, r0, r5, asr #32
    a2b8:	006a9102 	rsbeq	r9, sl, r2, lsl #2
    a2bc:	004b2218 	subeq	r2, fp, r8, lsl r2
    a2c0:	058f0100 	streq	r0, [pc, #256]	; a3c8 <_Min_Stack_Size+0x9fc8>
    a2c4:	080085fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, pc}
    a2c8:	0000001e 	andeq	r0, r0, lr, lsl r0
    a2cc:	14d99c01 	ldrbne	r9, [r9], #3073	; 0xc01
    a2d0:	851a0000 	ldrhi	r0, [sl, #-0]
    a2d4:	0100004b 	tsteq	r0, fp, asr #32
    a2d8:	07d3058f 	ldrbeq	r0, [r3, pc, lsl #11]
    a2dc:	91020000 	mrsls	r0, (UNDEF: 2)
    a2e0:	49eb1a74 	stmibmi	fp!, {r2, r4, r5, r6, r9, fp, ip}^
    a2e4:	8f010000 	svchi	0x00010000
    a2e8:	00004505 	andeq	r4, r0, r5, lsl #10
    a2ec:	72910200 	addsvc	r0, r1, #0, 4
    a2f0:	49031800 	stmdbmi	r3, {fp, ip}
    a2f4:	9a010000 	bls	4a2fc <_Min_Stack_Size+0x49efc>
    a2f8:	00861c05 	addeq	r1, r6, r5, lsl #24
    a2fc:	00001e08 	andeq	r1, r0, r8, lsl #28
    a300:	0e9c0100 	fmleqe	f0, f4, f0
    a304:	1a000015 	bne	a360 <_Min_Stack_Size+0x9f60>
    a308:	00004b85 	andeq	r4, r0, r5, lsl #23
    a30c:	d3059a01 	movwle	r9, #23041	; 0x5a01
    a310:	02000007 	andeq	r0, r0, #7
    a314:	eb1a7491 	bl	6a7560 <_Min_Stack_Size+0x6a7160>
    a318:	01000049 	tsteq	r0, r9, asr #32
    a31c:	0045059a 	umaaleq	r0, r5, sl, r5
    a320:	91020000 	mrsls	r0, (UNDEF: 2)
    a324:	26180072 			; <UNDEFINED> instruction: 0x26180072
    a328:	0100004a 	tsteq	r0, sl, asr #32
    a32c:	863c05a5 	ldrthi	r0, [ip], -r5, lsr #11
    a330:	01a00800 	lsleq	r0, r0, #16
    a334:	9c010000 	stcls	0, cr0, [r1], {-0}
    a338:	0000161e 	andeq	r1, r0, lr, lsl r6
    a33c:	004b851a 	subeq	r8, fp, sl, lsl r5
    a340:	05a50100 	streq	r0, [r5, #256]!	; 0x100
    a344:	000007d3 	ldrdeq	r0, [r0], -r3
    a348:	1a4c9102 	bne	132e758 <_Min_Stack_Size+0x132e358>
    a34c:	000049eb 	andeq	r4, r0, fp, ror #19
    a350:	4505a501 	strmi	sl, [r5, #-1281]	; 0x501
    a354:	02000000 	andeq	r0, r0, #0
    a358:	58204a91 	stmdapl	r0!, {r0, r4, r7, r9, fp, lr}
    a35c:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a360:	00000033 	andeq	r0, r0, r3, lsr r0
    a364:	20609102 	rsbcs	r9, r0, r2, lsl #2
    a368:	a8010059 	stmdage	r1, {r0, r3, r4, r6}
    a36c:	00003305 	andeq	r3, r0, r5, lsl #6
    a370:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    a374:	00325820 	eorseq	r5, r2, r0, lsr #16
    a378:	3305a801 	movwcc	sl, #22529	; 0x5801
    a37c:	02000000 	andeq	r0, r0, #0
    a380:	59206e91 	stmdbpl	r0!, {r0, r4, r7, r9, sl, fp, sp, lr}
    a384:	a8010032 	stmdage	r1, {r1, r4, r5}
    a388:	00003305 	andeq	r3, r0, r5, lsl #6
    a38c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a390:	00477e19 	subeq	r7, r7, r9, lsl lr
    a394:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a398:	00000033 	andeq	r0, r0, r3, lsr r0
    a39c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    a3a0:	00004b5f 	andeq	r4, r0, pc, asr fp
    a3a4:	3305a801 	movwcc	sl, #22529	; 0x5801
    a3a8:	02000000 	andeq	r0, r0, #0
    a3ac:	b7195a91 			; <UNDEFINED> instruction: 0xb7195a91
    a3b0:	01000046 	tsteq	r0, r6, asr #32
    a3b4:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a3b8:	91020000 	mrsls	r0, (UNDEF: 2)
    a3bc:	46fb1958 	usatmi	r1, #27, r8, asr #18
    a3c0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    a3c4:	00003305 	andeq	r3, r0, r5, lsl #6
    a3c8:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    a3cc:	004b7019 	subeq	r7, fp, r9, lsl r0
    a3d0:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    a3d4:	00000033 	andeq	r0, r0, r3, lsr r0
    a3d8:	19549102 	ldmdbne	r4, {r1, r8, ip, pc}^
    a3dc:	000047de 	ldrdeq	r4, [r0], -lr
    a3e0:	3305a801 	movwcc	sl, #22529	; 0x5801
    a3e4:	02000000 	andeq	r0, r0, #0
    a3e8:	4f195291 	svcmi	0x00195291
    a3ec:	01000010 	tsteq	r0, r0, lsl r0
    a3f0:	003305a8 	eorseq	r0, r3, r8, lsr #11
    a3f4:	91020000 	mrsls	r0, (UNDEF: 2)
    a3f8:	4750196a 	ldrbmi	r1, [r0, -sl, ror #18]
    a3fc:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    a400:	00004505 	andeq	r4, r0, r5, lsl #10
    a404:	68910200 	ldmvs	r1, {r9}
    a408:	0046ab19 	subeq	sl, r6, r9, lsl fp
    a40c:	05a90100 	streq	r0, [r9, #256]!	; 0x100
    a410:	00000045 	andeq	r0, r0, r5, asr #32
    a414:	19669102 	stmdbne	r6!, {r1, r8, ip, pc}^
    a418:	00004bdb 	ldrdeq	r4, [r0], -fp
    a41c:	4505a901 	strmi	sl, [r5, #-2305]	; 0x901
    a420:	02000000 	andeq	r0, r0, #0
    a424:	0e196491 	cfcmpseq	r6, mvf9, mvf1
    a428:	0100004c 	tsteq	r0, ip, asr #32
    a42c:	004505a9 	subeq	r0, r5, r9, lsr #11
    a430:	91020000 	mrsls	r0, (UNDEF: 2)
    a434:	c9180062 	ldmdbgt	r8, {r1, r5, r6}
    a438:	01000046 	tsteq	r0, r6, asr #32
    a43c:	87dc05e7 	ldrbhi	r0, [ip, r7, ror #11]
    a440:	005c0800 	subseq	r0, ip, r0, lsl #16
    a444:	9c010000 	stcls	0, cr0, [r1], {-0}
    a448:	00001644 	andeq	r1, r0, r4, asr #12
    a44c:	0049881a 	subeq	r8, r9, sl, lsl r8
    a450:	05e70100 	strbeq	r0, [r7, #256]!	; 0x100
    a454:	0000002c 	andeq	r0, r0, ip, lsr #32
    a458:	00779102 	rsbseq	r9, r7, r2, lsl #2
    a45c:	004c0018 	subeq	r0, ip, r8, lsl r0
    a460:	05ff0100 	ldrbeq	r0, [pc, #256]!	; a568 <_Min_Stack_Size+0xa168>
    a464:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
    a468:	0000005c 	andeq	r0, r0, ip, asr r0
    a46c:	166a9c01 	strbtne	r9, [sl], -r1, lsl #24
    a470:	f51a0000 			; <UNDEFINED> instruction: 0xf51a0000
    a474:	01000026 	tsteq	r0, r6, lsr #32
    a478:	002c05ff 	strdeq	r0, [ip], -pc	; <UNPREDICTABLE>
    a47c:	91020000 	mrsls	r0, (UNDEF: 2)
    a480:	4d1f0077 	ldcmi	0, cr0, [pc, #-476]	; a2ac <_Min_Stack_Size+0x9eac>
    a484:	0100004a 	tsteq	r0, sl, asr #32
    a488:	88940616 	ldmhi	r4, {r1, r2, r4, r9, sl}
    a48c:	028e0800 	addeq	r0, lr, #0, 16
    a490:	9c010000 	stcls	0, cr0, [r1], {-0}
    a494:	0049dd1f 	subeq	sp, r9, pc, lsl sp
    a498:	06930100 	ldreq	r0, [r3], r0, lsl #2
    a49c:	08008b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, pc}
    a4a0:	0000000c 	andeq	r0, r0, ip
    a4a4:	e51f9c01 	ldr	r9, [pc, #-3073]	; 98ab <_Min_Stack_Size+0x94ab>
    a4a8:	0100004b 	tsteq	r0, fp, asr #32
    a4ac:	8b30069d 	blhi	c0bf28 <_Min_Stack_Size+0xc0bb28>
    a4b0:	000c0800 	andeq	r0, ip, r0, lsl #16
    a4b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4b8:	0048e618 	subeq	lr, r8, r8, lsl r6
    a4bc:	06aa0100 	strteq	r0, [sl], r0, lsl #2
    a4c0:	08008b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, pc}
    a4c4:	00000054 	andeq	r0, r0, r4, asr r0
    a4c8:	16c69c01 	strbne	r9, [r6], r1, lsl #24
    a4cc:	32190000 	andscc	r0, r9, #0
    a4d0:	01000004 	tsteq	r0, r4
    a4d4:	06e906ac 	strbteq	r0, [r9], ip, lsr #13
    a4d8:	91020000 	mrsls	r0, (UNDEF: 2)
    a4dc:	98180070 	ldmdals	r8, {r4, r5, r6}
    a4e0:	0100004b 	tsteq	r0, fp, asr #32
    a4e4:	8b9006cf 	blhi	fe40c028 <_estack+0xde3dc028>
    a4e8:	00240800 	eoreq	r0, r4, r0, lsl #16
    a4ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4f0:	0000170a 	andeq	r1, r0, sl, lsl #14
    a4f4:	0016c91a 	andseq	ip, r6, sl, lsl r9
    a4f8:	06cf0100 	strbeq	r0, [pc], r0, lsl #2
    a4fc:	0000170a 	andeq	r1, r0, sl, lsl #14
    a500:	1a749102 	bne	1d2e910 <_Min_Stack_Size+0x1d2e510>
    a504:	00004941 	andeq	r4, r0, r1, asr #18
    a508:	4506cf01 	strmi	ip, [r6, #-3841]	; 0xf01
    a50c:	02000000 	andeq	r0, r0, #0
    a510:	0d1a7291 	lfmeq	f7, 4, [sl, #-580]	; 0xfffffdbc
    a514:	01000009 	tsteq	r0, r9
    a518:	069906cf 	ldreq	r0, [r9], pc, asr #13
    a51c:	91020000 	mrsls	r0, (UNDEF: 2)
    a520:	04140071 	ldreq	r0, [r4], #-113	; 0x71
    a524:	000001a1 	andeq	r0, r0, r1, lsr #3
    a528:	004b7718 	subeq	r7, fp, r8, lsl r7
    a52c:	06da0100 	ldrbeq	r0, [sl], r0, lsl #2
    a530:	08008bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, pc}
    a534:	000000d4 	ldrdeq	r0, [r0], -r4
    a538:	17459c01 	strbne	r9, [r5, -r1, lsl #24]
    a53c:	03190000 	tsteq	r9, #0
    a540:	01000046 	tsteq	r0, r6, asr #32
    a544:	076906dc 			; <UNDEFINED> instruction: 0x076906dc
    a548:	91020000 	mrsls	r0, (UNDEF: 2)
    a54c:	04321964 	ldrteq	r1, [r2], #-2404	; 0x964
    a550:	dd010000 	stcle	0, cr0, [r1, #-0]
    a554:	0006e906 	andeq	lr, r6, r6, lsl #18
    a558:	5c910200 	lfmpl	f0, 4, [r1], {0}
    a55c:	46e02100 	strbtmi	r2, [r0], r0, lsl #2
    a560:	1f010000 	svcne	0x00010000
    a564:	008c8807 	addeq	r8, ip, r7, lsl #16
    a568:	00017808 	andeq	r7, r1, r8, lsl #16
    a56c:	6b9c0100 	blvs	fe70a974 <_estack+0xde6da974>
    a570:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    a574:	0000097e 	andeq	r0, r0, lr, ror r9
    a578:	e9072101 	stmdb	r7, {r0, r8, sp}
    a57c:	02000006 	andeq	r0, r0, #6
    a580:	21007091 	swpcs	r7, r1, [r0]
    a584:	000049d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    a588:	00078301 	andeq	r8, r7, r1, lsl #6
    a58c:	4808008e 	stmdami	r8, {r1, r2, r3, r7}
    a590:	01000000 	mrseq	r0, (UNDEF: 0)
    a594:	00179c9c 	mulseq	r7, ip, ip
    a598:	00781e00 	rsbseq	r1, r8, r0, lsl #28
    a59c:	33078301 	movwcc	r8, #29441	; 0x7301
    a5a0:	02000000 	andeq	r0, r0, #0
    a5a4:	791e7691 	ldmdbvc	lr, {r0, r4, r7, r9, sl, ip, sp, lr}
    a5a8:	07830100 	streq	r0, [r3, r0, lsl #2]
    a5ac:	00000033 	andeq	r0, r0, r3, lsr r0
    a5b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    a5b4:	00437e22 	subeq	r7, r3, r2, lsr #28
    a5b8:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    a5bc:	08008e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, pc}
    a5c0:	00000028 	andeq	r0, r0, r8, lsr #32
    a5c4:	17d19c01 	ldrbne	r9, [r1, r1, lsl #24]
    a5c8:	eb1a0000 	bl	68a5d0 <_Min_Stack_Size+0x68a1d0>
    a5cc:	01000043 	tsteq	r0, r3, asr #32
    a5d0:	17d10792 	bfine	r0, r2, #15, #3
    a5d4:	91020000 	mrsls	r0, (UNDEF: 2)
    a5d8:	435b196c 	cmpmi	fp, #108, 18	; 0x1b0000
    a5dc:	94010000 	strls	r0, [r1], #-0
    a5e0:	0017d107 	andseq	sp, r7, r7, lsl #2
    a5e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a5e8:	00690500 	rsbeq	r0, r9, r0, lsl #10
    a5ec:	1b170000 	blne	5ca5f4 <_Min_Stack_Size+0x5ca1f4>
    a5f0:	0100004c 	tsteq	r0, ip, asr #32
    a5f4:	0009824f 	andeq	r8, r9, pc, asr #4
    a5f8:	a0030500 	andge	r0, r3, r0, lsl #10
    a5fc:	17200000 	strne	r0, [r0, -r0]!
    a600:	00004bc0 	andeq	r4, r0, r0, asr #23
    a604:	00455101 	subeq	r5, r5, r1, lsl #2
    a608:	03050000 	movweq	r0, #20480	; 0x5000
    a60c:	200000a4 	andcs	r0, r0, r4, lsr #1
    a610:	00494a17 	subeq	r4, r9, r7, lsl sl
    a614:	45520100 	ldrbmi	r0, [r2, #-256]	; 0x100
    a618:	05000000 	streq	r0, [r0, #-0]
    a61c:	00005403 	andeq	r5, r0, r3, lsl #8
    a620:	48d31720 	ldmmi	r3, {r5, r8, r9, sl, ip}^
    a624:	54010000 	strpl	r0, [r1], #-0
    a628:	00000069 	andeq	r0, r0, r9, rrx
    a62c:	00580305 	subseq	r0, r8, r5, lsl #6
    a630:	7b172000 	blvc	5d2638 <_Min_Stack_Size+0x5d2238>
    a634:	01000048 	tsteq	r0, r8, asr #32
    a638:	00006955 	andeq	r6, r0, r5, asr r9
    a63c:	a8030500 	stmdage	r3, {r8, sl}
    a640:	23200000 	teqcs	r0, #0
    a644:	00000414 	andeq	r0, r0, r4, lsl r4
    a648:	ce06a70b 	cdpgt	7, 0, cr10, cr6, cr11, {0}
    a64c:	24000000 	strcs	r0, [r0], #-0
    a650:	00004845 	andeq	r4, r0, r5, asr #16
    a654:	ab03ae0c 	blge	f5e8c <_Min_Stack_Size+0xf5a8c>
    a658:	05000007 	streq	r0, [r0, #-7]
    a65c:	00003403 	andeq	r3, r0, r3, lsl #8
    a660:	480f2420 	stmdami	pc, {r5, sl, sp}	; <UNPREDICTABLE>
    a664:	b40c0000 	strlt	r0, [ip], #-0
    a668:	0007ab03 	andeq	sl, r7, r3, lsl #22
    a66c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    a670:	24200000 	strtcs	r0, [r0], #-0
    a674:	000048fa 	strdeq	r4, [r0], -sl
    a678:	ab03ba0c 	blge	f8eb0 <_Min_Stack_Size+0xf8ab0>
    a67c:	05000007 	streq	r0, [r0, #-7]
    a680:	00004403 	andeq	r4, r0, r3, lsl #8
    a684:	4b682420 	blmi	1a1370c <_Min_Stack_Size+0x1a1330c>
    a688:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    a68c:	0007ab03 	andeq	sl, r7, r3, lsl #22
    a690:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    a694:	06200000 	strteq	r0, [r0], -r0
    a698:	00000045 	andeq	r0, r0, r5, asr #32
    a69c:	00001890 	muleq	r0, r0, r8
    a6a0:	0000ad25 	andeq	sl, r0, r5, lsr #26
    a6a4:	0008e700 	andeq	lr, r8, r0, lsl #14
    a6a8:	004aa726 	subeq	sl, sl, r6, lsr #14
    a6ac:	a14b0c00 	cmpge	fp, r0, lsl #24
    a6b0:	05000018 	streq	r0, [r0, #-24]
    a6b4:	009fdc03 	addseq	sp, pc, r3, lsl #24
    a6b8:	187f0808 	ldmdane	pc!, {r3, fp}^	; <UNPREDICTABLE>
    a6bc:	45060000 	strmi	r0, [r6, #-0]
    a6c0:	b7000000 	strlt	r0, [r0, -r0]
    a6c4:	25000018 	strcs	r0, [r0, #-24]
    a6c8:	000000ad 	andeq	r0, r0, sp, lsr #1
    a6cc:	2400047f 	strcs	r0, [r0], #-1151	; 0x47f
    a6d0:	00004990 	muleq	r0, r0, r9
    a6d4:	c902870c 	stmdbgt	r2, {r2, r3, r8, r9, sl, pc}
    a6d8:	05000018 	streq	r0, [r0, #-24]
    a6dc:	00b1ac03 	adcseq	sl, r1, r3, lsl #24
    a6e0:	18a60808 	stmiane	r6!, {r3, fp}
    a6e4:	88240000 	stmdahi	r4!, {}	; <UNPREDICTABLE>
    a6e8:	0c000048 	stceq	0, cr0, [r0], {72}	; 0x48
    a6ec:	18e002e9 	stmiane	r0!, {r0, r3, r5, r6, r7, r9}^
    a6f0:	03050000 	movweq	r0, #20480	; 0x5000
    a6f4:	0800baac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp, pc}
    a6f8:	0018a608 	andseq	sl, r8, r8, lsl #12
    a6fc:	00450600 	subeq	r0, r5, r0, lsl #12
    a700:	18f60000 	ldmne	r6!, {}^	; <UNPREDICTABLE>
    a704:	ad250000 	stcge	0, cr0, [r5, #-0]
    a708:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    a70c:	05240002 	streq	r0, [r4, #-2]!
    a710:	0c00004b 	stceq	0, cr0, [r0], {75}	; 0x4b
    a714:	1908034b 	stmdbne	r8, {r0, r1, r3, r6, r8, r9}
    a718:	03050000 	movweq	r0, #20480	; 0x5000
    a71c:	0800c3ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr, pc}
    a720:	0018e508 	andseq	lr, r8, r8, lsl #10
    a724:	0bb40000 	bleq	fed0a72c <_estack+0xdecda72c>
    a728:	00040000 	andeq	r0, r4, r0
    a72c:	00001cf2 	strdeq	r1, [r0], -r2
    a730:	012a0104 	teqeq	sl, r4, lsl #2
    a734:	d7010000 	strle	r0, [r1, -r0]
    a738:	6900004c 	stmdbvs	r0, {r2, r3, r6}
    a73c:	20000003 	andcs	r0, r0, r3
    a740:	0000000c 	andeq	r0, r0, ip
    a744:	b5000000 	strlt	r0, [r0, #-0]
    a748:	02000046 	andeq	r0, r0, #70	; 0x46
    a74c:	02a60601 	adceq	r0, r6, #1048576	; 0x100000
    a750:	33030000 	movwcc	r0, #12288	; 0x3000
    a754:	02000002 	andeq	r0, r0, #2
    a758:	0000371d 	andeq	r3, r0, sp, lsl r7
    a75c:	08010200 	stmdaeq	r1, {r9}
    a760:	000002a4 	andeq	r0, r0, r4, lsr #5
    a764:	3a050202 	bcc	14af74 <_Min_Stack_Size+0x14ab74>
    a768:	03000000 	movweq	r0, #0
    a76c:	0000007c 	andeq	r0, r0, ip, ror r0
    a770:	00502b02 	subseq	r2, r0, r2, lsl #22
    a774:	02020000 	andeq	r0, r2, #0
    a778:	00034b07 	andeq	r4, r3, r7, lsl #22
    a77c:	04450300 	strbeq	r0, [r5], #-768	; 0x300
    a780:	3f020000 	svccc	0x00020000
    a784:	00000062 	andeq	r0, r0, r2, rrx
    a788:	00050402 	andeq	r0, r5, r2, lsl #8
    a78c:	03000001 	movweq	r0, #1
    a790:	00000060 	andeq	r0, r0, r0, rrx
    a794:	00744102 	rsbseq	r4, r4, r2, lsl #2
    a798:	04020000 	streq	r0, [r2], #-0
    a79c:	0002f507 	andeq	pc, r2, r7, lsl #10
    a7a0:	05080200 	streq	r0, [r8, #-512]	; 0x200
    a7a4:	000000fb 	strdeq	r0, [r0], -fp
    a7a8:	f0070802 			; <UNDEFINED> instruction: 0xf0070802
    a7ac:	04000002 	streq	r0, [r0], #-2
    a7b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a7b4:	04020074 	streq	r0, [r2], #-116	; 0x74
    a7b8:	0002fa07 	andeq	pc, r2, r7, lsl #20
    a7bc:	02350300 	eorseq	r0, r5, #0, 6
    a7c0:	2a030000 	bcs	ca7c8 <_Min_Stack_Size+0xca3c8>
    a7c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    a7c8:	00007e03 	andeq	r7, r0, r3, lsl #28
    a7cc:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    a7d0:	03000000 	movweq	r0, #0
    a7d4:	00000447 	andeq	r0, r0, r7, asr #8
    a7d8:	00574103 	subseq	r4, r7, r3, lsl #2
    a7dc:	62030000 	andvs	r0, r3, #0
    a7e0:	03000000 	movweq	r0, #0
    a7e4:	00006942 	andeq	r6, r0, r2, asr #18
    a7e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a7ec:	00000044 	andeq	r0, r0, r4, asr #32
    a7f0:	0000b805 	andeq	fp, r0, r5, lsl #16
    a7f4:	00b80600 	adcseq	r0, r8, r0, lsl #12
    a7f8:	00df0000 	sbcseq	r0, pc, r0
    a7fc:	c3070000 	movwgt	r0, #28672	; 0x7000
    a800:	01000000 	mrseq	r0, (UNDEF: 0)
    a804:	00970500 	addseq	r0, r7, r0, lsl #10
    a808:	a2050000 	andge	r0, r5, #0
    a80c:	05000000 	streq	r0, [r0, #-0]
    a810:	000000ad 	andeq	r0, r0, sp, lsr #1
    a814:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    a818:	00010401 	andeq	r0, r1, r1, lsl #8
    a81c:	09180900 	ldmdbeq	r8, {r8, fp}
    a820:	0a000000 	beq	a828 <_Min_Stack_Size+0xa428>
    a824:	00544553 	subseq	r4, r4, r3, asr r5
    a828:	990b0001 	stmdbls	fp, {r0}
    a82c:	0400001d 	streq	r0, [r0], #-29
    a830:	00ee01f7 	strdeq	r0, [lr], #23	; <UNPREDICTABLE>
    a834:	01080000 	mrseq	r0, (UNDEF: 8)
    a838:	2601f904 	strcs	pc, [r1], -r4, lsl #18
    a83c:	09000001 	stmdbeq	r0, {r0}
    a840:	0000039d 	muleq	r0, sp, r3
    a844:	00b20900 	adcseq	r0, r2, r0, lsl #18
    a848:	00010000 	andeq	r0, r1, r0
    a84c:	00083e0b 	andeq	r3, r8, fp, lsl #28
    a850:	01f90400 	mvnseq	r0, r0, lsl #8
    a854:	00000110 	andeq	r0, r0, r0, lsl r1
    a858:	b104180c 	tstlt	r4, ip, lsl #16
    a85c:	00018902 	andeq	r8, r1, r2, lsl #18
    a860:	52430d00 	subpl	r0, r3, #0, 26
    a864:	02b30400 	adcseq	r0, r3, #0, 8
    a868:	000000ca 	andeq	r0, r0, sl, asr #1
    a86c:	1e2d0e00 	cdpne	14, 2, cr0, cr13, cr0, {0}
    a870:	b4040000 	strlt	r0, [r4], #-0
    a874:	0000ca02 	andeq	ip, r0, r2, lsl #20
    a878:	500d0400 	andpl	r0, sp, r0, lsl #8
    a87c:	04005241 	streq	r5, [r0], #-577	; 0x241
    a880:	00ca02b5 	strheq	r0, [sl], #37	; 0x25
    a884:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    a888:	00001daa 	andeq	r1, r0, sl, lsr #27
    a88c:	ca02b604 	bgt	b80a4 <_Min_Stack_Size+0xb7ca4>
    a890:	0c000000 	stceq	0, cr0, [r0], {-0}
    a894:	001d380e 	andseq	r3, sp, lr, lsl #16
    a898:	02b70400 	adcseq	r0, r7, #0, 8
    a89c:	000000ca 	andeq	r0, r0, sl, asr #1
    a8a0:	43460d10 	movtmi	r0, #27920	; 0x6d10
    a8a4:	b8040052 	stmdalt	r4, {r1, r4, r6}
    a8a8:	0000ca02 	andeq	ip, r0, r2, lsl #20
    a8ac:	0b001400 	bleq	f8b4 <_Min_Stack_Size+0xf4b4>
    a8b0:	00001b40 	andeq	r1, r0, r0, asr #22
    a8b4:	3202b904 	andcc	fp, r2, #4, 18	; 0x10000
    a8b8:	0c000001 	stceq	0, cr0, [r0], {1}
    a8bc:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    a8c0:	00000221 	andeq	r0, r0, r1, lsr #4
    a8c4:	00022d0e 	andeq	r2, r2, lr, lsl #26
    a8c8:	03d60400 	bicseq	r0, r6, #0, 8
    a8cc:	000000ca 	andeq	r0, r0, sl, asr #1
    a8d0:	00e90e00 	rsceq	r0, r9, r0, lsl #28
    a8d4:	d7040000 	strle	r0, [r4, -r0]
    a8d8:	0000ca03 	andeq	ip, r0, r3, lsl #20
    a8dc:	eb0e0400 	bl	38b8e4 <_Min_Stack_Size+0x38b4e4>
    a8e0:	04000003 	streq	r0, [r0], #-3
    a8e4:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    a8e8:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    a8ec:	00000117 	andeq	r0, r0, r7, lsl r1
    a8f0:	ca03d904 	bgt	100d08 <_Min_Stack_Size+0x100908>
    a8f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    a8f8:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    a8fc:	03da0400 	bicseq	r0, sl, #0, 8
    a900:	000000ca 	andeq	r0, r0, sl, asr #1
    a904:	444f0d10 	strbmi	r0, [pc], #-3344	; a90c <_Min_Stack_Size+0xa50c>
    a908:	db040052 	blle	10aa58 <_Min_Stack_Size+0x10a658>
    a90c:	0000ca03 	andeq	ip, r0, r3, lsl #20
    a910:	920e1400 	andls	r1, lr, #0, 8
    a914:	04000004 	streq	r0, [r0], #-4
    a918:	00e403dc 	ldrdeq	r0, [r4], #60	; 0x3c	; <UNPREDICTABLE>
    a91c:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    a920:	00000215 	andeq	r0, r0, r5, lsl r2
    a924:	e403dd04 	str	sp, [r3], #-3332	; 0xd04
    a928:	1a000000 	bne	a930 <_Min_Stack_Size+0xa530>
    a92c:	0004980e 	andeq	r9, r4, lr, lsl #16
    a930:	03de0400 	bicseq	r0, lr, #0, 8
    a934:	000000ca 	andeq	r0, r0, sl, asr #1
    a938:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    a93c:	df040052 	svcle	0x00040052
    a940:	00022103 	andeq	r2, r2, r3, lsl #2
    a944:	05002000 	streq	r2, [r0, #-0]
    a948:	000000cf 	andeq	r0, r0, pc, asr #1
    a94c:	0000000b 	andeq	r0, r0, fp
    a950:	03e00400 	mvneq	r0, #0, 8
    a954:	00000195 	muleq	r0, r5, r1
    a958:	f304280c 	vsub.i8	d2, d4, d12
    a95c:	00033f03 	andeq	r3, r3, r3, lsl #30
    a960:	52430d00 	subpl	r0, r3, #0, 26
    a964:	f5040031 			; <UNDEFINED> instruction: 0xf5040031
    a968:	0000e403 	andeq	lr, r0, r3, lsl #8
    a96c:	550e0000 	strpl	r0, [lr, #-0]
    a970:	04000006 	streq	r0, [r0], #-6
    a974:	00a203f6 	strdeq	r0, [r2], r6	; <UNPREDICTABLE>
    a978:	0d020000 	stceq	0, cr0, [r2, #-0]
    a97c:	00325243 	eorseq	r5, r2, r3, asr #4
    a980:	e403f704 	str	pc, [r3], #-1796	; 0x704
    a984:	04000000 	streq	r0, [r0], #-0
    a988:	00065f0e 	andeq	r5, r6, lr, lsl #30
    a98c:	03f80400 	mvnseq	r0, #0, 8
    a990:	000000a2 	andeq	r0, r0, r2, lsr #1
    a994:	17da0e06 	ldrbne	r0, [sl, r6, lsl #28]
    a998:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    a99c:	0000e403 	andeq	lr, r0, r3, lsl #8
    a9a0:	690e0800 	stmdbvs	lr, {fp}
    a9a4:	04000006 	streq	r0, [r0], #-6
    a9a8:	00a203fa 	strdeq	r0, [r2], sl	; <UNPREDICTABLE>
    a9ac:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    a9b0:	00001ad3 	ldrdeq	r1, [r0], -r3
    a9b4:	e403fb04 	str	pc, [r3], #-2820	; 0xb04
    a9b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    a9bc:	0005550e 	andeq	r5, r5, lr, lsl #10
    a9c0:	03fc0400 	mvnseq	r0, #0, 8
    a9c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a9c8:	52440d0e 	subpl	r0, r4, #896	; 0x380
    a9cc:	03fd0400 	mvnseq	r0, #0, 8
    a9d0:	000000e4 	andeq	r0, r0, r4, ror #1
    a9d4:	067f0e10 			; <UNDEFINED> instruction: 0x067f0e10
    a9d8:	fe040000 	cdp2	0, 0, cr0, cr4, cr0, {0}
    a9dc:	0000a203 	andeq	sl, r0, r3, lsl #4
    a9e0:	530d1200 	movwpl	r1, #53760	; 0xd200
    a9e4:	04003152 	streq	r3, [r0], #-338	; 0x152
    a9e8:	00e403ff 	strdeq	r0, [r4], #63	; 0x3f	; <UNPREDICTABLE>
    a9ec:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    a9f0:	00000689 	andeq	r0, r0, r9, lsl #13
    a9f4:	a2040004 	andge	r0, r4, #4
    a9f8:	16000000 	strne	r0, [r0], -r0
    a9fc:	3252530d 	subscc	r5, r2, #872415232	; 0x34000000
    aa00:	04010400 	streq	r0, [r1], #-1024	; 0x400
    aa04:	000000e4 	andeq	r0, r0, r4, ror #1
    aa08:	06930e18 			; <UNDEFINED> instruction: 0x06930e18
    aa0c:	02040000 	andeq	r0, r4, #0
    aa10:	0000a204 	andeq	sl, r0, r4, lsl #4
    aa14:	430d1a00 	movwmi	r1, #55808	; 0xda00
    aa18:	04005243 	streq	r5, [r0], #-579	; 0x243
    aa1c:	00e40403 	rsceq	r0, r4, r3, lsl #8
    aa20:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    aa24:	00001985 	andeq	r1, r0, r5, lsl #19
    aa28:	a2040404 	andge	r0, r4, #4, 8	; 0x4000000
    aa2c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    aa30:	00173c0e 	andseq	r3, r7, lr, lsl #24
    aa34:	04050400 	streq	r0, [r5], #-1024	; 0x400
    aa38:	000000e4 	andeq	r0, r0, r4, ror #1
    aa3c:	198f0e20 	stmibne	pc, {r5, r9, sl, fp}	; <UNPREDICTABLE>
    aa40:	06040000 	streq	r0, [r4], -r0
    aa44:	0000a204 	andeq	sl, r0, r4, lsl #4
    aa48:	df0e2200 	svcle	0x000e2200
    aa4c:	04000017 	streq	r0, [r0], #-23
    aa50:	00e40407 	rsceq	r0, r4, r7, lsl #8
    aa54:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    aa58:	00001999 	muleq	r0, r9, r9
    aa5c:	a2040804 	andge	r0, r4, #4, 16	; 0x40000
    aa60:	26000000 	strcs	r0, [r0], -r0
    aa64:	18100b00 	ldmdane	r0, {r8, r9, fp}
    aa68:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    aa6c:	00023204 	andeq	r3, r2, r4, lsl #4
    aa70:	053c0f00 	ldreq	r0, [ip, #-3840]!	; 0xf00
    aa74:	00040836 	andeq	r0, r4, r6, lsr r8
    aa78:	1e321000 	cdpne	0, 3, cr1, cr2, cr0, {0}
    aa7c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    aa80:	000000b8 	strheq	r0, [r0], -r8
    aa84:	1bfd1000 	blne	fff4ea8c <_estack+0xdff1ea8c>
    aa88:	3b050000 	blcc	14aa90 <_Min_Stack_Size+0x14a690>
    aa8c:	000000b8 	strheq	r0, [r0], -r8
    aa90:	1e4d1004 	cdpne	0, 4, cr1, cr13, cr4, {0}
    aa94:	3d050000 	stccc	0, cr0, [r5, #-0]
    aa98:	000000b8 	strheq	r0, [r0], -r8
    aa9c:	1bf51008 	blne	ffd4eac4 <_estack+0xdfd1eac4>
    aaa0:	41050000 	mrsmi	r0, (UNDEF: 5)
    aaa4:	000000b8 	strheq	r0, [r0], -r8
    aaa8:	1e61100c 	cdpne	0, 6, cr1, cr1, cr12, {0}
    aaac:	45050000 	strmi	r0, [r5, #-0]
    aab0:	000000b8 	strheq	r0, [r0], -r8
    aab4:	1c581010 	mrrcne	0, 1, r1, r8, cr0
    aab8:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    aabc:	000000b8 	strheq	r0, [r0], -r8
    aac0:	1c141014 	ldcne	0, cr1, [r4], {20}
    aac4:	4c050000 	stcmi	0, cr0, [r5], {-0}
    aac8:	000000b8 	strheq	r0, [r0], -r8
    aacc:	1cb51018 	ldcne	0, cr1, [r5], #96	; 0x60
    aad0:	4f050000 	svcmi	0x00050000
    aad4:	000000b8 	strheq	r0, [r0], -r8
    aad8:	1ea4101c 	mcrne	0, 5, r1, cr4, cr12, {0}
    aadc:	52050000 	andpl	r0, r5, #0
    aae0:	000000b8 	strheq	r0, [r0], -r8
    aae4:	1e701020 	cdpne	0, 7, cr1, cr0, cr0, {1}
    aae8:	55050000 	strpl	r0, [r5, #-0]
    aaec:	000000b8 	strheq	r0, [r0], -r8
    aaf0:	1b591024 	blne	164eb88 <_Min_Stack_Size+0x164e788>
    aaf4:	5a050000 	bpl	14aafc <_Min_Stack_Size+0x14a6fc>
    aaf8:	000000b8 	strheq	r0, [r0], -r8
    aafc:	1e0f1028 	cdpne	0, 0, cr1, cr15, cr8, {1}
    ab00:	5d050000 	stcpl	0, cr0, [r5, #-0]
    ab04:	000000b8 	strheq	r0, [r0], -r8
    ab08:	1cf7102c 	ldclne	0, cr1, [r7], #176	; 0xb0
    ab0c:	62050000 	andvs	r0, r5, #0
    ab10:	000000b8 	strheq	r0, [r0], -r8
    ab14:	1b661030 	blne	198ebdc <_Min_Stack_Size+0x198e7dc>
    ab18:	65050000 	strvs	r0, [r5, #-0]
    ab1c:	000000b8 	strheq	r0, [r0], -r8
    ab20:	1b851034 	blne	fe14ebf8 <_estack+0xde11ebf8>
    ab24:	6a050000 	bvs	14ab2c <_Min_Stack_Size+0x14a72c>
    ab28:	000000b8 	strheq	r0, [r0], -r8
    ab2c:	cc030038 	stcgt	0, cr0, [r3], {56}	; 0x38
    ab30:	0500001c 	streq	r0, [r0, #-28]
    ab34:	00034b6e 	andeq	r4, r3, lr, ror #22
    ab38:	06011100 	streq	r1, [r1], -r0, lsl #2
    ab3c:	00043442 	andeq	r3, r4, r2, asr #8
    ab40:	011d0900 	tsteq	sp, r0, lsl #18
    ab44:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ab48:	00000109 	andeq	r0, r0, r9, lsl #2
    ab4c:	00920901 	addseq	r0, r2, r1, lsl #18
    ab50:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    ab54:	000000c4 	andeq	r0, r0, r4, asr #1
    ab58:	1c030003 	stcne	0, cr0, [r3], {3}
    ab5c:	06000000 	streq	r0, [r0], -r0
    ab60:	00041347 	andeq	r1, r4, r7, asr #6
    ab64:	06011100 	streq	r1, [r1], -r0, lsl #2
    ab68:	0004544f 	andeq	r5, r4, pc, asr #8
    ab6c:	027d0900 	rsbseq	r0, sp, #0, 18
    ab70:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ab74:	0000004d 	andeq	r0, r0, sp, asr #32
    ab78:	d7030001 	strle	r0, [r3, -r1]
    ab7c:	06000000 	streq	r0, [r0], -r0
    ab80:	00043f52 	andeq	r3, r4, r2, asr pc
    ab84:	06011100 	streq	r1, [r1], -r0, lsl #2
    ab88:	0004805a 	andeq	r8, r4, sl, asr r0
    ab8c:	03ca0900 	biceq	r0, sl, #0, 18
    ab90:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ab94:	000003d9 	ldrdeq	r0, [r0], -r9
    ab98:	038d0901 	orreq	r0, sp, #16384	; 0x4000
    ab9c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    aba0:	0000023d 	andeq	r0, r0, sp, lsr r2
    aba4:	8b030003 	blhi	cabb8 <_Min_Stack_Size+0xca7b8>
    aba8:	06000002 	streq	r0, [r0], -r2
    abac:	00045f5f 	andeq	r5, r4, pc, asr pc
    abb0:	06011100 	streq	r1, [r1], -r0, lsl #2
    abb4:	0004a66e 	andeq	sl, r4, lr, ror #12
    abb8:	04210900 	strteq	r0, [r1], #-2304	; 0x900
    abbc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    abc0:	0000002d 	andeq	r0, r0, sp, lsr #32
    abc4:	04050901 	streq	r0, [r5], #-2305	; 0x901
    abc8:	00020000 	andeq	r0, r2, r0
    abcc:	00046603 	andeq	r6, r4, r3, lsl #12
    abd0:	8b720600 	blhi	1c8c3d8 <_Min_Stack_Size+0x1c8bfd8>
    abd4:	0f000004 	svceq	0x00000004
    abd8:	f6840608 			; <UNDEFINED> instruction: 0xf6840608
    abdc:	10000004 	andne	r0, r0, r4
    abe0:	0000000d 	andeq	r0, r0, sp
    abe4:	00b88606 	adcseq	r8, r8, r6, lsl #12
    abe8:	10000000 	andne	r0, r0, r0
    abec:	000004a8 	andeq	r0, r0, r8, lsr #9
    abf0:	04348906 	ldrteq	r8, [r4], #-2310	; 0x906
    abf4:	10040000 	andne	r0, r4, r0
    abf8:	000000b9 	strheq	r0, [r0], -r9
    abfc:	04808c06 	streq	r8, [r0], #3078	; 0xc06
    ac00:	10050000 	andne	r0, r5, r0
    ac04:	00000087 	andeq	r0, r0, r7, lsl #1
    ac08:	04548f06 	ldrbeq	r8, [r4], #-3846	; 0xf06
    ac0c:	10060000 	andne	r0, r6, r0
    ac10:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    ac14:	04a69206 	strteq	r9, [r6], #518	; 0x206
    ac18:	00070000 	andeq	r0, r7, r0
    ac1c:	00031a03 	andeq	r1, r3, r3, lsl #20
    ac20:	b1940600 	orrslt	r0, r4, r0, lsl #12
    ac24:	0f000004 	svceq	0x00000004
    ac28:	52360710 	eorspl	r0, r6, #16, 14	; 0x400000
    ac2c:	10000005 	andne	r0, r0, r5
    ac30:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    ac34:	00b83807 	adcseq	r3, r8, r7, lsl #16
    ac38:	10000000 	andne	r0, r0, r0
    ac3c:	000017c2 	andeq	r1, r0, r2, asr #15
    ac40:	00a23b07 	adceq	r3, r2, r7, lsl #22
    ac44:	10040000 	andne	r0, r4, r0
    ac48:	00001866 	andeq	r1, r0, r6, ror #16
    ac4c:	00a23e07 	adceq	r3, r2, r7, lsl #28
    ac50:	10060000 	andne	r0, r6, r0
    ac54:	000019a3 	andeq	r1, r0, r3, lsr #19
    ac58:	00a24107 	adceq	r4, r2, r7, lsl #2
    ac5c:	10080000 	andne	r0, r8, r0
    ac60:	000019be 			; <UNDEFINED> instruction: 0x000019be
    ac64:	00a24407 	adceq	r4, r2, r7, lsl #8
    ac68:	100a0000 	andne	r0, sl, r0
    ac6c:	000019ee 	andeq	r1, r0, lr, ror #19
    ac70:	00a24707 	adceq	r4, r2, r7, lsl #14
    ac74:	000c0000 	andeq	r0, ip, r0
    ac78:	00196003 	andseq	r6, r9, r3
    ac7c:	01490700 	cmpeq	r9, r0, lsl #14
    ac80:	0f000005 	svceq	0x00000005
    ac84:	90400808 	subls	r0, r0, r8, lsl #16
    ac88:	10000005 	andne	r0, r0, r5
    ac8c:	00004d15 	andeq	r4, r0, r5, lsl sp
    ac90:	00a24208 	adceq	r4, r2, r8, lsl #4
    ac94:	12000000 	andne	r0, r0, #0
    ac98:	43080058 	movwmi	r0, #32856	; 0x8058
    ac9c:	000000a2 	andeq	r0, r0, r2, lsr #1
    aca0:	00591202 	subseq	r1, r9, r2, lsl #4
    aca4:	00a24408 	adceq	r4, r2, r8, lsl #8
    aca8:	12040000 	andne	r0, r4, #0
    acac:	4508005a 	strmi	r0, [r8, #-90]	; 0x5a
    acb0:	000000a2 	andeq	r0, r0, r2, lsr #1
    acb4:	6d030006 	stcvs	0, cr0, [r3, #-24]	; 0xffffffe8
    acb8:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    acbc:	00055d46 	andeq	r5, r5, r6, asr #26
    acc0:	08011100 	stmdaeq	r1, {r8, ip}
    acc4:	0005c24c 	andeq	ip, r5, ip, asr #4
    acc8:	4d920900 	ldcmi	9, cr0, [r2]
    accc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    acd0:	00004e3d 	andeq	r4, r0, sp, lsr lr
    acd4:	4dd80901 	ldclmi	9, cr0, [r8, #4]
    acd8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    acdc:	00004eef 	andeq	r4, r0, pc, ror #29
    ace0:	4eaf0903 	cdpmi	9, 10, cr0, cr15, cr3, {0}
    ace4:	00040000 	andeq	r0, r4, r0
    ace8:	61080111 	tstvs	r8, r1, lsl r1
    acec:	000005d7 	ldrdeq	r0, [r0], -r7
    acf0:	004ede09 	subeq	sp, lr, r9, lsl #28
    acf4:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
    acf8:	0100004e 	tsteq	r0, lr, asr #32
    acfc:	4e240300 	cdpmi	3, 2, cr0, cr4, cr0, {0}
    ad00:	64080000 	strvs	r0, [r8], #-0
    ad04:	000005c2 	andeq	r0, r0, r2, asr #11
    ad08:	004e8a13 	subeq	r8, lr, r3, lsl sl
    ad0c:	977f0100 	ldrbls	r0, [pc, -r0, lsl #2]!
    ad10:	70000000 	andvc	r0, r0, r0
    ad14:	3008008e 	andcc	r0, r8, lr, lsl #1
    ad18:	01000000 	mrseq	r0, (UNDEF: 0)
    ad1c:	4dbf139c 	ldcmi	3, cr1, [pc, #624]!	; af94 <_Min_Stack_Size+0xab94>
    ad20:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    ad24:	00000097 	muleq	r0, r7, r0
    ad28:	08008ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, pc}
    ad2c:	0000001e 	andeq	r0, r0, lr, lsl r0
    ad30:	2c149c01 	ldccs	12, cr9, [r4], {1}
    ad34:	0100004c 	tsteq	r0, ip, asr #32
    ad38:	00067ab2 			; <UNDEFINED> instruction: 0x00067ab2
    ad3c:	008ec000 	addeq	ip, lr, r0
    ad40:	0000c808 	andeq	ip, r0, r8, lsl #16
    ad44:	7a9c0100 	bvc	fe70b14c <_estack+0xde6db14c>
    ad48:	15000006 	strne	r0, [r0, #-6]
    ad4c:	00004e6d 	andeq	r4, r0, sp, ror #28
    ad50:	00b8b401 	adcseq	fp, r8, r1, lsl #8
    ad54:	91020000 	mrsls	r0, (UNDEF: 2)
    ad58:	4ee9156c 	cdpmi	5, 14, cr1, cr9, cr12, {3}
    ad5c:	b4010000 	strlt	r0, [r1], #-0
    ad60:	000000b8 	strheq	r0, [r0], -r8
    ad64:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    ad68:	b4010078 	strlt	r0, [r1], #-120	; 0x78
    ad6c:	000000b8 	strheq	r0, [r0], -r8
    ad70:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    ad74:	b4010079 	strlt	r0, [r1], #-121	; 0x79
    ad78:	000000b8 	strheq	r0, [r0], -r8
    ad7c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
    ad80:	0100785f 	tsteq	r0, pc, asr r8
    ad84:	0000b8b5 			; <UNDEFINED> instruction: 0x0000b8b5
    ad88:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
    ad8c:	16200000 	strtne	r0, [r0], -r0
    ad90:	0100795f 	tsteq	r0, pc, asr r9
    ad94:	0000b8b5 			; <UNDEFINED> instruction: 0x0000b8b5
    ad98:	b8030500 	stmdalt	r3, {r8, sl}
    ad9c:	00200000 	eoreq	r0, r0, r0
    ada0:	05900417 	ldreq	r0, [r0, #1047]	; 0x417
    ada4:	46140000 	ldrmi	r0, [r4], -r0
    ada8:	0100004d 	tsteq	r0, sp, asr #32
    adac:	000104e1 	andeq	r0, r1, r1, ror #9
    adb0:	008f8800 	addeq	r8, pc, r0, lsl #16
    adb4:	00003408 	andeq	r3, r0, r8, lsl #8
    adb8:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    adbc:	18000006 	stmdane	r0, {r1, r2}
    adc0:	00004f21 	andeq	r4, r0, r1, lsr #30
    adc4:	0097e101 	addseq	lr, r7, r1, lsl #2
    adc8:	91020000 	mrsls	r0, (UNDEF: 2)
    adcc:	6d74166f 	ldclvs	6, cr1, [r4, #-444]!	; 0xfffffe44
    add0:	e3010070 	movw	r0, #4208	; 0x1070
    add4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    add8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    addc:	004d2314 	subeq	r2, sp, r4, lsl r3
    ade0:	97fe0100 	ldrbls	r0, [lr, r0, lsl #2]!
    ade4:	bc000000 	stclt	0, cr0, [r0], {-0}
    ade8:	1e08008f 	cdpne	0, 0, cr0, cr8, cr15, {4}
    adec:	01000000 	mrseq	r0, (UNDEF: 0)
    adf0:	0006de9c 	muleq	r6, ip, lr
    adf4:	4f211800 	svcmi	0x00211800
    adf8:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    adfc:	00000097 	muleq	r0, r7, r0
    ae00:	00779102 	rsbseq	r9, r7, r2, lsl #2
    ae04:	004cc519 	subeq	ip, ip, r9, lsl r5
    ae08:	010e0100 	mrseq	r0, (UNDEF: 30)
    ae0c:	00000097 	muleq	r0, r7, r0
    ae10:	08008fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, pc}
    ae14:	00000034 	andeq	r0, r0, r4, lsr r0
    ae18:	ce199c01 	cdpgt	12, 1, cr9, cr9, cr1, {0}
    ae1c:	0100004d 	tsteq	r0, sp, asr #32
    ae20:	00970128 	addseq	r0, r7, r8, lsr #2
    ae24:	90100000 	andsls	r0, r0, r0
    ae28:	00200800 	eoreq	r0, r0, r0, lsl #16
    ae2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ae30:	004d571a 	subeq	r5, sp, sl, lsl r7
    ae34:	013c0100 	teqeq	ip, r0, lsl #2
    ae38:	000000a2 	andeq	r0, r0, r2, lsr #1
    ae3c:	08009030 	stmdaeq	r0, {r4, r5, ip, pc}
    ae40:	00000034 	andeq	r0, r0, r4, lsr r0
    ae44:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
    ae48:	741b0000 	ldrvc	r0, [fp], #-0
    ae4c:	0100706d 	tsteq	r0, sp, rrx
    ae50:	00a2013e 	adceq	r0, r2, lr, lsr r1
    ae54:	91020000 	mrsls	r0, (UNDEF: 2)
    ae58:	ac1a0076 	ldcge	0, cr0, [sl], {118}	; 0x76
    ae5c:	0100004c 	tsteq	r0, ip, asr #32
    ae60:	00970153 	addseq	r0, r7, r3, asr r1
    ae64:	90640000 	rsbls	r0, r4, r0
    ae68:	004e0800 	subeq	r0, lr, r0, lsl #16
    ae6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ae70:	0000077c 	andeq	r0, r0, ip, ror r7
    ae74:	7463461c 	strbtvc	r4, [r3], #-1564	; 0x61c
    ae78:	01530100 	cmpeq	r3, r0, lsl #2
    ae7c:	00000097 	muleq	r0, r7, r0
    ae80:	1d6f9102 	stfnep	f1, [pc, #-8]!	; ae80 <_Min_Stack_Size+0xaa80>
    ae84:	00000756 	andeq	r0, r0, r6, asr r7
    ae88:	26015301 	strcs	r5, [r1], -r1, lsl #6
    ae8c:	02000001 	andeq	r0, r0, #1
    ae90:	741b6e91 	ldrvc	r6, [fp], #-3729	; 0xe91
    ae94:	0100706d 	tsteq	r0, sp, rrx
    ae98:	00970155 	addseq	r0, r7, r5, asr r1
    ae9c:	91020000 	mrsls	r0, (UNDEF: 2)
    aea0:	451a0077 	ldrmi	r0, [sl, #-119]	; 0x77
    aea4:	0100004c 	tsteq	r0, ip, asr #32
    aea8:	00970172 	addseq	r0, r7, r2, ror r1
    aeac:	90b40000 	adcsls	r0, r4, r0
    aeb0:	00440800 	subeq	r0, r4, r0, lsl #16
    aeb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    aeb8:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    aebc:	0007561d 	andeq	r5, r7, sp, lsl r6
    aec0:	01720100 	cmneq	r2, r0, lsl #2
    aec4:	00000126 	andeq	r0, r0, r6, lsr #2
    aec8:	1b6f9102 	blne	1bef2d8 <_Min_Stack_Size+0x1beeed8>
    aecc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    aed0:	97017401 	strls	r7, [r1, -r1, lsl #8]
    aed4:	02000000 	andeq	r0, r0, #0
    aed8:	1a007791 	bne	28d24 <_Min_Stack_Size+0x28924>
    aedc:	00004e54 	andeq	r4, r0, r4, asr lr
    aee0:	97019701 	strls	r9, [r1, -r1, lsl #14]
    aee4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    aee8:	4e080090 	mcrmi	0, 0, r0, cr8, cr0, {4}
    aeec:	01000000 	mrseq	r0, (UNDEF: 0)
    aef0:	0007fd9c 	muleq	r7, ip, sp
    aef4:	4f211d00 	svcmi	0x00211d00
    aef8:	97010000 	strls	r0, [r1, -r0]
    aefc:	00009701 	andeq	r9, r0, r1, lsl #14
    af00:	6f910200 	svcvs	0x00910200
    af04:	0007561d 	andeq	r5, r7, sp, lsl r6
    af08:	01970100 	orrseq	r0, r7, r0, lsl #2
    af0c:	00000126 	andeq	r0, r0, r6, lsr #2
    af10:	1b6e9102 	blne	1baf320 <_Min_Stack_Size+0x1baef20>
    af14:	00706d74 	rsbseq	r6, r0, r4, ror sp
    af18:	97019901 	strls	r9, [r1, -r1, lsl #18]
    af1c:	02000000 	andeq	r0, r0, #0
    af20:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    af24:	00004ec3 	andeq	r4, r0, r3, asr #29
    af28:	9701b401 	strls	fp, [r1, -r1, lsl #8]
    af2c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    af30:	94080091 	strls	r0, [r8], #-145	; 0x91
    af34:	01000000 	mrseq	r0, (UNDEF: 0)
    af38:	4c501a9c 	mrrcmi	10, 9, r1, r0, cr12
    af3c:	ec010000 	stc	0, cr0, [r1], {-0}
    af40:	00009701 	andeq	r9, r0, r1, lsl #14
    af44:	0091dc00 	addseq	sp, r1, r0, lsl #24
    af48:	00004e08 	andeq	r4, r0, r8, lsl #28
    af4c:	5b9c0100 	blpl	fe70b354 <_estack+0xde6db354>
    af50:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    af54:	0000000f 	andeq	r0, r0, pc
    af58:	9701ec01 	strls	lr, [r1, -r1, lsl #24]
    af5c:	02000000 	andeq	r0, r0, #0
    af60:	561d6f91 	sadd8pl	r6, sp, r1
    af64:	01000007 	tsteq	r0, r7
    af68:	012601ec 	smulwteq	r6, ip, r1
    af6c:	91020000 	mrsls	r0, (UNDEF: 2)
    af70:	6d741b6e 	vldmdbvs	r4!, {d17-<overflow reg d71>}
    af74:	ee010070 	mcr	0, 0, r0, cr1, cr0, {3}
    af78:	00009701 	andeq	r9, r0, r1, lsl #14
    af7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    af80:	4dfc1a00 	ldclmi	10, cr1, [ip]
    af84:	0b010000 	bleq	4af8c <_Min_Stack_Size+0x4ab8c>
    af88:	00009702 	andeq	r9, r0, r2, lsl #14
    af8c:	00922c00 	addseq	r2, r2, r0, lsl #24
    af90:	00019408 	andeq	r9, r1, r8, lsl #8
    af94:	b29c0100 	addslt	r0, ip, #0, 2
    af98:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    af9c:	00004c84 	andeq	r4, r0, r4, lsl #25
    afa0:	97020b01 	strls	r0, [r2, -r1, lsl #22]
    afa4:	02000000 	andeq	r0, r0, #0
    afa8:	621d6f91 	andsvs	r6, sp, #580	; 0x244
    afac:	0100004d 	tsteq	r0, sp, asr #32
    afb0:	0097020b 	addseq	r0, r7, fp, lsl #4
    afb4:	91020000 	mrsls	r0, (UNDEF: 2)
    afb8:	4e621e6e 	cdpmi	14, 6, cr1, cr2, cr14, {3}
    afbc:	0d010000 	stceq	0, cr0, [r1, #-0]
    afc0:	0000b802 	andeq	fp, r0, r2, lsl #16
    afc4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    afc8:	004cb81e 	subeq	fp, ip, lr, lsl r8
    afcc:	020e0100 	andeq	r0, lr, #0, 2
    afd0:	00000097 	muleq	r0, r7, r0
    afd4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    afd8:	004c911a 	subeq	r9, ip, sl, lsl r1
    afdc:	026f0100 	rsbeq	r0, pc, #0, 2
    afe0:	00000097 	muleq	r0, r7, r0
    afe4:	080093c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, pc}
    afe8:	000001d4 	ldrdeq	r0, [r0], -r4
    afec:	08eb9c01 	stmiaeq	fp!, {r0, sl, fp, ip, pc}^
    aff0:	841d0000 	ldrhi	r0, [sp], #-0
    aff4:	0100004c 	tsteq	r0, ip, asr #32
    aff8:	0097026f 	addseq	r0, r7, pc, ror #4
    affc:	91020000 	mrsls	r0, (UNDEF: 2)
    b000:	4ed11e6f 	cdpmi	14, 13, cr1, cr1, cr15, {3}
    b004:	71010000 	mrsvc	r0, (UNDEF: 1)
    b008:	0008eb02 	andeq	lr, r8, r2, lsl #22
    b00c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b010:	00970600 	addseq	r0, r7, r0, lsl #12
    b014:	08fb0000 	ldmeq	fp!, {}^	; <UNPREDICTABLE>
    b018:	c3070000 	movwgt	r0, #28672	; 0x7000
    b01c:	01000000 	mrseq	r0, (UNDEF: 0)
    b020:	4e731a00 	vaddmi.f32	s3, s6, s0
    b024:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    b028:	0000a202 	andeq	sl, r0, r2, lsl #4
    b02c:	00959400 	addseq	r9, r5, r0, lsl #8
    b030:	0001f408 	andeq	pc, r1, r8, lsl #8
    b034:	439c0100 	orrsmi	r0, ip, #0, 2
    b038:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    b03c:	00004c84 	andeq	r4, r0, r4, lsl #25
    b040:	b802ce01 	stmdalt	r2, {r0, r9, sl, fp, lr, pc}
    b044:	02000000 	andeq	r0, r0, #0
    b048:	741b6c91 	ldrvc	r6, [fp], #-3217	; 0xc91
    b04c:	0100706d 	tsteq	r0, sp, rrx
    b050:	009702d0 			; <UNDEFINED> instruction: 0x009702d0
    b054:	91020000 	mrsls	r0, (UNDEF: 2)
    b058:	4ed11e77 	mrcmi	14, 6, r1, cr1, cr7, {3}
    b05c:	d1010000 	mrsle	r0, (UNDEF: 1)
    b060:	0008eb02 	andeq	lr, r8, r2, lsl #22
    b064:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b068:	4c5f1f00 	mrrcmi	15, 0, r1, pc, cr0	; <UNPREDICTABLE>
    b06c:	33010000 	movwcc	r0, #4096	; 0x1000
    b070:	0000a203 	andeq	sl, r0, r3, lsl #4
    b074:	00978800 	addseq	r8, r7, r0, lsl #16
    b078:	00006808 	andeq	r6, r0, r8, lsl #16
    b07c:	799c0100 	ldmibvc	ip, {r8}
    b080:	1b000009 	blne	b0ac <_Min_Stack_Size+0xacac>
    b084:	35010078 	strcc	r0, [r1, #-120]	; 0x78
    b088:	0000ad03 	andeq	sl, r0, r3, lsl #26
    b08c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b090:	0072781b 	rsbseq	r7, r2, fp, lsl r8
    b094:	ad033501 	cfstr32ge	mvfx3, [r3, #-4]
    b098:	02000000 	andeq	r0, r0, #0
    b09c:	1f007091 	svcne	0x00007091
    b0a0:	00004d99 	muleq	r0, r9, sp
    b0a4:	a2035a01 	andge	r5, r3, #4096	; 0x1000
    b0a8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    b0ac:	54080097 	strpl	r0, [r8], #-151	; 0x97
    b0b0:	01000000 	mrseq	r0, (UNDEF: 0)
    b0b4:	0009af9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    b0b8:	00791b00 	rsbseq	r1, r9, r0, lsl #22
    b0bc:	ad035c01 	stcge	12, cr5, [r3, #-4]
    b0c0:	02000000 	andeq	r0, r0, #0
    b0c4:	791b7091 	ldmdbvc	fp, {r0, r4, r7, ip, sp, lr}
    b0c8:	5c010072 	stcpl	0, cr0, [r1], {114}	; 0x72
    b0cc:	0000ad03 	andeq	sl, r0, r3, lsl #26
    b0d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b0d4:	4c761f00 	ldclmi	15, cr1, [r6], #-0
    b0d8:	7b010000 	blvc	4b0e0 <_Min_Stack_Size+0x4ace0>
    b0dc:	0000a203 	andeq	sl, r0, r3, lsl #4
    b0e0:	00984400 	addseq	r4, r8, r0, lsl #8
    b0e4:	00002608 	andeq	r2, r0, r8, lsl #12
    b0e8:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    b0ec:	1b000009 	blne	b118 <_Min_Stack_Size+0xad18>
    b0f0:	7d01007a 	stcvc	0, cr0, [r1, #-488]	; 0xfffffe18
    b0f4:	0000b803 	andeq	fp, r0, r3, lsl #16
    b0f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b0fc:	4d822000 	stcmi	0, cr2, [r2]
    b100:	8d010000 	stchi	0, cr0, [r1, #-0]
    b104:	00986c03 	addseq	r6, r8, r3, lsl #24
    b108:	00008c08 	andeq	r8, r0, r8, lsl #24
    b10c:	fd9c0100 	ldc2	1, cr0, [ip]
    b110:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    b114:	00000432 	andeq	r0, r0, r2, lsr r4
    b118:	f6038f01 			; <UNDEFINED> instruction: 0xf6038f01
    b11c:	02000004 	andeq	r0, r0, #4
    b120:	20007091 	mulcs	r0, r1, r0
    b124:	00004d37 	andeq	r4, r0, r7, lsr sp
    b128:	f803b301 			; <UNDEFINED> instruction: 0xf803b301
    b12c:	54080098 	strpl	r0, [r8], #-152	; 0x98
    b130:	01000000 	mrseq	r0, (UNDEF: 0)
    b134:	000a239c 	muleq	sl, ip, r3
    b138:	4d701e00 	ldclmi	14, cr1, [r0, #-0]
    b13c:	b5010000 	strlt	r0, [r1, #-0]
    b140:	00055203 	andeq	r5, r5, r3, lsl #4
    b144:	68910200 	ldmvs	r1, {r9}
    b148:	4efb2000 	cdpmi	0, 15, cr2, cr11, cr0, {0}
    b14c:	cf010000 	svcgt	0x00010000
    b150:	00994c03 	addseq	r4, r9, r3, lsl #24
    b154:	0000a408 	andeq	sl, r0, r8, lsl #8
    b158:	6a9c0100 	bvs	fe70b560 <_estack+0xde6db560>
    b15c:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    b160:	000018a3 	andeq	r1, r0, r3, lsr #17
    b164:	d703cf01 	strle	ip, [r3, -r1, lsl #30]
    b168:	03000005 	movweq	r0, #5
    b16c:	1d7fb791 	ldclne	7, cr11, [pc, #-580]!	; af30 <_Min_Stack_Size+0xab30>
    b170:	00004ea8 	andeq	r4, r0, r8, lsr #29
    b174:	6a03cf01 	bvs	fed80 <_Min_Stack_Size+0xfe980>
    b178:	0300000a 	movweq	r0, #10
    b17c:	1e7fb091 	mrcne	0, 3, fp, cr15, cr1, {4}
    b180:	00004244 	andeq	r4, r0, r4, asr #4
    b184:	0803d101 	stmdaeq	r3, {r0, r8, ip, lr, pc}
    b188:	03000004 	movweq	r0, #4
    b18c:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    b190:	00970417 	addseq	r0, r7, r7, lsl r4
    b194:	e41a0000 	ldr	r0, [sl], #-0
    b198:	0100004d 	tsteq	r0, sp, asr #32
    b19c:	0097041e 	addseq	r0, r7, lr, lsl r4
    b1a0:	99f00000 	ldmibls	r0!, {}^	; <UNPREDICTABLE>
    b1a4:	015c0800 	cmpeq	ip, r0, lsl #16
    b1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    b1ac:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    b1b0:	004c841d 	subeq	r8, ip, sp, lsl r4
    b1b4:	041e0100 	ldreq	r0, [lr], #-256	; 0x100
    b1b8:	00000097 	muleq	r0, r7, r0
    b1bc:	1d6f9102 	stfnep	f1, [pc, #-8]!	; b1bc <_Min_Stack_Size+0xadbc>
    b1c0:	00004d62 	andeq	r4, r0, r2, ror #26
    b1c4:	97041e01 	strls	r1, [r4, -r1, lsl #28]
    b1c8:	02000000 	andeq	r0, r0, #0
    b1cc:	621e6e91 	andsvs	r6, lr, #2320	; 0x910
    b1d0:	0100004e 	tsteq	r0, lr, asr #32
    b1d4:	00b80420 	adcseq	r0, r8, r0, lsr #8
    b1d8:	91020000 	mrsls	r0, (UNDEF: 2)
    b1dc:	0a1a0074 	beq	68b3b4 <_Min_Stack_Size+0x68afb4>
    b1e0:	0100004f 	tsteq	r0, pc, asr #32
    b1e4:	00970474 	addseq	r0, r7, r4, ror r4
    b1e8:	9b4c0000 	blls	130b1f0 <_Min_Stack_Size+0x130adf0>
    b1ec:	01dc0800 	bicseq	r0, ip, r0, lsl #16
    b1f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    b1f4:	00000af1 	strdeq	r0, [r0], -r1
    b1f8:	004c841d 	subeq	r8, ip, sp, lsl r4
    b1fc:	04740100 	ldrbteq	r0, [r4], #-256	; 0x100
    b200:	00000097 	muleq	r0, r7, r0
    b204:	1b6f9102 	blne	1bef614 <_Min_Stack_Size+0x1bef214>
    b208:	00706d74 	rsbseq	r6, r0, r4, ror sp
    b20c:	97047601 	strls	r7, [r4, -r1, lsl #12]
    b210:	02000000 	andeq	r0, r0, #0
    b214:	1a007791 	bne	29060 <_Min_Stack_Size+0x28c60>
    b218:	00004e95 	muleq	r0, r5, lr
    b21c:	a204d301 	andge	sp, r4, #67108864	; 0x4000000
    b220:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    b224:	cc08009d 	stcgt	0, cr0, [r8], {157}	; 0x9d
    b228:	01000001 	tsteq	r0, r1
    b22c:	000b2a9c 	muleq	fp, ip, sl
    b230:	4c841d00 	stcmi	13, cr1, [r4], {0}
    b234:	d3010000 	movwle	r0, #4096	; 0x1000
    b238:	0000b804 	andeq	fp, r0, r4, lsl #16
    b23c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b240:	004ed11e 	subeq	sp, lr, lr, lsl r1
    b244:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    b248:	000008eb 	andeq	r0, r0, fp, ror #17
    b24c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b250:	004da71a 	subeq	sl, sp, sl, lsl r7
    b254:	05310100 	ldreq	r0, [r1, #-256]!	; 0x100
    b258:	00000097 	muleq	r0, r7, r0
    b25c:	08009ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, pc}
    b260:	0000006c 	andeq	r0, r0, ip, rrx
    b264:	0b549c01 	bleq	1532270 <_Min_Stack_Size+0x1531e70>
    b268:	701e0000 	andsvc	r0, lr, r0
    b26c:	0100004d 	tsteq	r0, sp, asr #32
    b270:	05520533 	ldrbeq	r0, [r2, #-1331]	; 0x533
    b274:	91020000 	mrsls	r0, (UNDEF: 2)
    b278:	7e210068 	cdpvc	0, 2, cr0, cr1, cr8, {3}
    b27c:	01000043 	tsteq	r0, r3, asr #32
    b280:	9f600552 	svcls	0x00600552
    b284:	00340800 	eorseq	r0, r4, r0, lsl #16
    b288:	9c010000 	stcls	0, cr0, [r1], {-0}
    b28c:	00000b89 	andeq	r0, r0, r9, lsl #23
    b290:	0043eb1d 	subeq	lr, r3, sp, lsl fp
    b294:	05520100 	ldrbeq	r0, [r2, #-256]	; 0x100
    b298:	000000ca 	andeq	r0, r0, sl, asr #1
    b29c:	1e6c9102 	lgnnee	f1, f2
    b2a0:	0000435b 	andeq	r4, r0, fp, asr r3
    b2a4:	ca055401 	bgt	1602b0 <_Min_Stack_Size+0x15feb0>
    b2a8:	02000000 	andeq	r0, r0, #0
    b2ac:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
    b2b0:	00000414 	andeq	r0, r0, r4, lsl r4
    b2b4:	e906a709 	stmdb	r6, {r0, r3, r8, r9, sl, sp, pc}
    b2b8:	23000000 	movwcs	r0, #0
    b2bc:	00004c3c 	andeq	r4, r0, ip, lsr ip
    b2c0:	05905901 	ldreq	r5, [r0, #2305]	; 0x901
    b2c4:	03050000 	movweq	r0, #20480	; 0x5000
    b2c8:	200000ac 	andcs	r0, r0, ip, lsr #1
    b2cc:	004e1823 	subeq	r1, lr, r3, lsr #16
    b2d0:	b85b0100 	ldmdalt	fp, {r8}^
    b2d4:	05000000 	streq	r0, [r0, #-0]
    b2d8:	00005c03 	andeq	r5, r0, r3, lsl #24
    b2dc:	Address 0x000000000000b2dc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <_Min_Stack_Size+0x2bfcac>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <_Min_Stack_Size+0x380828>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	04000013 	streq	r0, [r0], #-19
      2c:	0b0b0024 	bleq	2c00c4 <_Min_Stack_Size+0x2bfcc4>
      30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      34:	35050000 	strcc	r0, [r5, #-0]
      38:	00134900 	andseq	r4, r3, r0, lsl #18
      3c:	01010600 	tsteq	r1, r0, lsl #12
      40:	13011349 	movwne	r1, #4937	; 0x1349
      44:	21070000 	mrscs	r0, (UNDEF: 7)
      48:	2f134900 	svccs	0x00134900
      4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      50:	13490026 	movtne	r0, #36902	; 0x9026
      54:	04090000 	streq	r0, [r9], #-0
      58:	3a0b0b01 	bcc	2c2c64 <_Min_Stack_Size+0x2c2864>
      5c:	01053b0b 	tsteq	r5, fp, lsl #22
      60:	0a000013 	beq	b4 <_Min_Heap_Size+0xb4>
      64:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
      68:	00000d1c 	andeq	r0, r0, ip, lsl sp
      6c:	0b01130b 	bleq	44ca0 <_Min_Stack_Size+0x448a0>
      70:	3b0b3a0b 	blcc	2ce8a4 <_Min_Stack_Size+0x2ce4a4>
      74:	00130105 	andseq	r0, r3, r5, lsl #2
      78:	000d0c00 	andeq	r0, sp, r0, lsl #24
      7c:	0b3a0e03 	bleq	e83890 <_Min_Stack_Size+0xe83490>
      80:	1349053b 	movtne	r0, #38203	; 0x953b
      84:	00000b38 	andeq	r0, r0, r8, lsr fp
      88:	03000d0d 	movweq	r0, #3341	; 0xd0d
      8c:	3b0b3a08 	blcc	2ce8b4 <_Min_Stack_Size+0x2ce4b4>
      90:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      94:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
      98:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      a0:	00001349 	andeq	r1, r0, r9, asr #6
      a4:	0b01040f 	bleq	410e8 <_Min_Stack_Size+0x40ce8>
      a8:	3b0b3a0b 	blcc	2ce8dc <_Min_Stack_Size+0x2ce4dc>
      ac:	0013010b 	andseq	r0, r3, fp, lsl #2
      b0:	01131000 	tsteq	r3, r0
      b4:	0b3a0b0b 	bleq	e82ce8 <_Min_Stack_Size+0xe828e8>
      b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      bc:	0d110000 	ldceq	0, cr0, [r1, #-0]
      c0:	3a0e0300 	bcc	380cc8 <_Min_Stack_Size+0x3808c8>
      c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c8:	000b3813 	andeq	r3, fp, r3, lsl r8
      cc:	01131200 	tsteq	r3, r0, lsl #4
      d0:	0b0b0e03 	bleq	2c38e4 <_Min_Stack_Size+0x2c34e4>
      d4:	0b3b0b3a 	bleq	ec2dc4 <_Min_Stack_Size+0xec29c4>
      d8:	00001301 	andeq	r1, r0, r1, lsl #6
      dc:	0b000f13 	bleq	3d30 <_Min_Stack_Size+0x3930>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	002e1400 	eoreq	r1, lr, r0, lsl #8
      e8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      ec:	0b3b0b3a 	bleq	ec2ddc <_Min_Stack_Size+0xec29dc>
      f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
      f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
      f8:	15000019 	strne	r0, [r0, #-25]
      fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     100:	0b3a0e03 	bleq	e83914 <_Min_Stack_Size+0xe83514>
     104:	01110b3b 	tsteq	r1, fp, lsr fp
     108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     10c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     118:	0b3b0b3a 	bleq	ec2e08 <_Min_Stack_Size+0xec2a08>
     11c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     120:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     124:	03193f01 	tsteq	r9, #1, 30
     128:	3b0b3a0e 	blcc	2ce968 <_Min_Stack_Size+0x2ce568>
     12c:	1113490b 	tstne	r3, fp, lsl #18
     130:	40061201 	andmi	r1, r6, r1, lsl #4
     134:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     138:	00001301 	andeq	r1, r0, r1, lsl #6
     13c:	11010b18 	tstne	r1, r8, lsl fp
     140:	00061201 	andeq	r1, r6, r1, lsl #4
     144:	00341900 	eorseq	r1, r4, r0, lsl #18
     148:	0b3a0803 	bleq	e8215c <_Min_Stack_Size+0xe81d5c>
     14c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     150:	00001802 	andeq	r1, r0, r2, lsl #16
     154:	0300341a 	movweq	r3, #1050	; 0x41a
     158:	3b0b3a0e 	blcc	2ce998 <_Min_Stack_Size+0x2ce598>
     15c:	3f134905 	svccc	0x00134905
     160:	00193c19 	andseq	r3, r9, r9, lsl ip
     164:	11010000 	mrsne	r0, (UNDEF: 1)
     168:	55061000 	strpl	r1, [r6, #-0]
     16c:	1b080306 	blne	200d8c <_Min_Stack_Size+0x20098c>
     170:	13082508 	movwne	r2, #34056	; 0x8508
     174:	00000005 	andeq	r0, r0, r5
     178:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     17c:	030b130e 	movweq	r1, #45838	; 0xb30e
     180:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     184:	10011117 	andne	r1, r1, r7, lsl r1
     188:	02000017 	andeq	r0, r0, #23
     18c:	0b0b0024 	bleq	2c0224 <_Min_Stack_Size+0x2bfe24>
     190:	0e030b3e 	vmoveq.16	d3[0], r0
     194:	16030000 	strne	r0, [r3], -r0
     198:	3a0e0300 	bcc	380da0 <_Min_Stack_Size+0x3809a0>
     19c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1a0:	04000013 	streq	r0, [r0], #-19
     1a4:	0b0b0024 	bleq	2c023c <_Min_Stack_Size+0x2bfe3c>
     1a8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1ac:	35050000 	strcc	r0, [r5, #-0]
     1b0:	00134900 	andseq	r4, r3, r0, lsl #18
     1b4:	01130600 	tsteq	r3, r0, lsl #12
     1b8:	0b3a0b0b 	bleq	e82dec <_Min_Stack_Size+0xe829ec>
     1bc:	1301053b 	movwne	r0, #5435	; 0x153b
     1c0:	0d070000 	stceq	0, cr0, [r7, #-0]
     1c4:	3a0e0300 	bcc	380dcc <_Min_Stack_Size+0x3809cc>
     1c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     1cc:	000b3813 	andeq	r3, fp, r3, lsl r8
     1d0:	000d0800 	andeq	r0, sp, r0, lsl #16
     1d4:	0b3a0803 	bleq	e821e8 <_Min_Stack_Size+0xe81de8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00000b38 	andeq	r0, r0, r8, lsr fp
     1e0:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
     1e4:	0a000013 	beq	238 <_Min_Heap_Size+0x238>
     1e8:	13490101 	movtne	r0, #37121	; 0x9101
     1ec:	00001301 	andeq	r1, r0, r1, lsl #6
     1f0:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
     1f4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     1f8:	00160c00 	andseq	r0, r6, r0, lsl #24
     1fc:	0b3a0e03 	bleq	e83a10 <_Min_Stack_Size+0xe83610>
     200:	1349053b 	movtne	r0, #38203	; 0x953b
     204:	040d0000 	streq	r0, [sp], #-0
     208:	3a0b0b01 	bcc	2c2e14 <_Min_Stack_Size+0x2c2a14>
     20c:	01053b0b 	tsteq	r5, fp, lsl #22
     210:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     214:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     218:	00000d1c 	andeq	r0, r0, ip, lsl sp
     21c:	0300280f 	movweq	r2, #2063	; 0x80f
     220:	000d1c08 	andeq	r1, sp, r8, lsl #24
     224:	002e1000 	eoreq	r1, lr, r0
     228:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     22c:	0b3b0b3a 	bleq	ec2f1c <_Min_Stack_Size+0xec2b1c>
     230:	01111927 	tsteq	r1, r7, lsr #18
     234:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     238:	00194296 	mulseq	r9, r6, r2
     23c:	012e1100 	teqeq	lr, r0, lsl #2
     240:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     244:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     248:	01111927 	tsteq	r1, r7, lsr #18
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	12000013 	andne	r0, r0, #19
     258:	08030034 	stmdaeq	r3, {r2, r4, r5}
     25c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     260:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     264:	34130000 	ldrcc	r0, [r3], #-0
     268:	3a0e0300 	bcc	380e70 <_Min_Stack_Size+0x380a70>
     26c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     270:	00180213 	andseq	r0, r8, r3, lsl r2
     274:	012e1400 	teqeq	lr, r0, lsl #8
     278:	0b3a0e03 	bleq	e83a8c <_Min_Stack_Size+0xe8368c>
     27c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     280:	06120111 			; <UNDEFINED> instruction: 0x06120111
     284:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     288:	00130119 	andseq	r0, r3, r9, lsl r1
     28c:	00341500 	eorseq	r1, r4, r0, lsl #10
     290:	0b3a0e03 	bleq	e83aa4 <_Min_Stack_Size+0xe836a4>
     294:	1349053b 	movtne	r0, #38203	; 0x953b
     298:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     29c:	34160000 	ldrcc	r0, [r6], #-0
     2a0:	3a0e0300 	bcc	380ea8 <_Min_Stack_Size+0x380aa8>
     2a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2a8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     2ac:	00000018 	andeq	r0, r0, r8, lsl r0
     2b0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     2b4:	030b130e 	movweq	r1, #45838	; 0xb30e
     2b8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     2bc:	10011117 	andne	r1, r1, r7, lsl r1
     2c0:	02000017 	andeq	r0, r0, #23
     2c4:	0b0b0024 	bleq	2c035c <_Min_Stack_Size+0x2bff5c>
     2c8:	0e030b3e 	vmoveq.16	d3[0], r0
     2cc:	16030000 	strne	r0, [r3], -r0
     2d0:	3a0e0300 	bcc	380ed8 <_Min_Stack_Size+0x380ad8>
     2d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2d8:	04000013 	streq	r0, [r0], #-19
     2dc:	0b0b0024 	bleq	2c0374 <_Min_Stack_Size+0x2bff74>
     2e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     2e4:	13050000 	movwne	r0, #20480	; 0x5000
     2e8:	3a050b01 	bcc	142ef4 <_Min_Stack_Size+0x142af4>
     2ec:	01053b0b 	tsteq	r5, fp, lsl #22
     2f0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     2f4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     2f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2fc:	0b381349 	bleq	e05028 <_Min_Stack_Size+0xe04c28>
     300:	0d070000 	stceq	0, cr0, [r7, #-0]
     304:	3a0e0300 	bcc	380f0c <_Min_Stack_Size+0x380b0c>
     308:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     30c:	00053813 	andeq	r3, r5, r3, lsl r8
     310:	000d0800 	andeq	r0, sp, r0, lsl #16
     314:	0b3a0803 	bleq	e82328 <_Min_Stack_Size+0xe81f28>
     318:	1349053b 	movtne	r0, #38203	; 0x953b
     31c:	00000538 	andeq	r0, r0, r8, lsr r5
     320:	49010109 	stmdbmi	r1, {r0, r3, r8}
     324:	00130113 	andseq	r0, r3, r3, lsl r1
     328:	00210a00 	eoreq	r0, r1, r0, lsl #20
     32c:	0b2f1349 	bleq	bc5058 <_Min_Stack_Size+0xbc4c58>
     330:	350b0000 	strcc	r0, [fp, #-0]
     334:	00134900 	andseq	r4, r3, r0, lsl #18
     338:	00210c00 	eoreq	r0, r1, r0, lsl #24
     33c:	052f1349 	streq	r1, [pc, #-841]!	; fffffffb <_estack+0xdffcfffb>
     340:	160d0000 	strne	r0, [sp], -r0
     344:	3a0e0300 	bcc	380f4c <_Min_Stack_Size+0x380b4c>
     348:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     34c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     350:	0b0b0113 	bleq	2c07a4 <_Min_Stack_Size+0x2c03a4>
     354:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     358:	00001301 	andeq	r1, r0, r1, lsl #6
     35c:	03000d0f 	movweq	r0, #3343	; 0xd0f
     360:	3b0b3a08 	blcc	2ceb88 <_Min_Stack_Size+0x2ce788>
     364:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     368:	1000000b 	andne	r0, r0, fp
     36c:	13490026 	movtne	r0, #36902	; 0x9026
     370:	04110000 	ldreq	r0, [r1], #-0
     374:	3a0b0b01 	bcc	2c2f80 <_Min_Stack_Size+0x2c2b80>
     378:	01053b0b 	tsteq	r5, fp, lsl #22
     37c:	12000013 	andne	r0, r0, #19
     380:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     384:	00000d1c 	andeq	r0, r0, ip, lsl sp
     388:	0b011313 	bleq	44fdc <_Min_Stack_Size+0x44bdc>
     38c:	3b0b3a0b 	blcc	2cebc0 <_Min_Stack_Size+0x2ce7c0>
     390:	0013010b 	andseq	r0, r3, fp, lsl #2
     394:	000d1400 	andeq	r1, sp, r0, lsl #8
     398:	0b3a0e03 	bleq	e83bac <_Min_Stack_Size+0xe837ac>
     39c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3a0:	00000b38 	andeq	r0, r0, r8, lsr fp
     3a4:	3f012e15 	svccc	0x00012e15
     3a8:	3a0e0319 	bcc	381014 <_Min_Stack_Size+0x380c14>
     3ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3b4:	97184006 	ldrls	r4, [r8, -r6]
     3b8:	13011942 	movwne	r1, #6466	; 0x1942
     3bc:	05160000 	ldreq	r0, [r6, #-0]
     3c0:	3a0e0300 	bcc	380fc8 <_Min_Stack_Size+0x380bc8>
     3c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3c8:	00180213 	andseq	r0, r8, r3, lsl r2
     3cc:	00341700 	eorseq	r1, r4, r0, lsl #14
     3d0:	0b3a0e03 	bleq	e83be4 <_Min_Stack_Size+0xe837e4>
     3d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d8:	00001802 	andeq	r1, r0, r2, lsl #16
     3dc:	0b000f18 	bleq	4044 <_Min_Stack_Size+0x3c44>
     3e0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3e4:	00341900 	eorseq	r1, r4, r0, lsl #18
     3e8:	0b3a0e03 	bleq	e83bfc <_Min_Stack_Size+0xe837fc>
     3ec:	1349053b 	movtne	r0, #38203	; 0x953b
     3f0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     3f4:	01000000 	mrseq	r0, (UNDEF: 0)
     3f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     3fc:	0e030b13 	vmoveq.32	d3[0], r0
     400:	17550e1b 	smmlane	r5, fp, lr, r0
     404:	17100111 			; <UNDEFINED> instruction: 0x17100111
     408:	24020000 	strcs	r0, [r2], #-0
     40c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     410:	000e030b 	andeq	r0, lr, fp, lsl #6
     414:	00160300 	andseq	r0, r6, r0, lsl #6
     418:	0b3a0e03 	bleq	e83c2c <_Min_Stack_Size+0xe8382c>
     41c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     420:	24040000 	strcs	r0, [r4], #-0
     424:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     428:	0008030b 	andeq	r0, r8, fp, lsl #6
     42c:	00350500 	eorseq	r0, r5, r0, lsl #10
     430:	00001349 	andeq	r1, r0, r9, asr #6
     434:	49010106 	stmdbmi	r1, {r1, r2, r8}
     438:	00130113 	andseq	r0, r3, r3, lsl r1
     43c:	00210700 	eoreq	r0, r1, r0, lsl #14
     440:	0b2f1349 	bleq	bc516c <_Min_Stack_Size+0xbc4d6c>
     444:	04080000 	streq	r0, [r8], #-0
     448:	3a0b0b01 	bcc	2c3054 <_Min_Stack_Size+0x2c2c54>
     44c:	01053b0b 	tsteq	r5, fp, lsl #22
     450:	09000013 	stmdbeq	r0, {r0, r1, r4}
     454:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     458:	00000d1c 	andeq	r0, r0, ip, lsl sp
     45c:	0b01130a 	bleq	4508c <_Min_Stack_Size+0x44c8c>
     460:	3b0b3a0b 	blcc	2cec94 <_Min_Stack_Size+0x2ce894>
     464:	00130105 	andseq	r0, r3, r5, lsl #2
     468:	000d0b00 	andeq	r0, sp, r0, lsl #22
     46c:	0b3a0e03 	bleq	e83c80 <_Min_Stack_Size+0xe83880>
     470:	1349053b 	movtne	r0, #38203	; 0x953b
     474:	00000b38 	andeq	r0, r0, r8, lsr fp
     478:	03000d0c 	movweq	r0, #3340	; 0xd0c
     47c:	3b0b3a08 	blcc	2ceca4 <_Min_Stack_Size+0x2ce8a4>
     480:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     484:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     488:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     48c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     490:	00001349 	andeq	r1, r0, r9, asr #6
     494:	0b01040e 	bleq	414d4 <_Min_Stack_Size+0x410d4>
     498:	3b0b3a0b 	blcc	2ceccc <_Min_Stack_Size+0x2ce8cc>
     49c:	0013010b 	andseq	r0, r3, fp, lsl #2
     4a0:	01130f00 	tsteq	r3, r0, lsl #30
     4a4:	0b3a0b0b 	bleq	e830d8 <_Min_Stack_Size+0xe82cd8>
     4a8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     4ac:	0d100000 	ldceq	0, cr0, [r0, #-0]
     4b0:	3a0e0300 	bcc	3810b8 <_Min_Stack_Size+0x380cb8>
     4b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4b8:	000b3813 	andeq	r3, fp, r3, lsl r8
     4bc:	012e1100 	teqeq	lr, r0, lsl #2
     4c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4c4:	0b3b0b3a 	bleq	ec31b4 <_Min_Stack_Size+0xec2db4>
     4c8:	01111927 	tsteq	r1, r7, lsr #18
     4cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     4d4:	12000013 	andne	r0, r0, #19
     4d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     4dc:	0b3b0b3a 	bleq	ec31cc <_Min_Stack_Size+0xec2dcc>
     4e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     4e4:	0f130000 	svceq	0x00130000
     4e8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     4ec:	14000013 	strne	r0, [r0], #-19
     4f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4f4:	0b3a0e03 	bleq	e83d08 <_Min_Stack_Size+0xe83908>
     4f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     4fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     500:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     504:	00130119 	andseq	r0, r3, r9, lsl r1
     508:	00341500 	eorseq	r1, r4, r0, lsl #10
     50c:	0b3a0e03 	bleq	e83d20 <_Min_Stack_Size+0xe83920>
     510:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     514:	00001802 	andeq	r1, r0, r2, lsl #16
     518:	03003416 	movweq	r3, #1046	; 0x416
     51c:	3b0b3a08 	blcc	2ced44 <_Min_Stack_Size+0x2ce944>
     520:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     524:	17000018 	smladne	r0, r8, r0, r0
     528:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     52c:	0b3a0e03 	bleq	e83d40 <_Min_Stack_Size+0xe83940>
     530:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     534:	06120111 			; <UNDEFINED> instruction: 0x06120111
     538:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     53c:	00130119 	andseq	r0, r3, r9, lsl r1
     540:	00051800 	andeq	r1, r5, r0, lsl #16
     544:	0b3a0e03 	bleq	e83d58 <_Min_Stack_Size+0xe83958>
     548:	1349053b 	movtne	r0, #38203	; 0x953b
     54c:	00001802 	andeq	r1, r0, r2, lsl #16
     550:	03003419 	movweq	r3, #1049	; 0x419
     554:	3b0b3a08 	blcc	2ced7c <_Min_Stack_Size+0x2ce97c>
     558:	02134905 	andseq	r4, r3, #81920	; 0x14000
     55c:	1a000018 	bne	5c4 <_Min_Stack_Size+0x1c4>
     560:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     564:	0b3a0e03 	bleq	e83d78 <_Min_Stack_Size+0xe83978>
     568:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     56c:	01111349 	tsteq	r1, r9, asr #6
     570:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     574:	01194297 			; <UNDEFINED> instruction: 0x01194297
     578:	1b000013 	blne	5cc <_Min_Stack_Size+0x1cc>
     57c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     580:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     584:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     588:	341c0000 	ldrcc	r0, [ip], #-0
     58c:	3a0e0300 	bcc	381194 <_Min_Stack_Size+0x380d94>
     590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	3c193f13 	ldccc	15, cr3, [r9], {19}
     598:	00000019 	andeq	r0, r0, r9, lsl r0
     59c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     5a0:	030b130e 	movweq	r1, #45838	; 0xb30e
     5a4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     5a8:	10011117 	andne	r1, r1, r7, lsl r1
     5ac:	02000017 	andeq	r0, r0, #23
     5b0:	0b0b0024 	bleq	2c0648 <_Min_Stack_Size+0x2c0248>
     5b4:	0e030b3e 	vmoveq.16	d3[0], r0
     5b8:	16030000 	strne	r0, [r3], -r0
     5bc:	3a0e0300 	bcc	3811c4 <_Min_Stack_Size+0x380dc4>
     5c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5c4:	04000013 	streq	r0, [r0], #-19
     5c8:	0b0b0024 	bleq	2c0660 <_Min_Stack_Size+0x2c0260>
     5cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     5d0:	35050000 	strcc	r0, [r5, #-0]
     5d4:	00134900 	andseq	r4, r3, r0, lsl #18
     5d8:	01010600 	tsteq	r1, r0, lsl #12
     5dc:	13011349 	movwne	r1, #4937	; 0x1349
     5e0:	21070000 	mrscs	r0, (UNDEF: 7)
     5e4:	2f134900 	svccs	0x00134900
     5e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     5ec:	0b0b0104 	bleq	2c0a04 <_Min_Stack_Size+0x2c0604>
     5f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     5f4:	00001301 	andeq	r1, r0, r1, lsl #6
     5f8:	03002809 	movweq	r2, #2057	; 0x809
     5fc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     600:	00280a00 	eoreq	r0, r8, r0, lsl #20
     604:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     608:	160b0000 	strne	r0, [fp], -r0
     60c:	3a0e0300 	bcc	381214 <_Min_Stack_Size+0x380e14>
     610:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     614:	0c000013 	stceq	0, cr0, [r0], {19}
     618:	0b0b0113 	bleq	2c0a6c <_Min_Stack_Size+0x2c066c>
     61c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     620:	00001301 	andeq	r1, r0, r1, lsl #6
     624:	03000d0d 	movweq	r0, #3341	; 0xd0d
     628:	3b0b3a08 	blcc	2cee50 <_Min_Stack_Size+0x2cea50>
     62c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     630:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     634:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     63c:	0b381349 	bleq	e05368 <_Min_Stack_Size+0xe04f68>
     640:	130f0000 	movwne	r0, #61440	; 0xf000
     644:	3a0b0b01 	bcc	2c3250 <_Min_Stack_Size+0x2c2e50>
     648:	010b3b0b 	tsteq	fp, fp, lsl #22
     64c:	10000013 	andne	r0, r0, r3, lsl r0
     650:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     654:	0b3b0b3a 	bleq	ec3344 <_Min_Stack_Size+0xec2f44>
     658:	0b381349 	bleq	e05384 <_Min_Stack_Size+0xe04f84>
     65c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     660:	03193f00 	tsteq	r9, #0, 30
     664:	3b0b3a0e 	blcc	2ceea4 <_Min_Stack_Size+0x2ceaa4>
     668:	1119270b 	tstne	r9, fp, lsl #14
     66c:	40061201 	andmi	r1, r6, r1, lsl #4
     670:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     674:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     678:	03193f01 	tsteq	r9, #1, 30
     67c:	3b0b3a0e 	blcc	2ceebc <_Min_Stack_Size+0x2ceabc>
     680:	11192705 	tstne	r9, r5, lsl #14
     684:	40061201 	andmi	r1, r6, r1, lsl #4
     688:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     68c:	00001301 	andeq	r1, r0, r1, lsl #6
     690:	03000513 	movweq	r0, #1299	; 0x513
     694:	3b0b3a0e 	blcc	2ceed4 <_Min_Stack_Size+0x2cead4>
     698:	02134905 	andseq	r4, r3, #81920	; 0x14000
     69c:	14000018 	strne	r0, [r0], #-24
     6a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6a4:	0b3a0e03 	bleq	e83eb8 <_Min_Stack_Size+0xe83ab8>
     6a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6ac:	01111349 	tsteq	r1, r9, asr #6
     6b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
     6b8:	15000013 	strne	r0, [r0, #-19]
     6bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     6c8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     6cc:	03193f00 	tsteq	r9, #0, 30
     6d0:	3b0b3a0e 	blcc	2cef10 <_Min_Stack_Size+0x2ceb10>
     6d4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     6d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6dc:	97184006 	ldrls	r4, [r8, -r6]
     6e0:	00001942 	andeq	r1, r0, r2, asr #18
     6e4:	03003417 	movweq	r3, #1047	; 0x417
     6e8:	3b0b3a08 	blcc	2cef10 <_Min_Stack_Size+0x2ceb10>
     6ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
     6f0:	18000018 	stmdane	r0, {r3, r4}
     6f4:	0b0b000f 	bleq	2c0738 <_Min_Stack_Size+0x2c0338>
     6f8:	00001349 	andeq	r1, r0, r9, asr #6
     6fc:	3f012e19 	svccc	0x00012e19
     700:	3a0e0319 	bcc	38136c <_Min_Stack_Size+0x380f6c>
     704:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     708:	11134919 	tstne	r3, r9, lsl r9
     70c:	40061201 	andmi	r1, r6, r1, lsl #4
     710:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     714:	00001301 	andeq	r1, r0, r1, lsl #6
     718:	3f002e1a 	svccc	0x00002e1a
     71c:	3a0e0319 	bcc	381388 <_Min_Stack_Size+0x380f88>
     720:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     724:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     728:	97184006 	ldrls	r4, [r8, -r6]
     72c:	00001942 	andeq	r1, r0, r2, asr #18
     730:	0300341b 	movweq	r3, #1051	; 0x41b
     734:	3b0b3a0e 	blcc	2cef74 <_Min_Stack_Size+0x2ceb74>
     738:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     73c:	1c000018 	stcne	0, cr0, [r0], {24}
     740:	13490026 	movtne	r0, #36902	; 0x9026
     744:	341d0000 	ldrcc	r0, [sp], #-0
     748:	3a0e0300 	bcc	381350 <_Min_Stack_Size+0x380f50>
     74c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     750:	3c193f13 	ldccc	15, cr3, [r9], {19}
     754:	00000019 	andeq	r0, r0, r9, lsl r0
     758:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     75c:	030b130e 	movweq	r1, #45838	; 0xb30e
     760:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     764:	10011117 	andne	r1, r1, r7, lsl r1
     768:	02000017 	andeq	r0, r0, #23
     76c:	0b0b0024 	bleq	2c0804 <_Min_Stack_Size+0x2c0404>
     770:	0e030b3e 	vmoveq.16	d3[0], r0
     774:	16030000 	strne	r0, [r3], -r0
     778:	3a0e0300 	bcc	381380 <_Min_Stack_Size+0x380f80>
     77c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     780:	04000013 	streq	r0, [r0], #-19
     784:	0b0b0024 	bleq	2c081c <_Min_Stack_Size+0x2c041c>
     788:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     78c:	35050000 	strcc	r0, [r5, #-0]
     790:	00134900 	andseq	r4, r3, r0, lsl #18
     794:	01040600 	tsteq	r4, r0, lsl #12
     798:	0b3a0b0b 	bleq	e833cc <_Min_Stack_Size+0xe82fcc>
     79c:	1301053b 	movwne	r0, #5435	; 0x153b
     7a0:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     7a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     7a8:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     7ac:	08030028 	stmdaeq	r3, {r3, r5}
     7b0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     7b4:	03001609 	movweq	r1, #1545	; 0x609
     7b8:	3b0b3a0e 	blcc	2ceff8 <_Min_Stack_Size+0x2cebf8>
     7bc:	00134905 	andseq	r4, r3, r5, lsl #18
     7c0:	01130a00 	tsteq	r3, r0, lsl #20
     7c4:	0b3a0b0b 	bleq	e833f8 <_Min_Stack_Size+0xe82ff8>
     7c8:	1301053b 	movwne	r0, #5435	; 0x153b
     7cc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     7d0:	3a080300 	bcc	2013d8 <_Min_Stack_Size+0x200fd8>
     7d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7d8:	000b3813 	andeq	r3, fp, r3, lsl r8
     7dc:	000d0c00 	andeq	r0, sp, r0, lsl #24
     7e0:	0b3a0e03 	bleq	e83ff4 <_Min_Stack_Size+0xe83bf4>
     7e4:	1349053b 	movtne	r0, #38203	; 0x953b
     7e8:	00000b38 	andeq	r0, r0, r8, lsr fp
     7ec:	0b01130d 	bleq	45428 <_Min_Stack_Size+0x45028>
     7f0:	3b0b3a0b 	blcc	2cf024 <_Min_Stack_Size+0x2cec24>
     7f4:	0013010b 	andseq	r0, r3, fp, lsl #2
     7f8:	000d0e00 	andeq	r0, sp, r0, lsl #28
     7fc:	0b3a0e03 	bleq	e84010 <_Min_Stack_Size+0xe83c10>
     800:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     804:	00000b38 	andeq	r0, r0, r8, lsr fp
     808:	3f012e0f 	svccc	0x00012e0f
     80c:	3a0e0319 	bcc	381478 <_Min_Stack_Size+0x381078>
     810:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     814:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     818:	96184006 	ldrls	r4, [r8], -r6
     81c:	13011942 	movwne	r1, #6466	; 0x1942
     820:	05100000 	ldreq	r0, [r0, #-0]
     824:	3a0e0300 	bcc	38142c <_Min_Stack_Size+0x38102c>
     828:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     82c:	00180213 	andseq	r0, r8, r3, lsl r2
     830:	000f1100 	andeq	r1, pc, r0, lsl #2
     834:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     838:	34120000 	ldrcc	r0, [r2], #-0
     83c:	3a0e0300 	bcc	381444 <_Min_Stack_Size+0x381044>
     840:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     844:	00180213 	andseq	r0, r8, r3, lsl r2
     848:	012e1300 	teqeq	lr, r0, lsl #6
     84c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     850:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     854:	01111927 	tsteq	r1, r7, lsr #18
     858:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     85c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     860:	14000013 	strne	r0, [r0], #-19
     864:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     868:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     86c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     870:	34150000 	ldrcc	r0, [r5], #-0
     874:	3a0e0300 	bcc	38147c <_Min_Stack_Size+0x38107c>
     878:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     87c:	00180213 	andseq	r0, r8, r3, lsl r2
     880:	012e1600 	teqeq	lr, r0, lsl #12
     884:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     888:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     88c:	13491927 	movtne	r1, #39207	; 0x9927
     890:	06120111 			; <UNDEFINED> instruction: 0x06120111
     894:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     898:	00130119 	andseq	r0, r3, r9, lsl r1
     89c:	00341700 	eorseq	r1, r4, r0, lsl #14
     8a0:	0b3a0e03 	bleq	e840b4 <_Min_Stack_Size+0xe83cb4>
     8a4:	1349053b 	movtne	r0, #38203	; 0x953b
     8a8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     8ac:	01000000 	mrseq	r0, (UNDEF: 0)
     8b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     8b4:	0e030b13 	vmoveq.32	d3[0], r0
     8b8:	17550e1b 	smmlane	r5, fp, lr, r0
     8bc:	17100111 			; <UNDEFINED> instruction: 0x17100111
     8c0:	24020000 	strcs	r0, [r2], #-0
     8c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     8c8:	000e030b 	andeq	r0, lr, fp, lsl #6
     8cc:	00160300 	andseq	r0, r6, r0, lsl #6
     8d0:	0b3a0e03 	bleq	e840e4 <_Min_Stack_Size+0xe83ce4>
     8d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8d8:	24040000 	strcs	r0, [r4], #-0
     8dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     8e0:	0008030b 	andeq	r0, r8, fp, lsl #6
     8e4:	00350500 	eorseq	r0, r5, r0, lsl #10
     8e8:	00001349 	andeq	r1, r0, r9, asr #6
     8ec:	49010106 	stmdbmi	r1, {r1, r2, r8}
     8f0:	00130113 	andseq	r0, r3, r3, lsl r1
     8f4:	00210700 	eoreq	r0, r1, r0, lsl #14
     8f8:	0b2f1349 	bleq	bc5624 <_Min_Stack_Size+0xbc5224>
     8fc:	04080000 	streq	r0, [r8], #-0
     900:	3a0b0b01 	bcc	2c350c <_Min_Stack_Size+0x2c310c>
     904:	01053b0b 	tsteq	r5, fp, lsl #22
     908:	09000013 	stmdbeq	r0, {r0, r1, r4}
     90c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     910:	00000d1c 	andeq	r0, r0, ip, lsl sp
     914:	0300280a 	movweq	r2, #2058	; 0x80a
     918:	000d1c08 	andeq	r1, sp, r8, lsl #24
     91c:	00160b00 	andseq	r0, r6, r0, lsl #22
     920:	0b3a0e03 	bleq	e84134 <_Min_Stack_Size+0xe83d34>
     924:	1349053b 	movtne	r0, #38203	; 0x953b
     928:	130c0000 	movwne	r0, #49152	; 0xc000
     92c:	3a0b0b01 	bcc	2c3538 <_Min_Stack_Size+0x2c3138>
     930:	01053b0b 	tsteq	r5, fp, lsl #22
     934:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     938:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     93c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     940:	0b381349 	bleq	e0566c <_Min_Stack_Size+0xe0526c>
     944:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     948:	3a080300 	bcc	201550 <_Min_Stack_Size+0x201150>
     94c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     950:	000b3813 	andeq	r3, fp, r3, lsl r8
     954:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     958:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     95c:	0b3b0b3a 	bleq	ec364c <_Min_Stack_Size+0xec324c>
     960:	01111927 	tsteq	r1, r7, lsr #18
     964:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     968:	00194296 	mulseq	r9, r6, r2
     96c:	012e1000 	teqeq	lr, r0
     970:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     974:	0b3b0b3a 	bleq	ec3664 <_Min_Stack_Size+0xec3264>
     978:	01111927 	tsteq	r1, r7, lsr #18
     97c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     980:	01194297 			; <UNDEFINED> instruction: 0x01194297
     984:	11000013 	tstne	r0, r3, lsl r0
     988:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     98c:	0b3b0b3a 	bleq	ec367c <_Min_Stack_Size+0xec327c>
     990:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     994:	34120000 	ldrcc	r0, [r2], #-0
     998:	3a080300 	bcc	2015a0 <_Min_Stack_Size+0x2011a0>
     99c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9a0:	00180213 	andseq	r0, r8, r3, lsl r2
     9a4:	012e1300 	teqeq	lr, r0, lsl #6
     9a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     9ac:	0b3b0b3a 	bleq	ec369c <_Min_Stack_Size+0xec329c>
     9b0:	13491927 	movtne	r1, #39207	; 0x9927
     9b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9bc:	00130119 	andseq	r0, r3, r9, lsl r1
     9c0:	00341400 	eorseq	r1, r4, r0, lsl #8
     9c4:	0b3a0e03 	bleq	e841d8 <_Min_Stack_Size+0xe83dd8>
     9c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9cc:	00001802 	andeq	r1, r0, r2, lsl #16
     9d0:	03003415 	movweq	r3, #1045	; 0x415
     9d4:	3b0b3a0e 	blcc	2cf214 <_Min_Stack_Size+0x2cee14>
     9d8:	3f134905 	svccc	0x00134905
     9dc:	00193c19 	andseq	r3, r9, r9, lsl ip
     9e0:	11010000 	mrsne	r0, (UNDEF: 1)
     9e4:	130e2501 	movwne	r2, #58625	; 0xe501
     9e8:	1b0e030b 	blne	38161c <_Min_Stack_Size+0x38121c>
     9ec:	1117550e 	tstne	r7, lr, lsl #10
     9f0:	00171001 	andseq	r1, r7, r1
     9f4:	00240200 	eoreq	r0, r4, r0, lsl #4
     9f8:	0b3e0b0b 	bleq	f8362c <_Min_Stack_Size+0xf8322c>
     9fc:	00000e03 	andeq	r0, r0, r3, lsl #28
     a00:	03001603 	movweq	r1, #1539	; 0x603
     a04:	3b0b3a0e 	blcc	2cf244 <_Min_Stack_Size+0x2cee44>
     a08:	0013490b 	andseq	r4, r3, fp, lsl #18
     a0c:	00240400 	eoreq	r0, r4, r0, lsl #8
     a10:	0b3e0b0b 	bleq	f83644 <_Min_Stack_Size+0xf83244>
     a14:	00000803 	andeq	r0, r0, r3, lsl #16
     a18:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     a1c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     a20:	0b0b0104 	bleq	2c0e38 <_Min_Stack_Size+0x2c0a38>
     a24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a28:	00001301 	andeq	r1, r0, r1, lsl #6
     a2c:	03002807 	movweq	r2, #2055	; 0x807
     a30:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     a34:	00280800 	eoreq	r0, r8, r0, lsl #16
     a38:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     a3c:	16090000 	strne	r0, [r9], -r0
     a40:	3a0e0300 	bcc	381648 <_Min_Stack_Size+0x381248>
     a44:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a48:	0a000013 	beq	a9c <_Min_Stack_Size+0x69c>
     a4c:	0b0b0113 	bleq	2c0ea0 <_Min_Stack_Size+0x2c0aa0>
     a50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a54:	00001301 	andeq	r1, r0, r1, lsl #6
     a58:	03000d0b 	movweq	r0, #3339	; 0xd0b
     a5c:	3b0b3a08 	blcc	2cf284 <_Min_Stack_Size+0x2cee84>
     a60:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     a64:	0c00000b 	stceq	0, cr0, [r0], {11}
     a68:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a70:	0b381349 	bleq	e0579c <_Min_Stack_Size+0xe0539c>
     a74:	130d0000 	movwne	r0, #53248	; 0xd000
     a78:	3a0b0b01 	bcc	2c3684 <_Min_Stack_Size+0x2c3284>
     a7c:	010b3b0b 	tsteq	fp, fp, lsl #22
     a80:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     a84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a88:	0b3b0b3a 	bleq	ec3778 <_Min_Stack_Size+0xec3378>
     a8c:	0b381349 	bleq	e057b8 <_Min_Stack_Size+0xe053b8>
     a90:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     a94:	03193f01 	tsteq	r9, #1, 30
     a98:	3b0b3a0e 	blcc	2cf2d8 <_Min_Stack_Size+0x2ceed8>
     a9c:	1119270b 	tstne	r9, fp, lsl #14
     aa0:	40061201 	andmi	r1, r6, r1, lsl #4
     aa4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     aa8:	00001301 	andeq	r1, r0, r1, lsl #6
     aac:	03000510 	movweq	r0, #1296	; 0x510
     ab0:	3b0b3a0e 	blcc	2cf2f0 <_Min_Stack_Size+0x2ceef0>
     ab4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ab8:	11000018 	tstne	r0, r8, lsl r0
     abc:	0b0b000f 	bleq	2c0b00 <_Min_Stack_Size+0x2c0700>
     ac0:	00001349 	andeq	r1, r0, r9, asr #6
     ac4:	03003412 	movweq	r3, #1042	; 0x412
     ac8:	3b0b3a0e 	blcc	2cf308 <_Min_Stack_Size+0x2cef08>
     acc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ad0:	13000018 	movwne	r0, #24
     ad4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ad8:	0b3a0e03 	bleq	e842ec <_Min_Stack_Size+0xe83eec>
     adc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ae0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ae4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ae8:	00130119 	andseq	r0, r3, r9, lsl r1
     aec:	00051400 	andeq	r1, r5, r0, lsl #8
     af0:	0b3a0e03 	bleq	e84304 <_Min_Stack_Size+0xe83f04>
     af4:	1349053b 	movtne	r0, #38203	; 0x953b
     af8:	00001802 	andeq	r1, r0, r2, lsl #16
     afc:	03003415 	movweq	r3, #1045	; 0x415
     b00:	3b0b3a0e 	blcc	2cf340 <_Min_Stack_Size+0x2cef40>
     b04:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b08:	16000018 			; <UNDEFINED> instruction: 0x16000018
     b0c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b10:	0b3a0e03 	bleq	e84324 <_Min_Stack_Size+0xe83f24>
     b14:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     b18:	01111349 	tsteq	r1, r9, asr #6
     b1c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b20:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b24:	17000013 	smladne	r0, r3, r0, r0
     b28:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b30:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b34:	34180000 	ldrcc	r0, [r8], #-0
     b38:	3a0e0300 	bcc	381740 <_Min_Stack_Size+0x381340>
     b3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b40:	3c193f13 	ldccc	15, cr3, [r9], {19}
     b44:	00000019 	andeq	r0, r0, r9, lsl r0
     b48:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     b4c:	030b130e 	movweq	r1, #45838	; 0xb30e
     b50:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     b54:	10011117 	andne	r1, r1, r7, lsl r1
     b58:	02000017 	andeq	r0, r0, #23
     b5c:	0b0b0024 	bleq	2c0bf4 <_Min_Stack_Size+0x2c07f4>
     b60:	0e030b3e 	vmoveq.16	d3[0], r0
     b64:	16030000 	strne	r0, [r3], -r0
     b68:	3a0e0300 	bcc	381770 <_Min_Stack_Size+0x381370>
     b6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	04000013 	streq	r0, [r0], #-19
     b74:	0b0b0024 	bleq	2c0c0c <_Min_Stack_Size+0x2c080c>
     b78:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     b7c:	35050000 	strcc	r0, [r5, #-0]
     b80:	00134900 	andseq	r4, r3, r0, lsl #18
     b84:	01040600 	tsteq	r4, r0, lsl #12
     b88:	0b3a0b0b 	bleq	e837bc <_Min_Stack_Size+0xe833bc>
     b8c:	1301053b 	movwne	r0, #5435	; 0x153b
     b90:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     b94:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     b98:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     b9c:	08030028 	stmdaeq	r3, {r3, r5}
     ba0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     ba4:	03001609 	movweq	r1, #1545	; 0x609
     ba8:	3b0b3a0e 	blcc	2cf3e8 <_Min_Stack_Size+0x2cefe8>
     bac:	00134905 	andseq	r4, r3, r5, lsl #18
     bb0:	01130a00 	tsteq	r3, r0, lsl #20
     bb4:	0b3a0b0b 	bleq	e837e8 <_Min_Stack_Size+0xe833e8>
     bb8:	1301053b 	movwne	r0, #5435	; 0x153b
     bbc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     bc0:	3a080300 	bcc	2017c8 <_Min_Stack_Size+0x2013c8>
     bc4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bc8:	000b3813 	andeq	r3, fp, r3, lsl r8
     bcc:	000d0c00 	andeq	r0, sp, r0, lsl #24
     bd0:	0b3a0e03 	bleq	e843e4 <_Min_Stack_Size+0xe83fe4>
     bd4:	1349053b 	movtne	r0, #38203	; 0x953b
     bd8:	00000b38 	andeq	r0, r0, r8, lsr fp
     bdc:	0b01130d 	bleq	45818 <_Min_Stack_Size+0x45418>
     be0:	3b0b3a0b 	blcc	2cf414 <_Min_Stack_Size+0x2cf014>
     be4:	0013010b 	andseq	r0, r3, fp, lsl #2
     be8:	000d0e00 	andeq	r0, sp, r0, lsl #28
     bec:	0b3a0e03 	bleq	e84400 <_Min_Stack_Size+0xe84000>
     bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bf4:	00000b38 	andeq	r0, r0, r8, lsr fp
     bf8:	3f012e0f 	svccc	0x00012e0f
     bfc:	3a0e0319 	bcc	381868 <_Min_Stack_Size+0x381468>
     c00:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c04:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c08:	97184006 	ldrls	r4, [r8, -r6]
     c0c:	13011942 	movwne	r1, #6466	; 0x1942
     c10:	05100000 	ldreq	r0, [r0, #-0]
     c14:	3a0e0300 	bcc	38181c <_Min_Stack_Size+0x38141c>
     c18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c1c:	00180213 	andseq	r0, r8, r3, lsl r2
     c20:	000f1100 	andeq	r1, pc, r0, lsl #2
     c24:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     c28:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     c2c:	03193f01 	tsteq	r9, #1, 30
     c30:	3b0b3a0e 	blcc	2cf470 <_Min_Stack_Size+0x2cf070>
     c34:	11192705 	tstne	r9, r5, lsl #14
     c38:	40061201 	andmi	r1, r6, r1, lsl #4
     c3c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c40:	00001301 	andeq	r1, r0, r1, lsl #6
     c44:	03000513 	movweq	r0, #1299	; 0x513
     c48:	3b0b3a0e 	blcc	2cf488 <_Min_Stack_Size+0x2cf088>
     c4c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     c50:	14000018 	strne	r0, [r0], #-24
     c54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c60:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     c64:	03193f01 	tsteq	r9, #1, 30
     c68:	3b0b3a0e 	blcc	2cf4a8 <_Min_Stack_Size+0x2cf0a8>
     c6c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     c70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c74:	97184006 	ldrls	r4, [r8, -r6]
     c78:	13011942 	movwne	r1, #6466	; 0x1942
     c7c:	34160000 	ldrcc	r0, [r6], #-0
     c80:	3a080300 	bcc	201888 <_Min_Stack_Size+0x201488>
     c84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c88:	00180213 	andseq	r0, r8, r3, lsl r2
     c8c:	00341700 	eorseq	r1, r4, r0, lsl #14
     c90:	0b3a0e03 	bleq	e844a4 <_Min_Stack_Size+0xe840a4>
     c94:	1349053b 	movtne	r0, #38203	; 0x953b
     c98:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     c9c:	01000000 	mrseq	r0, (UNDEF: 0)
     ca0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ca4:	0e030b13 	vmoveq.32	d3[0], r0
     ca8:	17550e1b 	smmlane	r5, fp, lr, r0
     cac:	17100111 			; <UNDEFINED> instruction: 0x17100111
     cb0:	24020000 	strcs	r0, [r2], #-0
     cb4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     cb8:	000e030b 	andeq	r0, lr, fp, lsl #6
     cbc:	00160300 	andseq	r0, r6, r0, lsl #6
     cc0:	0b3a0e03 	bleq	e844d4 <_Min_Stack_Size+0xe840d4>
     cc4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cc8:	24040000 	strcs	r0, [r4], #-0
     ccc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     cd0:	0008030b 	andeq	r0, r8, fp, lsl #6
     cd4:	00350500 	eorseq	r0, r5, r0, lsl #10
     cd8:	00001349 	andeq	r1, r0, r9, asr #6
     cdc:	49010106 	stmdbmi	r1, {r1, r2, r8}
     ce0:	00130113 	andseq	r0, r3, r3, lsl r1
     ce4:	00210700 	eoreq	r0, r1, r0, lsl #14
     ce8:	0b2f1349 	bleq	bc5a14 <_Min_Stack_Size+0xbc5614>
     cec:	04080000 	streq	r0, [r8], #-0
     cf0:	3a0b0b01 	bcc	2c38fc <_Min_Stack_Size+0x2c34fc>
     cf4:	01053b0b 	tsteq	r5, fp, lsl #22
     cf8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     cfc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     d00:	00000d1c 	andeq	r0, r0, ip, lsl sp
     d04:	0300280a 	movweq	r2, #2058	; 0x80a
     d08:	000d1c08 	andeq	r1, sp, r8, lsl #24
     d0c:	00160b00 	andseq	r0, r6, r0, lsl #22
     d10:	0b3a0e03 	bleq	e84524 <_Min_Stack_Size+0xe84124>
     d14:	1349053b 	movtne	r0, #38203	; 0x953b
     d18:	130c0000 	movwne	r0, #49152	; 0xc000
     d1c:	3a0b0b01 	bcc	2c3928 <_Min_Stack_Size+0x2c3528>
     d20:	01053b0b 	tsteq	r5, fp, lsl #22
     d24:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     d28:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d30:	0b381349 	bleq	e05a5c <_Min_Stack_Size+0xe0565c>
     d34:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     d38:	3a0e0300 	bcc	381940 <_Min_Stack_Size+0x381540>
     d3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d40:	000b3813 	andeq	r3, fp, r3, lsl r8
     d44:	01130f00 	tsteq	r3, r0, lsl #30
     d48:	0b3a0b0b 	bleq	e8397c <_Min_Stack_Size+0xe8357c>
     d4c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     d50:	0d100000 	ldceq	0, cr0, [r0, #-0]
     d54:	3a0e0300 	bcc	38195c <_Min_Stack_Size+0x38155c>
     d58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d5c:	000b3813 	andeq	r3, fp, r3, lsl r8
     d60:	012e1100 	teqeq	lr, r0, lsl #2
     d64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d68:	0b3b0b3a 	bleq	ec3a58 <_Min_Stack_Size+0xec3658>
     d6c:	01111927 	tsteq	r1, r7, lsr #18
     d70:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d74:	01194296 			; <UNDEFINED> instruction: 0x01194296
     d78:	12000013 	andne	r0, r0, #19
     d7c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d80:	0b3b0b3a 	bleq	ec3a70 <_Min_Stack_Size+0xec3670>
     d84:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d88:	0f130000 	svceq	0x00130000
     d8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     d90:	14000013 	strne	r0, [r0], #-19
     d94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d98:	0b3a0e03 	bleq	e845ac <_Min_Stack_Size+0xe841ac>
     d9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     da0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     da4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     da8:	00130119 	andseq	r0, r3, r9, lsl r1
     dac:	00051500 	andeq	r1, r5, r0, lsl #10
     db0:	0b3a0e03 	bleq	e845c4 <_Min_Stack_Size+0xe841c4>
     db4:	1349053b 	movtne	r0, #38203	; 0x953b
     db8:	00001802 	andeq	r1, r0, r2, lsl #16
     dbc:	03003416 	movweq	r3, #1046	; 0x416
     dc0:	3b0b3a0e 	blcc	2cf600 <_Min_Stack_Size+0x2cf200>
     dc4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     dc8:	17000018 	smladne	r0, r8, r0, r0
     dcc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     dd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     dd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dd8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     ddc:	03193f01 	tsteq	r9, #1, 30
     de0:	3b0b3a0e 	blcc	2cf620 <_Min_Stack_Size+0x2cf220>
     de4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     de8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     dec:	97184006 	ldrls	r4, [r8, -r6]
     df0:	13011942 	movwne	r1, #6466	; 0x1942
     df4:	34190000 	ldrcc	r0, [r9], #-0
     df8:	3a0e0300 	bcc	381a00 <_Min_Stack_Size+0x381600>
     dfc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e00:	3c193f13 	ldccc	15, cr3, [r9], {19}
     e04:	00000019 	andeq	r0, r0, r9, lsl r0
     e08:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     e0c:	030b130e 	movweq	r1, #45838	; 0xb30e
     e10:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     e14:	10011117 	andne	r1, r1, r7, lsl r1
     e18:	02000017 	andeq	r0, r0, #23
     e1c:	0b0b0024 	bleq	2c0eb4 <_Min_Stack_Size+0x2c0ab4>
     e20:	0e030b3e 	vmoveq.16	d3[0], r0
     e24:	16030000 	strne	r0, [r3], -r0
     e28:	3a0e0300 	bcc	381a30 <_Min_Stack_Size+0x381630>
     e2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e30:	04000013 	streq	r0, [r0], #-19
     e34:	0b0b0024 	bleq	2c0ecc <_Min_Stack_Size+0x2c0acc>
     e38:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e3c:	35050000 	strcc	r0, [r5, #-0]
     e40:	00134900 	andseq	r4, r3, r0, lsl #18
     e44:	01040600 	tsteq	r4, r0, lsl #12
     e48:	0b3a0b0b 	bleq	e83a7c <_Min_Stack_Size+0xe8367c>
     e4c:	1301053b 	movwne	r0, #5435	; 0x153b
     e50:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     e54:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     e58:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     e5c:	08030028 	stmdaeq	r3, {r3, r5}
     e60:	00000d1c 	andeq	r0, r0, ip, lsl sp
     e64:	03001609 	movweq	r1, #1545	; 0x609
     e68:	3b0b3a0e 	blcc	2cf6a8 <_Min_Stack_Size+0x2cf2a8>
     e6c:	00134905 	andseq	r4, r3, r5, lsl #18
     e70:	01130a00 	tsteq	r3, r0, lsl #20
     e74:	0b3a0b0b 	bleq	e83aa8 <_Min_Stack_Size+0xe836a8>
     e78:	1301053b 	movwne	r0, #5435	; 0x153b
     e7c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     e80:	3a080300 	bcc	201a88 <_Min_Stack_Size+0x201688>
     e84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e88:	000b3813 	andeq	r3, fp, r3, lsl r8
     e8c:	000d0c00 	andeq	r0, sp, r0, lsl #24
     e90:	0b3a0e03 	bleq	e846a4 <_Min_Stack_Size+0xe842a4>
     e94:	1349053b 	movtne	r0, #38203	; 0x953b
     e98:	00000b38 	andeq	r0, r0, r8, lsr fp
     e9c:	0b01040d 	bleq	41ed8 <_Min_Stack_Size+0x41ad8>
     ea0:	3b0b3a0b 	blcc	2cf6d4 <_Min_Stack_Size+0x2cf2d4>
     ea4:	0013010b 	andseq	r0, r3, fp, lsl #2
     ea8:	01130e00 	tsteq	r3, r0, lsl #28
     eac:	0b3a0b0b 	bleq	e83ae0 <_Min_Stack_Size+0xe836e0>
     eb0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     eb4:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; ebc <_Min_Stack_Size+0xabc>
     eb8:	3a0e0300 	bcc	381ac0 <_Min_Stack_Size+0x3816c0>
     ebc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ec0:	000b3813 	andeq	r3, fp, r3, lsl r8
     ec4:	002e1000 	eoreq	r1, lr, r0
     ec8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ecc:	0b3b0b3a 	bleq	ec3bbc <_Min_Stack_Size+0xec37bc>
     ed0:	01111927 	tsteq	r1, r7, lsr #18
     ed4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ed8:	00194297 	mulseq	r9, r7, r2
     edc:	012e1100 	teqeq	lr, r0, lsl #2
     ee0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ee4:	0b3b0b3a 	bleq	ec3bd4 <_Min_Stack_Size+0xec37d4>
     ee8:	01111927 	tsteq	r1, r7, lsr #18
     eec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ef0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ef4:	12000013 	andne	r0, r0, #19
     ef8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     efc:	0b3b0b3a 	bleq	ec3bec <_Min_Stack_Size+0xec37ec>
     f00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f04:	34130000 	ldrcc	r0, [r3], #-0
     f08:	3a080300 	bcc	201b10 <_Min_Stack_Size+0x201710>
     f0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f10:	00180213 	andseq	r0, r8, r3, lsl r2
     f14:	000f1400 	andeq	r1, pc, r0, lsl #8
     f18:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f1c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     f20:	03193f01 	tsteq	r9, #1, 30
     f24:	3b0b3a0e 	blcc	2cf764 <_Min_Stack_Size+0x2cf364>
     f28:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f30:	97184006 	ldrls	r4, [r8, -r6]
     f34:	13011942 	movwne	r1, #6466	; 0x1942
     f38:	34160000 	ldrcc	r0, [r6], #-0
     f3c:	3a0e0300 	bcc	381b44 <_Min_Stack_Size+0x381744>
     f40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f44:	00180213 	andseq	r0, r8, r3, lsl r2
     f48:	012e1700 	teqeq	lr, r0, lsl #14
     f4c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f54:	13491927 	movtne	r1, #39207	; 0x9927
     f58:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f60:	00130119 	andseq	r0, r3, r9, lsl r1
     f64:	00051800 	andeq	r1, r5, r0, lsl #16
     f68:	0b3a0e03 	bleq	e8477c <_Min_Stack_Size+0xe8437c>
     f6c:	1349053b 	movtne	r0, #38203	; 0x953b
     f70:	00001802 	andeq	r1, r0, r2, lsl #16
     f74:	03003419 	movweq	r3, #1049	; 0x419
     f78:	3b0b3a0e 	blcc	2cf7b8 <_Min_Stack_Size+0x2cf3b8>
     f7c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     f80:	1a000018 	bne	fe8 <_Min_Stack_Size+0xbe8>
     f84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f88:	0b3a0e03 	bleq	e8479c <_Min_Stack_Size+0xe8439c>
     f8c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f94:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f98:	00130119 	andseq	r0, r3, r9, lsl r1
     f9c:	00341b00 	eorseq	r1, r4, r0, lsl #22
     fa0:	0b3a0e03 	bleq	e847b4 <_Min_Stack_Size+0xe843b4>
     fa4:	1349053b 	movtne	r0, #38203	; 0x953b
     fa8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     fac:	01000000 	mrseq	r0, (UNDEF: 0)
     fb0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     fb4:	0e030b13 	vmoveq.32	d3[0], r0
     fb8:	17550e1b 	smmlane	r5, fp, lr, r0
     fbc:	17100111 			; <UNDEFINED> instruction: 0x17100111
     fc0:	24020000 	strcs	r0, [r2], #-0
     fc4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fc8:	000e030b 	andeq	r0, lr, fp, lsl #6
     fcc:	00160300 	andseq	r0, r6, r0, lsl #6
     fd0:	0b3a0e03 	bleq	e847e4 <_Min_Stack_Size+0xe843e4>
     fd4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fd8:	24040000 	strcs	r0, [r4], #-0
     fdc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fe0:	0008030b 	andeq	r0, r8, fp, lsl #6
     fe4:	00350500 	eorseq	r0, r5, r0, lsl #10
     fe8:	00001349 	andeq	r1, r0, r9, asr #6
     fec:	0b010406 	bleq	4200c <_Min_Stack_Size+0x41c0c>
     ff0:	3b0b3a0b 	blcc	2cf824 <_Min_Stack_Size+0x2cf424>
     ff4:	00130105 	andseq	r0, r3, r5, lsl #2
     ff8:	00280700 	eoreq	r0, r8, r0, lsl #14
     ffc:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1000:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1004:	1c080300 	stcne	3, cr0, [r8], {-0}
    1008:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    100c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1010:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1014:	00001349 	andeq	r1, r0, r9, asr #6
    1018:	0b01130a 	bleq	45c48 <_Min_Stack_Size+0x45848>
    101c:	3b0b3a05 	blcc	2cf838 <_Min_Stack_Size+0x2cf438>
    1020:	00130105 	andseq	r0, r3, r5, lsl #2
    1024:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1028:	0b3a0803 	bleq	e8303c <_Min_Stack_Size+0xe82c3c>
    102c:	1349053b 	movtne	r0, #38203	; 0x953b
    1030:	00000b38 	andeq	r0, r0, r8, lsr fp
    1034:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1038:	3b0b3a0e 	blcc	2cf878 <_Min_Stack_Size+0x2cf478>
    103c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1040:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1044:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1048:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    104c:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
    1050:	010e0000 	mrseq	r0, (UNDEF: 14)
    1054:	01134901 	tsteq	r3, r1, lsl #18
    1058:	0f000013 	svceq	0x00000013
    105c:	13490021 	movtne	r0, #36897	; 0x9021
    1060:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1064:	0b011310 	bleq	45cac <_Min_Stack_Size+0x458ac>
    1068:	3b0b3a0b 	blcc	2cf89c <_Min_Stack_Size+0x2cf49c>
    106c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1070:	000d1100 	andeq	r1, sp, r0, lsl #2
    1074:	0b3a0e03 	bleq	e84888 <_Min_Stack_Size+0xe84488>
    1078:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    107c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1080:	3f002e12 	svccc	0x00002e12
    1084:	3a0e0319 	bcc	381cf0 <_Min_Stack_Size+0x3818f0>
    1088:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    108c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1090:	96184006 	ldrls	r4, [r8], -r6
    1094:	00001942 	andeq	r1, r0, r2, asr #18
    1098:	3f012e13 	svccc	0x00012e13
    109c:	3a0e0319 	bcc	381d08 <_Min_Stack_Size+0x381908>
    10a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10a8:	97184006 	ldrls	r4, [r8, -r6]
    10ac:	13011942 	movwne	r1, #6466	; 0x1942
    10b0:	05140000 	ldreq	r0, [r4, #-0]
    10b4:	3a0e0300 	bcc	381cbc <_Min_Stack_Size+0x3818bc>
    10b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10bc:	00180213 	andseq	r0, r8, r3, lsl r2
    10c0:	00341500 	eorseq	r1, r4, r0, lsl #10
    10c4:	0b3a0e03 	bleq	e848d8 <_Min_Stack_Size+0xe844d8>
    10c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10cc:	00001802 	andeq	r1, r0, r2, lsl #16
    10d0:	0b000f16 	bleq	4d30 <_Min_Stack_Size+0x4930>
    10d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    10d8:	002e1700 	eoreq	r1, lr, r0, lsl #14
    10dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10e0:	0b3b0b3a 	bleq	ec3dd0 <_Min_Stack_Size+0xec39d0>
    10e4:	01111927 	tsteq	r1, r7, lsr #18
    10e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10ec:	00194297 	mulseq	r9, r7, r2
    10f0:	012e1800 	teqeq	lr, r0, lsl #16
    10f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10fc:	01111927 	tsteq	r1, r7, lsr #18
    1100:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1104:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1108:	19000013 	stmdbne	r0, {r0, r1, r4}
    110c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1110:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1114:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1118:	341a0000 	ldrcc	r0, [sl], #-0
    111c:	3a0e0300 	bcc	381d24 <_Min_Stack_Size+0x381924>
    1120:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1124:	00180213 	andseq	r0, r8, r3, lsl r2
    1128:	012e1b00 	teqeq	lr, r0, lsl #22
    112c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1130:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1134:	13491927 	movtne	r1, #39207	; 0x9927
    1138:	06120111 			; <UNDEFINED> instruction: 0x06120111
    113c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1140:	00130119 	andseq	r0, r3, r9, lsl r1
    1144:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1148:	0b3a0e03 	bleq	e8495c <_Min_Stack_Size+0xe8455c>
    114c:	1349053b 	movtne	r0, #38203	; 0x953b
    1150:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1154:	01000000 	mrseq	r0, (UNDEF: 0)
    1158:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    115c:	0e030b13 	vmoveq.32	d3[0], r0
    1160:	17550e1b 	smmlane	r5, fp, lr, r0
    1164:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1168:	24020000 	strcs	r0, [r2], #-0
    116c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1170:	000e030b 	andeq	r0, lr, fp, lsl #6
    1174:	00160300 	andseq	r0, r6, r0, lsl #6
    1178:	0b3a0e03 	bleq	e8498c <_Min_Stack_Size+0xe8458c>
    117c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1180:	24040000 	strcs	r0, [r4], #-0
    1184:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1188:	0008030b 	andeq	r0, r8, fp, lsl #6
    118c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1190:	00001349 	andeq	r1, r0, r9, asr #6
    1194:	49010106 	stmdbmi	r1, {r1, r2, r8}
    1198:	00130113 	andseq	r0, r3, r3, lsl r1
    119c:	00210700 	eoreq	r0, r1, r0, lsl #14
    11a0:	0b2f1349 	bleq	bc5ecc <_Min_Stack_Size+0xbc5acc>
    11a4:	04080000 	streq	r0, [r8], #-0
    11a8:	3a0b0b01 	bcc	2c3db4 <_Min_Stack_Size+0x2c39b4>
    11ac:	01053b0b 	tsteq	r5, fp, lsl #22
    11b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    11b4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    11b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    11bc:	0300280a 	movweq	r2, #2058	; 0x80a
    11c0:	000d1c08 	andeq	r1, sp, r8, lsl #24
    11c4:	00160b00 	andseq	r0, r6, r0, lsl #22
    11c8:	0b3a0e03 	bleq	e849dc <_Min_Stack_Size+0xe845dc>
    11cc:	1349053b 	movtne	r0, #38203	; 0x953b
    11d0:	130c0000 	movwne	r0, #49152	; 0xc000
    11d4:	3a0b0b01 	bcc	2c3de0 <_Min_Stack_Size+0x2c39e0>
    11d8:	01053b0b 	tsteq	r5, fp, lsl #22
    11dc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    11e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    11e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11e8:	0b381349 	bleq	e05f14 <_Min_Stack_Size+0xe05b14>
    11ec:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    11f0:	3a080300 	bcc	201df8 <_Min_Stack_Size+0x2019f8>
    11f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11f8:	000b3813 	andeq	r3, fp, r3, lsl r8
    11fc:	01130f00 	tsteq	r3, r0, lsl #30
    1200:	0b3a0b0b 	bleq	e83e34 <_Min_Stack_Size+0xe83a34>
    1204:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1208:	0d100000 	ldceq	0, cr0, [r0, #-0]
    120c:	3a0e0300 	bcc	381e14 <_Min_Stack_Size+0x381a14>
    1210:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1214:	000b3813 	andeq	r3, fp, r3, lsl r8
    1218:	002e1100 	eoreq	r1, lr, r0, lsl #2
    121c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1220:	0b3b0b3a 	bleq	ec3f10 <_Min_Stack_Size+0xec3b10>
    1224:	01111927 	tsteq	r1, r7, lsr #18
    1228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    122c:	00194296 	mulseq	r9, r6, r2
    1230:	012e1200 	teqeq	lr, r0, lsl #4
    1234:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1238:	0b3b0b3a 	bleq	ec3f28 <_Min_Stack_Size+0xec3b28>
    123c:	01111927 	tsteq	r1, r7, lsr #18
    1240:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1244:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1248:	13000013 	movwne	r0, #19
    124c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1250:	0b3b0b3a 	bleq	ec3f40 <_Min_Stack_Size+0xec3b40>
    1254:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1258:	34140000 	ldrcc	r0, [r4], #-0
    125c:	3a0e0300 	bcc	381e64 <_Min_Stack_Size+0x381a64>
    1260:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1264:	00180213 	andseq	r0, r8, r3, lsl r2
    1268:	000f1500 	andeq	r1, pc, r0, lsl #10
    126c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1270:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1274:	03193f01 	tsteq	r9, #1, 30
    1278:	3b0b3a0e 	blcc	2cfab8 <_Min_Stack_Size+0x2cf6b8>
    127c:	11192705 	tstne	r9, r5, lsl #14
    1280:	40061201 	andmi	r1, r6, r1, lsl #4
    1284:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1288:	00001301 	andeq	r1, r0, r1, lsl #6
    128c:	03000517 	movweq	r0, #1303	; 0x517
    1290:	3b0b3a0e 	blcc	2cfad0 <_Min_Stack_Size+0x2cf6d0>
    1294:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1298:	18000018 	stmdane	r0, {r3, r4}
    129c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    12a0:	0b3a0e03 	bleq	e84ab4 <_Min_Stack_Size+0xe846b4>
    12a4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    12a8:	01111349 	tsteq	r1, r9, asr #6
    12ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    12b4:	19000013 	stmdbne	r0, {r0, r1, r4}
    12b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    12c4:	341a0000 	ldrcc	r0, [sl], #-0
    12c8:	3a080300 	bcc	201ed0 <_Min_Stack_Size+0x201ad0>
    12cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d0:	00180213 	andseq	r0, r8, r3, lsl r2
    12d4:	00341b00 	eorseq	r1, r4, r0, lsl #22
    12d8:	0b3a0e03 	bleq	e84aec <_Min_Stack_Size+0xe846ec>
    12dc:	1349053b 	movtne	r0, #38203	; 0x953b
    12e0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    12e4:	01000000 	mrseq	r0, (UNDEF: 0)
    12e8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    12ec:	0e030b13 	vmoveq.32	d3[0], r0
    12f0:	17550e1b 	smmlane	r5, fp, lr, r0
    12f4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    12f8:	24020000 	strcs	r0, [r2], #-0
    12fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1300:	000e030b 	andeq	r0, lr, fp, lsl #6
    1304:	00160300 	andseq	r0, r6, r0, lsl #6
    1308:	0b3a0e03 	bleq	e84b1c <_Min_Stack_Size+0xe8471c>
    130c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1310:	24040000 	strcs	r0, [r4], #-0
    1314:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1318:	0008030b 	andeq	r0, r8, fp, lsl #6
    131c:	01010500 	tsteq	r1, r0, lsl #10
    1320:	13011349 	movwne	r1, #4937	; 0x1349
    1324:	21060000 	mrscs	r0, (UNDEF: 6)
    1328:	2f134900 	svccs	0x00134900
    132c:	0700000b 	streq	r0, [r0, -fp]
    1330:	13490035 	movtne	r0, #36917	; 0x9035
    1334:	04080000 	streq	r0, [r8], #-0
    1338:	3a0b0b01 	bcc	2c3f44 <_Min_Stack_Size+0x2c3b44>
    133c:	01053b0b 	tsteq	r5, fp, lsl #22
    1340:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1344:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1348:	00000d1c 	andeq	r0, r0, ip, lsl sp
    134c:	0300280a 	movweq	r2, #2058	; 0x80a
    1350:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1354:	00160b00 	andseq	r0, r6, r0, lsl #22
    1358:	0b3a0e03 	bleq	e84b6c <_Min_Stack_Size+0xe8476c>
    135c:	1349053b 	movtne	r0, #38203	; 0x953b
    1360:	130c0000 	movwne	r0, #49152	; 0xc000
    1364:	3a0b0b01 	bcc	2c3f70 <_Min_Stack_Size+0x2c3b70>
    1368:	01053b0b 	tsteq	r5, fp, lsl #22
    136c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1370:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1374:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1378:	0b381349 	bleq	e060a4 <_Min_Stack_Size+0xe05ca4>
    137c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1380:	3a080300 	bcc	201f88 <_Min_Stack_Size+0x201b88>
    1384:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1388:	000b3813 	andeq	r3, fp, r3, lsl r8
    138c:	01130f00 	tsteq	r3, r0, lsl #30
    1390:	0b3a0b0b 	bleq	e83fc4 <_Min_Stack_Size+0xe83bc4>
    1394:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1398:	0d100000 	ldceq	0, cr0, [r0, #-0]
    139c:	3a0e0300 	bcc	381fa4 <_Min_Stack_Size+0x381ba4>
    13a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a4:	000b3813 	andeq	r3, fp, r3, lsl r8
    13a8:	000f1100 	andeq	r1, pc, r0, lsl #2
    13ac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    13b0:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    13b4:	03193f01 	tsteq	r9, #1, 30
    13b8:	3b0b3a0e 	blcc	2cfbf8 <_Min_Stack_Size+0x2cf7f8>
    13bc:	1119270b 	tstne	r9, fp, lsl #14
    13c0:	40061201 	andmi	r1, r6, r1, lsl #4
    13c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    13c8:	00001301 	andeq	r1, r0, r1, lsl #6
    13cc:	03000513 	movweq	r0, #1299	; 0x513
    13d0:	3b0b3a0e 	blcc	2cfc10 <_Min_Stack_Size+0x2cf810>
    13d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13d8:	14000018 	strne	r0, [r0], #-24
    13dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    13e0:	0b3b0b3a 	bleq	ec40d0 <_Min_Stack_Size+0xec3cd0>
    13e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    13e8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    13ec:	03193f01 	tsteq	r9, #1, 30
    13f0:	3b0b3a0e 	blcc	2cfc30 <_Min_Stack_Size+0x2cf830>
    13f4:	11192705 	tstne	r9, r5, lsl #14
    13f8:	40061201 	andmi	r1, r6, r1, lsl #4
    13fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1400:	00001301 	andeq	r1, r0, r1, lsl #6
    1404:	03000516 	movweq	r0, #1302	; 0x516
    1408:	3b0b3a0e 	blcc	2cfc48 <_Min_Stack_Size+0x2cf848>
    140c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1410:	17000018 	smladne	r0, r8, r0, r0
    1414:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1418:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    141c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1420:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1424:	03193f01 	tsteq	r9, #1, 30
    1428:	3b0b3a0e 	blcc	2cfc68 <_Min_Stack_Size+0x2cf868>
    142c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1430:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1434:	97184006 	ldrls	r4, [r8, -r6]
    1438:	13011942 	movwne	r1, #6466	; 0x1942
    143c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1440:	03193f00 	tsteq	r9, #0, 30
    1444:	3b0b3a0e 	blcc	2cfc84 <_Min_Stack_Size+0x2cf884>
    1448:	11192705 	tstne	r9, r5, lsl #14
    144c:	40061201 	andmi	r1, r6, r1, lsl #4
    1450:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1454:	341a0000 	ldrcc	r0, [sl], #-0
    1458:	3a0e0300 	bcc	382060 <_Min_Stack_Size+0x381c60>
    145c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1460:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1464:	00000019 	andeq	r0, r0, r9, lsl r0
    1468:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    146c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1470:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1474:	10011117 	andne	r1, r1, r7, lsl r1
    1478:	02000017 	andeq	r0, r0, #23
    147c:	0b0b0024 	bleq	2c1514 <_Min_Stack_Size+0x2c1114>
    1480:	0e030b3e 	vmoveq.16	d3[0], r0
    1484:	16030000 	strne	r0, [r3], -r0
    1488:	3a0e0300 	bcc	382090 <_Min_Stack_Size+0x381c90>
    148c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1490:	04000013 	streq	r0, [r0], #-19
    1494:	0b0b0024 	bleq	2c152c <_Min_Stack_Size+0x2c112c>
    1498:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    149c:	35050000 	strcc	r0, [r5, #-0]
    14a0:	00134900 	andseq	r4, r3, r0, lsl #18
    14a4:	01040600 	tsteq	r4, r0, lsl #12
    14a8:	0b3a0b0b 	bleq	e840dc <_Min_Stack_Size+0xe83cdc>
    14ac:	1301053b 	movwne	r0, #5435	; 0x153b
    14b0:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    14b4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    14b8:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    14bc:	08030028 	stmdaeq	r3, {r3, r5}
    14c0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    14c4:	03001609 	movweq	r1, #1545	; 0x609
    14c8:	3b0b3a0e 	blcc	2cfd08 <_Min_Stack_Size+0x2cf908>
    14cc:	00134905 	andseq	r4, r3, r5, lsl #18
    14d0:	01130a00 	tsteq	r3, r0, lsl #20
    14d4:	0b3a0b0b 	bleq	e84108 <_Min_Stack_Size+0xe83d08>
    14d8:	1301053b 	movwne	r0, #5435	; 0x153b
    14dc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    14e0:	3a080300 	bcc	2020e8 <_Min_Stack_Size+0x201ce8>
    14e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    14ec:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    14f0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    14f4:	0b3b0b3a 	bleq	ec41e4 <_Min_Stack_Size+0xec3de4>
    14f8:	01111927 	tsteq	r1, r7, lsr #18
    14fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1500:	00194296 	mulseq	r9, r6, r2
    1504:	012e0d00 	teqeq	lr, r0, lsl #26
    1508:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    150c:	0b3b0b3a 	bleq	ec41fc <_Min_Stack_Size+0xec3dfc>
    1510:	01111927 	tsteq	r1, r7, lsr #18
    1514:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1518:	01194297 			; <UNDEFINED> instruction: 0x01194297
    151c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1520:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1524:	0b3b0b3a 	bleq	ec4214 <_Min_Stack_Size+0xec3e14>
    1528:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    152c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1530:	03193f00 	tsteq	r9, #0, 30
    1534:	3b0b3a0e 	blcc	2cfd74 <_Min_Stack_Size+0x2cf974>
    1538:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    153c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1540:	97184006 	ldrls	r4, [r8, -r6]
    1544:	00001942 	andeq	r1, r0, r2, asr #18
    1548:	3f012e10 	svccc	0x00012e10
    154c:	3a0e0319 	bcc	3821b8 <_Min_Stack_Size+0x381db8>
    1550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1554:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1558:	97184006 	ldrls	r4, [r8, -r6]
    155c:	13011942 	movwne	r1, #6466	; 0x1942
    1560:	05110000 	ldreq	r0, [r1, #-0]
    1564:	3a0e0300 	bcc	38216c <_Min_Stack_Size+0x381d6c>
    1568:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    156c:	00180213 	andseq	r0, r8, r3, lsl r2
    1570:	012e1200 	teqeq	lr, r0, lsl #4
    1574:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    157c:	13491927 	movtne	r1, #39207	; 0x9927
    1580:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1584:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1588:	00130119 	andseq	r0, r3, r9, lsl r1
    158c:	00341300 	eorseq	r1, r4, r0, lsl #6
    1590:	0b3a0e03 	bleq	e84da4 <_Min_Stack_Size+0xe849a4>
    1594:	1349053b 	movtne	r0, #38203	; 0x953b
    1598:	00001802 	andeq	r1, r0, r2, lsl #16
    159c:	03003414 	movweq	r3, #1044	; 0x414
    15a0:	3b0b3a0e 	blcc	2cfde0 <_Min_Stack_Size+0x2cf9e0>
    15a4:	3f134905 	svccc	0x00134905
    15a8:	00193c19 	andseq	r3, r9, r9, lsl ip
    15ac:	11010000 	mrsne	r0, (UNDEF: 1)
    15b0:	130e2501 	movwne	r2, #58625	; 0xe501
    15b4:	1b0e030b 	blne	3821e8 <_Min_Stack_Size+0x381de8>
    15b8:	1117550e 	tstne	r7, lr, lsl #10
    15bc:	00171001 	andseq	r1, r7, r1
    15c0:	01040200 	mrseq	r0, R12_usr
    15c4:	0b0b0e03 	bleq	2c4dd8 <_Min_Stack_Size+0x2c49d8>
    15c8:	0b3b0b3a 	bleq	ec42b8 <_Min_Stack_Size+0xec3eb8>
    15cc:	00001301 	andeq	r1, r0, r1, lsl #6
    15d0:	03002803 	movweq	r2, #2051	; 0x803
    15d4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    15d8:	00240400 	eoreq	r0, r4, r0, lsl #8
    15dc:	0b3e0b0b 	bleq	f84210 <_Min_Stack_Size+0xf83e10>
    15e0:	00000e03 	andeq	r0, r0, r3, lsl #28
    15e4:	03001605 	movweq	r1, #1541	; 0x605
    15e8:	3b0b3a0e 	blcc	2cfe28 <_Min_Stack_Size+0x2cfa28>
    15ec:	0013490b 	andseq	r4, r3, fp, lsl #18
    15f0:	00240600 	eoreq	r0, r4, r0, lsl #12
    15f4:	0b3e0b0b 	bleq	f84228 <_Min_Stack_Size+0xf83e28>
    15f8:	00000803 	andeq	r0, r0, r3, lsl #16
    15fc:	49003507 	stmdbmi	r0, {r0, r1, r2, r8, sl, ip, sp}
    1600:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1604:	13490101 	movtne	r0, #37121	; 0x9101
    1608:	00001301 	andeq	r1, r0, r1, lsl #6
    160c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1610:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1614:	01040a00 	tsteq	r4, r0, lsl #20
    1618:	0b3a0b0b 	bleq	e8424c <_Min_Stack_Size+0xe83e4c>
    161c:	1301053b 	movwne	r0, #5435	; 0x153b
    1620:	160b0000 	strne	r0, [fp], -r0
    1624:	3a0e0300 	bcc	38222c <_Min_Stack_Size+0x381e2c>
    1628:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    162c:	0c000013 	stceq	0, cr0, [r0], {19}
    1630:	0b0b0113 	bleq	2c1a84 <_Min_Stack_Size+0x2c1684>
    1634:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1638:	00001301 	andeq	r1, r0, r1, lsl #6
    163c:	03000d0d 	movweq	r0, #3341	; 0xd0d
    1640:	3b0b3a08 	blcc	2cfe68 <_Min_Stack_Size+0x2cfa68>
    1644:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1648:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    164c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1650:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1654:	0b381349 	bleq	e06380 <_Min_Stack_Size+0xe05f80>
    1658:	130f0000 	movwne	r0, #61440	; 0xf000
    165c:	3a0b0b01 	bcc	2c4268 <_Min_Stack_Size+0x2c3e68>
    1660:	010b3b0b 	tsteq	fp, fp, lsl #22
    1664:	10000013 	andne	r0, r0, r3, lsl r0
    1668:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    166c:	0b3b0b3a 	bleq	ec435c <_Min_Stack_Size+0xec3f5c>
    1670:	0b381349 	bleq	e0639c <_Min_Stack_Size+0xe05f9c>
    1674:	04110000 	ldreq	r0, [r1], #-0
    1678:	3a0b0b01 	bcc	2c4284 <_Min_Stack_Size+0x2c3e84>
    167c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1680:	12000013 	andne	r0, r0, #19
    1684:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1688:	0b3a0e03 	bleq	e84e9c <_Min_Stack_Size+0xe84a9c>
    168c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1690:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1694:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1698:	00130119 	andseq	r0, r3, r9, lsl r1
    169c:	00051300 	andeq	r1, r5, r0, lsl #6
    16a0:	0b3a0803 	bleq	e836b4 <_Min_Stack_Size+0xe832b4>
    16a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16a8:	00001802 	andeq	r1, r0, r2, lsl #16
    16ac:	03003414 	movweq	r3, #1044	; 0x414
    16b0:	3b0b3a0e 	blcc	2cfef0 <_Min_Stack_Size+0x2cfaf0>
    16b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16b8:	15000018 	strne	r0, [r0, #-24]
    16bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    16c0:	0b3a0e03 	bleq	e84ed4 <_Min_Stack_Size+0xe84ad4>
    16c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    16d0:	00130119 	andseq	r0, r3, r9, lsl r1
    16d4:	00051600 	andeq	r1, r5, r0, lsl #12
    16d8:	0b3a0e03 	bleq	e84eec <_Min_Stack_Size+0xe84aec>
    16dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16e0:	00001802 	andeq	r1, r0, r2, lsl #16
    16e4:	3f012e17 	svccc	0x00012e17
    16e8:	3a0e0319 	bcc	382354 <_Min_Stack_Size+0x381f54>
    16ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16f0:	11134919 	tstne	r3, r9, lsl r9
    16f4:	40061201 	andmi	r1, r6, r1, lsl #4
    16f8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    16fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1700:	3f012e18 	svccc	0x00012e18
    1704:	3a0e0319 	bcc	382370 <_Min_Stack_Size+0x381f70>
    1708:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    170c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1710:	96184006 	ldrls	r4, [r8], -r6
    1714:	13011942 	movwne	r1, #6466	; 0x1942
    1718:	34190000 	ldrcc	r0, [r9], #-0
    171c:	3a0e0300 	bcc	382324 <_Min_Stack_Size+0x381f24>
    1720:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1724:	00180213 	andseq	r0, r8, r3, lsl r2
    1728:	00051a00 	andeq	r1, r5, r0, lsl #20
    172c:	0b3a0e03 	bleq	e84f40 <_Min_Stack_Size+0xe84b40>
    1730:	1349053b 	movtne	r0, #38203	; 0x953b
    1734:	00001802 	andeq	r1, r0, r2, lsl #16
    1738:	0300341b 	movweq	r3, #1051	; 0x41b
    173c:	3b0b3a0e 	blcc	2cff7c <_Min_Stack_Size+0x2cfb7c>
    1740:	3f134905 	svccc	0x00134905
    1744:	00193c19 	andseq	r3, r9, r9, lsl ip
    1748:	000f1c00 	andeq	r1, pc, r0, lsl #24
    174c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1750:	341d0000 	ldrcc	r0, [sp], #-0
    1754:	3a0e0300 	bcc	38235c <_Min_Stack_Size+0x381f5c>
    1758:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    175c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1760:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    1764:	13490026 	movtne	r0, #36902	; 0x9026
    1768:	01000000 	mrseq	r0, (UNDEF: 0)
    176c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1770:	0e030b13 	vmoveq.32	d3[0], r0
    1774:	17550e1b 	smmlane	r5, fp, lr, r0
    1778:	17100111 			; <UNDEFINED> instruction: 0x17100111
    177c:	24020000 	strcs	r0, [r2], #-0
    1780:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1784:	000e030b 	andeq	r0, lr, fp, lsl #6
    1788:	00160300 	andseq	r0, r6, r0, lsl #6
    178c:	0b3a0e03 	bleq	e84fa0 <_Min_Stack_Size+0xe84ba0>
    1790:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1794:	24040000 	strcs	r0, [r4], #-0
    1798:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    179c:	0008030b 	andeq	r0, r8, fp, lsl #6
    17a0:	00350500 	eorseq	r0, r5, r0, lsl #10
    17a4:	00001349 	andeq	r1, r0, r9, asr #6
    17a8:	49010106 	stmdbmi	r1, {r1, r2, r8}
    17ac:	00130113 	andseq	r0, r3, r3, lsl r1
    17b0:	00210700 	eoreq	r0, r1, r0, lsl #14
    17b4:	0b2f1349 	bleq	bc64e0 <_Min_Stack_Size+0xbc60e0>
    17b8:	04080000 	streq	r0, [r8], #-0
    17bc:	3a0b0b01 	bcc	2c43c8 <_Min_Stack_Size+0x2c3fc8>
    17c0:	01053b0b 	tsteq	r5, fp, lsl #22
    17c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    17c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    17cc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    17d0:	0300280a 	movweq	r2, #2058	; 0x80a
    17d4:	000d1c08 	andeq	r1, sp, r8, lsl #24
    17d8:	01130b00 	tsteq	r3, r0, lsl #22
    17dc:	0b3a0b0b 	bleq	e84410 <_Min_Stack_Size+0xe84010>
    17e0:	1301053b 	movwne	r0, #5435	; 0x153b
    17e4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    17e8:	3a0e0300 	bcc	3823f0 <_Min_Stack_Size+0x381ff0>
    17ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17f0:	000b3813 	andeq	r3, fp, r3, lsl r8
    17f4:	000d0d00 	andeq	r0, sp, r0, lsl #26
    17f8:	0b3a0803 	bleq	e8380c <_Min_Stack_Size+0xe8340c>
    17fc:	1349053b 	movtne	r0, #38203	; 0x953b
    1800:	00000b38 	andeq	r0, r0, r8, lsr fp
    1804:	0300160e 	movweq	r1, #1550	; 0x60e
    1808:	3b0b3a0e 	blcc	2d0048 <_Min_Stack_Size+0x2cfc48>
    180c:	00134905 	andseq	r4, r3, r5, lsl #18
    1810:	01130f00 	tsteq	r3, r0, lsl #30
    1814:	0b3a0b0b 	bleq	e84448 <_Min_Stack_Size+0xe84048>
    1818:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    181c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1820:	3a0e0300 	bcc	382428 <_Min_Stack_Size+0x382028>
    1824:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1828:	000b3813 	andeq	r3, fp, r3, lsl r8
    182c:	000f1100 	andeq	r1, pc, r0, lsl #2
    1830:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1834:	04120000 	ldreq	r0, [r2], #-0
    1838:	3a0b0b01 	bcc	2c4444 <_Min_Stack_Size+0x2c4044>
    183c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1840:	13000013 	movwne	r0, #19
    1844:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1848:	0b3a0e03 	bleq	e8505c <_Min_Stack_Size+0xe84c5c>
    184c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1850:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1854:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1858:	00130119 	andseq	r0, r3, r9, lsl r1
    185c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1860:	0b3a0e03 	bleq	e85074 <_Min_Stack_Size+0xe84c74>
    1864:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1868:	00001802 	andeq	r1, r0, r2, lsl #16
    186c:	3f012e15 	svccc	0x00012e15
    1870:	3a0e0319 	bcc	3824dc <_Min_Stack_Size+0x3820dc>
    1874:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1878:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    187c:	96184006 	ldrls	r4, [r8], -r6
    1880:	13011942 	movwne	r1, #6466	; 0x1942
    1884:	05160000 	ldreq	r0, [r6, #-0]
    1888:	3a0e0300 	bcc	382490 <_Min_Stack_Size+0x382090>
    188c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1890:	00180213 	andseq	r0, r8, r3, lsl r2
    1894:	00341700 	eorseq	r1, r4, r0, lsl #14
    1898:	0b3a0e03 	bleq	e850ac <_Min_Stack_Size+0xe84cac>
    189c:	1349053b 	movtne	r0, #38203	; 0x953b
    18a0:	00001802 	andeq	r1, r0, r2, lsl #16
    18a4:	03012e18 	movweq	r2, #7704	; 0x1e18
    18a8:	3b0b3a0e 	blcc	2d00e8 <_Min_Stack_Size+0x2cfce8>
    18ac:	11192705 	tstne	r9, r5, lsl #14
    18b0:	40061201 	andmi	r1, r6, r1, lsl #4
    18b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    18b8:	00001301 	andeq	r1, r0, r1, lsl #6
    18bc:	03003419 	movweq	r3, #1049	; 0x419
    18c0:	3b0b3a0e 	blcc	2d0100 <_Min_Stack_Size+0x2cfd00>
    18c4:	3f134905 	svccc	0x00134905
    18c8:	00193c19 	andseq	r3, r9, r9, lsl ip
    18cc:	11010000 	mrsne	r0, (UNDEF: 1)
    18d0:	130e2501 	movwne	r2, #58625	; 0xe501
    18d4:	1b0e030b 	blne	382508 <_Min_Stack_Size+0x382108>
    18d8:	1117550e 	tstne	r7, lr, lsl #10
    18dc:	00171001 	andseq	r1, r7, r1
    18e0:	00240200 	eoreq	r0, r4, r0, lsl #4
    18e4:	0b3e0b0b 	bleq	f84518 <_Min_Stack_Size+0xf84118>
    18e8:	00000e03 	andeq	r0, r0, r3, lsl #28
    18ec:	03001603 	movweq	r1, #1539	; 0x603
    18f0:	3b0b3a0e 	blcc	2d0130 <_Min_Stack_Size+0x2cfd30>
    18f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    18f8:	00240400 	eoreq	r0, r4, r0, lsl #8
    18fc:	0b3e0b0b 	bleq	f84530 <_Min_Stack_Size+0xf84130>
    1900:	00000803 	andeq	r0, r0, r3, lsl #16
    1904:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1908:	06000013 			; <UNDEFINED> instruction: 0x06000013
    190c:	13490101 	movtne	r0, #37121	; 0x9101
    1910:	00001301 	andeq	r1, r0, r1, lsl #6
    1914:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
    1918:	000b2f13 	andeq	r2, fp, r3, lsl pc
    191c:	01040800 	tsteq	r4, r0, lsl #16
    1920:	0b3a0b0b 	bleq	e84554 <_Min_Stack_Size+0xe84154>
    1924:	1301053b 	movwne	r0, #5435	; 0x153b
    1928:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    192c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1930:	0a00000d 	beq	196c <_Min_Stack_Size+0x156c>
    1934:	08030028 	stmdaeq	r3, {r3, r5}
    1938:	00000d1c 	andeq	r0, r0, ip, lsl sp
    193c:	0b01130b 	bleq	46570 <_Min_Stack_Size+0x46170>
    1940:	3b0b3a0b 	blcc	2d0174 <_Min_Stack_Size+0x2cfd74>
    1944:	00130105 	andseq	r0, r3, r5, lsl #2
    1948:	000d0c00 	andeq	r0, sp, r0, lsl #24
    194c:	0b3a0e03 	bleq	e85160 <_Min_Stack_Size+0xe84d60>
    1950:	1349053b 	movtne	r0, #38203	; 0x953b
    1954:	00000b38 	andeq	r0, r0, r8, lsr fp
    1958:	03000d0d 	movweq	r0, #3341	; 0xd0d
    195c:	3b0b3a08 	blcc	2d0184 <_Min_Stack_Size+0x2cfd84>
    1960:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1964:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1968:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    196c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1970:	00001349 	andeq	r1, r0, r9, asr #6
    1974:	0b01040f 	bleq	429b8 <_Min_Stack_Size+0x425b8>
    1978:	3b0b3a0b 	blcc	2d01ac <_Min_Stack_Size+0x2cfdac>
    197c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1980:	01131000 	tsteq	r3, r0
    1984:	0b3a0b0b 	bleq	e845b8 <_Min_Stack_Size+0xe841b8>
    1988:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    198c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    1990:	3a0e0300 	bcc	382598 <_Min_Stack_Size+0x382198>
    1994:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1998:	000b3813 	andeq	r3, fp, r3, lsl r8
    199c:	012e1200 	teqeq	lr, r0, lsl #4
    19a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    19a4:	0b3b0b3a 	bleq	ec4694 <_Min_Stack_Size+0xec4294>
    19a8:	01111927 	tsteq	r1, r7, lsr #18
    19ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    19b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    19b4:	13000013 	movwne	r0, #19
    19b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    19bc:	0b3b0b3a 	bleq	ec46ac <_Min_Stack_Size+0xec42ac>
    19c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    19c4:	34140000 	ldrcc	r0, [r4], #-0
    19c8:	3a0e0300 	bcc	3825d0 <_Min_Stack_Size+0x3821d0>
    19cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19d0:	00180213 	andseq	r0, r8, r3, lsl r2
    19d4:	000f1500 	andeq	r1, pc, r0, lsl #10
    19d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    19dc:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    19e0:	03193f01 	tsteq	r9, #1, 30
    19e4:	3b0b3a0e 	blcc	2d0224 <_Min_Stack_Size+0x2cfe24>
    19e8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    19ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    19f0:	96184006 	ldrls	r4, [r8], -r6
    19f4:	13011942 	movwne	r1, #6466	; 0x1942
    19f8:	34170000 	ldrcc	r0, [r7], #-0
    19fc:	3a0e0300 	bcc	382604 <_Min_Stack_Size+0x382204>
    1a00:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a04:	00180213 	andseq	r0, r8, r3, lsl r2
    1a08:	012e1800 	teqeq	lr, r0, lsl #16
    1a0c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1a10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a14:	01111927 	tsteq	r1, r7, lsr #18
    1a18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1a1c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1a20:	19000013 	stmdbne	r0, {r0, r1, r4}
    1a24:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1a30:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1a34:	3a0e0301 	bcc	382640 <_Min_Stack_Size+0x382240>
    1a38:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1a3c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1a40:	96184006 	ldrls	r4, [r8], -r6
    1a44:	13011942 	movwne	r1, #6466	; 0x1942
    1a48:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1a4c:	3a0e0301 	bcc	382658 <_Min_Stack_Size+0x382258>
    1a50:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1a54:	11134919 	tstne	r3, r9, lsl r9
    1a58:	40061201 	andmi	r1, r6, r1, lsl #4
    1a5c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1a60:	00001301 	andeq	r1, r0, r1, lsl #6
    1a64:	3f002e1c 	svccc	0x00002e1c
    1a68:	3a0e0319 	bcc	3826d4 <_Min_Stack_Size+0x3822d4>
    1a6c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1a70:	11134919 	tstne	r3, r9, lsl r9
    1a74:	40061201 	andmi	r1, r6, r1, lsl #4
    1a78:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1a7c:	341d0000 	ldrcc	r0, [sp], #-0
    1a80:	3a0e0300 	bcc	382688 <_Min_Stack_Size+0x382288>
    1a84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a88:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1a8c:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    1a90:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a94:	0b3b0b3a 	bleq	ec4784 <_Min_Stack_Size+0xec4384>
    1a98:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1a9c:	00001802 	andeq	r1, r0, r2, lsl #16
    1aa0:	01110100 	tsteq	r1, r0, lsl #2
    1aa4:	0b130e25 	bleq	4c5340 <_Min_Stack_Size+0x4c4f40>
    1aa8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1aac:	01111755 	tsteq	r1, r5, asr r7
    1ab0:	00001710 	andeq	r1, r0, r0, lsl r7
    1ab4:	0b002402 	bleq	aac4 <_Min_Stack_Size+0xa6c4>
    1ab8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1abc:	0300000e 	movweq	r0, #14
    1ac0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1ac4:	0b3b0b3a 	bleq	ec47b4 <_Min_Stack_Size+0xec43b4>
    1ac8:	00001349 	andeq	r1, r0, r9, asr #6
    1acc:	0b002404 	bleq	aae4 <_Min_Stack_Size+0xa6e4>
    1ad0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ad4:	05000008 	streq	r0, [r0, #-8]
    1ad8:	13490035 	movtne	r0, #36917	; 0x9035
    1adc:	01060000 	mrseq	r0, (UNDEF: 6)
    1ae0:	01134901 	tsteq	r3, r1, lsl #18
    1ae4:	07000013 	smladeq	r0, r3, r0, r0
    1ae8:	13490021 	movtne	r0, #36897	; 0x9021
    1aec:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1af0:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    1af4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1af8:	0b0b0104 	bleq	2c1f10 <_Min_Stack_Size+0x2c1b10>
    1afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1b00:	00001301 	andeq	r1, r0, r1, lsl #6
    1b04:	0300280a 	movweq	r2, #2058	; 0x80a
    1b08:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1b0c:	00280b00 	eoreq	r0, r8, r0, lsl #22
    1b10:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1b14:	160c0000 	strne	r0, [ip], -r0
    1b18:	3a0e0300 	bcc	382720 <_Min_Stack_Size+0x382320>
    1b1c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b20:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1b24:	0b0b0113 	bleq	2c1f78 <_Min_Stack_Size+0x2c1b78>
    1b28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1b2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b30:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1b34:	3b0b3a0e 	blcc	2d0374 <_Min_Stack_Size+0x2cff74>
    1b38:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1b3c:	0f00000b 	svceq	0x0000000b
    1b40:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1b48:	0b381349 	bleq	e06874 <_Min_Stack_Size+0xe06474>
    1b4c:	13100000 	tstne	r0, #0
    1b50:	3a0b0b01 	bcc	2c475c <_Min_Stack_Size+0x2c435c>
    1b54:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b58:	11000013 	tstne	r0, r3, lsl r0
    1b5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b60:	0b3b0b3a 	bleq	ec4850 <_Min_Stack_Size+0xec4450>
    1b64:	0b381349 	bleq	e06890 <_Min_Stack_Size+0xe06490>
    1b68:	04120000 	ldreq	r0, [r2], #-0
    1b6c:	3a0b0b01 	bcc	2c4778 <_Min_Stack_Size+0x2c4378>
    1b70:	010b3b0b 	tsteq	fp, fp, lsl #22
    1b74:	13000013 	movwne	r0, #19
    1b78:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1b7c:	0b3a0b0b 	bleq	e847b0 <_Min_Stack_Size+0xe843b0>
    1b80:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1b84:	0f140000 	svceq	0x00140000
    1b88:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1b8c:	15000013 	strne	r0, [r0, #-19]
    1b90:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b94:	0b3b0b3a 	bleq	ec4884 <_Min_Stack_Size+0xec4484>
    1b98:	0b381349 	bleq	e068c4 <_Min_Stack_Size+0xe064c4>
    1b9c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1ba0:	03193f01 	tsteq	r9, #1, 30
    1ba4:	3b0b3a0e 	blcc	2d03e4 <_Min_Stack_Size+0x2cffe4>
    1ba8:	1119270b 	tstne	r9, fp, lsl #14
    1bac:	40061201 	andmi	r1, r6, r1, lsl #4
    1bb0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1bb4:	00001301 	andeq	r1, r0, r1, lsl #6
    1bb8:	03003417 	movweq	r3, #1047	; 0x417
    1bbc:	3b0b3a0e 	blcc	2d03fc <_Min_Stack_Size+0x2cfffc>
    1bc0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1bc4:	18000018 	stmdane	r0, {r3, r4}
    1bc8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1bcc:	0b3a0e03 	bleq	e853e0 <_Min_Stack_Size+0xe84fe0>
    1bd0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1bd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1bd8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1bdc:	00130119 	andseq	r0, r3, r9, lsl r1
    1be0:	00341900 	eorseq	r1, r4, r0, lsl #18
    1be4:	0b3a0e03 	bleq	e853f8 <_Min_Stack_Size+0xe84ff8>
    1be8:	1349053b 	movtne	r0, #38203	; 0x953b
    1bec:	00001802 	andeq	r1, r0, r2, lsl #16
    1bf0:	0300051a 	movweq	r0, #1306	; 0x51a
    1bf4:	3b0b3a0e 	blcc	2d0434 <_Min_Stack_Size+0x2d0034>
    1bf8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1bfc:	1b000018 	blne	1c64 <_Min_Stack_Size+0x1864>
    1c00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1c04:	0b3a0e03 	bleq	e85418 <_Min_Stack_Size+0xe85018>
    1c08:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1c0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c10:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1c14:	00130119 	andseq	r0, r3, r9, lsl r1
    1c18:	002e1c00 	eoreq	r1, lr, r0, lsl #24
    1c1c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c24:	13491927 	movtne	r1, #39207	; 0x9927
    1c28:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c2c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1c30:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    1c34:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1c38:	0b3a0e03 	bleq	e8544c <_Min_Stack_Size+0xe8504c>
    1c3c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1c40:	01111349 	tsteq	r1, r9, asr #6
    1c44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c48:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1c4c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1c50:	08030005 	stmdaeq	r3, {r0, r2}
    1c54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c58:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1c5c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    1c60:	03193f00 	tsteq	r9, #0, 30
    1c64:	3b0b3a0e 	blcc	2d04a4 <_Min_Stack_Size+0x2d00a4>
    1c68:	11192705 	tstne	r9, r5, lsl #14
    1c6c:	40061201 	andmi	r1, r6, r1, lsl #4
    1c70:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1c74:	34200000 	strtcc	r0, [r0], #-0
    1c78:	3a080300 	bcc	202880 <_Min_Stack_Size+0x202480>
    1c7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c80:	00180213 	andseq	r0, r8, r3, lsl r2
    1c84:	012e2100 	teqeq	lr, r0, lsl #2
    1c88:	0b3a0e03 	bleq	e8549c <_Min_Stack_Size+0xe8509c>
    1c8c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1c90:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c94:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1c98:	00130119 	andseq	r0, r3, r9, lsl r1
    1c9c:	012e2200 	teqeq	lr, r0, lsl #4
    1ca0:	0b3a0e03 	bleq	e854b4 <_Min_Stack_Size+0xe850b4>
    1ca4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1ca8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1cac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1cb0:	00130119 	andseq	r0, r3, r9, lsl r1
    1cb4:	00342300 	eorseq	r2, r4, r0, lsl #6
    1cb8:	0b3a0e03 	bleq	e854cc <_Min_Stack_Size+0xe850cc>
    1cbc:	1349053b 	movtne	r0, #38203	; 0x953b
    1cc0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1cc4:	34240000 	strtcc	r0, [r4], #-0
    1cc8:	3a0e0300 	bcc	3828d0 <_Min_Stack_Size+0x3824d0>
    1ccc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cd0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1cd4:	25000018 	strcs	r0, [r0, #-24]
    1cd8:	13490021 	movtne	r0, #36897	; 0x9021
    1cdc:	0000052f 	andeq	r0, r0, pc, lsr #10
    1ce0:	03003426 	movweq	r3, #1062	; 0x426
    1ce4:	3b0b3a0e 	blcc	2d0524 <_Min_Stack_Size+0x2d0124>
    1ce8:	3f13490b 	svccc	0x0013490b
    1cec:	00180219 	andseq	r0, r8, r9, lsl r2
    1cf0:	11010000 	mrsne	r0, (UNDEF: 1)
    1cf4:	130e2501 	movwne	r2, #58625	; 0xe501
    1cf8:	1b0e030b 	blne	38292c <_Min_Stack_Size+0x38252c>
    1cfc:	1117550e 	tstne	r7, lr, lsl #10
    1d00:	00171001 	andseq	r1, r7, r1
    1d04:	00240200 	eoreq	r0, r4, r0, lsl #4
    1d08:	0b3e0b0b 	bleq	f8493c <_Min_Stack_Size+0xf8453c>
    1d0c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1d10:	03001603 	movweq	r1, #1539	; 0x603
    1d14:	3b0b3a0e 	blcc	2d0554 <_Min_Stack_Size+0x2d0154>
    1d18:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d1c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1d20:	0b3e0b0b 	bleq	f84954 <_Min_Stack_Size+0xf84554>
    1d24:	00000803 	andeq	r0, r0, r3, lsl #16
    1d28:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1d2c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1d30:	13490101 	movtne	r0, #37121	; 0x9101
    1d34:	00001301 	andeq	r1, r0, r1, lsl #6
    1d38:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
    1d3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1d40:	01040800 	tsteq	r4, r0, lsl #16
    1d44:	0b3a0b0b 	bleq	e84978 <_Min_Stack_Size+0xe84578>
    1d48:	1301053b 	movwne	r0, #5435	; 0x153b
    1d4c:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    1d50:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1d54:	0a00000d 	beq	1d90 <_Min_Stack_Size+0x1990>
    1d58:	08030028 	stmdaeq	r3, {r3, r5}
    1d5c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1d60:	0300160b 	movweq	r1, #1547	; 0x60b
    1d64:	3b0b3a0e 	blcc	2d05a4 <_Min_Stack_Size+0x2d01a4>
    1d68:	00134905 	andseq	r4, r3, r5, lsl #18
    1d6c:	01130c00 	tsteq	r3, r0, lsl #24
    1d70:	0b3a0b0b 	bleq	e849a4 <_Min_Stack_Size+0xe845a4>
    1d74:	1301053b 	movwne	r0, #5435	; 0x153b
    1d78:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1d7c:	3a080300 	bcc	202984 <_Min_Stack_Size+0x202584>
    1d80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d84:	000b3813 	andeq	r3, fp, r3, lsl r8
    1d88:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1d8c:	0b3a0e03 	bleq	e855a0 <_Min_Stack_Size+0xe851a0>
    1d90:	1349053b 	movtne	r0, #38203	; 0x953b
    1d94:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d98:	0b01130f 	bleq	469dc <_Min_Stack_Size+0x465dc>
    1d9c:	3b0b3a0b 	blcc	2d05d0 <_Min_Stack_Size+0x2d01d0>
    1da0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1da4:	000d1000 	andeq	r1, sp, r0
    1da8:	0b3a0e03 	bleq	e855bc <_Min_Stack_Size+0xe851bc>
    1dac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1db0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1db4:	0b010411 	bleq	42e00 <_Min_Stack_Size+0x42a00>
    1db8:	3b0b3a0b 	blcc	2d05ec <_Min_Stack_Size+0x2d01ec>
    1dbc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1dc0:	000d1200 	andeq	r1, sp, r0, lsl #4
    1dc4:	0b3a0803 	bleq	e83dd8 <_Min_Stack_Size+0xe839d8>
    1dc8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1dcc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1dd0:	3f002e13 	svccc	0x00002e13
    1dd4:	3a0e0319 	bcc	382a40 <_Min_Stack_Size+0x382640>
    1dd8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1ddc:	11134919 	tstne	r3, r9, lsl r9
    1de0:	40061201 	andmi	r1, r6, r1, lsl #4
    1de4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1de8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    1dec:	03193f01 	tsteq	r9, #1, 30
    1df0:	3b0b3a0e 	blcc	2d0630 <_Min_Stack_Size+0x2d0230>
    1df4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1df8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1dfc:	96184006 	ldrls	r4, [r8], -r6
    1e00:	13011942 	movwne	r1, #6466	; 0x1942
    1e04:	34150000 	ldrcc	r0, [r5], #-0
    1e08:	3a0e0300 	bcc	382a10 <_Min_Stack_Size+0x382610>
    1e0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e10:	00180213 	andseq	r0, r8, r3, lsl r2
    1e14:	00341600 	eorseq	r1, r4, r0, lsl #12
    1e18:	0b3a0803 	bleq	e83e2c <_Min_Stack_Size+0xe83a2c>
    1e1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e20:	00001802 	andeq	r1, r0, r2, lsl #16
    1e24:	0b000f17 	bleq	5a88 <_Min_Stack_Size+0x5688>
    1e28:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e2c:	00051800 	andeq	r1, r5, r0, lsl #16
    1e30:	0b3a0e03 	bleq	e85644 <_Min_Stack_Size+0xe85244>
    1e34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e38:	00001802 	andeq	r1, r0, r2, lsl #16
    1e3c:	3f002e19 	svccc	0x00002e19
    1e40:	3a0e0319 	bcc	382aac <_Min_Stack_Size+0x3826ac>
    1e44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1e48:	11134919 	tstne	r3, r9, lsl r9
    1e4c:	40061201 	andmi	r1, r6, r1, lsl #4
    1e50:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1e54:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    1e58:	03193f01 	tsteq	r9, #1, 30
    1e5c:	3b0b3a0e 	blcc	2d069c <_Min_Stack_Size+0x2d029c>
    1e60:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1e64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e68:	96184006 	ldrls	r4, [r8], -r6
    1e6c:	13011942 	movwne	r1, #6466	; 0x1942
    1e70:	341b0000 	ldrcc	r0, [fp], #-0
    1e74:	3a080300 	bcc	202a7c <_Min_Stack_Size+0x20267c>
    1e78:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e7c:	00180213 	andseq	r0, r8, r3, lsl r2
    1e80:	00051c00 	andeq	r1, r5, r0, lsl #24
    1e84:	0b3a0803 	bleq	e83e98 <_Min_Stack_Size+0xe83a98>
    1e88:	1349053b 	movtne	r0, #38203	; 0x953b
    1e8c:	00001802 	andeq	r1, r0, r2, lsl #16
    1e90:	0300051d 	movweq	r0, #1309	; 0x51d
    1e94:	3b0b3a0e 	blcc	2d06d4 <_Min_Stack_Size+0x2d02d4>
    1e98:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1e9c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    1ea0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1ea8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1eac:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    1eb0:	3a0e0301 	bcc	382abc <_Min_Stack_Size+0x3826bc>
    1eb4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1eb8:	11134919 	tstne	r3, r9, lsl r9
    1ebc:	40061201 	andmi	r1, r6, r1, lsl #4
    1ec0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1ec4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ec8:	03012e20 	movweq	r2, #7712	; 0x1e20
    1ecc:	3b0b3a0e 	blcc	2d070c <_Min_Stack_Size+0x2d030c>
    1ed0:	11192705 	tstne	r9, r5, lsl #14
    1ed4:	40061201 	andmi	r1, r6, r1, lsl #4
    1ed8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1edc:	00001301 	andeq	r1, r0, r1, lsl #6
    1ee0:	03012e21 	movweq	r2, #7713	; 0x1e21
    1ee4:	3b0b3a0e 	blcc	2d0724 <_Min_Stack_Size+0x2d0324>
    1ee8:	11192705 	tstne	r9, r5, lsl #14
    1eec:	40061201 	andmi	r1, r6, r1, lsl #4
    1ef0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1ef4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ef8:	03003422 	movweq	r3, #1058	; 0x422
    1efc:	3b0b3a0e 	blcc	2d073c <_Min_Stack_Size+0x2d033c>
    1f00:	3f134905 	svccc	0x00134905
    1f04:	00193c19 	andseq	r3, r9, r9, lsl ip
    1f08:	00342300 	eorseq	r2, r4, r0, lsl #6
    1f0c:	0b3a0e03 	bleq	e85720 <_Min_Stack_Size+0xe85320>
    1f10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f14:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1f18:	Address 0x0000000000001f18 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000003c 	andeq	r0, r0, ip, lsr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080001c0 	stmdaeq	r0, {r6, r7, r8}
  14:	0000000e 	andeq	r0, r0, lr
  18:	080001d0 	stmdaeq	r0, {r4, r6, r7, r8}
  1c:	00000030 	andeq	r0, r0, r0, lsr r0
  20:	08000200 	stmdaeq	r0, {r9}
  24:	00000042 	andeq	r0, r0, r2, asr #32
  28:	08000244 	stmdaeq	r0, {r2, r6, r9}
  2c:	000000ac 	andeq	r0, r0, ip, lsr #1
  30:	080002f0 	stmdaeq	r0, {r4, r5, r6, r7, r9}
  34:	00000054 	andeq	r0, r0, r4, asr r0
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	041a0002 	ldreq	r0, [sl], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	08000344 	stmdaeq	r0, {r2, r6, r8, r9}
  54:	00000044 	andeq	r0, r0, r4, asr #32
  58:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
  5c:	00000002 	andeq	r0, r0, r2
	...
  68:	0000002c 	andeq	r0, r0, ip, lsr #32
  6c:	04940002 	ldreq	r0, [r4], #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  7c:	00000068 	andeq	r0, r0, r8, rrx
  80:	080003f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9}
  84:	000000f8 	strdeq	r0, [r0], -r8
  88:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
  8c:	000000f4 	strdeq	r0, [r0], -r4
	...
  98:	0000003c 	andeq	r0, r0, ip, lsr r0
  9c:	0a510002 	beq	14400ac <_Min_Stack_Size+0x143fcac>
  a0:	00040000 	andeq	r0, r4, r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
  ac:	00000024 	andeq	r0, r0, r4, lsr #32
  b0:	08000604 	stmdaeq	r0, {r2, r9, sl}
  b4:	000000bc 	strheq	r0, [r0], -ip
  b8:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
  bc:	0000002c 	andeq	r0, r0, ip, lsr #32
  c0:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
  c4:	00000040 	andeq	r0, r0, r0, asr #32
  c8:	0800072c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl}
  cc:	00000038 	andeq	r0, r0, r8, lsr r0
	...
  d8:	00000084 	andeq	r0, r0, r4, lsl #1
  dc:	0f920002 	svceq	0x00920002
  e0:	00040000 	andeq	r0, r4, r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
  ec:	00000164 	andeq	r0, r0, r4, ror #2
  f0:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
  f4:	0000011a 	andeq	r0, r0, sl, lsl r1
  f8:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
  fc:	00000032 	andeq	r0, r0, r2, lsr r0
 100:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
 104:	00000042 	andeq	r0, r0, r2, asr #32
 108:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
 10c:	00000034 	andeq	r0, r0, r4, lsr r0
 110:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 114:	0000001a 	andeq	r0, r0, sl, lsl r0
 118:	08000aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp}
 11c:	00000034 	andeq	r0, r0, r4, lsr r0
 120:	08000ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp}
 124:	0000001a 	andeq	r0, r0, sl, lsl r0
 128:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	08000b18 	stmdaeq	r0, {r3, r4, r8, r9, fp}
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
 13c:	0000002e 	andeq	r0, r0, lr, lsr #32
 140:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
 154:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
 160:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 164:	159b0002 	ldrne	r0, [fp, #2]
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
 174:	00000070 	andeq	r0, r0, r0, ror r0
 178:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 17c:	00000024 	andeq	r0, r0, r4, lsr #32
 180:	08000cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp}
 184:	00000050 	andeq	r0, r0, r0, asr r0
 188:	08000d14 	stmdaeq	r0, {r2, r4, r8, sl, fp}
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
 190:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 194:	00000020 	andeq	r0, r0, r0, lsr #32
 198:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 19c:	00000040 	andeq	r0, r0, r0, asr #32
 1a0:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
 1ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 1b0:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
 1b4:	00000020 	andeq	r0, r0, r0, lsr #32
 1b8:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 1c0:	08000e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp}
 1c4:	00000020 	andeq	r0, r0, r0, lsr #32
 1c8:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
 1cc:	00000030 	andeq	r0, r0, r0, lsr r0
 1d0:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 1d4:	00000020 	andeq	r0, r0, r0, lsr #32
 1d8:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
 1dc:	00000020 	andeq	r0, r0, r0, lsr #32
 1e0:	08000eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp}
 1e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 1e8:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
 1ec:	0000003c 	andeq	r0, r0, ip, lsr r0
 1f0:	08000f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp}
 1f4:	00000038 	andeq	r0, r0, r8, lsr r0
 1f8:	08000f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp}
 1fc:	00000020 	andeq	r0, r0, r0, lsr #32
 200:	08000fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp}
 204:	00000038 	andeq	r0, r0, r8, lsr r0
 208:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 20c:	00000038 	andeq	r0, r0, r8, lsr r0
 210:	0800102c 	stmdaeq	r0, {r2, r3, r5, ip}
 214:	00000038 	andeq	r0, r0, r8, lsr r0
 218:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 21c:	00000154 	andeq	r0, r0, r4, asr r1
 220:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
 224:	0000005c 	andeq	r0, r0, ip, asr r0
 228:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
 230:	08001234 	stmdaeq	r0, {r2, r4, r5, r9, ip}
 234:	00000020 	andeq	r0, r0, r0, lsr #32
 238:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 244:	0000003c 	andeq	r0, r0, ip, lsr r0
 248:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
 24c:	00000040 	andeq	r0, r0, r0, asr #32
 250:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 254:	0000003c 	andeq	r0, r0, ip, lsr r0
 258:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 25c:	0000003c 	andeq	r0, r0, ip, lsr r0
 260:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 264:	0000003c 	andeq	r0, r0, ip, lsr r0
 268:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
 274:	0000003c 	andeq	r0, r0, ip, lsr r0
 278:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
 27c:	0000003c 	andeq	r0, r0, ip, lsr r0
 280:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
 284:	0000003c 	andeq	r0, r0, ip, lsr r0
 288:	08001470 	stmdaeq	r0, {r4, r5, r6, sl, ip}
 28c:	0000003c 	andeq	r0, r0, ip, lsr r0
 290:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
 294:	0000003c 	andeq	r0, r0, ip, lsr r0
 298:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
 29c:	0000003c 	andeq	r0, r0, ip, lsr r0
 2a0:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
 2a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2a8:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
 2ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 2b0:	0800159c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip}
 2b4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2b8:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
 2bc:	0000003c 	andeq	r0, r0, ip, lsr r0
 2c0:	08001614 	stmdaeq	r0, {r2, r4, r9, sl, ip}
 2c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2c8:	08001650 	stmdaeq	r0, {r4, r6, r9, sl, ip}
 2cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 2d0:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
 2d4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2d8:	080016c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip}
 2dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 2e0:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 2e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2e8:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
 2ec:	00000048 	andeq	r0, r0, r8, asr #32
 2f0:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
 2f4:	00000074 	andeq	r0, r0, r4, ror r0
 2f8:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 304:	00000038 	andeq	r0, r0, r8, lsr r0
 308:	08001850 	stmdaeq	r0, {r4, r6, fp, ip}
 30c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 318:	000000fc 	strdeq	r0, [r0], -ip
 31c:	23b00002 	movscs	r0, #2
 320:	00040000 	andeq	r0, r4, r0
 324:	00000000 	andeq	r0, r0, r0
 328:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
 32c:	00000114 	andeq	r0, r0, r4, lsl r1
 330:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
 334:	00000174 	andeq	r0, r0, r4, ror r1
 338:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
 33c:	00000038 	andeq	r0, r0, r8, lsr r0
 340:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
 344:	00000052 	andeq	r0, r0, r2, asr r0
 348:	08001b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip}
 34c:	0000002a 	andeq	r0, r0, sl, lsr #32
 350:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
 354:	0000003e 	andeq	r0, r0, lr, lsr r0
 358:	08001bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip}
 35c:	00000038 	andeq	r0, r0, r8, lsr r0
 360:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 364:	00000042 	andeq	r0, r0, r2, asr #32
 368:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
 36c:	0000003e 	andeq	r0, r0, lr, lsr r0
 370:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
 374:	00000022 	andeq	r0, r0, r2, lsr #32
 378:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
 37c:	00000020 	andeq	r0, r0, r0, lsr #32
 380:	08001cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip}
 384:	00000038 	andeq	r0, r0, r8, lsr r0
 388:	08001d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip}
 38c:	0000003e 	andeq	r0, r0, lr, lsr r0
 390:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
 394:	00000036 	andeq	r0, r0, r6, lsr r0
 398:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
 39c:	00000036 	andeq	r0, r0, r6, lsr r0
 3a0:	08001dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip}
 3a4:	0000003e 	andeq	r0, r0, lr, lsr r0
 3a8:	08001e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip}
 3ac:	00000022 	andeq	r0, r0, r2, lsr #32
 3b0:	08001e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip}
 3b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 3b8:	08001e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip}
 3bc:	0000003a 	andeq	r0, r0, sl, lsr r0
 3c0:	08001eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip}
 3c4:	0000003e 	andeq	r0, r0, lr, lsr r0
 3c8:	08001ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip}
 3cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 3d0:	08001f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip}
 3d4:	00000036 	andeq	r0, r0, r6, lsr r0
 3d8:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
 3dc:	0000003e 	andeq	r0, r0, lr, lsr r0
 3e0:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
 3e4:	00000046 	andeq	r0, r0, r6, asr #32
 3e8:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 3ec:	0000008e 	andeq	r0, r0, lr, lsl #1
 3f0:	08002088 	stmdaeq	r0, {r3, r7, sp}
 3f4:	00000038 	andeq	r0, r0, r8, lsr r0
 3f8:	080020c0 	stmdaeq	r0, {r6, r7, sp}
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
 404:	000000ae 	andeq	r0, r0, lr, lsr #1
 408:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
 40c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 418:	0000004c 	andeq	r0, r0, ip, asr #32
 41c:	2d760002 	ldclcs	0, cr0, [r6, #-8]!
 420:	00040000 	andeq	r0, r4, r0
 424:	00000000 	andeq	r0, r0, r0
 428:	080021c8 	stmdaeq	r0, {r3, r6, r7, r8, sp}
 42c:	0000001a 	andeq	r0, r0, sl, lsl r0
 430:	080021e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp}
 434:	00000020 	andeq	r0, r0, r0, lsr #32
 438:	08002204 	stmdaeq	r0, {r2, r9, sp}
 43c:	00000020 	andeq	r0, r0, r0, lsr #32
 440:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
 444:	0000007c 	andeq	r0, r0, ip, ror r0
 448:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
 454:	00000020 	andeq	r0, r0, r0, lsr #32
 458:	080022dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp}
 45c:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 468:	0000012c 	andeq	r0, r0, ip, lsr #2
 46c:	300a0002 	andcc	r0, sl, r2
 470:	00040000 	andeq	r0, r4, r0
 474:	00000000 	andeq	r0, r0, r0
 478:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
 47c:	00000074 	andeq	r0, r0, r4, ror r0
 480:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
 484:	00000184 	andeq	r0, r0, r4, lsl #3
 488:	08002508 	stmdaeq	r0, {r3, r8, sl, sp}
 48c:	0000003c 	andeq	r0, r0, ip, lsr r0
 490:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
 494:	0000003e 	andeq	r0, r0, lr, lsr r0
 498:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
 49c:	0000003e 	andeq	r0, r0, lr, lsr r0
 4a0:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
 4a4:	0000003e 	andeq	r0, r0, lr, lsr r0
 4a8:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
 4ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 4b0:	08002644 	stmdaeq	r0, {r2, r6, r9, sl, sp}
 4b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 4b8:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
 4bc:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c0:	080026c0 	stmdaeq	r0, {r6, r7, r9, sl, sp}
 4c4:	0000003e 	andeq	r0, r0, lr, lsr r0
 4c8:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
 4cc:	00000040 	andeq	r0, r0, r0, asr #32
 4d0:	08002740 	stmdaeq	r0, {r6, r8, r9, sl, sp}
 4d4:	0000003e 	andeq	r0, r0, lr, lsr r0
 4d8:	08002780 	stmdaeq	r0, {r7, r8, r9, sl, sp}
 4dc:	0000003e 	andeq	r0, r0, lr, lsr r0
 4e0:	080027c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp}
 4e4:	00000042 	andeq	r0, r0, r2, asr #32
 4e8:	08002804 	stmdaeq	r0, {r2, fp, sp}
 4ec:	0000003e 	andeq	r0, r0, lr, lsr r0
 4f0:	08002844 	stmdaeq	r0, {r2, r6, fp, sp}
 4f4:	00000040 	andeq	r0, r0, r0, asr #32
 4f8:	08002884 	stmdaeq	r0, {r2, r7, fp, sp}
 4fc:	00000040 	andeq	r0, r0, r0, asr #32
 500:	080028c4 	stmdaeq	r0, {r2, r6, r7, fp, sp}
 504:	00000040 	andeq	r0, r0, r0, asr #32
 508:	08002904 	stmdaeq	r0, {r2, r8, fp, sp}
 50c:	0000003e 	andeq	r0, r0, lr, lsr r0
 510:	08002944 	stmdaeq	r0, {r2, r6, r8, fp, sp}
 514:	0000001e 	andeq	r0, r0, lr, lsl r0
 518:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
 51c:	0000001c 	andeq	r0, r0, ip, lsl r0
 520:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
 524:	0000003e 	andeq	r0, r0, lr, lsr r0
 528:	080029c0 	stmdaeq	r0, {r6, r7, r8, fp, sp}
 52c:	00000040 	andeq	r0, r0, r0, asr #32
 530:	08002a00 	stmdaeq	r0, {r9, fp, sp}
 534:	0000003e 	andeq	r0, r0, lr, lsr r0
 538:	08002a40 	stmdaeq	r0, {r6, r9, fp, sp}
 53c:	00000020 	andeq	r0, r0, r0, lsr #32
 540:	08002a60 	stmdaeq	r0, {r5, r6, r9, fp, sp}
 544:	0000003e 	andeq	r0, r0, lr, lsr r0
 548:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
 54c:	0000003e 	andeq	r0, r0, lr, lsr r0
 550:	08002ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, sp}
 554:	0000002e 	andeq	r0, r0, lr, lsr #32
 558:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
 55c:	00000046 	andeq	r0, r0, r6, asr #32
 560:	08002b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, sp}
 564:	00000060 	andeq	r0, r0, r0, rrx
 568:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
 56c:	00000044 	andeq	r0, r0, r4, asr #32
 570:	08002bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp}
 574:	00000066 	andeq	r0, r0, r6, rrx
 578:	08002c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp}
 57c:	0000002c 	andeq	r0, r0, ip, lsr #32
 580:	08002c90 	stmdaeq	r0, {r4, r7, sl, fp, sp}
 584:	0000005a 	andeq	r0, r0, sl, asr r0
 588:	08002cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, sp}
 58c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
 598:	000000ac 	andeq	r0, r0, ip, lsr #1
 59c:	3b950002 	blcc	fe5405ac <_estack+0xde5105ac>
 5a0:	00040000 	andeq	r0, r4, r0
 5a4:	00000000 	andeq	r0, r0, r0
 5a8:	08002d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp}
 5ac:	000001a4 	andeq	r0, r0, r4, lsr #3
 5b0:	08002ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp}
 5b4:	000000ac 	andeq	r0, r0, ip, lsr #1
 5b8:	08002f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp}
 5bc:	0000006c 	andeq	r0, r0, ip, rrx
 5c0:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
 5c4:	00000036 	andeq	r0, r0, r6, lsr r0
 5c8:	0800300c 	stmdaeq	r0, {r2, r3, ip, sp}
 5cc:	00000034 	andeq	r0, r0, r4, lsr r0
 5d0:	08003040 	stmdaeq	r0, {r6, ip, sp}
 5d4:	00000034 	andeq	r0, r0, r4, lsr r0
 5d8:	08003074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp}
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
 5e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 5e8:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
 5ec:	0000003c 	andeq	r0, r0, ip, lsr r0
 5f0:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
 5f4:	00000036 	andeq	r0, r0, r6, lsr r0
 5f8:	08003120 	stmdaeq	r0, {r5, r8, ip, sp}
 5fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 600:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
 604:	00000030 	andeq	r0, r0, r0, lsr r0
 608:	0800317c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp}
 60c:	00000030 	andeq	r0, r0, r0, lsr r0
 610:	080031ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp}
 614:	00000024 	andeq	r0, r0, r4, lsr #32
 618:	080031d0 	stmdaeq	r0, {r4, r6, r7, r8, ip, sp}
 61c:	00000078 	andeq	r0, r0, r8, ror r0
 620:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
 624:	0000005c 	andeq	r0, r0, ip, asr r0
 628:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
 62c:	00000072 	andeq	r0, r0, r2, ror r0
 630:	08003318 	stmdaeq	r0, {r3, r4, r8, r9, ip, sp}
 634:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 638:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
 63c:	0000005c 	andeq	r0, r0, ip, asr r0
	...
 648:	000000dc 	ldrdeq	r0, [r0], -ip
 64c:	42d20002 	sbcsmi	r0, r2, #2
 650:	00040000 	andeq	r0, r4, r0
 654:	00000000 	andeq	r0, r0, r0
 658:	08003424 	stmdaeq	r0, {r2, r5, sl, ip, sp}
 65c:	000000d8 	ldrdeq	r0, [r0], -r8
 660:	080034fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp}
 664:	00000086 	andeq	r0, r0, r6, lsl #1
 668:	08003584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp}
 66c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 670:	08003734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp}
 674:	00000048 	andeq	r0, r0, r8, asr #32
 678:	0800377c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
 67c:	00000036 	andeq	r0, r0, r6, lsr r0
 680:	080037b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip, sp}
 684:	0000003e 	andeq	r0, r0, lr, lsr r0
 688:	080037f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
 68c:	0000003e 	andeq	r0, r0, lr, lsr r0
 690:	08003834 	stmdaeq	r0, {r2, r4, r5, fp, ip, sp}
 694:	00000036 	andeq	r0, r0, r6, lsr r0
 698:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
 69c:	00000040 	andeq	r0, r0, r0, asr #32
 6a0:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
 6a4:	00000042 	andeq	r0, r0, r2, asr #32
 6a8:	080038f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, ip, sp}
 6ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 6b0:	08003930 	stmdaeq	r0, {r4, r5, r8, fp, ip, sp}
 6b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 6b8:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
 6bc:	0000009a 	muleq	r0, sl, r0
 6c0:	08003a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp}
 6c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6c8:	08003a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, sp}
 6cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d0:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
 6d4:	0000003e 	andeq	r0, r0, lr, lsr r0
 6d8:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
 6dc:	00000022 	andeq	r0, r0, r2, lsr #32
 6e0:	08003aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip, sp}
 6e4:	00000032 	andeq	r0, r0, r2, lsr r0
 6e8:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
 6ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 6f0:	08003af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip, sp}
 6f4:	00000046 	andeq	r0, r0, r6, asr #32
 6f8:	08003b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, sp}
 6fc:	00000060 	andeq	r0, r0, r0, rrx
 700:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
 704:	00000038 	andeq	r0, r0, r8, lsr r0
 708:	08003bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, sp}
 70c:	00000020 	andeq	r0, r0, r0, lsr #32
 710:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 714:	00000076 	andeq	r0, r0, r6, ror r0
 718:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
 71c:	00000032 	andeq	r0, r0, r2, lsr r0
	...
 728:	00000054 	andeq	r0, r0, r4, asr r0
 72c:	4df70002 	ldclmi	0, cr0, [r7, #8]!
 730:	00040000 	andeq	r0, r4, r0
 734:	00000000 	andeq	r0, r0, r0
 738:	08003ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp}
 73c:	00000034 	andeq	r0, r0, r4, lsr r0
 740:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
 744:	000000dc 	ldrdeq	r0, [r0], -ip
 748:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
 74c:	0000002a 	andeq	r0, r0, sl, lsr #32
 750:	08003de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, sp}
 754:	00000024 	andeq	r0, r0, r4, lsr #32
 758:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
 75c:	00000034 	andeq	r0, r0, r4, lsr r0
 760:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
 764:	0000001c 	andeq	r0, r0, ip, lsl r0
 768:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
 76c:	00000034 	andeq	r0, r0, r4, lsr r0
 770:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
 774:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 780:	000000ac 	andeq	r0, r0, ip, lsr #1
 784:	51330002 	teqpl	r3, r2
 788:	00040000 	andeq	r0, r4, r0
 78c:	00000000 	andeq	r0, r0, r0
 790:	08003ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp}
 794:	0000001a 	andeq	r0, r0, sl, lsl r0
 798:	08003ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip, sp}
 79c:	0000015c 	andeq	r0, r0, ip, asr r1
 7a0:	0800401c 	stmdaeq	r0, {r2, r3, r4, lr}
 7a4:	0000004e 	andeq	r0, r0, lr, asr #32
 7a8:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
 7ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b0:	08004088 	stmdaeq	r0, {r3, r7, lr}
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	080040a4 	stmdaeq	r0, {r2, r5, r7, lr}
 7bc:	00000038 	andeq	r0, r0, r8, lsr r0
 7c0:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
 7c4:	000000dc 	ldrdeq	r0, [r0], -ip
 7c8:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
 7cc:	00000054 	andeq	r0, r0, r4, asr r0
 7d0:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
 7d4:	000000dc 	ldrdeq	r0, [r0], -ip
 7d8:	080042e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, lr}
 7dc:	00000054 	andeq	r0, r0, r4, asr r0
 7e0:	0800433c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, lr}
 7e4:	00000038 	andeq	r0, r0, r8, lsr r0
 7e8:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
 7ec:	00000038 	andeq	r0, r0, r8, lsr r0
 7f0:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
 7f4:	00000054 	andeq	r0, r0, r4, asr r0
 7f8:	08004400 	stmdaeq	r0, {sl, lr}
 7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 800:	0800441c 	stmdaeq	r0, {r2, r3, r4, sl, lr}
 804:	0000003c 	andeq	r0, r0, ip, lsr r0
 808:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}
 80c:	00000034 	andeq	r0, r0, r4, lsr r0
 810:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
 814:	0000001c 	andeq	r0, r0, ip, lsl r0
 818:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
 81c:	00000058 	andeq	r0, r0, r8, asr r0
 820:	08004500 	stmdaeq	r0, {r8, sl, lr}
 824:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 830:	00000104 	andeq	r0, r0, r4, lsl #2
 834:	59500002 	ldmdbpl	r0, {r1}^
 838:	00040000 	andeq	r0, r4, r0
 83c:	00000000 	andeq	r0, r0, r0
 840:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
 844:	0000001a 	andeq	r0, r0, sl, lsl r0
 848:	08004540 	stmdaeq	r0, {r6, r8, sl, lr}
 84c:	0000012c 	andeq	r0, r0, ip, lsr #2
 850:	0800466c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, lr}
 854:	0000006c 	andeq	r0, r0, ip, rrx
 858:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
 85c:	00000038 	andeq	r0, r0, r8, lsr r0
 860:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
 864:	00000038 	andeq	r0, r0, r8, lsr r0
 868:	08004748 	stmdaeq	r0, {r3, r6, r8, r9, sl, lr}
 86c:	00000058 	andeq	r0, r0, r8, asr r0
 870:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
 874:	00000024 	andeq	r0, r0, r4, lsr #32
 878:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 88c:	00000132 	andeq	r0, r0, r2, lsr r1
 890:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
 894:	00000074 	andeq	r0, r0, r4, ror r0
 898:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
 89c:	00000036 	andeq	r0, r0, r6, lsr r0
 8a0:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
 8a4:	00000040 	andeq	r0, r0, r0, asr #32
 8a8:	08004a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, lr}
 8ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 8b0:	08004a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, lr}
 8b4:	00000030 	andeq	r0, r0, r0, lsr r0
 8b8:	08004a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, lr}
 8bc:	0000007c 	andeq	r0, r0, ip, ror r0
 8c0:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
 8c4:	00000024 	andeq	r0, r0, r4, lsr #32
 8c8:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
 8cc:	00000040 	andeq	r0, r0, r0, asr #32
 8d0:	08004b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, lr}
 8d4:	0000004c 	andeq	r0, r0, ip, asr #32
 8d8:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 8dc:	0000002a 	andeq	r0, r0, sl, lsr #32
 8e0:	08004bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, lr}
 8e4:	000000dc 	ldrdeq	r0, [r0], -ip
 8e8:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
 8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f0:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
 8f4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8f8:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
 8fc:	000000ca 	andeq	r0, r0, sl, asr #1
 900:	08004da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, lr}
 904:	000000c0 	andeq	r0, r0, r0, asr #1
 908:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
 90c:	0000003c 	andeq	r0, r0, ip, lsr r0
 910:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
 914:	00000034 	andeq	r0, r0, r4, lsr r0
 918:	08004ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, lr}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
 924:	00000050 	andeq	r0, r0, r0, asr r0
 928:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 938:	000000ec 	andeq	r0, r0, ip, ror #1
 93c:	664c0002 	strbvs	r0, [ip], -r2
 940:	00040000 	andeq	r0, r4, r0
 944:	00000000 	andeq	r0, r0, r0
 948:	08004f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, lr}
 94c:	00000058 	andeq	r0, r0, r8, asr r0
 950:	08004fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, lr}
 954:	00000194 	muleq	r0, r4, r1
 958:	08005148 	stmdaeq	r0, {r3, r6, r8, ip, lr}
 95c:	000000da 	ldrdeq	r0, [r0], -sl
 960:	08005224 	stmdaeq	r0, {r2, r5, r9, ip, lr}
 964:	00000054 	andeq	r0, r0, r4, asr r0
 968:	08005278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, lr}
 96c:	0000005c 	andeq	r0, r0, ip, asr r0
 970:	080052d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, lr}
 974:	000000cc 	andeq	r0, r0, ip, asr #1
 978:	080053a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, lr}
 97c:	0000007c 	andeq	r0, r0, ip, ror r0
 980:	0800541c 	stmdaeq	r0, {r2, r3, r4, sl, ip, lr}
 984:	0000006c 	andeq	r0, r0, ip, rrx
 988:	08005488 	stmdaeq	r0, {r3, r7, sl, ip, lr}
 98c:	0000006c 	andeq	r0, r0, ip, rrx
 990:	080054f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, lr}
 994:	00000038 	andeq	r0, r0, r8, lsr r0
 998:	0800552c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, lr}
 99c:	00000034 	andeq	r0, r0, r4, lsr r0
 9a0:	08005560 	stmdaeq	r0, {r5, r6, r8, sl, ip, lr}
 9a4:	000000ac 	andeq	r0, r0, ip, lsr #1
 9a8:	0800560c 	stmdaeq	r0, {r2, r3, r9, sl, ip, lr}
 9ac:	00000084 	andeq	r0, r0, r4, lsl #1
 9b0:	08005690 	stmdaeq	r0, {r4, r7, r9, sl, ip, lr}
 9b4:	0000003c 	andeq	r0, r0, ip, lsr r0
 9b8:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
 9bc:	00000044 	andeq	r0, r0, r4, asr #32
 9c0:	08005710 	stmdaeq	r0, {r4, r8, r9, sl, ip, lr}
 9c4:	0000015c 	andeq	r0, r0, ip, asr r1
 9c8:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
 9cc:	00000088 	andeq	r0, r0, r8, lsl #1
 9d0:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 9d4:	00000040 	andeq	r0, r0, r0, asr #32
 9d8:	08005934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, lr}
 9dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 9e0:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
 9e4:	00000024 	andeq	r0, r0, r4, lsr #32
 9e8:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
 9ec:	00000024 	andeq	r0, r0, r4, lsr #32
 9f0:	080059b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, lr}
 9f4:	0000004c 	andeq	r0, r0, ip, asr #32
 9f8:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
 9fc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a00:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
 a04:	0000007c 	andeq	r0, r0, ip, ror r0
 a08:	08005b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, lr}
 a0c:	00000078 	andeq	r0, r0, r8, ror r0
 a10:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
 a14:	000000b4 	strheq	r0, [r0], -r4
 a18:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
 a1c:	0000007c 	andeq	r0, r0, ip, ror r0
	...
 a28:	00000054 	andeq	r0, r0, r4, asr r0
 a2c:	72d60002 	sbcsvc	r0, r6, #2
 a30:	00040000 	andeq	r0, r4, r0
 a34:	00000000 	andeq	r0, r0, r0
 a38:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
 a3c:	00000016 	andeq	r0, r0, r6, lsl r0
 a40:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
 a44:	00000038 	andeq	r0, r0, r8, lsr r0
 a48:	08005d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip, lr}
 a4c:	00000018 	andeq	r0, r0, r8, lsl r0
 a50:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
 a54:	00000038 	andeq	r0, r0, r8, lsr r0
 a58:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
 a5c:	00000038 	andeq	r0, r0, r8, lsr r0
 a60:	08005dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, lr}
 a64:	00000024 	andeq	r0, r0, r4, lsr #32
 a68:	08005df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 a6c:	00000038 	andeq	r0, r0, r8, lsr r0
 a70:	08005e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, lr}
 a74:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 a80:	0000005c 	andeq	r0, r0, ip, asr r0
 a84:	75590002 	ldrbvc	r0, [r9, #-2]
 a88:	00040000 	andeq	r0, r4, r0
 a8c:	00000000 	andeq	r0, r0, r0
 a90:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
 a94:	0000005c 	andeq	r0, r0, ip, asr r0
 a98:	08005eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, lr}
 a9c:	00000030 	andeq	r0, r0, r0, lsr r0
 aa0:	08005edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
 aa4:	00000030 	andeq	r0, r0, r0, lsr r0
 aa8:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
 aac:	0000003c 	andeq	r0, r0, ip, lsr r0
 ab0:	08005f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, lr}
 ab4:	00000094 	muleq	r0, r4, r0
 ab8:	08005fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
 abc:	0000002c 	andeq	r0, r0, ip, lsr #32
 ac0:	08006008 	stmdaeq	r0, {r3, sp, lr}
 ac4:	000000b8 	strheq	r0, [r0], -r8
 ac8:	080060c0 	stmdaeq	r0, {r6, r7, sp, lr}
 acc:	00000198 	muleq	r0, r8, r1
 ad0:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
 ad4:	0000005c 	andeq	r0, r0, ip, asr r0
	...
 ae0:	00000044 	andeq	r0, r0, r4, asr #32
 ae4:	80ec0002 	rschi	r0, ip, r2
 ae8:	00040000 	andeq	r0, r4, r0
 aec:	00000000 	andeq	r0, r0, r0
 af0:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 af4:	00000074 	andeq	r0, r0, r4, ror r0
 af8:	08006328 	stmdaeq	r0, {r3, r5, r8, r9, sp, lr}
 afc:	00000214 	andeq	r0, r0, r4, lsl r2
 b00:	0800653c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, sp, lr}
 b04:	000000ec 	andeq	r0, r0, ip, ror #1
 b08:	08006628 	stmdaeq	r0, {r3, r5, r9, sl, sp, lr}
 b0c:	00000054 	andeq	r0, r0, r4, asr r0
 b10:	0800667c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp, lr}
 b14:	0000004a 	andeq	r0, r0, sl, asr #32
 b18:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
 b1c:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 b28:	0000007c 	andeq	r0, r0, ip, ror r0
 b2c:	86650002 	strbthi	r0, [r5], -r2
 b30:	00040000 	andeq	r0, r4, r0
 b34:	00000000 	andeq	r0, r0, r0
 b38:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 b3c:	00000076 	andeq	r0, r0, r6, ror r0
 b40:	08006774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, sp, lr}
 b44:	0000002e 	andeq	r0, r0, lr, lsr #32
 b48:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
 b4c:	00000082 	andeq	r0, r0, r2, lsl #1
 b50:	08006828 	stmdaeq	r0, {r3, r5, fp, sp, lr}
 b54:	00000040 	andeq	r0, r0, r0, asr #32
 b58:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
 b5c:	00000040 	andeq	r0, r0, r0, asr #32
 b60:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
 b64:	00000048 	andeq	r0, r0, r8, asr #32
 b68:	080068f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, sp, lr}
 b6c:	00000040 	andeq	r0, r0, r0, asr #32
 b70:	08006930 	stmdaeq	r0, {r4, r5, r8, fp, sp, lr}
 b74:	0000001c 	andeq	r0, r0, ip, lsl r0
 b78:	0800694c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp, lr}
 b7c:	00000060 	andeq	r0, r0, r0, rrx
 b80:	080069ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, sp, lr}
 b84:	0000006c 	andeq	r0, r0, ip, rrx
 b88:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
 b8c:	00000138 	andeq	r0, r0, r8, lsr r1
 b90:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
 b94:	00000090 	muleq	r0, r0, r0
 b98:	08006be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp, lr}
 b9c:	00000006 	andeq	r0, r0, r6
	...
 ba8:	000001ac 	andeq	r0, r0, ip, lsr #3
 bac:	8e180002 	cdphi	0, 1, cr0, cr8, cr2, {0}
 bb0:	00040000 	andeq	r0, r4, r0
 bb4:	00000000 	andeq	r0, r0, r0
 bb8:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
 bbc:	00000224 	andeq	r0, r0, r4, lsr #4
 bc0:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
 bc4:	000000b2 	strheq	r0, [r0], -r2
 bc8:	08006ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, sp, lr}
 bcc:	000000b4 	strheq	r0, [r0], -r4
 bd0:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 bd4:	0000002c 	andeq	r0, r0, ip, lsr #32
 bd8:	08006fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, sp, lr}
 bdc:	00000040 	andeq	r0, r0, r0, asr #32
 be0:	08006fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, lr}
 be4:	0000002c 	andeq	r0, r0, ip, lsr #32
 be8:	0800700c 	stmdaeq	r0, {r2, r3, ip, sp, lr}
 bec:	0000002c 	andeq	r0, r0, ip, lsr #32
 bf0:	08007038 	stmdaeq	r0, {r3, r4, r5, ip, sp, lr}
 bf4:	00000020 	andeq	r0, r0, r0, lsr #32
 bf8:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
 bfc:	00000020 	andeq	r0, r0, r0, lsr #32
 c00:	08007078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, lr}
 c04:	0000001c 	andeq	r0, r0, ip, lsl r0
 c08:	08007094 	stmdaeq	r0, {r2, r4, r7, ip, sp, lr}
 c0c:	00000040 	andeq	r0, r0, r0, asr #32
 c10:	080070d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, sp, lr}
 c14:	00000018 	andeq	r0, r0, r8, lsl r0
 c18:	080070ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, lr}
 c1c:	00000050 	andeq	r0, r0, r0, asr r0
 c20:	0800713c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp, lr}
 c24:	00000040 	andeq	r0, r0, r0, asr #32
 c28:	0800717c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 c2c:	00000038 	andeq	r0, r0, r8, lsr r0
 c30:	080071b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp, lr}
 c34:	00000068 	andeq	r0, r0, r8, rrx
 c38:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
 c3c:	00000048 	andeq	r0, r0, r8, asr #32
 c40:	08007264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp, lr}
 c44:	00000120 	andeq	r0, r0, r0, lsr #2
 c48:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
 c4c:	00000048 	andeq	r0, r0, r8, asr #32
 c50:	080073cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp, lr}
 c54:	00000078 	andeq	r0, r0, r8, ror r0
 c58:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
 c5c:	0000007c 	andeq	r0, r0, ip, ror r0
 c60:	080074c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, lr}
 c64:	00000014 	andeq	r0, r0, r4, lsl r0
 c68:	080074d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, sp, lr}
 c6c:	000000c8 	andeq	r0, r0, r8, asr #1
 c70:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 c74:	00000068 	andeq	r0, r0, r8, rrx
 c78:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
 c7c:	00000128 	andeq	r0, r0, r8, lsr #2
 c80:	0800772c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp, lr}
 c84:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 c88:	080079e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp, lr}
 c8c:	00000350 	andeq	r0, r0, r0, asr r3
 c90:	08007d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, sp, lr}
 c94:	0000007c 	andeq	r0, r0, ip, ror r0
 c98:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 c9c:	000001dc 	ldrdeq	r0, [r0], -ip
 ca0:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
 ca4:	000000c0 	andeq	r0, r0, r0, asr #1
 ca8:	08008050 	stmdaeq	r0, {r4, r6, pc}
 cac:	00000120 	andeq	r0, r0, r0, lsr #2
 cb0:	08008170 	stmdaeq	r0, {r4, r5, r6, r8, pc}
 cb4:	00000166 	andeq	r0, r0, r6, ror #2
 cb8:	080082d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, pc}
 cbc:	00000076 	andeq	r0, r0, r6, ror r0
 cc0:	08008350 	stmdaeq	r0, {r4, r6, r8, r9, pc}
 cc4:	00000162 	andeq	r0, r0, r2, ror #2
 cc8:	080084b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, pc}
 ccc:	00000056 	andeq	r0, r0, r6, asr r0
 cd0:	0800850c 	stmdaeq	r0, {r2, r3, r8, sl, pc}
 cd4:	000000a0 	andeq	r0, r0, r0, lsr #1
 cd8:	080085ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, pc}
 cdc:	00000050 	andeq	r0, r0, r0, asr r0
 ce0:	080085fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, pc}
 ce4:	0000001e 	andeq	r0, r0, lr, lsl r0
 ce8:	0800861c 	stmdaeq	r0, {r2, r3, r4, r9, sl, pc}
 cec:	0000001e 	andeq	r0, r0, lr, lsl r0
 cf0:	0800863c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, pc}
 cf4:	000001a0 	andeq	r0, r0, r0, lsr #3
 cf8:	080087dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, pc}
 cfc:	0000005c 	andeq	r0, r0, ip, asr r0
 d00:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
 d04:	0000005c 	andeq	r0, r0, ip, asr r0
 d08:	08008894 	stmdaeq	r0, {r2, r4, r7, fp, pc}
 d0c:	0000028e 	andeq	r0, r0, lr, lsl #5
 d10:	08008b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, pc}
 d14:	0000000c 	andeq	r0, r0, ip
 d18:	08008b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, pc}
 d1c:	0000000c 	andeq	r0, r0, ip
 d20:	08008b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, pc}
 d24:	00000054 	andeq	r0, r0, r4, asr r0
 d28:	08008b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, pc}
 d2c:	00000024 	andeq	r0, r0, r4, lsr #32
 d30:	08008bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, pc}
 d34:	000000d4 	ldrdeq	r0, [r0], -r4
 d38:	08008c88 	stmdaeq	r0, {r3, r7, sl, fp, pc}
 d3c:	00000178 	andeq	r0, r0, r8, ror r1
 d40:	08008e00 	stmdaeq	r0, {r9, sl, fp, pc}
 d44:	00000048 	andeq	r0, r0, r8, asr #32
 d48:	08008e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, pc}
 d4c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 d58:	000000ec 	andeq	r0, r0, ip, ror #1
 d5c:	a7260002 	strge	r0, [r6, -r2]!
 d60:	00040000 	andeq	r0, r4, r0
 d64:	00000000 	andeq	r0, r0, r0
 d68:	08008e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, pc}
 d6c:	00000030 	andeq	r0, r0, r0, lsr r0
 d70:	08008ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, pc}
 d74:	0000001e 	andeq	r0, r0, lr, lsl r0
 d78:	08008ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, pc}
 d7c:	000000c8 	andeq	r0, r0, r8, asr #1
 d80:	08008f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, pc}
 d84:	00000034 	andeq	r0, r0, r4, lsr r0
 d88:	08008fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, pc}
 d8c:	0000001e 	andeq	r0, r0, lr, lsl r0
 d90:	08008fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, pc}
 d94:	00000034 	andeq	r0, r0, r4, lsr r0
 d98:	08009010 	stmdaeq	r0, {r4, ip, pc}
 d9c:	00000020 	andeq	r0, r0, r0, lsr #32
 da0:	08009030 	stmdaeq	r0, {r4, r5, ip, pc}
 da4:	00000034 	andeq	r0, r0, r4, lsr r0
 da8:	08009064 	stmdaeq	r0, {r2, r5, r6, ip, pc}
 dac:	0000004e 	andeq	r0, r0, lr, asr #32
 db0:	080090b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, pc}
 db4:	00000044 	andeq	r0, r0, r4, asr #32
 db8:	080090f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, pc}
 dbc:	0000004e 	andeq	r0, r0, lr, asr #32
 dc0:	08009148 	stmdaeq	r0, {r3, r6, r8, ip, pc}
 dc4:	00000094 	muleq	r0, r4, r0
 dc8:	080091dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, pc}
 dcc:	0000004e 	andeq	r0, r0, lr, asr #32
 dd0:	0800922c 	stmdaeq	r0, {r2, r3, r5, r9, ip, pc}
 dd4:	00000194 	muleq	r0, r4, r1
 dd8:	080093c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, pc}
 ddc:	000001d4 	ldrdeq	r0, [r0], -r4
 de0:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
 de4:	000001f4 	strdeq	r0, [r0], -r4
 de8:	08009788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, pc}
 dec:	00000068 	andeq	r0, r0, r8, rrx
 df0:	080097f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, pc}
 df4:	00000054 	andeq	r0, r0, r4, asr r0
 df8:	08009844 	stmdaeq	r0, {r2, r6, fp, ip, pc}
 dfc:	00000026 	andeq	r0, r0, r6, lsr #32
 e00:	0800986c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, pc}
 e04:	0000008c 	andeq	r0, r0, ip, lsl #1
 e08:	080098f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, pc}
 e0c:	00000054 	andeq	r0, r0, r4, asr r0
 e10:	0800994c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, pc}
 e14:	000000a4 	andeq	r0, r0, r4, lsr #1
 e18:	080099f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, pc}
 e1c:	0000015c 	andeq	r0, r0, ip, asr r1
 e20:	08009b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, pc}
 e24:	000001dc 	ldrdeq	r0, [r0], -ip
 e28:	08009d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip, pc}
 e2c:	000001cc 	andeq	r0, r0, ip, asr #3
 e30:	08009ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 e34:	0000006c 	andeq	r0, r0, ip, rrx
 e38:	08009f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, pc}
 e3c:	00000034 	andeq	r0, r0, r4, lsr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	080001c0 	stmdaeq	r0, {r6, r7, r8}
   4:	080001ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8}
   8:	080001d0 	stmdaeq	r0, {r4, r6, r7, r8}
   c:	08000200 	stmdaeq	r0, {r9}
  10:	08000200 	stmdaeq	r0, {r9}
  14:	08000242 	stmdaeq	r0, {r1, r6, r9}
  18:	08000244 	stmdaeq	r0, {r2, r6, r9}
  1c:	080002f0 	stmdaeq	r0, {r4, r5, r6, r7, r9}
  20:	080002f0 	stmdaeq	r0, {r4, r5, r6, r7, r9}
  24:	08000344 	stmdaeq	r0, {r2, r6, r8, r9}
	...
  30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  34:	00000000 	andeq	r0, r0, r0
  38:	08000344 	stmdaeq	r0, {r2, r6, r8, r9}
  3c:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
  40:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
  44:	0800038a 	stmdaeq	r0, {r1, r3, r7, r8, r9}
	...
  50:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  54:	080003f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9}
  58:	080003f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9}
  5c:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
  60:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
  64:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
	...
  70:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
  74:	08000604 	stmdaeq	r0, {r2, r9, sl}
  78:	08000604 	stmdaeq	r0, {r2, r9, sl}
  7c:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
  80:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
  84:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
  88:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
  8c:	0800072c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl}
  90:	0800072c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl}
  94:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
	...
  a0:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
  a4:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
  a8:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
  ac:	080009e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp}
  b0:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
  b4:	08000a16 	stmdaeq	r0, {r1, r2, r4, r9, fp}
  b8:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
  bc:	08000a5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, fp}
  c0:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
  c4:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
  c8:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
  cc:	08000aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp}
  d0:	08000aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp}
  d4:	08000ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp}
  d8:	08000ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp}
  dc:	08000afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp}
  e0:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
  e4:	08000b18 	stmdaeq	r0, {r3, r4, r8, r9, fp}
  e8:	08000b18 	stmdaeq	r0, {r3, r4, r8, r9, fp}
  ec:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
  f0:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
  f4:	08000b62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp}
  f8:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
  fc:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 100:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 104:	08000ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp}
 108:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
 10c:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
	...
 118:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
 11c:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 120:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 124:	08000cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp}
 128:	08000cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp}
 12c:	08000d14 	stmdaeq	r0, {r2, r4, r8, sl, fp}
 130:	08000d14 	stmdaeq	r0, {r2, r4, r8, sl, fp}
 134:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 138:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
 13c:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 140:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
 144:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
 148:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
 14c:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
 150:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
 154:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
 158:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
 15c:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
 160:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
 164:	08000e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp}
 168:	08000e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp}
 16c:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
 170:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
 174:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 178:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 17c:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
 180:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
 184:	08000eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp}
 188:	08000eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp}
 18c:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
 190:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
 194:	08000f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp}
 198:	08000f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp}
 19c:	08000f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp}
 1a0:	08000f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp}
 1a4:	08000fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp}
 1a8:	08000fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp}
 1ac:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 1b0:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 1b4:	0800102c 	stmdaeq	r0, {r2, r3, r5, ip}
 1b8:	0800102c 	stmdaeq	r0, {r2, r3, r5, ip}
 1bc:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 1c0:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 1c4:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
 1c8:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
 1cc:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 1d0:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 1d4:	08001234 	stmdaeq	r0, {r2, r4, r5, r9, ip}
 1d8:	08001234 	stmdaeq	r0, {r2, r4, r5, r9, ip}
 1dc:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 1e0:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 1e4:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 1e8:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 1ec:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
 1f0:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
 1f4:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 1f8:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 1fc:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 200:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 204:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 208:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 20c:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 210:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
 214:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
 218:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
 21c:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
 220:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
 224:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
 228:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
 22c:	08001470 	stmdaeq	r0, {r4, r5, r6, sl, ip}
 230:	08001470 	stmdaeq	r0, {r4, r5, r6, sl, ip}
 234:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
 238:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
 23c:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
 240:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
 244:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
 248:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
 24c:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
 250:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
 254:	0800159c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip}
 258:	0800159c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip}
 25c:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
 260:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
 264:	08001614 	stmdaeq	r0, {r2, r4, r9, sl, ip}
 268:	08001614 	stmdaeq	r0, {r2, r4, r9, sl, ip}
 26c:	08001650 	stmdaeq	r0, {r4, r6, r9, sl, ip}
 270:	08001650 	stmdaeq	r0, {r4, r6, r9, sl, ip}
 274:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
 278:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
 27c:	080016c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip}
 280:	080016c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip}
 284:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 288:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 28c:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
 290:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
 294:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
 298:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
 29c:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 2a0:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 2a4:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 2a8:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
 2ac:	08001850 	stmdaeq	r0, {r4, r6, fp, ip}
 2b0:	08001850 	stmdaeq	r0, {r4, r6, fp, ip}
 2b4:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
	...
 2c0:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
 2c4:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
 2c8:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
 2cc:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
 2d0:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
 2d4:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
 2d8:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
 2dc:	08001b82 	stmdaeq	r0, {r1, r7, r8, r9, fp, ip}
 2e0:	08001b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip}
 2e4:	08001bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, ip}
 2e8:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
 2ec:	08001bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip}
 2f0:	08001bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip}
 2f4:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 2f8:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 2fc:	08001c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, ip}
 300:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
 304:	08001caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip}
 308:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
 30c:	08001cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip}
 310:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
 314:	08001cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip}
 318:	08001cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip}
 31c:	08001d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip}
 320:	08001d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip}
 324:	08001d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, ip}
 328:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
 32c:	08001d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, ip}
 330:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
 334:	08001dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, ip}
 338:	08001dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip}
 33c:	08001e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp, ip}
 340:	08001e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip}
 344:	08001e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, ip}
 348:	08001e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip}
 34c:	08001e7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, ip}
 350:	08001e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip}
 354:	08001eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, ip}
 358:	08001eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip}
 35c:	08001ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip}
 360:	08001ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip}
 364:	08001f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip}
 368:	08001f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip}
 36c:	08001f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip}
 370:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
 374:	08001fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, ip}
 378:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
 37c:	08001ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 380:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 384:	08002086 	stmdaeq	r0, {r1, r2, r7, sp}
 388:	08002088 	stmdaeq	r0, {r3, r7, sp}
 38c:	080020c0 	stmdaeq	r0, {r6, r7, sp}
 390:	080020c0 	stmdaeq	r0, {r6, r7, sp}
 394:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
 398:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
 39c:	0800218e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sp}
 3a0:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
 3a4:	080021c8 	stmdaeq	r0, {r3, r6, r7, r8, sp}
	...
 3b0:	080021c8 	stmdaeq	r0, {r3, r6, r7, r8, sp}
 3b4:	080021e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sp}
 3b8:	080021e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp}
 3bc:	08002204 	stmdaeq	r0, {r2, r9, sp}
 3c0:	08002204 	stmdaeq	r0, {r2, r9, sp}
 3c4:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
 3c8:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
 3cc:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
 3d0:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
 3d4:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
 3d8:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
 3dc:	080022dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp}
 3e0:	080022dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp}
 3e4:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
	...
 3f0:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
 3f4:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
 3f8:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
 3fc:	08002508 	stmdaeq	r0, {r3, r8, sl, sp}
 400:	08002508 	stmdaeq	r0, {r3, r8, sl, sp}
 404:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
 408:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
 40c:	08002582 	stmdaeq	r0, {r1, r7, r8, sl, sp}
 410:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
 414:	080025c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, sp}
 418:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
 41c:	08002602 	stmdaeq	r0, {r1, r9, sl, sp}
 420:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
 424:	08002642 	stmdaeq	r0, {r1, r6, r9, sl, sp}
 428:	08002644 	stmdaeq	r0, {r2, r6, r9, sl, sp}
 42c:	08002682 	stmdaeq	r0, {r1, r7, r9, sl, sp}
 430:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
 434:	080026be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, sp}
 438:	080026c0 	stmdaeq	r0, {r6, r7, r9, sl, sp}
 43c:	080026fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, sp}
 440:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
 444:	08002740 	stmdaeq	r0, {r6, r8, r9, sl, sp}
 448:	08002740 	stmdaeq	r0, {r6, r8, r9, sl, sp}
 44c:	0800277e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp}
 450:	08002780 	stmdaeq	r0, {r7, r8, r9, sl, sp}
 454:	080027be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, sp}
 458:	080027c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp}
 45c:	08002802 	stmdaeq	r0, {r1, fp, sp}
 460:	08002804 	stmdaeq	r0, {r2, fp, sp}
 464:	08002842 	stmdaeq	r0, {r1, r6, fp, sp}
 468:	08002844 	stmdaeq	r0, {r2, r6, fp, sp}
 46c:	08002884 	stmdaeq	r0, {r2, r7, fp, sp}
 470:	08002884 	stmdaeq	r0, {r2, r7, fp, sp}
 474:	080028c4 	stmdaeq	r0, {r2, r6, r7, fp, sp}
 478:	080028c4 	stmdaeq	r0, {r2, r6, r7, fp, sp}
 47c:	08002904 	stmdaeq	r0, {r2, r8, fp, sp}
 480:	08002904 	stmdaeq	r0, {r2, r8, fp, sp}
 484:	08002942 	stmdaeq	r0, {r1, r6, r8, fp, sp}
 488:	08002944 	stmdaeq	r0, {r2, r6, r8, fp, sp}
 48c:	08002962 	stmdaeq	r0, {r1, r5, r6, r8, fp, sp}
 490:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
 494:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
 498:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
 49c:	080029be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, sp}
 4a0:	080029c0 	stmdaeq	r0, {r6, r7, r8, fp, sp}
 4a4:	08002a00 	stmdaeq	r0, {r9, fp, sp}
 4a8:	08002a00 	stmdaeq	r0, {r9, fp, sp}
 4ac:	08002a3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, fp, sp}
 4b0:	08002a40 	stmdaeq	r0, {r6, r9, fp, sp}
 4b4:	08002a60 	stmdaeq	r0, {r5, r6, r9, fp, sp}
 4b8:	08002a60 	stmdaeq	r0, {r5, r6, r9, fp, sp}
 4bc:	08002a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, sp}
 4c0:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
 4c4:	08002ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, sp}
 4c8:	08002ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, sp}
 4cc:	08002b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, sp}
 4d0:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
 4d4:	08002b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, sp}
 4d8:	08002b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, sp}
 4dc:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
 4e0:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
 4e4:	08002bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp}
 4e8:	08002bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp}
 4ec:	08002c62 	stmdaeq	r0, {r1, r5, r6, sl, fp, sp}
 4f0:	08002c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp}
 4f4:	08002c90 	stmdaeq	r0, {r4, r7, sl, fp, sp}
 4f8:	08002c90 	stmdaeq	r0, {r4, r7, sl, fp, sp}
 4fc:	08002cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, sp}
 500:	08002cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, sp}
 504:	08002d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp}
	...
 510:	08002d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp}
 514:	08002ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp}
 518:	08002ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp}
 51c:	08002f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp}
 520:	08002f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp}
 524:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
 528:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
 52c:	0800300a 	stmdaeq	r0, {r1, r3, ip, sp}
 530:	0800300c 	stmdaeq	r0, {r2, r3, ip, sp}
 534:	08003040 	stmdaeq	r0, {r6, ip, sp}
 538:	08003040 	stmdaeq	r0, {r6, ip, sp}
 53c:	08003074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp}
 540:	08003074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp}
 544:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
 548:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
 54c:	080030aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, sp}
 550:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
 554:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
 558:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
 55c:	0800311e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip, sp}
 560:	08003120 	stmdaeq	r0, {r5, r8, ip, sp}
 564:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
 568:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
 56c:	0800317c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp}
 570:	0800317c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp}
 574:	080031ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp}
 578:	080031ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp}
 57c:	080031d0 	stmdaeq	r0, {r4, r6, r7, r8, ip, sp}
 580:	080031d0 	stmdaeq	r0, {r4, r6, r7, r8, ip, sp}
 584:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
 588:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
 58c:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
 590:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
 594:	08003316 	stmdaeq	r0, {r1, r2, r4, r8, r9, ip, sp}
 598:	08003318 	stmdaeq	r0, {r3, r4, r8, r9, ip, sp}
 59c:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
 5a0:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
 5a4:	08003424 	stmdaeq	r0, {r2, r5, sl, ip, sp}
	...
 5b0:	08003424 	stmdaeq	r0, {r2, r5, sl, ip, sp}
 5b4:	080034fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp}
 5b8:	080034fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp}
 5bc:	08003582 	stmdaeq	r0, {r1, r7, r8, sl, ip, sp}
 5c0:	08003584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp}
 5c4:	08003734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp}
 5c8:	08003734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp}
 5cc:	0800377c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
 5d0:	0800377c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
 5d4:	080037b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, ip, sp}
 5d8:	080037b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip, sp}
 5dc:	080037f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, ip, sp}
 5e0:	080037f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
 5e4:	08003832 	stmdaeq	r0, {r1, r4, r5, fp, ip, sp}
 5e8:	08003834 	stmdaeq	r0, {r2, r4, r5, fp, ip, sp}
 5ec:	0800386a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip, sp}
 5f0:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
 5f4:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
 5f8:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
 5fc:	080038ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, sp}
 600:	080038f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, ip, sp}
 604:	0800392e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, ip, sp}
 608:	08003930 	stmdaeq	r0, {r4, r5, r8, fp, ip, sp}
 60c:	0800396e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp, ip, sp}
 610:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
 614:	08003a0a 	stmdaeq	r0, {r1, r3, r9, fp, ip, sp}
 618:	08003a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp}
 61c:	08003a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip, sp}
 620:	08003a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, sp}
 624:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
 628:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
 62c:	08003a82 	stmdaeq	r0, {r1, r7, r9, fp, ip, sp}
 630:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
 634:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
 638:	08003aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip, sp}
 63c:	08003ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, sp}
 640:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
 644:	08003af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, ip, sp}
 648:	08003af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip, sp}
 64c:	08003b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp, ip, sp}
 650:	08003b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, sp}
 654:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
 658:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
 65c:	08003bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, sp}
 660:	08003bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, sp}
 664:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 668:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 66c:	08003c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, sp}
 670:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
 674:	08003ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip, sp}
	...
 680:	08003ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp}
 684:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
 688:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
 68c:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
 690:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
 694:	08003dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
 698:	08003de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, sp}
 69c:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
 6a0:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
 6a4:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
 6a8:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
 6ac:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
 6b0:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
 6b4:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
 6b8:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
 6bc:	08003ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp}
	...
 6c8:	08003ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp}
 6cc:	08003ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
 6d0:	08003ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip, sp}
 6d4:	0800401c 	stmdaeq	r0, {r2, r3, r4, lr}
 6d8:	0800401c 	stmdaeq	r0, {r2, r3, r4, lr}
 6dc:	0800406a 	stmdaeq	r0, {r1, r3, r5, r6, lr}
 6e0:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
 6e4:	08004088 	stmdaeq	r0, {r3, r7, lr}
 6e8:	08004088 	stmdaeq	r0, {r3, r7, lr}
 6ec:	080040a4 	stmdaeq	r0, {r2, r5, r7, lr}
 6f0:	080040a4 	stmdaeq	r0, {r2, r5, r7, lr}
 6f4:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
 6f8:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
 6fc:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
 700:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
 704:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
 708:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
 70c:	080042e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, lr}
 710:	080042e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, lr}
 714:	0800433c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, lr}
 718:	0800433c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, lr}
 71c:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
 720:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
 724:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
 728:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
 72c:	08004400 	stmdaeq	r0, {sl, lr}
 730:	08004400 	stmdaeq	r0, {sl, lr}
 734:	0800441c 	stmdaeq	r0, {r2, r3, r4, sl, lr}
 738:	0800441c 	stmdaeq	r0, {r2, r3, r4, sl, lr}
 73c:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}
 740:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}
 744:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
 748:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
 74c:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
 750:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
 754:	08004500 	stmdaeq	r0, {r8, sl, lr}
 758:	08004500 	stmdaeq	r0, {r8, sl, lr}
 75c:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
	...
 768:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
 76c:	0800453e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, lr}
 770:	08004540 	stmdaeq	r0, {r6, r8, sl, lr}
 774:	0800466c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, lr}
 778:	0800466c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, lr}
 77c:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
 780:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
 784:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
 788:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
 78c:	08004748 	stmdaeq	r0, {r3, r6, r8, r9, sl, lr}
 790:	08004748 	stmdaeq	r0, {r3, r6, r8, r9, sl, lr}
 794:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
 798:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
 79c:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
 7a0:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
 7a4:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
 7a8:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
 7ac:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 7b0:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 7b4:	0800492e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, lr}
 7b8:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
 7bc:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
 7c0:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
 7c4:	080049da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, lr}
 7c8:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
 7cc:	08004a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, lr}
 7d0:	08004a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, lr}
 7d4:	08004a3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, fp, lr}
 7d8:	08004a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, lr}
 7dc:	08004a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, lr}
 7e0:	08004a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, lr}
 7e4:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
 7e8:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
 7ec:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
 7f0:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
 7f4:	08004b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, lr}
 7f8:	08004b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, lr}
 7fc:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 800:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 804:	08004bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, lr}
 808:	08004bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, lr}
 80c:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
 810:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
 814:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
 818:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
 81c:	08004cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, lr}
 820:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
 824:	08004da2 	stmdaeq	r0, {r1, r5, r7, r8, sl, fp, lr}
 828:	08004da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, lr}
 82c:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
 830:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
 834:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
 838:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
 83c:	08004ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, lr}
 840:	08004ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, lr}
 844:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
 848:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
 84c:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
 850:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
 854:	08004f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, lr}
	...
 860:	08004f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, lr}
 864:	08004fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, lr}
 868:	08004fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, lr}
 86c:	08005148 	stmdaeq	r0, {r3, r6, r8, ip, lr}
 870:	08005148 	stmdaeq	r0, {r3, r6, r8, ip, lr}
 874:	08005222 	stmdaeq	r0, {r1, r5, r9, ip, lr}
 878:	08005224 	stmdaeq	r0, {r2, r5, r9, ip, lr}
 87c:	08005278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, lr}
 880:	08005278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, lr}
 884:	080052d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, lr}
 888:	080052d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, lr}
 88c:	080053a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, lr}
 890:	080053a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, lr}
 894:	0800541c 	stmdaeq	r0, {r2, r3, r4, sl, ip, lr}
 898:	0800541c 	stmdaeq	r0, {r2, r3, r4, sl, ip, lr}
 89c:	08005488 	stmdaeq	r0, {r3, r7, sl, ip, lr}
 8a0:	08005488 	stmdaeq	r0, {r3, r7, sl, ip, lr}
 8a4:	080054f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, lr}
 8a8:	080054f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, lr}
 8ac:	0800552c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, lr}
 8b0:	0800552c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, lr}
 8b4:	08005560 	stmdaeq	r0, {r5, r6, r8, sl, ip, lr}
 8b8:	08005560 	stmdaeq	r0, {r5, r6, r8, sl, ip, lr}
 8bc:	0800560c 	stmdaeq	r0, {r2, r3, r9, sl, ip, lr}
 8c0:	0800560c 	stmdaeq	r0, {r2, r3, r9, sl, ip, lr}
 8c4:	08005690 	stmdaeq	r0, {r4, r7, r9, sl, ip, lr}
 8c8:	08005690 	stmdaeq	r0, {r4, r7, r9, sl, ip, lr}
 8cc:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
 8d0:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
 8d4:	08005710 	stmdaeq	r0, {r4, r8, r9, sl, ip, lr}
 8d8:	08005710 	stmdaeq	r0, {r4, r8, r9, sl, ip, lr}
 8dc:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
 8e0:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
 8e4:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 8e8:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 8ec:	08005934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, lr}
 8f0:	08005934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, lr}
 8f4:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
 8f8:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
 8fc:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
 900:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
 904:	080059b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, lr}
 908:	080059b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, lr}
 90c:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
 910:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
 914:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
 918:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
 91c:	08005b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, lr}
 920:	08005b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, lr}
 924:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
 928:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
 92c:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
 930:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
 934:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
	...
 940:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
 944:	08005d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp, ip, lr}
 948:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
 94c:	08005d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip, lr}
 950:	08005d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip, lr}
 954:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
 958:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
 95c:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
 960:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
 964:	08005dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, lr}
 968:	08005dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, lr}
 96c:	08005df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 970:	08005df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 974:	08005e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, lr}
 978:	08005e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, lr}
 97c:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
	...
 988:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
 98c:	08005eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, lr}
 990:	08005eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, lr}
 994:	08005edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
 998:	08005edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
 99c:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
 9a0:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
 9a4:	08005f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, lr}
 9a8:	08005f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, lr}
 9ac:	08005fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
 9b0:	08005fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
 9b4:	08006008 	stmdaeq	r0, {r3, sp, lr}
 9b8:	08006008 	stmdaeq	r0, {r3, sp, lr}
 9bc:	080060c0 	stmdaeq	r0, {r6, r7, sp, lr}
 9c0:	080060c0 	stmdaeq	r0, {r6, r7, sp, lr}
 9c4:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
 9c8:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
 9cc:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
	...
 9d8:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 9dc:	08006328 	stmdaeq	r0, {r3, r5, r8, r9, sp, lr}
 9e0:	08006328 	stmdaeq	r0, {r3, r5, r8, r9, sp, lr}
 9e4:	0800653c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, sp, lr}
 9e8:	0800653c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, sp, lr}
 9ec:	08006628 	stmdaeq	r0, {r3, r5, r9, sl, sp, lr}
 9f0:	08006628 	stmdaeq	r0, {r3, r5, r9, sl, sp, lr}
 9f4:	0800667c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp, lr}
 9f8:	0800667c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp, lr}
 9fc:	080066c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, sp, lr}
 a00:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
 a04:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
	...
 a10:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 a14:	08006772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
 a18:	08006774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, sp, lr}
 a1c:	080067a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp, lr}
 a20:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
 a24:	08006826 	stmdaeq	r0, {r1, r2, r5, fp, sp, lr}
 a28:	08006828 	stmdaeq	r0, {r3, r5, fp, sp, lr}
 a2c:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
 a30:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
 a34:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
 a38:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
 a3c:	080068f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, sp, lr}
 a40:	080068f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, sp, lr}
 a44:	08006930 	stmdaeq	r0, {r4, r5, r8, fp, sp, lr}
 a48:	08006930 	stmdaeq	r0, {r4, r5, r8, fp, sp, lr}
 a4c:	0800694c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp, lr}
 a50:	0800694c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp, lr}
 a54:	080069ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, sp, lr}
 a58:	080069ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, sp, lr}
 a5c:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
 a60:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
 a64:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
 a68:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
 a6c:	08006be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp, lr}
 a70:	08006be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp, lr}
 a74:	08006be6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, fp, sp, lr}
	...
 a80:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
 a84:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
 a88:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
 a8c:	08006ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, sp, lr}
 a90:	08006ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, sp, lr}
 a94:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 a98:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 a9c:	08006fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, sp, lr}
 aa0:	08006fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, sp, lr}
 aa4:	08006fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, lr}
 aa8:	08006fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, lr}
 aac:	0800700c 	stmdaeq	r0, {r2, r3, ip, sp, lr}
 ab0:	0800700c 	stmdaeq	r0, {r2, r3, ip, sp, lr}
 ab4:	08007038 	stmdaeq	r0, {r3, r4, r5, ip, sp, lr}
 ab8:	08007038 	stmdaeq	r0, {r3, r4, r5, ip, sp, lr}
 abc:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
 ac0:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
 ac4:	08007078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, lr}
 ac8:	08007078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, lr}
 acc:	08007094 	stmdaeq	r0, {r2, r4, r7, ip, sp, lr}
 ad0:	08007094 	stmdaeq	r0, {r2, r4, r7, ip, sp, lr}
 ad4:	080070d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, sp, lr}
 ad8:	080070d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, sp, lr}
 adc:	080070ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, lr}
 ae0:	080070ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, lr}
 ae4:	0800713c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp, lr}
 ae8:	0800713c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp, lr}
 aec:	0800717c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 af0:	0800717c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 af4:	080071b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp, lr}
 af8:	080071b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp, lr}
 afc:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
 b00:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
 b04:	08007264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp, lr}
 b08:	08007264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp, lr}
 b0c:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
 b10:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
 b14:	080073cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp, lr}
 b18:	080073cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp, lr}
 b1c:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
 b20:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
 b24:	080074c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, lr}
 b28:	080074c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, lr}
 b2c:	080074d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, sp, lr}
 b30:	080074d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, sp, lr}
 b34:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 b38:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
 b3c:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
 b40:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
 b44:	0800772c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp, lr}
 b48:	0800772c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp, lr}
 b4c:	080079e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp, lr}
 b50:	080079e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp, lr}
 b54:	08007d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, sp, lr}
 b58:	08007d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, sp, lr}
 b5c:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 b60:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 b64:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
 b68:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
 b6c:	08008050 	stmdaeq	r0, {r4, r6, pc}
 b70:	08008050 	stmdaeq	r0, {r4, r6, pc}
 b74:	08008170 	stmdaeq	r0, {r4, r5, r6, r8, pc}
 b78:	08008170 	stmdaeq	r0, {r4, r5, r6, r8, pc}
 b7c:	080082d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, pc}
 b80:	080082d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, pc}
 b84:	0800834e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, pc}
 b88:	08008350 	stmdaeq	r0, {r4, r6, r8, r9, pc}
 b8c:	080084b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, pc}
 b90:	080084b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, pc}
 b94:	0800850a 	stmdaeq	r0, {r1, r3, r8, sl, pc}
 b98:	0800850c 	stmdaeq	r0, {r2, r3, r8, sl, pc}
 b9c:	080085ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, pc}
 ba0:	080085ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, pc}
 ba4:	080085fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, pc}
 ba8:	080085fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, pc}
 bac:	0800861a 	stmdaeq	r0, {r1, r3, r4, r9, sl, pc}
 bb0:	0800861c 	stmdaeq	r0, {r2, r3, r4, r9, sl, pc}
 bb4:	0800863a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, pc}
 bb8:	0800863c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, pc}
 bbc:	080087dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, pc}
 bc0:	080087dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, pc}
 bc4:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
 bc8:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
 bcc:	08008894 	stmdaeq	r0, {r2, r4, r7, fp, pc}
 bd0:	08008894 	stmdaeq	r0, {r2, r4, r7, fp, pc}
 bd4:	08008b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, pc}
 bd8:	08008b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, pc}
 bdc:	08008b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, pc}
 be0:	08008b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, pc}
 be4:	08008b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, pc}
 be8:	08008b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, pc}
 bec:	08008b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, pc}
 bf0:	08008b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, pc}
 bf4:	08008bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, pc}
 bf8:	08008bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, pc}
 bfc:	08008c88 	stmdaeq	r0, {r3, r7, sl, fp, pc}
 c00:	08008c88 	stmdaeq	r0, {r3, r7, sl, fp, pc}
 c04:	08008e00 	stmdaeq	r0, {r9, sl, fp, pc}
 c08:	08008e00 	stmdaeq	r0, {r9, sl, fp, pc}
 c0c:	08008e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, pc}
 c10:	08008e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, pc}
 c14:	08008e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, pc}
	...
 c20:	08008e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, pc}
 c24:	08008ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, pc}
 c28:	08008ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, pc}
 c2c:	08008ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, pc}
 c30:	08008ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, pc}
 c34:	08008f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, pc}
 c38:	08008f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, pc}
 c3c:	08008fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, pc}
 c40:	08008fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, pc}
 c44:	08008fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, pc}
 c48:	08008fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, pc}
 c4c:	08009010 	stmdaeq	r0, {r4, ip, pc}
 c50:	08009010 	stmdaeq	r0, {r4, ip, pc}
 c54:	08009030 	stmdaeq	r0, {r4, r5, ip, pc}
 c58:	08009030 	stmdaeq	r0, {r4, r5, ip, pc}
 c5c:	08009064 	stmdaeq	r0, {r2, r5, r6, ip, pc}
 c60:	08009064 	stmdaeq	r0, {r2, r5, r6, ip, pc}
 c64:	080090b2 	stmdaeq	r0, {r1, r4, r5, r7, ip, pc}
 c68:	080090b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, pc}
 c6c:	080090f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, pc}
 c70:	080090f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, pc}
 c74:	08009146 	stmdaeq	r0, {r1, r2, r6, r8, ip, pc}
 c78:	08009148 	stmdaeq	r0, {r3, r6, r8, ip, pc}
 c7c:	080091dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, pc}
 c80:	080091dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, pc}
 c84:	0800922a 	stmdaeq	r0, {r1, r3, r5, r9, ip, pc}
 c88:	0800922c 	stmdaeq	r0, {r2, r3, r5, r9, ip, pc}
 c8c:	080093c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, pc}
 c90:	080093c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, pc}
 c94:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
 c98:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
 c9c:	08009788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, pc}
 ca0:	08009788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, pc}
 ca4:	080097f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, pc}
 ca8:	080097f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, pc}
 cac:	08009844 	stmdaeq	r0, {r2, r6, fp, ip, pc}
 cb0:	08009844 	stmdaeq	r0, {r2, r6, fp, ip, pc}
 cb4:	0800986a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip, pc}
 cb8:	0800986c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, pc}
 cbc:	080098f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, pc}
 cc0:	080098f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, pc}
 cc4:	0800994c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, pc}
 cc8:	0800994c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, pc}
 ccc:	080099f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, pc}
 cd0:	080099f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, pc}
 cd4:	08009b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, pc}
 cd8:	08009b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, pc}
 cdc:	08009d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip, pc}
 ce0:	08009d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip, pc}
 ce4:	08009ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 ce8:	08009ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 cec:	08009f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, pc}
 cf0:	08009f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, pc}
 cf4:	08009f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, pc}
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000259 	andeq	r0, r0, r9, asr r2
       4:	01d00002 	bicseq	r0, r0, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	2f006372 	svccs	0x00006372
      20:	2f727375 	svccs	0x00727375
      24:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      28:	2f656475 	svccs	0x00656475
      2c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      30:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe94 <_estack+0xdffcfe94>
      34:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      38:	2f00656e 	svccs	0x0000656e
      3c:	2f727375 	svccs	0x00727375
      40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      44:	2f656475 	svccs	0x00656475
      48:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      4c:	6c006269 	sfmvs	f6, 4, [r0], {105}	; 0x69
      50:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
      54:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      58:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      5c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      60:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      64:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
      68:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
      6c:	2f736569 	svccs	0x00736569
      70:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      74:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
      78:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
      7c:	2f54532f 	svccs	0x0054532f
      80:	334d5453 	movtcc	r5, #54355	; 0xd453
      84:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
      88:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
      8c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
      90:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
      94:	4f432f62 	svcmi	0x00432f62
      98:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
      9c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
      a0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
      a4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
      a8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
      ac:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
      b0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
      b4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      b8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      bc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
      c0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      c4:	445f6870 	ldrbmi	r6, [pc], #-2160	; cc <_Min_Heap_Size+0xcc>
      c8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
      cc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
      d0:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
      d4:	74552f62 	ldrbvc	r2, [r5], #-3938	; 0xf62
      d8:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xc69
      dc:	2f736569 	svccs	0x00736569
      e0:	334d5453 	movtcc	r5, #54355	; 0xd453
      e4:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
      e8:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
      ec:	6f637369 	svcvs	0x00637369
      f0:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
      f4:	62696c00 	rsbvs	r6, r9, #0, 24
      f8:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
      fc:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     100:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     104:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     108:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     10c:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     110:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     114:	2f797265 	svccs	0x00797265
     118:	432f2e2e 	teqmi	pc, #736	; 0x2e0
     11c:	6f6d6d6f 	svcvs	0x006d6d6f
     120:	696c006e 	stmdbvs	ip!, {r1, r2, r3, r5, r6}^
     124:	4f432f62 	svcmi	0x00432f62
     128:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     12c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     130:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     134:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     138:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     13c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     140:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     144:	5349534d 	movtpl	r5, #37709	; 0x934d
     148:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     14c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     150:	616d0000 	cmnvs	sp, r0
     154:	632e6e69 	teqvs	lr, #1680	; 0x690
     158:	00000100 	andeq	r0, r0, r0, lsl #2
     15c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     160:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     164:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     168:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     16c:	00000200 	andeq	r0, r0, r0, lsl #4
     170:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     174:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     178:	00000300 	andeq	r0, r0, r0, lsl #6
     17c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     180:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     184:	00682e78 	rsbeq	r2, r8, r8, ror lr
     188:	73000004 	movwvc	r0, #4
     18c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     190:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     194:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     198:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     19c:	73000005 	movwvc	r0, #5
     1a0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1a4:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
     1a8:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     1ac:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     1b0:	5f797265 	svcpl	0x00797265
     1b4:	6467336c 	strbtvs	r3, [r7], #-876	; 0x36c
     1b8:	682e3032 	stmdavs	lr!, {r1, r4, r5, ip, sp}
     1bc:	00000600 	andeq	r0, r0, r0, lsl #12
     1c0:	746e6f66 	strbtvc	r6, [lr], #-3942	; 0xf66
     1c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     1c8:	63000007 	movwvs	r0, #7
     1cc:	5f65726f 	svcpl	0x0065726f
     1d0:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     1d4:	00080068 	andeq	r0, r8, r8, rrx
     1d8:	05000000 	streq	r0, [r0, #-0]
     1dc:	0001c002 	andeq	ip, r1, r2
     1e0:	01090308 	tsteq	r9, r8, lsl #6
     1e4:	01024b30 	tsteq	r2, r0, lsr fp
     1e8:	00010100 	andeq	r0, r1, r0, lsl #2
     1ec:	01d00205 	bicseq	r0, r0, r5, lsl #4
     1f0:	0f030800 	svceq	0x00030800
     1f4:	2f3d4001 	svccs	0x003d4001
     1f8:	592f2f2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
     1fc:	01000502 	tsteq	r0, r2, lsl #10
     200:	02050001 	andeq	r0, r5, #1
     204:	08000200 	stmdaeq	r0, {r9}
     208:	3f011c03 	svccc	0x00011c03
     20c:	2f2f2f2f 	svccs	0x002f2f2f
     210:	5c2f2f2f 	stcpl	15, cr2, [pc], #-188	; 15c <_Min_Heap_Size+0x15c>
     214:	024c2f2f 	subeq	r2, ip, #47, 30	; 0xbc
     218:	01010003 	tsteq	r1, r3
     21c:	44020500 	strmi	r0, [r2], #-1280	; 0x500
     220:	03080002 	movweq	r0, #32770	; 0x8002
     224:	2f340131 	svccs	0x00340131
     228:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 174 <_Min_Heap_Size+0x174>
     22c:	9f83513d 	svcls	0x0083513d
     230:	02cabb9f 	sbceq	fp, sl, #162816	; 0x27c00
     234:	0101000c 	tsteq	r1, ip
     238:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     23c:	03080002 	movweq	r0, #32770	; 0x8002
     240:	3d0100cd 	stccc	0, cr0, [r1, #-820]	; 0xfffffccc
     244:	31302f2f 	teqcc	r0, pc, lsr #30
     248:	005a595c 	subseq	r5, sl, ip, asr r9
     24c:	06020402 	streq	r0, [r2], -r2, lsl #8
     250:	0402003c 	streq	r0, [r2], #-60	; 0x3c
     254:	4b063c01 	blmi	18f260 <_Min_Stack_Size+0x18ee60>
     258:	01000602 	tsteq	r0, r2, lsl #12
     25c:	00008801 	andeq	r8, r0, r1, lsl #16
     260:	47000200 	strmi	r0, [r0, -r0, lsl #4]
     264:	02000000 	andeq	r0, r0, #0
     268:	0d0efb01 	vstreq	d15, [lr, #-4]
     26c:	01010100 	mrseq	r0, (UNDEF: 17)
     270:	00000001 	andeq	r0, r0, r1
     274:	01000001 	tsteq	r0, r1
     278:	2f62696c 	svccs	0x0062696c
     27c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     280:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 174 <_Min_Heap_Size+0x174>
     284:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     288:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     28c:	00003446 	andeq	r3, r0, r6, asr #8
     290:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     294:	5f707574 	svcpl	0x00707574
     298:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     29c:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     2a0:	33345f39 	teqcc	r4, #57, 30	; 0xe4
     2a4:	2e787839 	mrccs	8, 3, r7, cr8, cr9, {1}
     2a8:	00010073 	andeq	r0, r1, r3, ror r0
     2ac:	05000000 	streq	r0, [r0, #-0]
     2b0:	00034402 	andeq	r4, r3, r2, lsl #8
     2b4:	00ca0308 	sbceq	r0, sl, r8, lsl #6
     2b8:	21232101 	teqcs	r3, r1, lsl #2
     2bc:	21232121 	teqcs	r3, r1, lsr #2
     2c0:	21212121 	teqcs	r1, r1, lsr #2
     2c4:	31212321 	teqcc	r1, r1, lsr #6
     2c8:	30232121 	eorcc	r2, r3, r1, lsr #2
     2cc:	2065032f 	rsbcs	r0, r5, pc, lsr #6
     2d0:	36322f34 	shasxcc	r2, r2, r4
     2d4:	01000202 	tsteq	r0, r2, lsl #4
     2d8:	02050001 	andeq	r0, r5, #1
     2dc:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     2e0:	0100f603 	tsteq	r0, r3, lsl #12
     2e4:	01000102 	tsteq	r0, r2, lsl #2
     2e8:	0001ad01 	andeq	sl, r1, r1, lsl #26
     2ec:	27000200 	strcs	r0, [r0, -r0, lsl #4]
     2f0:	02000001 	andeq	r0, r0, #1
     2f4:	0d0efb01 	vstreq	d15, [lr, #-4]
     2f8:	01010100 	mrseq	r0, (UNDEF: 17)
     2fc:	00000001 	andeq	r0, r0, r1
     300:	01000001 	tsteq	r0, r1
     304:	2f62696c 	svccs	0x0062696c
     308:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     30c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 200 <_Min_Heap_Size+0x200>
     310:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     314:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     318:	732f3446 	teqvc	pc, #1174405120	; 0x46000000
     31c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     320:	2f007075 	svccs	0x00007075
     324:	2f727375 	svccs	0x00727375
     328:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     32c:	2f656475 	svccs	0x00656475
     330:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     334:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 198 <_Min_Heap_Size+0x198>
     338:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     33c:	2f00656e 	svccs	0x0000656e
     340:	2f727375 	svccs	0x00727375
     344:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     348:	2f656475 	svccs	0x00656475
     34c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     350:	6c006269 	sfmvs	f6, 4, [r0], {105}	; 0x69
     354:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
     358:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     35c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     360:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     364:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     368:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     36c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     370:	2f736569 	svccs	0x00736569
     374:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     378:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     37c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     380:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
     384:	4f432f62 	svcmi	0x00432f62
     388:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     38c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     390:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     394:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     398:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     39c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     3a0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     3a4:	5349534d 	movtpl	r5, #37709	; 0x934d
     3a8:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     3ac:	2f656369 	svccs	0x00656369
     3b0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     3b4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     3b8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     3bc:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     3c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     3c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     3c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     3cc:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     3d0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     3d4:	632e7878 	teqvs	lr, #120, 16	; 0x780000
     3d8:	00000100 	andeq	r0, r0, r0, lsl #2
     3dc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     3e0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     3e4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     3e8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     3ec:	00000200 	andeq	r0, r0, r0, lsl #4
     3f0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     3f4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     3f8:	00000300 	andeq	r0, r0, r0, lsl #6
     3fc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     400:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     404:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     408:	74730000 	ldrbtvc	r0, [r3], #-0
     40c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     410:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     414:	00050068 	andeq	r0, r5, r8, rrx
     418:	05000000 	streq	r0, [r0, #-0]
     41c:	00038c02 	andeq	r8, r3, r2, lsl #24
     420:	01d00308 	bicseq	r0, r0, r8, lsl #6
     424:	69863101 	stmibvs	r6, {r0, r8, ip, sp}
     428:	693f853f 	ldmdbvs	pc!, {r0, r1, r2, r3, r4, r5, r8, sl, pc}	; <UNPREDICTABLE>
     42c:	024c3444 	subeq	r3, ip, #68, 8	; 0x44000000
     430:	01010007 	tsteq	r1, r7
     434:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     438:	03080003 	movweq	r0, #32771	; 0x8003
     43c:	3d01029d 	sfmcc	f0, 4, [r1, #-628]	; 0xfffffd8c
     440:	3d775aa1 	vldmdbcc	r7!, {s11-s171}
     444:	67263d22 	strvs	r3, [r6, -r2, lsr #26]!
     448:	cbdb3f5a 	blgt	ff6d01b8 <_estack+0xdf6a01b8>
     44c:	3d226783 	stccc	7, cr6, [r2, #-524]!	; 0xfffffdf4
     450:	02679224 	rsbeq	r9, r7, #36, 4	; 0x40000002
     454:	01010010 	tsteq	r1, r0, lsl r0
     458:	ec020500 	cfstr32	mvfx0, [r2], {-0}
     45c:	03080004 	movweq	r0, #32772	; 0x8004
     460:	400102d5 	ldrdmi	r0, [r1], -r5
     464:	0402004d 	streq	r0, [r2], #-77	; 0x4d
     468:	02006b01 	andeq	r6, r0, #1024	; 0x400
     46c:	00590104 	subseq	r0, r9, r4, lsl #2
     470:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     474:	31406876 	hvccc	1670	; 0x686
     478:	4d69673f 	stclmi	7, cr6, [r9, #-252]!	; 0xffffff04
     47c:	69406969 	stmdbvs	r0, {r0, r3, r5, r6, r8, fp, sp, lr}^
     480:	01040200 	mrseq	r0, R12_usr
     484:	6b062006 	blvs	1884a4 <_Min_Stack_Size+0x1880a4>
     488:	0069674d 	rsbeq	r6, r9, sp, asr #14
     48c:	06010402 	streq	r0, [r1], -r2, lsl #8
     490:	09030620 	stmdbeq	r3, {r5, r9, sl}
     494:	000d0266 	andeq	r0, sp, r6, ror #4
     498:	01f80101 	mvnseq	r0, r1, lsl #2
     49c:	00020000 	andeq	r0, r2, r0
     4a0:	00000186 	andeq	r0, r0, r6, lsl #3
     4a4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     4a8:	0101000d 	tsteq	r1, sp
     4ac:	00000101 	andeq	r0, r0, r1, lsl #2
     4b0:	00000100 	andeq	r0, r0, r0, lsl #2
     4b4:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     4b8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     4bc:	5f584554 	svcpl	0x00584554
     4c0:	5f46344d 	svcpl	0x0046344d
     4c4:	334d5453 	movtcc	r5, #54355	; 0xd453
     4c8:	2f344632 	svccs	0x00344632
     4cc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     4d0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     4d4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     4d8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     4dc:	5f787834 	svcpl	0x00787834
     4e0:	50647453 	rsbpl	r7, r4, r3, asr r4
     4e4:	70697265 	rsbvc	r7, r9, r5, ror #4
     4e8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     4ec:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     4f0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     4f4:	73752f00 	cmnvc	r5, #0, 30
     4f8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     4fc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     500:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     504:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     508:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     50c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     510:	73752f00 	cmnvc	r5, #0, 30
     514:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     518:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     51c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     520:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     524:	62696c00 	rsbvs	r6, r9, #0, 24
     528:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     52c:	5f584554 	svcpl	0x00584554
     530:	5f46344d 	svcpl	0x0046344d
     534:	334d5453 	movtcc	r5, #54355	; 0xd453
     538:	2f344632 	svccs	0x00344632
     53c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     540:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     544:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     548:	2f534953 	svccs	0x00534953
     54c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     550:	00656475 	rsbeq	r6, r5, r5, ror r4
     554:	2f62696c 	svccs	0x0062696c
     558:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     55c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 450 <_Min_Stack_Size+0x50>
     560:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     564:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     568:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 458 <_Min_Stack_Size+0x58>
     56c:	61726269 	cmnvs	r2, r9, ror #4
     570:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     574:	534d432f 	movtpl	r4, #54063	; 0xd32f
     578:	442f5349 	strtmi	r5, [pc], #-841	; 580 <_Min_Stack_Size+0x180>
     57c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     580:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
     584:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     588:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     58c:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     590:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     594:	6c006564 	cfstr32vs	mvfx6, [r0], {100}	; 0x64
     598:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
     59c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     5a0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     5a4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     5a8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     5ac:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     5b0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     5b4:	2f736569 	svccs	0x00736569
     5b8:	334d5453 	movtcc	r5, #54355	; 0xd453
     5bc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     5c0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     5c4:	72655064 	rsbvc	r5, r5, #100	; 0x64
     5c8:	5f687069 	svcpl	0x00687069
     5cc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     5d0:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     5d4:	0000636e 	andeq	r6, r0, lr, ror #6
     5d8:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     5dc:	0100632e 	tsteq	r0, lr, lsr #6
     5e0:	645f0000 	ldrbvs	r0, [pc], #-0	; 5e8 <_Min_Stack_Size+0x1e8>
     5e4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     5e8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5f0 <_Min_Stack_Size+0x1f0>
     5ec:	73657079 	cmnvc	r5, #121	; 0x79
     5f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     5f4:	74730000 	ldrbtvc	r0, [r3], #-0
     5f8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     5fc:	0300682e 	movweq	r6, #2094	; 0x82e
     600:	6f630000 	svcvs	0x00630000
     604:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     608:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     60c:	00000400 	andeq	r0, r0, r0, lsl #8
     610:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     614:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     618:	00682e78 	rsbeq	r2, r8, r8, ror lr
     61c:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
     620:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     624:	00060068 	andeq	r0, r6, r8, rrx
     628:	05000000 	streq	r0, [r0, #-0]
     62c:	0005e002 	andeq	lr, r5, r2
     630:	00f60308 	rscseq	r0, r6, r8, lsl #6
     634:	02754f01 	rsbseq	r4, r5, #1, 30
     638:	01010007 	tsteq	r1, r7
     63c:	04020500 	streq	r0, [r2], #-1280	; 0x500
     640:	03080006 	movweq	r0, #32774	; 0x8006
     644:	4b010188 	blmi	40c6c <_Min_Stack_Size+0x4086c>
     648:	4b754d6d 	blmi	1d53c04 <_Min_Stack_Size+0x1d53804>
     64c:	3e84755a 	mcrcc	5, 4, r7, cr4, cr10, {2}
     650:	42735977 	rsbsmi	r5, r3, #1949696	; 0x1dc000
     654:	023f7359 	eorseq	r7, pc, #1677721601	; 0x64000001
     658:	01010009 	tsteq	r1, r9
     65c:	c0020500 	andgt	r0, r2, r0, lsl #10
     660:	03080006 	movweq	r0, #32774	; 0x8006
     664:	5d0101b4 	stfpls	f0, [r1, #-720]	; 0xfffffd30
     668:	00080291 	muleq	r8, r1, r2
     66c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     670:	0006ec02 	andeq	lr, r6, r2, lsl #24
     674:	01c70308 	biceq	r0, r7, r8, lsl #6
     678:	783e7901 	ldmdavc	lr!, {r0, r8, fp, ip, sp, lr}
     67c:	00080276 	andeq	r0, r8, r6, ror r2
     680:	05000101 	streq	r0, [r0, #-257]	; 0x101
     684:	00072c02 	andeq	r2, r7, r2, lsl #24
     688:	01df0308 	bicseq	r0, pc, r8, lsl #6
     68c:	783e4d01 	ldmdavc	lr!, {r0, r8, sl, fp, lr}
     690:	00080268 	andeq	r0, r8, r8, ror #4
     694:	02f80101 	rscseq	r0, r8, #1073741824	; 0x40000000
     698:	00020000 	andeq	r0, r2, r0
     69c:	0000019a 	muleq	r0, sl, r1
     6a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6a4:	0101000d 	tsteq	r1, sp
     6a8:	00000101 	andeq	r0, r0, r1, lsl #2
     6ac:	00000100 	andeq	r0, r0, r0, lsl #2
     6b0:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     6b4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     6b8:	5f584554 	svcpl	0x00584554
     6bc:	5f46344d 	svcpl	0x0046344d
     6c0:	334d5453 	movtcc	r5, #54355	; 0xd453
     6c4:	2f344632 	svccs	0x00344632
     6c8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     6cc:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     6d0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     6d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     6d8:	5f787834 	svcpl	0x00787834
     6dc:	50647453 	rsbpl	r7, r4, r3, asr r4
     6e0:	70697265 	rsbvc	r7, r9, r5, ror #4
     6e4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     6e8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     6ec:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     6f0:	73752f00 	cmnvc	r5, #0, 30
     6f4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     6f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     6fc:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     700:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     704:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     708:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     70c:	73752f00 	cmnvc	r5, #0, 30
     710:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     714:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     718:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     71c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     720:	62696c00 	rsbvs	r6, r9, #0, 24
     724:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     728:	5f584554 	svcpl	0x00584554
     72c:	5f46344d 	svcpl	0x0046344d
     730:	334d5453 	movtcc	r5, #54355	; 0xd453
     734:	2f344632 	svccs	0x00344632
     738:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     73c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     740:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     744:	2f534953 	svccs	0x00534953
     748:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     74c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     750:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     754:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     758:	2f787834 	svccs	0x00787834
     75c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     760:	00656475 	rsbeq	r6, r5, r5, ror r4
     764:	2f62696c 	svccs	0x0062696c
     768:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     76c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 660 <_Min_Stack_Size+0x260>
     770:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     774:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     778:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 668 <_Min_Stack_Size+0x268>
     77c:	61726269 	cmnvs	r2, r9, ror #4
     780:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     784:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     788:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     78c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     790:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     794:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     798:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     79c:	2f726576 	svccs	0x00726576
     7a0:	00636e69 	rsbeq	r6, r3, r9, ror #28
     7a4:	2f62696c 	svccs	0x0062696c
     7a8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     7ac:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 6a0 <_Min_Stack_Size+0x2a0>
     7b0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     7b4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     7b8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 6a8 <_Min_Stack_Size+0x2a8>
     7bc:	61726269 	cmnvs	r2, r9, ror #4
     7c0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     7c4:	534d432f 	movtpl	r4, #54063	; 0xd32f
     7c8:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     7cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     7d0:	00006564 	andeq	r6, r0, r4, ror #10
     7d4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     7d8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     7dc:	70675f78 	rsbvc	r5, r7, r8, ror pc
     7e0:	632e6f69 	teqvs	lr, #420	; 0x1a4
     7e4:	00000100 	andeq	r0, r0, r0, lsl #2
     7e8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     7ec:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     7f0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     7f4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     7f8:	00000200 	andeq	r0, r0, r0, lsl #4
     7fc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     800:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     804:	00000300 	andeq	r0, r0, r0, lsl #6
     808:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     80c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     810:	00682e78 	rsbeq	r2, r8, r8, ror lr
     814:	73000004 	movwvc	r0, #4
     818:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     81c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     820:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     824:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     828:	63000005 	movwvs	r0, #5
     82c:	5f65726f 	svcpl	0x0065726f
     830:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     834:	00060068 	andeq	r0, r6, r8, rrx
     838:	05000000 	streq	r0, [r0, #-0]
     83c:	00076402 	andeq	r6, r7, r2, lsl #8
     840:	00ff0308 	rscseq	r0, pc, r8, lsl #6
     844:	4b4c4e01 	blmi	1314050 <_Min_Stack_Size+0x1313c50>
     848:	5a4b4c5a 	bpl	12d39b8 <_Min_Stack_Size+0x12d35b8>
     84c:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
     850:	4b4c5a4b 	blmi	1317184 <_Min_Stack_Size+0x1316d84>
     854:	5a4b4c5a 	bpl	12d39c4 <_Min_Stack_Size+0x12d35c4>
     858:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
     85c:	594c5b4b 	stmdbpl	ip, {r0, r1, r3, r6, r8, r9, fp, ip, lr}^
     860:	6a594c68 	bvs	1653a08 <_Min_Stack_Size+0x1653608>
     864:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
     868:	0101001a 	tsteq	r1, sl, lsl r0
     86c:	c8020500 	stmdagt	r2, {r8, sl}
     870:	03080008 	movweq	r0, #32776	; 0x8008
     874:	590101ca 	stmdbpl	r1, {r1, r3, r6, r7, r8}
     878:	3e660a03 	vmulcc.f32	s1, s12, s6
     87c:	ad4c5a5a 	vstrge	s11, [ip, #-360]	; 0xfffffe98
     880:	040200bc 	streq	r0, [r2], #-188	; 0xbc
     884:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     888:	adc0ad50 	stclge	13, cr10, [r0, #320]	; 0x140
     88c:	6203bbcc 	andvs	fp, r3, #204, 22	; 0x33000
     890:	040200ba 	streq	r0, [r2], #-186	; 0xba
     894:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     898:	023c2103 	eorseq	r2, ip, #-1073741824	; 0xc0000000
     89c:	01010005 	tsteq	r1, r5
     8a0:	e4020500 	str	r0, [r2], #-1280	; 0x500
     8a4:	03080009 	movweq	r0, #32777	; 0x8009
     8a8:	4c0101fe 	stfmis	f0, [r1], {254}	; 0xfe
     8ac:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
     8b0:	0005023d 	andeq	r0, r5, sp, lsr r2
     8b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     8b8:	000a1802 	andeq	r1, sl, r2, lsl #16
     8bc:	02950308 	addseq	r0, r5, #8, 6	; 0x20000000
     8c0:	4c426701 	mcrrmi	7, 0, r6, r2, cr1
     8c4:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
     8c8:	0005023d 	andeq	r0, r5, sp, lsr r2
     8cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     8d0:	000a5c02 	andeq	r5, sl, r2, lsl #24
     8d4:	02c30308 	sbceq	r0, r3, #8, 6	; 0x20000000
     8d8:	68346701 	ldmdavs	r4!, {r0, r8, r9, sl, sp, lr}
     8dc:	02213040 	eoreq	r3, r1, #64	; 0x40
     8e0:	01010006 	tsteq	r1, r6
     8e4:	90020500 	andls	r0, r2, r0, lsl #10
     8e8:	0308000a 	movweq	r0, #32778	; 0x800a
     8ec:	4e0102dd 	mcrmi	2, 0, r0, cr1, cr13, {6}
     8f0:	0006023d 	andeq	r0, r6, sp, lsr r2
     8f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     8f8:	000aac02 	andeq	sl, sl, r2, lsl #24
     8fc:	02ee0308 	rsceq	r0, lr, #8, 6	; 0x20000000
     900:	68346701 	ldmdavs	r4!, {r0, r8, r9, sl, sp, lr}
     904:	02213040 	eoreq	r3, r1, #64	; 0x40
     908:	01010006 	tsteq	r1, r6
     90c:	e0020500 	and	r0, r2, r0, lsl #10
     910:	0308000a 	movweq	r0, #32778	; 0x800a
     914:	4e010388 	cdpmi	3, 0, cr0, cr1, cr8, {4}
     918:	0006023d 	andeq	r0, r6, sp, lsr r2
     91c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     920:	000afc02 	andeq	pc, sl, r2, lsl #24
     924:	039c0308 	orrseq	r0, ip, #8, 6	; 0x20000000
     928:	023d6b01 	eorseq	r6, sp, #1024	; 0x400
     92c:	01010005 	tsteq	r1, r5
     930:	18020500 	stmdane	r2, {r8, sl}
     934:	0308000b 	movweq	r0, #32779	; 0x800b
     938:	6b0103b1 	blvs	41804 <_Min_Stack_Size+0x41404>
     93c:	0005023d 	andeq	r0, r5, sp, lsr r2
     940:	05000101 	streq	r0, [r0, #-257]	; 0x101
     944:	000b3402 	andeq	r3, fp, r2, lsl #8
     948:	03c70308 	biceq	r0, r7, #8, 6	; 0x20000000
     94c:	4e3e8801 	cdpmi	8, 3, cr8, cr14, cr1, {0}
     950:	0005023e 	andeq	r0, r5, lr, lsr r2
     954:	05000101 	streq	r0, [r0, #-257]	; 0x101
     958:	000b6402 	andeq	r6, fp, r2, lsl #8
     95c:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
     960:	023d6a01 	eorseq	r6, sp, #4096	; 0x1000
     964:	01010005 	tsteq	r1, r5
     968:	80020500 	andhi	r0, r2, r0, lsl #10
     96c:	0308000b 	movweq	r0, #32779	; 0x800b
     970:	6a0103f0 	bvs	41938 <_Min_Stack_Size+0x41538>
     974:	00050267 	andeq	r0, r5, r7, ror #4
     978:	05000101 	streq	r0, [r0, #-257]	; 0x101
     97c:	000ba402 	andeq	sl, fp, r2, lsl #8
     980:	04c30308 	strbeq	r0, [r3], #776	; 0x308
     984:	352f8301 	strcc	r8, [pc, #-769]!	; 68b <_Min_Stack_Size+0x28b>
     988:	ad830883 	stcge	8, cr0, [r3, #524]	; 0x20c
     98c:	00050291 	muleq	r5, r1, r2
     990:	05f40101 	ldrbeq	r0, [r4, #257]!	; 0x101
     994:	00020000 	andeq	r0, r2, r0
     998:	00000198 	muleq	r0, r8, r1
     99c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9a0:	0101000d 	tsteq	r1, sp
     9a4:	00000101 	andeq	r0, r0, r1, lsl #2
     9a8:	00000100 	andeq	r0, r0, r0, lsl #2
     9ac:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     9b0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     9b4:	5f584554 	svcpl	0x00584554
     9b8:	5f46344d 	svcpl	0x0046344d
     9bc:	334d5453 	movtcc	r5, #54355	; 0xd453
     9c0:	2f344632 	svccs	0x00344632
     9c4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     9c8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     9cc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     9d0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     9d4:	5f787834 	svcpl	0x00787834
     9d8:	50647453 	rsbpl	r7, r4, r3, asr r4
     9dc:	70697265 	rsbvc	r7, r9, r5, ror #4
     9e0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     9e4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     9e8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     9ec:	73752f00 	cmnvc	r5, #0, 30
     9f0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     9f4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     9f8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     9fc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     a00:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     a04:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     a08:	73752f00 	cmnvc	r5, #0, 30
     a0c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     a10:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     a14:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     a18:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     a1c:	62696c00 	rsbvs	r6, r9, #0, 24
     a20:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     a24:	5f584554 	svcpl	0x00584554
     a28:	5f46344d 	svcpl	0x0046344d
     a2c:	334d5453 	movtcc	r5, #54355	; 0xd453
     a30:	2f344632 	svccs	0x00344632
     a34:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     a38:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     a3c:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     a40:	2f534953 	svccs	0x00534953
     a44:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     a48:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     a4c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     a50:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     a54:	2f787834 	svccs	0x00787834
     a58:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     a5c:	00656475 	rsbeq	r6, r5, r5, ror r4
     a60:	2f62696c 	svccs	0x0062696c
     a64:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     a68:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 95c <_Min_Stack_Size+0x55c>
     a6c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     a70:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     a74:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 964 <_Min_Stack_Size+0x564>
     a78:	61726269 	cmnvs	r2, r9, ror #4
     a7c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     a80:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     a84:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a88:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     a8c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     a90:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a94:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     a98:	2f726576 	svccs	0x00726576
     a9c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     aa0:	2f62696c 	svccs	0x0062696c
     aa4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     aa8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 99c <_Min_Stack_Size+0x59c>
     aac:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     ab0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ab4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 9a4 <_Min_Stack_Size+0x5a4>
     ab8:	61726269 	cmnvs	r2, r9, ror #4
     abc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     ac0:	534d432f 	movtpl	r4, #54063	; 0xd32f
     ac4:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     ac8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     acc:	00006564 	andeq	r6, r0, r4, ror #10
     ad0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ad4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ad8:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     adc:	00632e63 	rsbeq	r2, r3, r3, ror #28
     ae0:	5f000001 	svcpl	0x00000001
     ae4:	61666564 	cmnvs	r6, r4, ror #10
     ae8:	5f746c75 	svcpl	0x00746c75
     aec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     af0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     af4:	73000002 	movwvc	r0, #2
     af8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     afc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     b00:	73000003 	movwvc	r0, #3
     b04:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b08:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     b0c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     b10:	74730000 	ldrbtvc	r0, [r3], #-0
     b14:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     b18:	5f787834 	svcpl	0x00787834
     b1c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     b20:	00050068 	andeq	r0, r5, r8, rrx
     b24:	726f6300 	rsbvc	r6, pc, #0, 6
     b28:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     b2c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     b30:	00000006 	andeq	r0, r0, r6
     b34:	30020500 	andcc	r0, r2, r0, lsl #10
     b38:	0308000c 	movweq	r0, #32780	; 0x800c
     b3c:	300101d5 	ldrdcc	r0, [r1], -r5
     b40:	3f853f69 	svccc	0x00853f69
     b44:	3f694d4d 	svccc	0x00694d4d
     b48:	000d024c 	andeq	r0, sp, ip, asr #4
     b4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b50:	000ca002 	andeq	sl, ip, r2
     b54:	02880308 	addeq	r0, r8, #8, 6	; 0x20000000
     b58:	3d3f5d01 	ldccc	13, cr5, [pc, #-4]!	; b5c <_Min_Stack_Size+0x75c>
     b5c:	01000702 	tsteq	r0, r2, lsl #14
     b60:	02050001 	andeq	r0, r5, #1
     b64:	08000cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp}
     b68:	0102a003 	tsteq	r2, r3
     b6c:	002f2f3d 	eoreq	r2, pc, sp, lsr pc	; <UNPREDICTABLE>
     b70:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
     b74:	01040200 	mrseq	r0, R12_usr
     b78:	04020059 	streq	r0, [r2], #-89	; 0x59
     b7c:	68763d01 	ldmdavs	r6!, {r0, r8, sl, fp, ip, sp}^
     b80:	02213040 	eoreq	r3, r1, #64	; 0x40
     b84:	01010004 	tsteq	r1, r4
     b88:	14020500 	strne	r0, [r2], #-1280	; 0x500
     b8c:	0308000d 	movweq	r0, #32781	; 0x800d
     b90:	590102bf 	stmdbpl	r1, {r0, r1, r2, r3, r4, r5, r7, r9}
     b94:	5b4d3f32 	blpl	1350864 <_Min_Stack_Size+0x1350464>
     b98:	0008023d 	andeq	r0, r8, sp, lsr r2
     b9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ba0:	000d5002 	andeq	r5, sp, r2
     ba4:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
     ba8:	023d5c01 	eorseq	r5, sp, #256	; 0x100
     bac:	01010008 	tsteq	r1, r8
     bb0:	70020500 	andvc	r0, r2, r0, lsl #10
     bb4:	0308000d 	movweq	r0, #32781	; 0x800d
     bb8:	5e0102fc 	mcrpl	2, 0, r0, cr1, cr12, {7}
     bbc:	0b033f3f 	bleq	d08c0 <_Min_Stack_Size+0xd04c0>
     bc0:	20790358 	rsbscs	r0, r9, r8, asr r3
     bc4:	243d233d 	ldrtcs	r2, [sp], #-829	; 0x33d
     bc8:	01000702 	tsteq	r0, r2, lsl #14
     bcc:	02050001 	andeq	r0, r5, #1
     bd0:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
     bd4:	0103a403 	tsteq	r3, r3, lsl #8
     bd8:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
     bdc:	00010100 	andeq	r0, r1, r0, lsl #2
     be0:	0dd00205 	lfmeq	f0, 2, [r0, #20]
     be4:	cf030800 	svcgt	0x00030800
     be8:	bb7c0103 	bllt	1f00ffc <_Min_Stack_Size+0x1f00bfc>
     bec:	0702302d 	streq	r3, [r2, -sp, lsr #32]
     bf0:	00010100 	andeq	r0, r1, r0, lsl #2
     bf4:	0e0c0205 	cdpeq	2, 0, cr0, cr12, cr5, {0}
     bf8:	e6030800 	str	r0, [r3], -r0, lsl #16
     bfc:	3d5b0103 	ldfcce	f0, [fp, #-12]
     c00:	01000802 	tsteq	r0, r2, lsl #16
     c04:	02050001 	andeq	r0, r5, #1
     c08:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
     c0c:	0104a803 	tsteq	r4, r3, lsl #16
     c10:	0702ad6c 	streq	sl, [r2, -ip, ror #26]
     c14:	00010100 	andeq	r0, r1, r0, lsl #2
     c18:	0e5c0205 	cdpeq	2, 5, cr0, cr12, cr5, {0}
     c1c:	b9030800 	stmdblt	r3, {fp}
     c20:	3d5b0104 	ldfcce	f0, [fp, #-16]
     c24:	01000802 	tsteq	r0, r2, lsl #16
     c28:	02050001 	andeq	r0, r5, #1
     c2c:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
     c30:	0104d603 	tsteq	r4, r3, lsl #12
     c34:	0702ad6b 	streq	sl, [r2, -fp, ror #26]
     c38:	00010100 	andeq	r0, r1, r0, lsl #2
     c3c:	0eac0205 	cdpeq	2, 10, cr0, cr12, cr5, {0}
     c40:	e8030800 	stmda	r3, {fp}
     c44:	3d5b0104 	ldfcce	f0, [fp, #-16]
     c48:	01000802 	tsteq	r0, r2, lsl #16
     c4c:	02050001 	andeq	r0, r5, #1
     c50:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
     c54:	0104fa03 	tsteq	r4, r3, lsl #20
     c58:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
     c5c:	00010100 	andeq	r0, r1, r0, lsl #2
     c60:	0eec0205 	cdpeq	2, 14, cr0, cr12, cr5, {0}
     c64:	93030800 	movwls	r0, #14336	; 0x3800
     c68:	34590105 	ldrbcc	r0, [r9], #-261	; 0x105
     c6c:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
     c70:	01000702 	tsteq	r0, r2, lsl #14
     c74:	02050001 	andeq	r0, r5, #1
     c78:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
     c7c:	0105b903 	tsteq	r5, r3, lsl #18
     c80:	4d3f3459 	cfldrsmi	mvf3, [pc, #-356]!	; b24 <_Min_Stack_Size+0x724>
     c84:	07023d69 	streq	r3, [r2, -r9, ror #26]
     c88:	00010100 	andeq	r0, r1, r0, lsl #2
     c8c:	0f640205 	svceq	0x00640205
     c90:	df030800 	svcle	0x00030800
     c94:	334b0106 	movtcc	r0, #45318	; 0xb106
     c98:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     c9c:	01000802 	tsteq	r0, r2, lsl #16
     ca0:	02050001 	andeq	r0, r5, #1
     ca4:	08000f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp}
     ca8:	0106fb03 	tsteq	r6, r3, lsl #22
     cac:	0802672f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
     cb0:	00010100 	andeq	r0, r1, r0, lsl #2
     cb4:	0fbc0205 	svceq	0x00bc0205
     cb8:	94030800 	strls	r0, [r3], #-2048	; 0x800
     cbc:	334b0107 	movtcc	r0, #45319	; 0xb107
     cc0:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
     cc4:	01000802 	tsteq	r0, r2, lsl #16
     cc8:	02050001 	andeq	r0, r5, #1
     ccc:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
     cd0:	0107b403 	tsteq	r7, r3, lsl #8
     cd4:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; bb0 <_Min_Stack_Size+0x7b0>
     cd8:	08023d4d 	stmdaeq	r2, {r0, r2, r3, r6, r8, sl, fp, ip, sp}
     cdc:	00010100 	andeq	r0, r1, r0, lsl #2
     ce0:	102c0205 	eorne	r0, ip, r5, lsl #4
     ce4:	d3030800 	movwle	r0, #14336	; 0x3800
     ce8:	334b0107 	movtcc	r0, #45319	; 0xb107
     cec:	3d5b4d3f 	ldclcc	13, cr4, [fp, #-252]	; 0xffffff04
     cf0:	01000702 	tsteq	r0, r2, lsl #14
     cf4:	02050001 	andeq	r0, r5, #1
     cf8:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
     cfc:	01088703 	tsteq	r8, r3, lsl #14
     d00:	775abd4b 	ldrbvc	fp, [sl, -fp, asr #26]
     d04:	263d223d 			; <UNDEFINED> instruction: 0x263d223d
     d08:	db3f5a67 	blle	fd76ac <_Min_Stack_Size+0xfd72ac>
     d0c:	226783cb 	rsbcs	r8, r7, #738197507	; 0x2c000003
     d10:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
     d14:	3d596968 	ldclcc	9, cr6, [r9, #-416]	; 0xfffffe60
     d18:	3d596968 	ldclcc	9, cr6, [r9, #-416]	; 0xfffffe60
     d1c:	0e026768 	cdpeq	7, 0, cr6, cr2, cr8, {3}
     d20:	00010100 	andeq	r0, r1, r0, lsl #2
     d24:	11b80205 			; <UNDEFINED> instruction: 0x11b80205
     d28:	84030800 	strhi	r0, [r3], #-2048	; 0x800
     d2c:	334b0109 	movtcc	r0, #45321	; 0xb109
     d30:	854d3f68 	strbhi	r3, [sp, #-3944]	; 0xf68
     d34:	08028340 	stmdaeq	r2, {r6, r8, r9, pc}
     d38:	00010100 	andeq	r0, r1, r0, lsl #2
     d3c:	12140205 	andsne	r0, r4, #1342177280	; 0x50000000
     d40:	a4030800 	strge	r0, [r3], #-2048	; 0x800
     d44:	3d5c0109 	ldfcce	f0, [ip, #-36]	; 0xffffffdc
     d48:	01000802 	tsteq	r0, r2, lsl #16
     d4c:	02050001 	andeq	r0, r5, #1
     d50:	08001234 	stmdaeq	r0, {r2, r4, r5, r9, ip}
     d54:	0109b503 	tsteq	r9, r3, lsl #10
     d58:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
     d5c:	00010100 	andeq	r0, r1, r0, lsl #2
     d60:	12540205 	subsne	r0, r4, #1342177280	; 0x50000000
     d64:	c6030800 	strgt	r0, [r3], -r0, lsl #16
     d68:	3d4e0109 	stfcce	f0, [lr, #-36]	; 0xffffffdc
     d6c:	01000702 	tsteq	r0, r2, lsl #14
     d70:	02050001 	andeq	r0, r5, #1
     d74:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     d78:	0109db03 	tsteq	r9, r3, lsl #22
     d7c:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     d80:	07024b5b 	smlsdeq	r2, fp, fp, r4
     d84:	00010100 	andeq	r0, r1, r0, lsl #2
     d88:	12ac0205 	adcne	r0, ip, #1342177280	; 0x50000000
     d8c:	fb030800 	blx	c2d96 <_Min_Stack_Size+0xc2996>
     d90:	334b0109 	movtcc	r0, #45321	; 0xb109
     d94:	4b694d4d 	blmi	1a542d0 <_Min_Stack_Size+0x1a53ed0>
     d98:	01000802 	tsteq	r0, r2, lsl #16
     d9c:	02050001 	andeq	r0, r5, #1
     da0:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
     da4:	010a9f03 	tsteq	sl, r3, lsl #30
     da8:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     dac:	08024b4d 	stmdaeq	r2, {r0, r2, r3, r6, r8, r9, fp, lr}
     db0:	00010100 	andeq	r0, r1, r0, lsl #2
     db4:	13280205 	teqne	r8, #1342177280	; 0x50000000
     db8:	c3030800 	movwgt	r0, #14336	; 0x3800
     dbc:	334b010a 	movtcc	r0, #45322	; 0xb10a
     dc0:	4b4d4d4d 	blmi	13542fc <_Min_Stack_Size+0x1353efc>
     dc4:	01000802 	tsteq	r0, r2, lsl #16
     dc8:	02050001 	andeq	r0, r5, #1
     dcc:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
     dd0:	010ae403 	tsteq	sl, r3, lsl #8
     dd4:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
     dd8:	08024b4d 	stmdaeq	r2, {r0, r2, r3, r6, r8, r9, fp, lr}
     ddc:	00010100 	andeq	r0, r1, r0, lsl #2
     de0:	13a00205 	movne	r0, #1342177280	; 0x50000000
     de4:	89030800 	stmdbhi	r3, {fp}
     de8:	3e4e010b 	dvfcce	f0, f6, #3.0
     dec:	01000702 	tsteq	r0, r2, lsl #14
     df0:	02050001 	andeq	r0, r5, #1
     df4:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
     df8:	010bb403 	tsteq	fp, r3, lsl #8
     dfc:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e00:	01000702 	tsteq	r0, r2, lsl #14
     e04:	02050001 	andeq	r0, r5, #1
     e08:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
     e0c:	010bd403 	tsteq	fp, r3, lsl #8
     e10:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e14:	01000702 	tsteq	r0, r2, lsl #14
     e18:	02050001 	andeq	r0, r5, #1
     e1c:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
     e20:	010bf003 	tsteq	fp, r3
     e24:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e28:	01000702 	tsteq	r0, r2, lsl #14
     e2c:	02050001 	andeq	r0, r5, #1
     e30:	08001470 	stmdaeq	r0, {r4, r5, r6, sl, ip}
     e34:	010ca403 	tsteq	ip, r3, lsl #8
     e38:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e3c:	01000702 	tsteq	r0, r2, lsl #14
     e40:	02050001 	andeq	r0, r5, #1
     e44:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
     e48:	010cd103 	tsteq	ip, r3, lsl #2
     e4c:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e50:	01000702 	tsteq	r0, r2, lsl #14
     e54:	02050001 	andeq	r0, r5, #1
     e58:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     e5c:	010cfb03 	tsteq	ip, r3, lsl #22
     e60:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e64:	01000702 	tsteq	r0, r2, lsl #14
     e68:	02050001 	andeq	r0, r5, #1
     e6c:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
     e70:	010d9803 	tsteq	sp, r3, lsl #16
     e74:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e78:	01000702 	tsteq	r0, r2, lsl #14
     e7c:	02050001 	andeq	r0, r5, #1
     e80:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
     e84:	010db103 	tsteq	sp, r3, lsl #2
     e88:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
     e8c:	01000702 	tsteq	r0, r2, lsl #14
     e90:	02050001 	andeq	r0, r5, #1
     e94:	0800159c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip}
     e98:	010de203 	tsteq	sp, r3, lsl #4
     e9c:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     ea0:	01000702 	tsteq	r0, r2, lsl #14
     ea4:	02050001 	andeq	r0, r5, #1
     ea8:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
     eac:	010e8b03 	tsteq	lr, r3, lsl #22
     eb0:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     eb4:	01000702 	tsteq	r0, r2, lsl #14
     eb8:	02050001 	andeq	r0, r5, #1
     ebc:	08001614 	stmdaeq	r0, {r2, r4, r9, sl, ip}
     ec0:	010ebc03 	tsteq	lr, r3, lsl #24
     ec4:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     ec8:	01000702 	tsteq	r0, r2, lsl #14
     ecc:	02050001 	andeq	r0, r5, #1
     ed0:	08001650 	stmdaeq	r0, {r4, r6, r9, sl, ip}
     ed4:	010edc03 	tsteq	lr, r3, lsl #24
     ed8:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     edc:	01000702 	tsteq	r0, r2, lsl #14
     ee0:	02050001 	andeq	r0, r5, #1
     ee4:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
     ee8:	010ef803 	tsteq	lr, r3, lsl #16
     eec:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     ef0:	01000702 	tsteq	r0, r2, lsl #14
     ef4:	02050001 	andeq	r0, r5, #1
     ef8:	080016c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip}
     efc:	010fac03 	tsteq	pc, r3, lsl #24
     f00:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     f04:	01000702 	tsteq	r0, r2, lsl #14
     f08:	02050001 	andeq	r0, r5, #1
     f0c:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
     f10:	010fd903 	tsteq	pc, r3, lsl #18
     f14:	76783e6a 	ldrbtvc	r3, [r8], -sl, ror #28
     f18:	01000702 	tsteq	r0, r2, lsl #14
     f1c:	02050001 	andeq	r0, r5, #1
     f20:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
     f24:	01108703 	tsteq	r0, r3, lsl #14
     f28:	a0953f78 	addsge	r3, r5, r8, ror pc
     f2c:	01000702 	tsteq	r0, r2, lsl #14
     f30:	02050001 	andeq	r0, r5, #1
     f34:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
     f38:	0110ac03 	tsteq	r0, r3, lsl #24
     f3c:	342f2f59 	strtcc	r2, [pc], #-3929	; f44 <_Min_Stack_Size+0xb44>
     f40:	3e4c3e4b 	cdpcc	14, 4, cr3, cr12, cr11, {2}
     f44:	844b404e 	strbhi	r4, [fp], #-78	; 0x4e
     f48:	02213140 	eoreq	r3, r1, #64, 2
     f4c:	01010008 	tsteq	r1, r8
     f50:	fc020500 	stc2	5, cr0, [r2], {-0}
     f54:	03080017 	movweq	r0, #32791	; 0x8017
     f58:	300110d9 	ldrdcc	r1, [r1], -r9
     f5c:	00060267 	andeq	r0, r6, r7, ror #4
     f60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f64:	00181802 	andseq	r1, r8, r2, lsl #16
     f68:	10ed0308 	rscne	r0, sp, r8, lsl #6
     f6c:	68345901 	ldmdavs	r4!, {r0, r8, fp, ip, lr}
     f70:	02213140 	eoreq	r3, r1, #64, 2
     f74:	01010009 	tsteq	r1, r9
     f78:	50020500 	andpl	r0, r2, r0, lsl #10
     f7c:	03080018 	movweq	r0, #32792	; 0x8018
     f80:	5e01118f 	adfpld	f1, f1, #10.0
     f84:	0008023d 	andeq	r0, r8, sp, lsr r2
     f88:	045b0101 	ldrbeq	r0, [fp], #-257	; 0x101
     f8c:	00020000 	andeq	r0, r2, r0
     f90:	000001af 	andeq	r0, r0, pc, lsr #3
     f94:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f98:	0101000d 	tsteq	r1, sp
     f9c:	00000101 	andeq	r0, r0, r1, lsl #2
     fa0:	00000100 	andeq	r0, r0, r0, lsl #2
     fa4:	62696c01 	rsbvs	r6, r9, #256	; 0x100
     fa8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     fac:	5f584554 	svcpl	0x00584554
     fb0:	5f46344d 	svcpl	0x0046344d
     fb4:	334d5453 	movtcc	r5, #54355	; 0xd453
     fb8:	2f344632 	svccs	0x00344632
     fbc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     fc0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     fc4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     fc8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     fcc:	5f787834 	svcpl	0x00787834
     fd0:	50647453 	rsbpl	r7, r4, r3, asr r4
     fd4:	70697265 	rsbvc	r7, r9, r5, ror #4
     fd8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     fdc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     fe0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     fe4:	73752f00 	cmnvc	r5, #0, 30
     fe8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     fec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     ff0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     ff4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     ff8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     ffc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1000:	73752f00 	cmnvc	r5, #0, 30
    1004:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1008:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    100c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1010:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1014:	62696c00 	rsbvs	r6, r9, #0, 24
    1018:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    101c:	5f584554 	svcpl	0x00584554
    1020:	5f46344d 	svcpl	0x0046344d
    1024:	334d5453 	movtcc	r5, #54355	; 0xd453
    1028:	2f344632 	svccs	0x00344632
    102c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1030:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1034:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1038:	2f534953 	svccs	0x00534953
    103c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1040:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1044:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    1048:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    104c:	2f787834 	svccs	0x00787834
    1050:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1054:	00656475 	rsbeq	r6, r5, r5, ror r4
    1058:	2f62696c 	svccs	0x0062696c
    105c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1060:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; f54 <_Min_Stack_Size+0xb54>
    1064:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1068:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    106c:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; f5c <_Min_Stack_Size+0xb5c>
    1070:	61726269 	cmnvs	r2, r9, ror #4
    1074:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1078:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    107c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1080:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1084:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1088:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    108c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1090:	2f726576 	svccs	0x00726576
    1094:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1098:	2f62696c 	svccs	0x0062696c
    109c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    10a0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; f94 <_Min_Stack_Size+0xb94>
    10a4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    10a8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    10ac:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; f9c <_Min_Stack_Size+0xb9c>
    10b0:	61726269 	cmnvs	r2, r9, ror #4
    10b4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    10b8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    10bc:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    10c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    10c4:	00006564 	andeq	r6, r0, r4, ror #10
    10c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10cc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    10d0:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    10d4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    10d8:	00010063 	andeq	r0, r1, r3, rrx
    10dc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    10e0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    10e4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    10e8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    10ec:	00020068 	andeq	r0, r2, r8, rrx
    10f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    10f4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    10f8:	00030068 	andeq	r0, r3, r8, rrx
    10fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1100:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1104:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1108:	00000400 	andeq	r0, r0, r0, lsl #8
    110c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1110:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1114:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1118:	00682e63 	rsbeq	r2, r8, r3, ror #28
    111c:	73000005 	movwvc	r0, #5
    1120:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1124:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1128:	6173755f 	cmnvs	r3, pc, asr r5
    112c:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    1130:	00000500 	andeq	r0, r0, r0, lsl #10
    1134:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1138:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    113c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1140:	00000000 	andeq	r0, r0, r0
    1144:	18700205 	ldmdane	r0!, {r0, r2, r9}^
    1148:	bb030800 	bllt	c3150 <_Min_Stack_Size+0xc2d50>
    114c:	4c4e0101 	stfmie	f0, [lr], {1}
    1150:	594c5a4b 	stmdbpl	ip, {r0, r1, r3, r6, r9, fp, ip, lr}^
    1154:	68594c68 	ldmdavs	r9, {r3, r5, r6, sl, fp, lr}^
    1158:	4c68594c 	stclmi	9, cr5, [r8], #-304	; 0xfffffed0
    115c:	4b4c6859 	blmi	131b2c8 <_Min_Stack_Size+0x131aec8>
    1160:	6a594c5a 	bvs	16542d0 <_Min_Stack_Size+0x1653ed0>
    1164:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
    1168:	01010013 	tsteq	r1, r3, lsl r0
    116c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    1170:	03080019 	movweq	r0, #32793	; 0x8019
    1174:	590101f6 	stmdbpl	r1, {r1, r2, r4, r5, r6, r7, r8}
    1178:	13032f4b 	movwne	r2, #16203	; 0x3f4b
    117c:	5b4e4d2e 	blpl	139463c <_Min_Stack_Size+0x139423c>
    1180:	676c4d4d 	strbvs	r4, [ip, -sp, asr #26]!
    1184:	4d4d5c2d 	stclmi	12, cr5, [sp, #-180]	; 0xffffff4c
    1188:	5a4e5b4e 	bpl	1397ec8 <_Min_Stack_Size+0x1397ac8>
    118c:	01040200 	mrseq	r0, R12_usr
    1190:	4c064a06 	stcmi	10, cr4, [r6], {6}
    1194:	cd773240 	lfmgt	f3, 2, [r7, #-256]!	; 0xffffff00
    1198:	768577bc 			; <UNDEFINED> instruction: 0x768577bc
    119c:	024bccda 	subeq	ip, fp, #55808	; 0xda00
    11a0:	01010009 	tsteq	r1, r9
    11a4:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    11a8:	0308001a 	movweq	r0, #32794	; 0x801a
    11ac:	4c0102e7 	sfmmi	f0, 4, [r1], {231}	; 0xe7
    11b0:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
    11b4:	05023d3d 	streq	r3, [r2, #-3389]	; 0xd3d
    11b8:	00010100 	andeq	r0, r1, r0, lsl #2
    11bc:	1b300205 	blne	c019d8 <_Min_Stack_Size+0xc015d8>
    11c0:	fb030800 	blx	c31ca <_Min_Stack_Size+0xc2dca>
    11c4:	03590102 	cmpeq	r9, #-2147483648	; 0x80000000
    11c8:	504c2e09 	subpl	r2, ip, r9, lsl #28
    11cc:	4b3f9d4b 	blmi	fe8700 <_Min_Stack_Size+0xfe8300>
    11d0:	01000502 	tsteq	r0, r2, lsl #10
    11d4:	02050001 	andeq	r0, r5, #1
    11d8:	08001b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip}
    11dc:	01039a03 	tsteq	r3, r3, lsl #20
    11e0:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    11e4:	0005023d 	andeq	r0, r5, sp, lsr r2
    11e8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    11ec:	001bb002 	andseq	fp, fp, r2
    11f0:	03ab0308 			; <UNDEFINED> instruction: 0x03ab0308
    11f4:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 6fb <_Min_Stack_Size+0x2fb>
    11f8:	00050284 	andeq	r0, r5, r4, lsl #5
    11fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1200:	001bf002 	andseq	pc, fp, r2
    1204:	03c50308 	biceq	r0, r5, #8, 6	; 0x20000000
    1208:	91846b01 	orrls	r6, r4, r1, lsl #22
    120c:	01000502 	tsteq	r0, r2, lsl #10
    1210:	02050001 	andeq	r0, r5, #1
    1214:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
    1218:	0103da03 	tsteq	r3, r3, lsl #20
    121c:	84b13f6b 	ldrthi	r3, [r1], #3947	; 0xf6b
    1220:	01000502 	tsteq	r0, r2, lsl #10
    1224:	02050001 	andeq	r0, r5, #1
    1228:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
    122c:	0103f403 	tsteq	r3, r3, lsl #8
    1230:	84953f6b 	ldrhi	r3, [r5], #3947	; 0xf6b
    1234:	01000502 	tsteq	r0, r2, lsl #10
    1238:	02050001 	andeq	r0, r5, #1
    123c:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
    1240:	0104ad03 	tsteq	r4, r3, lsl #26
    1244:	0502676c 	streq	r6, [r2, #-1900]	; 0x76c
    1248:	00010100 	andeq	r0, r1, r0, lsl #2
    124c:	1cd00205 	lfmne	f0, 2, [r0], {5}
    1250:	bd030800 	stclt	8, cr0, [r3, #-0]
    1254:	674f0104 	strbvs	r0, [pc, -r4, lsl #2]
    1258:	01000602 	tsteq	r0, r2, lsl #12
    125c:	02050001 	andeq	r0, r5, #1
    1260:	08001cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip}
    1264:	0104f103 	tsteq	r4, r3, lsl #2
    1268:	0291846c 	addseq	r8, r1, #108, 8	; 0x6c000000
    126c:	01010005 	tsteq	r1, r5
    1270:	28020500 	stmdacs	r2, {r8, sl}
    1274:	0308001d 	movweq	r0, #32797	; 0x801d
    1278:	6b010585 	blvs	42894 <_Min_Stack_Size+0x42494>
    127c:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1280:	01010005 	tsteq	r1, r5
    1284:	68020500 	stmdavs	r2, {r8, sl}
    1288:	0308001d 	movweq	r0, #32797	; 0x801d
    128c:	6b0105a0 	blvs	42914 <_Min_Stack_Size+0x42514>
    1290:	05028383 	streq	r8, [r2, #-899]	; 0x383
    1294:	00010100 	andeq	r0, r1, r0, lsl #2
    1298:	1da00205 	sfmne	f0, 4, [r0, #20]!
    129c:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    12a0:	836b0105 	cmnhi	fp, #1073741825	; 0x40000001
    12a4:	00050283 	andeq	r0, r5, r3, lsl #5
    12a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12ac:	001dd802 	andseq	sp, sp, r2, lsl #16
    12b0:	05f70308 	ldrbeq	r0, [r7, #776]!	; 0x308
    12b4:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 7bb <_Min_Stack_Size+0x3bb>
    12b8:	00050284 	andeq	r0, r5, r4, lsl #5
    12bc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12c0:	001e1802 	andseq	r1, lr, r2, lsl #16
    12c4:	068f0308 	streq	r0, [pc], r8, lsl #6
    12c8:	02834f01 	addeq	r4, r3, #1, 30
    12cc:	01010005 	tsteq	r1, r5
    12d0:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    12d4:	0308001e 	movweq	r0, #32798	; 0x801e
    12d8:	6b0106c4 	blvs	42df0 <_Min_Stack_Size+0x429f0>
    12dc:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    12e0:	01010005 	tsteq	r1, r5
    12e4:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    12e8:	0308001e 	movweq	r0, #32798	; 0x801e
    12ec:	6b010798 	blvs	43154 <_Min_Stack_Size+0x42d54>
    12f0:	0502ad76 	streq	sl, [r2, #-3446]	; 0xd76
    12f4:	00010100 	andeq	r0, r1, r0, lsl #2
    12f8:	1eb80205 	cdpne	2, 11, cr0, cr8, cr5, {0}
    12fc:	ab030800 	blge	c3304 <_Min_Stack_Size+0xc2f04>
    1300:	3f6a0107 	svccc	0x006a0107
    1304:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1308:	00010100 	andeq	r0, r1, r0, lsl #2
    130c:	1ef80205 	cdpne	2, 15, cr0, cr8, cr5, {0}
    1310:	c4030800 	strgt	r0, [r3], #-2048	; 0x800
    1314:	3f6a0107 	svccc	0x006a0107
    1318:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    131c:	00010100 	andeq	r0, r1, r0, lsl #2
    1320:	1f380205 	svcne	0x00380205
    1324:	8b030800 	blhi	c332c <_Min_Stack_Size+0xc2f2c>
    1328:	836b0108 	cmnhi	fp, #8, 2
    132c:	00050283 	andeq	r0, r5, r3, lsl #5
    1330:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1334:	001f7002 	andseq	r7, pc, r2
    1338:	089d0308 	ldmeq	sp, {r3, r8, r9}
    133c:	953f6b01 	ldrls	r6, [pc, #-2817]!	; 843 <_Min_Stack_Size+0x443>
    1340:	00050284 	andeq	r0, r5, r4, lsl #5
    1344:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1348:	001fb002 	andseq	fp, pc, r2
    134c:	08cb0308 	stmiaeq	fp, {r3, r8, r9}^
    1350:	96408801 	strbls	r8, [r0], -r1, lsl #16
    1354:	000502a0 	andeq	r0, r5, r0, lsr #5
    1358:	05000101 	streq	r0, [r0, #-257]	; 0x101
    135c:	001ff802 	andseq	pc, pc, r2, lsl #16
    1360:	09cf0308 	stmibeq	pc, {r3, r8, r9}^	; <UNPREDICTABLE>
    1364:	03678301 	cmneq	r7, #67108864	; 0x4000000
    1368:	5b312e0c 	blpl	c4cba0 <_Min_Stack_Size+0xc4c7a0>
    136c:	4c3e5a4b 	ldcmi	10, cr5, [lr], #-300	; 0xfffffed4
    1370:	3e3e4e3e 	mrccc	14, 1, r4, cr14, cr14, {1}
    1374:	05027678 	streq	r7, [r2, #-1656]	; 0x678
    1378:	00010100 	andeq	r0, r1, r0, lsl #2
    137c:	20880205 	addcs	r0, r8, r5, lsl #4
    1380:	8f030800 	svchi	0x00030800
    1384:	0367010a 	cmneq	r7, #-2147483646	; 0x80000002
    1388:	40842e0b 	addmi	r2, r4, fp, lsl #28
    138c:	06022130 			; <UNDEFINED> instruction: 0x06022130
    1390:	00010100 	andeq	r0, r1, r0, lsl #2
    1394:	20c00205 	sbccs	r0, r0, r5, lsl #4
    1398:	c0030800 	andgt	r0, r3, r0, lsl #16
    139c:	0b03010a 	bleq	c17cc <_Min_Stack_Size+0xc13cc>
    13a0:	05025966 	streq	r5, [r2, #-2406]	; 0x966
    13a4:	00010100 	andeq	r0, r1, r0, lsl #2
    13a8:	20e00205 	rsccs	r0, r0, r5, lsl #4
    13ac:	e2030800 	and	r0, r3, #0, 16
    13b0:	6767010a 	strbvs	r0, [r7, -sl, lsl #2]!
    13b4:	5a2e0c03 	bpl	b843c8 <_Min_Stack_Size+0xb83fc8>
    13b8:	763e5a4b 	ldrtvc	r5, [lr], -fp, asr #20
    13bc:	4b69783e 	blmi	1a5f4bc <_Min_Stack_Size+0x1a5f0bc>
    13c0:	02006759 	andeq	r6, r0, #23330816	; 0x1640000
    13c4:	3c060104 	stfccs	f0, [r6], {4}
    13c8:	31403e06 	cmpcc	r0, r6, lsl #28
    13cc:	00060221 	andeq	r0, r6, r1, lsr #4
    13d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13d4:	00219002 	eoreq	r9, r1, r2
    13d8:	0bac0308 	bleq	feb02000 <_estack+0xdead2000>
    13dc:	0b036701 	bleq	dafe8 <_Min_Stack_Size+0xdabe8>
    13e0:	59593d4a 	ldmdbpl	r9, {r1, r3, r6, r8, sl, fp, ip, sp}^
    13e4:	01000502 	tsteq	r0, r2, lsl #10
    13e8:	0001d601 	andeq	sp, r1, r1, lsl #12
    13ec:	48000200 	stmdami	r0, {r9}
    13f0:	02000001 	andeq	r0, r0, #1
    13f4:	0d0efb01 	vstreq	d15, [lr, #-4]
    13f8:	01010100 	mrseq	r0, (UNDEF: 17)
    13fc:	00000001 	andeq	r0, r0, r1
    1400:	01000001 	tsteq	r0, r1
    1404:	2f62696c 	svccs	0x0062696c
    1408:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    140c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1300 <_Min_Stack_Size+0xf00>
    1410:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1414:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1418:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1308 <_Min_Stack_Size+0xf08>
    141c:	61726269 	cmnvs	r2, r9, ror #4
    1420:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1424:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1428:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    142c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1430:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1434:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1438:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    143c:	2f726576 	svccs	0x00726576
    1440:	00637273 	rsbeq	r7, r3, r3, ror r2
    1444:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1448:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    144c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1450:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1454:	2f62696c 	svccs	0x0062696c
    1458:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    145c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1460:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1464:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1468:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    146c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1470:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1474:	2f62696c 	svccs	0x0062696c
    1478:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    147c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1370 <_Min_Stack_Size+0xf70>
    1480:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1484:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1488:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1378 <_Min_Stack_Size+0xf78>
    148c:	61726269 	cmnvs	r2, r9, ror #4
    1490:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1494:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1498:	442f5349 	strtmi	r5, [pc], #-841	; 14a0 <_Min_Stack_Size+0x10a0>
    149c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    14a0:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    14a4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    14a8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    14ac:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    14b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    14b4:	6c006564 	cfstr32vs	mvfx6, [r0], {100}	; 0x64
    14b8:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    14bc:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    14c0:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    14c4:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    14c8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    14cc:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    14d0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    14d4:	2f736569 	svccs	0x00736569
    14d8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    14dc:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    14e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    14e4:	73000065 	movwvc	r0, #101	; 0x65
    14e8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    14ec:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    14f0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    14f4:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    14f8:	00010063 	andeq	r0, r1, r3, rrx
    14fc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1500:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1504:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1508:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    150c:	00020068 	andeq	r0, r2, r8, rrx
    1510:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1514:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1518:	00030068 	andeq	r0, r3, r8, rrx
    151c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1520:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1524:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1528:	00000400 	andeq	r0, r0, r0, lsl #8
    152c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1530:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    1534:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1538:	00000000 	andeq	r0, r0, r0
    153c:	21c80205 	biccs	r0, r8, r5, lsl #4
    1540:	e4030800 	str	r0, [r3], #-2048	; 0x800
    1544:	592f0100 	stmdbpl	pc!, {r8}	; <UNPREDICTABLE>
    1548:	00010259 	andeq	r0, r1, r9, asr r2
    154c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1550:	0021e402 	eoreq	lr, r1, r2, lsl #8
    1554:	00f60308 	rscseq	r0, r6, r8, lsl #6
    1558:	023d5c01 	eorseq	r5, sp, #256	; 0x100
    155c:	01010008 	tsteq	r1, r8
    1560:	04020500 	streq	r0, [r2], #-1280	; 0x500
    1564:	03080022 	movweq	r0, #32802	; 0x8022
    1568:	5c01018b 	stfpls	f0, [r1], {139}	; 0x8b
    156c:	0008023d 	andeq	r0, r8, sp, lsr r2
    1570:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1574:	00222402 	eoreq	r2, r2, r2, lsl #8
    1578:	01a20308 			; <UNDEFINED> instruction: 0x01a20308
    157c:	83347501 	teqhi	r4, #4194304	; 0x400000
    1580:	59081308 	stmdbpl	r8, {r3, r8, r9, ip}
    1584:	01000602 	tsteq	r0, r2, lsl #12
    1588:	02050001 	andeq	r0, r5, #1
    158c:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
    1590:	0101b703 	tsteq	r1, r3, lsl #14
    1594:	07023d4d 	streq	r3, [r2, -sp, asr #26]
    1598:	00010100 	andeq	r0, r1, r0, lsl #2
    159c:	22bc0205 	adcscs	r0, ip, #1342177280	; 0x50000000
    15a0:	c8030800 	stmdagt	r3, {fp}
    15a4:	3d5c0101 	ldfcce	f0, [ip, #-4]
    15a8:	01000802 	tsteq	r0, r2, lsl #16
    15ac:	02050001 	andeq	r0, r5, #1
    15b0:	080022dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp}
    15b4:	0101d503 	tsteq	r1, r3, lsl #10
    15b8:	4068303d 	rsbmi	r3, r8, sp, lsr r0
    15bc:	09022130 	stmdbeq	r2, {r4, r5, r8, sp}
    15c0:	b8010100 	stmdalt	r1, {r8}
    15c4:	02000004 	andeq	r0, r0, #4
    15c8:	0001ab00 	andeq	sl, r1, r0, lsl #22
    15cc:	fb010200 	blx	41dd6 <_Min_Stack_Size+0x419d6>
    15d0:	01000d0e 	tsteq	r0, lr, lsl #26
    15d4:	00010101 	andeq	r0, r1, r1, lsl #2
    15d8:	00010000 	andeq	r0, r1, r0
    15dc:	696c0100 	stmdbvs	ip!, {r8}^
    15e0:	4f432f62 	svcmi	0x00432f62
    15e4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    15e8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    15ec:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    15f0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    15f4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    15f8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    15fc:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1600:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1604:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1608:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    160c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1610:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1618 <_Min_Stack_Size+0x1218>
    1614:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1618:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    161c:	752f0063 	strvc	r0, [pc, #-99]!	; 15c1 <_Min_Stack_Size+0x11c1>
    1620:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1624:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1628:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    162c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1630:	616d2f62 	cmnvs	sp, r2, ror #30
    1634:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1638:	752f0065 	strvc	r0, [pc, #-101]!	; 15db <_Min_Stack_Size+0x11db>
    163c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1640:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1644:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1648:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    164c:	696c0062 	stmdbvs	ip!, {r1, r5, r6}^
    1650:	4f432f62 	svcmi	0x00432f62
    1654:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1658:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    165c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1660:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1664:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1668:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    166c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1670:	5349534d 	movtpl	r5, #37709	; 0x934d
    1674:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1678:	2f656369 	svccs	0x00656369
    167c:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1680:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1684:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1688:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    168c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1690:	62696c00 	rsbvs	r6, r9, #0, 24
    1694:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1698:	5f584554 	svcpl	0x00584554
    169c:	5f46344d 	svcpl	0x0046344d
    16a0:	334d5453 	movtcc	r5, #54355	; 0xd453
    16a4:	2f344632 	svccs	0x00344632
    16a8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    16ac:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    16b0:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    16b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    16b8:	5f787834 	svcpl	0x00787834
    16bc:	50647453 	rsbpl	r7, r4, r3, asr r4
    16c0:	70697265 	rsbvc	r7, r9, r5, ror #4
    16c4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    16c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    16cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    16d0:	62696c00 	rsbvs	r6, r9, #0, 24
    16d4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    16d8:	5f584554 	svcpl	0x00584554
    16dc:	5f46344d 	svcpl	0x0046344d
    16e0:	334d5453 	movtcc	r5, #54355	; 0xd453
    16e4:	2f344632 	svccs	0x00344632
    16e8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    16ec:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    16f0:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    16f4:	2f534953 	svccs	0x00534953
    16f8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    16fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    1700:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1704:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1708:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    170c:	632e6332 	teqvs	lr, #-939524096	; 0xc8000000
    1710:	00000100 	andeq	r0, r0, r0, lsl #2
    1714:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1718:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    171c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1720:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1724:	00000200 	andeq	r0, r0, r0, lsl #4
    1728:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    172c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1730:	00000300 	andeq	r0, r0, r0, lsl #6
    1734:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1738:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    173c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1740:	73000004 	movwvc	r0, #4
    1744:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1748:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    174c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1750:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1754:	74730000 	ldrbtvc	r0, [r3], #-0
    1758:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    175c:	5f787834 	svcpl	0x00787834
    1760:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    1764:	00050068 	andeq	r0, r5, r8, rrx
    1768:	726f6300 	rsbvc	r6, pc, #0, 6
    176c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1770:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1774:	00000006 	andeq	r0, r0, r6
    1778:	10020500 	andne	r0, r2, r0, lsl #10
    177c:	03080023 	movweq	r0, #32803	; 0x8023
    1780:	4e010189 	adfmid	f0, f1, #1.0
    1784:	4d685a4d 	vstmdbmi	r8!, {s11-s87}
    1788:	5a4d6a5a 	bpl	135c0f8 <_Min_Stack_Size+0x135bcf8>
    178c:	000a025b 	andeq	r0, sl, fp, asr r2
    1790:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1794:	00238402 	eoreq	r8, r3, r2, lsl #8
    1798:	01b40308 			; <UNDEFINED> instruction: 0x01b40308
    179c:	2f4b5901 	svccs	0x004b5901
    17a0:	3e2e0d03 	cdpcc	13, 2, cr0, cr14, cr3, {0}
    17a4:	6730594c 	ldrvs	r5, [r0, -ip, asr #18]!
    17a8:	3185404c 	orrcc	r4, r5, ip, asr #32
    17ac:	313f765b 	teqcc	pc, fp, asr r6	; <UNPREDICTABLE>
    17b0:	a3696d4c 	cmnge	r9, #76, 26	; 0x1300
    17b4:	4d5b4eae 	ldclmi	14, cr4, [fp, #-696]	; 0xfffffd48
    17b8:	863ef692 			; <UNDEFINED> instruction: 0x863ef692
    17bc:	40926a3e 	addsmi	r6, r2, lr, lsr sl
    17c0:	000c0283 	andeq	r0, ip, r3, lsl #5
    17c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17c8:	00250802 	eoreq	r0, r5, r2, lsl #16
    17cc:	02a10308 	adceq	r0, r1, #8, 6	; 0x20000000
    17d0:	3e4c4d01 	cdpcc	13, 4, cr4, cr12, cr1, {0}
    17d4:	4b3e3e4c 	blmi	f9110c <_Min_Stack_Size+0xf90d0c>
    17d8:	01000502 	tsteq	r0, r2, lsl #10
    17dc:	02050001 	andeq	r0, r5, #1
    17e0:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
    17e4:	0102b903 	tsteq	r2, r3, lsl #18
    17e8:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    17ec:	01000502 	tsteq	r0, r2, lsl #10
    17f0:	02050001 	andeq	r0, r5, #1
    17f4:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
    17f8:	0102d603 	tsteq	r2, r3, lsl #12
    17fc:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    1800:	01000502 	tsteq	r0, r2, lsl #10
    1804:	02050001 	andeq	r0, r5, #1
    1808:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
    180c:	0102f303 	tsteq	r2, r3, lsl #6
    1810:	4d3f3567 	cfldr32mi	mvfx3, [pc, #-412]!	; 167c <_Min_Stack_Size+0x127c>
    1814:	05023d85 	streq	r3, [r2, #-3461]	; 0xd85
    1818:	00010100 	andeq	r0, r1, r0, lsl #2
    181c:	26040205 	strcs	r0, [r4], -r5, lsl #4
    1820:	8f030800 	svchi	0x00030800
    1824:	3f6a0103 	svccc	0x006a0103
    1828:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    182c:	00010100 	andeq	r0, r1, r0, lsl #2
    1830:	26440205 	strbcs	r0, [r4], -r5, lsl #4
    1834:	a7030800 	strge	r0, [r3, -r0, lsl #16]
    1838:	3f6a0103 	svccc	0x006a0103
    183c:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    1840:	00010100 	andeq	r0, r1, r0, lsl #2
    1844:	26840205 	strcs	r0, [r4], r5, lsl #4
    1848:	c3030800 	movwgt	r0, #14336	; 0x3800
    184c:	3f870103 	svccc	0x00870103
    1850:	024b4d5d 	subeq	r4, fp, #5952	; 0x1740
    1854:	01010005 	tsteq	r1, r5
    1858:	c0020500 	andgt	r0, r2, r0, lsl #10
    185c:	03080026 	movweq	r0, #32806	; 0x8026
    1860:	6a0103de 	bvs	427e0 <_Min_Stack_Size+0x423e0>
    1864:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    1868:	01010005 	tsteq	r1, r5
    186c:	00020500 	andeq	r0, r2, r0, lsl #10
    1870:	03080027 	movweq	r0, #32807	; 0x8027
    1874:	670103f5 			; <UNDEFINED> instruction: 0x670103f5
    1878:	934d3f34 	movtls	r3, #57140	; 0xdf34
    187c:	0005023d 	andeq	r0, r5, sp, lsr r2
    1880:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1884:	00274002 	eoreq	r4, r7, r2
    1888:	04900308 	ldreq	r0, [r0], #776	; 0x308
    188c:	953f6a01 	ldrls	r6, [pc, #-2561]!	; e93 <_Min_Stack_Size+0xa93>
    1890:	00050284 	andeq	r0, r5, r4, lsl #5
    1894:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1898:	00278002 	eoreq	r8, r7, r2
    189c:	04a80308 	strteq	r0, [r8], #776	; 0x308
    18a0:	953f6a01 	ldrls	r6, [pc, #-2561]!	; ea7 <_Min_Stack_Size+0xaa7>
    18a4:	00050284 	andeq	r0, r5, r4, lsl #5
    18a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18ac:	0027c002 	eoreq	ip, r7, r2
    18b0:	04c20308 	strbeq	r0, [r2], #776	; 0x308
    18b4:	b13f6a01 	teqlt	pc, r1, lsl #20
    18b8:	00050284 	andeq	r0, r5, r4, lsl #5
    18bc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18c0:	00280402 	eoreq	r0, r8, r2, lsl #8
    18c4:	04da0308 	ldrbeq	r0, [sl], #776	; 0x308
    18c8:	953f6a01 	ldrls	r6, [pc, #-2561]!	; ecf <_Min_Stack_Size+0xacf>
    18cc:	00050284 	andeq	r0, r5, r4, lsl #5
    18d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18d4:	00284402 	eoreq	r4, r8, r2, lsl #8
    18d8:	04f40308 	ldrbteq	r0, [r4], #776	; 0x308
    18dc:	954d6a01 	strbls	r6, [sp, #-2561]	; 0xa01
    18e0:	00050284 	andeq	r0, r5, r4, lsl #5
    18e4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18e8:	00288402 	eoreq	r8, r8, r2, lsl #8
    18ec:	059a0308 	ldreq	r0, [sl, #776]	; 0x308
    18f0:	954d6c01 	strbls	r6, [sp, #-3073]	; 0xc01
    18f4:	00050284 	andeq	r0, r5, r4, lsl #5
    18f8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18fc:	0028c402 	eoreq	ip, r8, r2, lsl #8
    1900:	05b60308 	ldreq	r0, [r6, #776]!	; 0x308
    1904:	954d6a01 	strbls	r6, [sp, #-2561]	; 0xa01
    1908:	00050284 	andeq	r0, r5, r4, lsl #5
    190c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1910:	00290402 	eoreq	r0, r9, r2, lsl #8
    1914:	05ce0308 	strbeq	r0, [lr, #776]	; 0x308
    1918:	953f6a01 	ldrls	r6, [pc, #-2561]!	; f1f <_Min_Stack_Size+0xb1f>
    191c:	00050284 	andeq	r0, r5, r4, lsl #5
    1920:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1924:	00294402 	eoreq	r4, r9, r2, lsl #8
    1928:	05f40308 	ldrbeq	r0, [r4, #776]!	; 0x308
    192c:	024b6a01 	subeq	r6, fp, #4096	; 0x1000
    1930:	01010005 	tsteq	r1, r5
    1934:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    1938:	03080029 	movweq	r0, #32809	; 0x8029
    193c:	4e010681 	cfmadd32mi	mvax4, mvfx0, mvfx1, mvfx1
    1940:	0006024b 	andeq	r0, r6, fp, asr #4
    1944:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1948:	00298002 	eoreq	r8, r9, r2
    194c:	06a00308 	strteq	r0, [r0], r8, lsl #6
    1950:	953f6a01 	ldrls	r6, [pc, #-2561]!	; f57 <_Min_Stack_Size+0xb57>
    1954:	00050284 	andeq	r0, r5, r4, lsl #5
    1958:	05000101 	streq	r0, [r0, #-257]	; 0x101
    195c:	0029c002 	eoreq	ip, r9, r2
    1960:	06bf0308 	ldrteq	r0, [pc], r8, lsl #6
    1964:	954d6a01 	strbls	r6, [sp, #-2561]	; 0xa01
    1968:	00050284 	andeq	r0, r5, r4, lsl #5
    196c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1970:	002a0002 	eoreq	r0, sl, r2
    1974:	06d70308 	ldrbeq	r0, [r7], r8, lsl #6
    1978:	953f6a01 	ldrls	r6, [pc, #-2561]!	; f7f <_Min_Stack_Size+0xb7f>
    197c:	00050284 	andeq	r0, r5, r4, lsl #5
    1980:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1984:	002a4002 	eoreq	r4, sl, r2
    1988:	06ed0308 	strbteq	r0, [sp], r8, lsl #6
    198c:	02674e01 	rsbeq	r4, r7, #1, 28
    1990:	01010006 	tsteq	r1, r6
    1994:	60020500 	andvs	r0, r2, r0, lsl #10
    1998:	0308002a 	movweq	r0, #32810	; 0x802a
    199c:	6a01078e 	bvs	437dc <_Min_Stack_Size+0x433dc>
    19a0:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    19a4:	01010005 	tsteq	r1, r5
    19a8:	a0020500 	andge	r0, r2, r0, lsl #10
    19ac:	0308002a 	movweq	r0, #32810	; 0x802a
    19b0:	6a0107a6 	bvs	43850 <_Min_Stack_Size+0x43450>
    19b4:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    19b8:	01010005 	tsteq	r1, r5
    19bc:	e0020500 	and	r0, r2, r0, lsl #10
    19c0:	0308002a 	movweq	r0, #32810	; 0x802a
    19c4:	670108b0 			; <UNDEFINED> instruction: 0x670108b0
    19c8:	3d4d2f34 	stclcc	15, cr2, [sp, #-208]	; 0xffffff30
    19cc:	01000602 	tsteq	r0, r2, lsl #12
    19d0:	02050001 	andeq	r0, r5, #1
    19d4:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
    19d8:	0108cb03 	tsteq	r8, r3, lsl #22
    19dc:	a0953f88 	addsge	r3, r5, r8, lsl #31
    19e0:	01000502 	tsteq	r0, r2, lsl #10
    19e4:	02050001 	andeq	r0, r5, #1
    19e8:	08002b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, sp}
    19ec:	01098603 	tsteq	r9, r3, lsl #12
    19f0:	354b2f59 	strbcc	r2, [fp, #-3929]	; 0xf59
    19f4:	693f4b4b 	ldmdbvs	pc!, {r0, r1, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
    19f8:	21314169 	teqcs	r1, r9, ror #2
    19fc:	01000602 	tsteq	r0, r2, lsl #12
    1a00:	02050001 	andeq	r0, r5, #1
    1a04:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
    1a08:	0109b603 	tsteq	r9, r3, lsl #12
    1a0c:	4b502f4b 	blmi	140d740 <_Min_Stack_Size+0x140d340>
    1a10:	21693f4b 	cmncs	r9, fp, asr #30
    1a14:	01000602 	tsteq	r0, r2, lsl #12
    1a18:	02050001 	andeq	r0, r5, #1
    1a1c:	08002bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp}
    1a20:	0109ed03 	tsteq	r9, r3, lsl #26
    1a24:	31512f59 	cmpcc	r1, r9, asr pc
    1a28:	4f3f4c3f 	svcmi	0x003f4c3f
    1a2c:	41693f3e 	cmnmi	r9, lr, lsr pc
    1a30:	06022132 			; <UNDEFINED> instruction: 0x06022132
    1a34:	00010100 	andeq	r0, r1, r0, lsl #2
    1a38:	2c640205 	sfmcs	f0, 2, [r4], #-20	; 0xffffffec
    1a3c:	ba030800 	blt	c3a44 <_Min_Stack_Size+0xc3644>
    1a40:	3359010a 	cmpcc	r9, #-2147483646	; 0x80000002
    1a44:	0502674c 	streq	r6, [r2, #-1868]	; 0x74c
    1a48:	00010100 	andeq	r0, r1, r0, lsl #2
    1a4c:	2c900205 	lfmcs	f0, 4, [r0], {5}
    1a50:	dc030800 	stcle	8, cr0, [r3], {-0}
    1a54:	2f59010a 	svccs	0x0059010a
    1a58:	004d9335 	subeq	r9, sp, r5, lsr r3
    1a5c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1a60:	413f0682 	teqmi	pc, r2, lsl #13
    1a64:	06022131 			; <UNDEFINED> instruction: 0x06022131
    1a68:	00010100 	andeq	r0, r1, r0, lsl #2
    1a6c:	2cec0205 	sfmcs	f0, 2, [ip], #20
    1a70:	98030800 	stmdals	r3, {fp}
    1a74:	3459010b 	ldrbcc	r0, [r9], #-267	; 0x10b
    1a78:	0502674d 	streq	r6, [r2, #-1869]	; 0x74d
    1a7c:	8f010100 	svchi	0x00010100
    1a80:	02000003 	andeq	r0, r0, #3
    1a84:	00019800 	andeq	r9, r1, r0, lsl #16
    1a88:	fb010200 	blx	42292 <_Min_Stack_Size+0x41e92>
    1a8c:	01000d0e 	tsteq	r0, lr, lsl #26
    1a90:	00010101 	andeq	r0, r1, r1, lsl #2
    1a94:	00010000 	andeq	r0, r1, r0
    1a98:	696c0100 	stmdbvs	ip!, {r8}^
    1a9c:	4f432f62 	svcmi	0x00432f62
    1aa0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1aa4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1aa8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1aac:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1ab0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1ab4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1ab8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1abc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ac0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1ac4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1ac8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1acc:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1ad4 <_Min_Stack_Size+0x16d4>
    1ad0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1ad4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1ad8:	752f0063 	strvc	r0, [pc, #-99]!	; 1a7d <_Min_Stack_Size+0x167d>
    1adc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1ae0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1ae4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1ae8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1aec:	616d2f62 	cmnvs	sp, r2, ror #30
    1af0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1af4:	752f0065 	strvc	r0, [pc, #-101]!	; 1a97 <_Min_Stack_Size+0x1697>
    1af8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1afc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1b00:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1b04:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1b08:	696c0062 	stmdbvs	ip!, {r1, r5, r6}^
    1b0c:	4f432f62 	svcmi	0x00432f62
    1b10:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1b14:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    1b18:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1b1c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1b20:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1b24:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1b28:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1b2c:	5349534d 	movtpl	r5, #37709	; 0x934d
    1b30:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1b34:	2f656369 	svccs	0x00656369
    1b38:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1b3c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b40:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1b44:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1b48:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1b4c:	62696c00 	rsbvs	r6, r9, #0, 24
    1b50:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1b54:	5f584554 	svcpl	0x00584554
    1b58:	5f46344d 	svcpl	0x0046344d
    1b5c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1b60:	2f344632 	svccs	0x00344632
    1b64:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1b68:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1b6c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1b70:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1b74:	5f787834 	svcpl	0x00787834
    1b78:	50647453 	rsbpl	r7, r4, r3, asr r4
    1b7c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1b80:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1b84:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1b88:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b8c:	62696c00 	rsbvs	r6, r9, #0, 24
    1b90:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1b94:	5f584554 	svcpl	0x00584554
    1b98:	5f46344d 	svcpl	0x0046344d
    1b9c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1ba0:	2f344632 	svccs	0x00344632
    1ba4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1ba8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1bac:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1bb0:	2f534953 	svccs	0x00534953
    1bb4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1bb8:	00656475 	rsbeq	r6, r5, r5, ror r4
    1bbc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1bc0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1bc4:	645f7878 	ldrbvs	r7, [pc], #-2168	; 1bcc <_Min_Stack_Size+0x17cc>
    1bc8:	632e616d 	teqvs	lr, #1073741851	; 0x4000001b
    1bcc:	00000100 	andeq	r0, r0, r0, lsl #2
    1bd0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1bd4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    1bd8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1bdc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1be0:	00000200 	andeq	r0, r0, r0, lsl #4
    1be4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1be8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1bec:	00000300 	andeq	r0, r0, r0, lsl #6
    1bf0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1bf4:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1bf8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1bfc:	73000004 	movwvc	r0, #4
    1c00:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1c04:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1c08:	616d645f 	cmnvs	sp, pc, asr r4
    1c0c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1c10:	6f630000 	svcvs	0x00630000
    1c14:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1c18:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1c1c:	00000600 	andeq	r0, r0, r0, lsl #12
    1c20:	02050000 	andeq	r0, r5, #0
    1c24:	08002d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp}
    1c28:	0101c403 	tsteq	r1, r3, lsl #8
    1c2c:	3f3f694f 	svccc	0x003f694f
    1c30:	3f3f3f3f 	svccc	0x003f3f3f
    1c34:	5a4d4c4d 	bpl	1354d70 <_Min_Stack_Size+0x1354970>
    1c38:	5a4d5a4d 	bpl	1358574 <_Min_Stack_Size+0x1358174>
    1c3c:	4c4d4c4d 	mcrrmi	12, 4, r4, sp, cr13
    1c40:	5a4d4c4d 	bpl	1354d7c <_Min_Stack_Size+0x135497c>
    1c44:	5a4d4c4d 	bpl	1354d80 <_Min_Stack_Size+0x1354980>
    1c48:	5a4d5a4d 	bpl	1358584 <_Min_Stack_Size+0x1358184>
    1c4c:	4c4d4c4d 	mcrrmi	12, 4, r4, sp, cr13
    1c50:	4d4d4e4d 	stclmi	14, cr4, [sp, #-308]	; 0xfffffecc
    1c54:	01002f02 	tsteq	r0, r2, lsl #30
    1c58:	02050001 	andeq	r0, r5, #1
    1c5c:	08002ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp}
    1c60:	0102bf03 	tsteq	r2, r3, lsl #30
    1c64:	2e140359 	mrccs	3, 0, r0, cr4, cr9, {2}
    1c68:	4a10033f 	bmi	40296c <_Min_Stack_Size+0x40256c>
    1c6c:	3d212d59 	stccc	13, cr2, [r1, #-356]!	; 0xfffffe9c
    1c70:	2d3d212d 	ldfcss	f2, [sp, #-180]!	; 0xffffff4c
    1c74:	212d3d21 	teqcs	sp, r1, lsr #26
    1c78:	3f404338 	svccc	0x00404338
    1c7c:	4e40854f 	cdpmi	5, 4, cr8, cr0, cr15, {2}
    1c80:	07024b4e 	streq	r4, [r2, -lr, asr #22]
    1c84:	00010100 	andeq	r0, r1, r0, lsl #2
    1c88:	2f680205 	svccs	0x00680205
    1c8c:	93030800 	movwls	r0, #14336	; 0x3800
    1c90:	3f4d0103 	svccc	0x004d0103
    1c94:	3f3f3f3f 	svccc	0x003f3f3f
    1c98:	3f3f3f3f 	svccc	0x003f3f3f
    1c9c:	3f3f3f3f 	svccc	0x003f3f3f
    1ca0:	05023d3f 	streq	r3, [r2, #-3391]	; 0xd3f
    1ca4:	00010100 	andeq	r0, r1, r0, lsl #2
    1ca8:	2fd40205 	svccs	0x00d40205
    1cac:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    1cb0:	3f6b0103 	svccc	0x006b0103
    1cb4:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    1cb8:	00010100 	andeq	r0, r1, r0, lsl #2
    1cbc:	300c0205 	andcc	r0, ip, r5, lsl #4
    1cc0:	82030800 	andhi	r0, r3, #0, 16
    1cc4:	3f5e0104 	svccc	0x005e0104
    1cc8:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    1ccc:	00010100 	andeq	r0, r1, r0, lsl #2
    1cd0:	30400205 	subcc	r0, r0, r5, lsl #4
    1cd4:	a6030800 	strge	r0, [r3], -r0, lsl #16
    1cd8:	3f5e0104 	svccc	0x005e0104
    1cdc:	05026879 	streq	r6, [r2, #-2169]	; 0x879
    1ce0:	00010100 	andeq	r0, r1, r0, lsl #2
    1ce4:	30740205 	rsbscc	r0, r4, r5, lsl #4
    1ce8:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    1cec:	3d6b0104 	stfcce	f0, [fp, #-16]!
    1cf0:	01000502 	tsteq	r0, r2, lsl #10
    1cf4:	02050001 	andeq	r0, r5, #1
    1cf8:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
    1cfc:	01058703 	tsteq	r5, r3, lsl #14
    1d00:	06023d4f 	streq	r3, [r2], -pc, asr #26
    1d04:	00010100 	andeq	r0, r1, r0, lsl #2
    1d08:	30ac0205 	adccc	r0, ip, r5, lsl #4
    1d0c:	db030800 	blle	c3d14 <_Min_Stack_Size+0xc3914>
    1d10:	3f6b0105 	svccc	0x006b0105
    1d14:	023d6a79 	eorseq	r6, sp, #495616	; 0x79000
    1d18:	01010005 	tsteq	r1, r5
    1d1c:	e8020500 	stmda	r2, {r8, sl}
    1d20:	03080030 	movweq	r0, #32816	; 0x8030
    1d24:	6c0105f9 	cfstr32vs	mvfx0, [r1], {249}	; 0xf9
    1d28:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    1d2c:	01010005 	tsteq	r1, r5
    1d30:	20020500 	andcs	r0, r2, r0, lsl #10
    1d34:	03080031 	movweq	r0, #32817	; 0x8031
    1d38:	6c0106a3 	stcvs	6, cr0, [r1], {163}	; 0xa3
    1d3c:	023e4f3f 	eorseq	r4, lr, #63, 30	; 0xfc
    1d40:	01010005 	tsteq	r1, r5
    1d44:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    1d48:	03080031 	movweq	r0, #32817	; 0x8031
    1d4c:	4b0106bc 	blmi	43844 <_Min_Stack_Size+0x43444>
    1d50:	30416934 	subcc	r6, r1, r4, lsr r9
    1d54:	00060221 	andeq	r0, r6, r1, lsr #4
    1d58:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1d5c:	00317c02 	eorseq	r7, r1, r2, lsl #24
    1d60:	07af0308 	streq	r0, [pc, r8, lsl #6]!
    1d64:	69334b01 	ldmdbvs	r3!, {r0, r8, r9, fp, lr}
    1d68:	02213042 	eoreq	r3, r1, #66	; 0x42
    1d6c:	01010006 	tsteq	r1, r6
    1d70:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    1d74:	03080031 	movweq	r0, #32817	; 0x8031
    1d78:	4b0107d1 	blmi	43cc4 <_Min_Stack_Size+0x438c4>
    1d7c:	02215a34 	eoreq	r5, r1, #52, 20	; 0x34000
    1d80:	01010006 	tsteq	r1, r6
    1d84:	d0020500 	andle	r0, r2, r0, lsl #10
    1d88:	03080031 	movweq	r0, #32817	; 0x8031
    1d8c:	590107ec 	stmdbpl	r1, {r2, r3, r5, r6, r7, r8, r9, sl}
    1d90:	414d3530 	cmpmi	sp, r0, lsr r5
    1d94:	404f5b32 	submi	r5, pc, r2, lsr fp	; <UNPREDICTABLE>
    1d98:	32415b69 	subcc	r5, r1, #107520	; 0x1a400
    1d9c:	000d0221 	andeq	r0, sp, r1, lsr #4
    1da0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1da4:	00324802 	eorseq	r4, r2, r2, lsl #16
    1da8:	08af0308 	stmiaeq	pc!, {r3, r8, r9}	; <UNPREDICTABLE>
    1dac:	414d6001 	cmpmi	sp, r1
    1db0:	76875b32 			; <UNDEFINED> instruction: 0x76875b32
    1db4:	01000c02 	tsteq	r0, r2, lsl #24
    1db8:	02050001 	andeq	r0, r5, #1
    1dbc:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    1dc0:	0108de03 	tsteq	r8, r3, lsl #28
    1dc4:	793f5a7b 	ldmdbvc	pc!, {r0, r1, r3, r4, r5, r6, r9, fp, ip, lr}	; <UNPREDICTABLE>
    1dc8:	953f3e6b 	ldrls	r3, [pc, #-3691]!	; f65 <_Min_Stack_Size+0xb65>
    1dcc:	00050293 	muleq	r5, r3, r2
    1dd0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1dd4:	00331802 	eorseq	r1, r3, r2, lsl #16
    1dd8:	09920308 	ldmibeq	r2, {r3, r8, r9}
    1ddc:	51305901 	teqpl	r0, r1, lsl #18
    1de0:	7732414d 	ldrvc	r4, [r2, -sp, asr #2]!
    1de4:	5b5c6b5b 	blpl	171cb58 <_Min_Stack_Size+0x171c758>
    1de8:	0069404f 	rsbeq	r4, r9, pc, asr #32
    1dec:	06010402 	streq	r0, [r1], -r2, lsl #8
    1df0:	413f0658 	teqmi	pc, r8, asr r6	; <UNPREDICTABLE>
    1df4:	0d022132 	stfeqs	f2, [r2, #-200]	; 0xffffff38
    1df8:	00010100 	andeq	r0, r1, r0, lsl #2
    1dfc:	33c80205 	biccc	r0, r8, #1342177280	; 0x50000000
    1e00:	e4030800 	str	r0, [r3], #-2048	; 0x800
    1e04:	4d600109 	stfmie	f0, [r0, #-36]!	; 0xffffffdc
    1e08:	875b3241 	ldrbhi	r3, [fp, -r1, asr #4]
    1e0c:	000c0276 	andeq	r0, ip, r6, ror r2
    1e10:	040e0101 	streq	r0, [lr], #-257	; 0x101
    1e14:	00020000 	andeq	r0, r2, r0
    1e18:	00000198 	muleq	r0, r8, r1
    1e1c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1e20:	0101000d 	tsteq	r1, sp
    1e24:	00000101 	andeq	r0, r0, r1, lsl #2
    1e28:	00000100 	andeq	r0, r0, r0, lsl #2
    1e2c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
    1e30:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1e34:	5f584554 	svcpl	0x00584554
    1e38:	5f46344d 	svcpl	0x0046344d
    1e3c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1e40:	2f344632 	svccs	0x00344632
    1e44:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1e48:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1e4c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    1e50:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1e54:	5f787834 	svcpl	0x00787834
    1e58:	50647453 	rsbpl	r7, r4, r3, asr r4
    1e5c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1e60:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1e64:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1e68:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1e6c:	73752f00 	cmnvc	r5, #0, 30
    1e70:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1e74:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1e78:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1e7c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1e80:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1e84:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1e88:	73752f00 	cmnvc	r5, #0, 30
    1e8c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1e90:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1e94:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1e98:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1e9c:	62696c00 	rsbvs	r6, r9, #0, 24
    1ea0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    1ea4:	5f584554 	svcpl	0x00584554
    1ea8:	5f46344d 	svcpl	0x0046344d
    1eac:	334d5453 	movtcc	r5, #54355	; 0xd453
    1eb0:	2f344632 	svccs	0x00344632
    1eb4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1eb8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1ebc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1ec0:	2f534953 	svccs	0x00534953
    1ec4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1ec8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1ecc:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    1ed0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ed4:	2f787834 	svccs	0x00787834
    1ed8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1edc:	00656475 	rsbeq	r6, r5, r5, ror r4
    1ee0:	2f62696c 	svccs	0x0062696c
    1ee4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1ee8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1ddc <_Min_Stack_Size+0x19dc>
    1eec:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1ef0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ef4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1de4 <_Min_Stack_Size+0x19e4>
    1ef8:	61726269 	cmnvs	r2, r9, ror #4
    1efc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1f00:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1f04:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1f08:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1f0c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1f10:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1f14:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1f18:	2f726576 	svccs	0x00726576
    1f1c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1f20:	2f62696c 	svccs	0x0062696c
    1f24:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1f28:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1e1c <_Min_Stack_Size+0x1a1c>
    1f2c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    1f30:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1f34:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1e24 <_Min_Stack_Size+0x1a24>
    1f38:	61726269 	cmnvs	r2, r9, ror #4
    1f3c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1f40:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1f44:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    1f48:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1f4c:	00006564 	andeq	r6, r0, r4, ror #10
    1f50:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1f54:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1f58:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    1f5c:	00632e69 	rsbeq	r2, r3, r9, ror #28
    1f60:	5f000001 	svcpl	0x00000001
    1f64:	61666564 	cmnvs	r6, r4, ror #10
    1f68:	5f746c75 	svcpl	0x00746c75
    1f6c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1f70:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1f74:	73000002 	movwvc	r0, #2
    1f78:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1f7c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1f80:	73000003 	movwvc	r0, #3
    1f84:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1f88:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1f8c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    1f90:	74730000 	ldrbtvc	r0, [r3], #-0
    1f94:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1f98:	5f787834 	svcpl	0x00787834
    1f9c:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    1fa0:	00050068 	andeq	r0, r5, r8, rrx
    1fa4:	726f6300 	rsbvc	r6, pc, #0, 6
    1fa8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1fac:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1fb0:	00000006 	andeq	r0, r0, r6
    1fb4:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    1fb8:	03080034 	movweq	r0, #32820	; 0x8034
    1fbc:	4e0101e0 	adfmidz	f0, f1, f0
    1fc0:	4d685a4d 	vstmdbmi	r8!, {s11-s87}
    1fc4:	5a4d685a 	bpl	135c134 <_Min_Stack_Size+0x135bd34>
    1fc8:	685a4d68 	ldmdavs	sl, {r3, r5, r6, r8, sl, fp, lr}^
    1fcc:	4d6a5a4d 	vstmdbmi	sl!, {s11-s87}
    1fd0:	0f025b5a 	svceq	0x00025b5a
    1fd4:	00010100 	andeq	r0, r1, r0, lsl #2
    1fd8:	34fc0205 	ldrbtcc	r0, [ip], #517	; 0x205
    1fdc:	9c030800 	stcls	8, cr0, [r3], {-0}
    1fe0:	03590102 	cmpeq	r9, #-2147483648	; 0x80000000
    1fe4:	033e2e12 	teqeq	lr, #288	; 0x120
    1fe8:	2d674a09 	vstmdbcs	r7!, {s9-s17}
    1fec:	2c302d2f 	ldccs	13, cr2, [r0], #-188	; 0xffffff44
    1ff0:	2b312c30 	blcs	c4d0b8 <_Min_Stack_Size+0xc4ccb8>
    1ff4:	3f5d2b31 	svccc	0x005d2b31
    1ff8:	05024b85 	streq	r4, [r2, #-2949]	; 0xb85
    1ffc:	00010100 	andeq	r0, r1, r0, lsl #2
    2000:	35840205 	strcc	r0, [r4, #517]	; 0x205
    2004:	dc030800 	stcle	8, cr0, [r3], {-0}
    2008:	83590102 	cmphi	r9, #-2147483648	; 0x80000000
    200c:	660e034c 	strvs	r0, [lr], -ip, asr #6
    2010:	4c3f3f9f 	ldcmi	15, cr3, [pc], #-636	; 1d9c <_Min_Stack_Size+0x199c>
    2014:	414d422f 	cmpmi	sp, pc, lsr #4
    2018:	682e1303 	stmdavs	lr!, {r0, r1, r8, r9, ip}
    201c:	5b94a26a 	blpl	fe52a9cc <_estack+0xde4fa9cc>
    2020:	08f75bb0 	ldmeq	r7!, {r4, r5, r7, r8, r9, fp, ip, lr}^
    2024:	5b5b6924 	blpl	16dc4bc <_Min_Stack_Size+0x16dc0bc>
    2028:	04020040 	streq	r0, [r2], #-64	; 0x40
    202c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    2030:	a1322f3f 	teqge	r2, pc, lsr pc
    2034:	492d4b2f 	pushmi	{r0, r1, r2, r3, r5, r8, r9, fp, lr}
    2038:	0b023d87 	bleq	9165c <_Min_Stack_Size+0x9125c>
    203c:	00010100 	andeq	r0, r1, r0, lsl #2
    2040:	37340205 	ldrcc	r0, [r4, -r5, lsl #4]!
    2044:	e0030800 	and	r0, r3, r0, lsl #16
    2048:	3e4d0103 	dvfcce	f0, f5, f3
    204c:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2050:	3d3e3e3e 	ldccc	14, cr3, [lr, #-248]!	; 0xffffff08
    2054:	01000502 	tsteq	r0, r2, lsl #10
    2058:	02050001 	andeq	r0, r5, #1
    205c:	0800377c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
    2060:	0103fc03 	tsteq	r3, r3, lsl #24
    2064:	3f3f3f4d 	svccc	0x003f3f4d
    2068:	023d3f3f 	eorseq	r3, sp, #63, 30	; 0xfc
    206c:	01010005 	tsteq	r1, r5
    2070:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    2074:	03080037 	movweq	r0, #32823	; 0x8037
    2078:	6a010499 	bvs	432e4 <_Min_Stack_Size+0x42ee4>
    207c:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    2080:	01010005 	tsteq	r1, r5
    2084:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    2088:	03080037 	movweq	r0, #32823	; 0x8037
    208c:	6b0104b2 	blvs	4335c <_Min_Stack_Size+0x42f5c>
    2090:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    2094:	01010005 	tsteq	r1, r5
    2098:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    209c:	03080038 	movweq	r0, #32824	; 0x8038
    20a0:	6b0104cd 	blvs	433dc <_Min_Stack_Size+0x42fdc>
    20a4:	05028384 	streq	r8, [r2, #-900]	; 0x384
    20a8:	00010100 	andeq	r0, r1, r0, lsl #2
    20ac:	386c0205 	stmdacc	ip!, {r0, r2, r9}^
    20b0:	e1030800 	tst	r3, r0, lsl #16
    20b4:	4d6a0104 	stfmie	f0, [sl, #-16]!
    20b8:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    20bc:	00010100 	andeq	r0, r1, r0, lsl #2
    20c0:	38ac0205 	stmiacc	ip!, {r0, r2, r9}
    20c4:	fb030800 	blx	c40ce <_Min_Stack_Size+0xc3cce>
    20c8:	5b6a0104 	blpl	1a824e0 <_Min_Stack_Size+0x1a820e0>
    20cc:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    20d0:	00010100 	andeq	r0, r1, r0, lsl #2
    20d4:	38f00205 	ldmcc	r0!, {r0, r2, r9}^
    20d8:	93030800 	movwls	r0, #14336	; 0x3800
    20dc:	3f6a0105 	svccc	0x006a0105
    20e0:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    20e4:	00010100 	andeq	r0, r1, r0, lsl #2
    20e8:	39300205 	ldmdbcc	r0!, {r0, r2, r9}
    20ec:	b2030800 	andlt	r0, r3, #0, 16
    20f0:	3f6b0105 	svccc	0x006b0105
    20f4:	05028495 	streq	r8, [r2, #-1173]	; 0x495
    20f8:	00010100 	andeq	r0, r1, r0, lsl #2
    20fc:	39700205 	ldmdbcc	r0!, {r0, r2, r9}^
    2100:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    2104:	03590105 	cmpeq	r9, #1073741825	; 0x40000001
    2108:	3f9f4a0b 	svccc	0x009f4a0b
    210c:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    2110:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2114:	02004e4c 	andeq	r4, r0, #76, 28	; 0x4c0
    2118:	58060104 	stmdapl	r6, {r2, r8}
    211c:	4b355a06 	blmi	d5893c <_Min_Stack_Size+0xd5853c>
    2120:	3d95492d 	ldccc	9, cr4, [r5, #180]	; 0xb4
    2124:	01000502 	tsteq	r0, r2, lsl #10
    2128:	02050001 	andeq	r0, r5, #1
    212c:	08003a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp}
    2130:	0106a103 	tsteq	r6, r3, lsl #2
    2134:	06023d4f 	streq	r3, [r2], -pc, asr #26
    2138:	00010100 	andeq	r0, r1, r0, lsl #2
    213c:	3a280205 	bcc	a02958 <_Min_Stack_Size+0xa02558>
    2140:	b1030800 	tstlt	r3, r0, lsl #16
    2144:	3d6b0106 	stfcce	f0, [fp, #-24]!	; 0xffffffe8
    2148:	01000502 	tsteq	r0, r2, lsl #10
    214c:	02050001 	andeq	r0, r5, #1
    2150:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
    2154:	01078b03 	tsteq	r7, r3, lsl #22
    2158:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    215c:	01000502 	tsteq	r0, r2, lsl #10
    2160:	02050001 	andeq	r0, r5, #1
    2164:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
    2168:	0107a103 	tsteq	r7, r3, lsl #2
    216c:	0502834f 	streq	r8, [r2, #-847]	; 0x34f
    2170:	00010100 	andeq	r0, r1, r0, lsl #2
    2174:	3aa80205 	bcc	fea02990 <_estack+0xde9d2990>
    2178:	b3030800 	movwlt	r0, #14336	; 0x3800
    217c:	32670107 	rsbcc	r0, r7, #-1073741823	; 0xc0000001
    2180:	213f4f3f 	teqcs	pc, pc, lsr pc	; <UNPREDICTABLE>
    2184:	01000602 	tsteq	r0, r2, lsl #12
    2188:	02050001 	andeq	r0, r5, #1
    218c:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
    2190:	0107cc03 	tsteq	r7, r3, lsl #24
    2194:	06023d4f 	streq	r3, [r2], -pc, asr #26
    2198:	00010100 	andeq	r0, r1, r0, lsl #2
    219c:	3af80205 	bcc	ffe029b8 <_estack+0xdfdd29b8>
    21a0:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    21a4:	3f880107 	svccc	0x00880107
    21a8:	0502a095 	streq	sl, [r2, #-149]	; 0x95
    21ac:	00010100 	andeq	r0, r1, r0, lsl #2
    21b0:	3b400205 	blcc	10029cc <_Min_Stack_Size+0x10025cc>
    21b4:	dd030800 	stcle	8, cr0, [r3, #-0]
    21b8:	52830108 	addpl	r0, r3, #8, 2
    21bc:	953f5a4d 	ldrls	r5, [pc, #-2637]!	; 1777 <_Min_Stack_Size+0x1377>
    21c0:	000502a0 	andeq	r0, r5, r0, lsr #5
    21c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    21c8:	003ba002 	eorseq	sl, fp, r2
    21cc:	09890308 	stmibeq	r9, {r3, r8, r9}
    21d0:	85346701 	ldrhi	r6, [r4, #-1793]!	; 0x701
    21d4:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    21d8:	01010006 	tsteq	r1, r6
    21dc:	d8020500 	stmdale	r2, {r8, sl}
    21e0:	0308003b 	movweq	r0, #32827	; 0x803b
    21e4:	6c0109b2 	stcvs	9, cr0, [r1], {178}	; 0xb2
    21e8:	00050259 	andeq	r0, r5, r9, asr r2
    21ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    21f0:	003bf802 	eorseq	pc, fp, r2, lsl #16
    21f4:	09cb0308 	stmibeq	fp, {r3, r8, r9}^
    21f8:	6d2f6701 	stcvs	7, cr6, [pc, #-4]!	; 21fc <_Min_Stack_Size+0x1dfc>
    21fc:	695b4d77 	ldmdbvs	fp, {r0, r1, r2, r4, r5, r6, r8, sl, fp, lr}^
    2200:	01040200 	mrseq	r0, R12_usr
    2204:	3f068206 	svccc	0x00068206
    2208:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    220c:	01010006 	tsteq	r1, r6
    2210:	70020500 	andvc	r0, r2, r0, lsl #10
    2214:	0308003c 	movweq	r0, #32828	; 0x803c
    2218:	67010a82 	strvs	r0, [r1, -r2, lsl #21]
    221c:	02597734 	subseq	r7, r9, #52, 14	; 0xd00000
    2220:	01010005 	tsteq	r1, r5
    2224:	0000024f 	andeq	r0, r0, pc, asr #4
    2228:	019a0002 	orrseq	r0, sl, r2
    222c:	01020000 	mrseq	r0, (UNDEF: 2)
    2230:	000d0efb 	strdeq	r0, [sp], -fp
    2234:	01010101 	tsteq	r1, r1, lsl #2
    2238:	01000000 	mrseq	r0, (UNDEF: 0)
    223c:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2240:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    2244:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2248:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    224c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2250:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2254:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2258:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    225c:	2f736569 	svccs	0x00736569
    2260:	334d5453 	movtcc	r5, #54355	; 0xd453
    2264:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2268:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    226c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2270:	5f687069 	svcpl	0x00687069
    2274:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2278:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    227c:	2f006372 	svccs	0x00006372
    2280:	2f727375 	svccs	0x00727375
    2284:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2288:	2f656475 	svccs	0x00656475
    228c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2290:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 20f4 <_Min_Stack_Size+0x1cf4>
    2294:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2298:	2f00656e 	svccs	0x0000656e
    229c:	2f727375 	svccs	0x00727375
    22a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22a4:	2f656475 	svccs	0x00656475
    22a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    22ac:	6c006269 	sfmvs	f6, 4, [r0], {105}	; 0x69
    22b0:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    22b4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    22b8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    22bc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    22c0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    22c4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    22c8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    22cc:	2f736569 	svccs	0x00736569
    22d0:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    22d4:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    22d8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    22dc:	2f54532f 	svccs	0x0054532f
    22e0:	334d5453 	movtcc	r5, #54355	; 0xd453
    22e4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    22e8:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    22ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    22f0:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
    22f4:	4f432f62 	svcmi	0x00432f62
    22f8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    22fc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2300:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2304:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2308:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    230c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2310:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2314:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2318:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    231c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2320:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2324:	445f6870 	ldrbmi	r6, [pc], #-2160	; 232c <_Min_Stack_Size+0x1f2c>
    2328:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    232c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2330:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    2334:	4f432f62 	svcmi	0x00432f62
    2338:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    233c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2340:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2344:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2348:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    234c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2350:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2354:	5349534d 	movtpl	r5, #37709	; 0x934d
    2358:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    235c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2360:	74730000 	ldrbtvc	r0, [r3], #-0
    2364:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2368:	5f787834 	svcpl	0x00787834
    236c:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    2370:	0100632e 	tsteq	r0, lr, lsr #6
    2374:	645f0000 	ldrbvs	r0, [pc], #-0	; 237c <_Min_Stack_Size+0x1f7c>
    2378:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    237c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 2384 <_Min_Stack_Size+0x1f84>
    2380:	73657079 	cmnvc	r5, #121	; 0x79
    2384:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2388:	74730000 	ldrbtvc	r0, [r3], #-0
    238c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    2390:	0300682e 	movweq	r6, #2094	; 0x82e
    2394:	74730000 	ldrbtvc	r0, [r3], #-0
    2398:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    239c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    23a0:	00040068 	andeq	r0, r4, r8, rrx
    23a4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    23a8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    23ac:	655f7878 	ldrbvs	r7, [pc, #-2168]	; 1b3c <_Min_Stack_Size+0x173c>
    23b0:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
    23b4:	00050068 	andeq	r0, r5, r8, rrx
    23b8:	726f6300 	rsbvc	r6, pc, #0, 6
    23bc:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    23c0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    23c4:	00000006 	andeq	r0, r0, r6
    23c8:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    23cc:	0308003c 	movweq	r0, #32828	; 0x803c
    23d0:	2f0100ee 	svccs	0x000100ee
    23d4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    23d8:	0009023d 	andeq	r0, r9, sp, lsr r2
    23dc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    23e0:	003cd802 	eorseq	sp, ip, r2, lsl #16
    23e4:	00fe0308 	rscseq	r0, lr, r8, lsl #6
    23e8:	30364b01 	eorscc	r4, r6, r1, lsl #22
    23ec:	5a84834d 	bpl	fe123128 <_estack+0xde0f3128>
    23f0:	4d858377 	stcmi	3, cr8, [r5, #476]	; 0x1dc
    23f4:	5a2f8675 	bpl	be3dd0 <_Min_Stack_Size+0xbe39d0>
    23f8:	02845b87 	addeq	r5, r4, #138240	; 0x21c00
    23fc:	01010007 	tsteq	r1, r7
    2400:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    2404:	0308003d 	movweq	r0, #32829	; 0x803d
    2408:	4b0101b6 	blmi	42ae8 <_Min_Stack_Size+0x426e8>
    240c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2410:	01000502 	tsteq	r0, r2, lsl #10
    2414:	02050001 	andeq	r0, r5, #1
    2418:	08003de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, sp}
    241c:	0101c503 	tsteq	r1, r3, lsl #10
    2420:	0802674e 	stmdaeq	r2, {r1, r2, r3, r6, r8, r9, sl, sp, lr}
    2424:	00010100 	andeq	r0, r1, r0, lsl #2
    2428:	3e040205 	cdpcc	2, 0, cr0, cr4, cr5, {0}
    242c:	e3030800 	movw	r0, #14336	; 0x3800
    2430:	324b0101 	subcc	r0, fp, #1073741824	; 0x40000000
    2434:	21304068 	teqcs	r0, r8, rrx
    2438:	01000802 	tsteq	r0, r2, lsl #16
    243c:	02050001 	andeq	r0, r5, #1
    2440:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
    2444:	0101fa03 	tsteq	r1, r3, lsl #20
    2448:	07023d4e 	streq	r3, [r2, -lr, asr #26]
    244c:	00010100 	andeq	r0, r1, r0, lsl #2
    2450:	3e540205 	cdpcc	2, 5, cr0, cr4, cr5, {0}
    2454:	88030800 	stmdahi	r3, {fp}
    2458:	324b0102 	subcc	r0, fp, #-2147483648	; 0x80000000
    245c:	22304068 	eorscs	r4, r0, #104	; 0x68
    2460:	01000802 	tsteq	r0, r2, lsl #16
    2464:	02050001 	andeq	r0, r5, #1
    2468:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
    246c:	0102a003 	tsteq	r2, r3
    2470:	07023d4e 	streq	r3, [r2, -lr, asr #26]
    2474:	87010100 	strhi	r0, [r1, -r0, lsl #2]
    2478:	02000003 	andeq	r0, r0, #3
    247c:	00019c00 	andeq	r9, r1, r0, lsl #24
    2480:	fb010200 	blx	42c8a <_Min_Stack_Size+0x4288a>
    2484:	01000d0e 	tsteq	r0, lr, lsl #26
    2488:	00010101 	andeq	r0, r1, r1, lsl #2
    248c:	00010000 	andeq	r0, r1, r0
    2490:	696c0100 	stmdbvs	ip!, {r8}^
    2494:	4f432f62 	svcmi	0x00432f62
    2498:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    249c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    24a0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    24a4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    24a8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    24ac:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    24b0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    24b4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    24b8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    24bc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    24c0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    24c4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 24cc <_Min_Stack_Size+0x20cc>
    24c8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    24cc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    24d0:	752f0063 	strvc	r0, [pc, #-99]!	; 2475 <_Min_Stack_Size+0x2075>
    24d4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    24d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    24dc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    24e0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    24e4:	616d2f62 	cmnvs	sp, r2, ror #30
    24e8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    24ec:	752f0065 	strvc	r0, [pc, #-101]!	; 248f <_Min_Stack_Size+0x208f>
    24f0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    24f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    24f8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    24fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2500:	696c0062 	stmdbvs	ip!, {r1, r5, r6}^
    2504:	4f432f62 	svcmi	0x00432f62
    2508:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    250c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2510:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2514:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2518:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    251c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2520:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2524:	5349534d 	movtpl	r5, #37709	; 0x934d
    2528:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    252c:	2f656369 	svccs	0x00656369
    2530:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    2534:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2538:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    253c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    2540:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2544:	62696c00 	rsbvs	r6, r9, #0, 24
    2548:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    254c:	5f584554 	svcpl	0x00584554
    2550:	5f46344d 	svcpl	0x0046344d
    2554:	334d5453 	movtcc	r5, #54355	; 0xd453
    2558:	2f344632 	svccs	0x00344632
    255c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2560:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2564:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2568:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    256c:	5f787834 	svcpl	0x00787834
    2570:	50647453 	rsbpl	r7, r4, r3, asr r4
    2574:	70697265 	rsbvc	r7, r9, r5, ror #4
    2578:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    257c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2580:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2584:	62696c00 	rsbvs	r6, r9, #0, 24
    2588:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    258c:	5f584554 	svcpl	0x00584554
    2590:	5f46344d 	svcpl	0x0046344d
    2594:	334d5453 	movtcc	r5, #54355	; 0xd453
    2598:	2f344632 	svccs	0x00344632
    259c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    25a0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    25a4:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    25a8:	2f534953 	svccs	0x00534953
    25ac:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    25b0:	00656475 	rsbeq	r6, r5, r5, ror r4
    25b4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    25b8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    25bc:	645f7878 	ldrbvs	r7, [pc], #-2168	; 25c4 <_Min_Stack_Size+0x21c4>
    25c0:	6432616d 	ldrtvs	r6, [r2], #-365	; 0x16d
    25c4:	0100632e 	tsteq	r0, lr, lsr #6
    25c8:	645f0000 	ldrbvs	r0, [pc], #-0	; 25d0 <_Min_Stack_Size+0x21d0>
    25cc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    25d0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 25d8 <_Min_Stack_Size+0x21d8>
    25d4:	73657079 	cmnvc	r5, #121	; 0x79
    25d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    25dc:	74730000 	ldrbtvc	r0, [r3], #-0
    25e0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    25e4:	0300682e 	movweq	r6, #2094	; 0x82e
    25e8:	74730000 	ldrbtvc	r0, [r3], #-0
    25ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    25f0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    25f4:	00040068 	andeq	r0, r4, r8, rrx
    25f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    25fc:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2600:	645f7878 	ldrbvs	r7, [pc], #-2168	; 2608 <_Min_Stack_Size+0x2208>
    2604:	6432616d 	ldrtvs	r6, [r2], #-365	; 0x16d
    2608:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    260c:	6f630000 	svcvs	0x00630000
    2610:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2614:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    2618:	00000600 	andeq	r0, r0, r0, lsl #12
    261c:	02050000 	andeq	r0, r5, #0
    2620:	08003ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp}
    2624:	0100e903 	tsteq	r0, r3, lsl #18
    2628:	02595a30 	subseq	r5, r9, #48, 20	; 0x30000
    262c:	01010001 	tsteq	r1, r1
    2630:	c0020500 	andgt	r0, r2, r0, lsl #10
    2634:	0308003e 	movweq	r0, #32830	; 0x803e
    2638:	4c0100fa 	stcmi	0, cr0, [r1], {250}	; 0xfa
    263c:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    2640:	77832e0e 	strvc	r2, [r3, lr, lsl #28]
    2644:	4b4c7867 	blmi	13207e8 <_Min_Stack_Size+0x13203e8>
    2648:	4b4c5c4b 	blmi	131977c <_Min_Stack_Size+0x131937c>
    264c:	4b4c414b 	blmi	1312b80 <_Min_Stack_Size+0x1312780>
    2650:	4b4c414b 	blmi	1312b84 <_Min_Stack_Size+0x1312784>
    2654:	4b4b5d4b 	blmi	12d9b88 <_Min_Stack_Size+0x12d9788>
    2658:	834dcb4c 	movthi	ip, #56140	; 0xdb4c
    265c:	98674b77 	stmdals	r7!, {r0, r1, r2, r4, r5, r6, r8, r9, fp, lr}^
    2660:	01000702 	tsteq	r0, r2, lsl #14
    2664:	02050001 	andeq	r0, r5, #1
    2668:	0800401c 	stmdaeq	r0, {r2, r3, r4, lr}
    266c:	0101d303 	tsteq	r1, r3, lsl #6
    2670:	3d3f3f4c 	ldccc	15, cr3, [pc, #-304]!	; 2548 <_Min_Stack_Size+0x2148>
    2674:	3f3f3d3d 	svccc	0x003f3d3d
    2678:	023d3d3f 	eorseq	r3, sp, #4032	; 0xfc0
    267c:	01010005 	tsteq	r1, r5
    2680:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    2684:	03080040 	movweq	r0, #32832	; 0x8040
    2688:	300101f2 	strdcc	r0, [r1], -r2
    268c:	00060267 	andeq	r0, r6, r7, ror #4
    2690:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2694:	00408802 	subeq	r8, r0, r2, lsl #16
    2698:	01fe0308 	mvnseq	r0, r8, lsl #6
    269c:	02683001 	rsbeq	r3, r8, #1
    26a0:	01010006 	tsteq	r1, r6
    26a4:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    26a8:	03080040 	movweq	r0, #32832	; 0x8040
    26ac:	5c01028b 	sfmpl	f0, 4, [r1], {139}	; 0x8b
    26b0:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    26b4:	01010007 	tsteq	r1, r7
    26b8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    26bc:	03080040 	movweq	r0, #32832	; 0x8040
    26c0:	4c0102a4 	sfmmi	f0, 4, [r1], {164}	; 0xa4
    26c4:	2f2f2f2f 	svccs	0x002f2f2f
    26c8:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
    26cc:	6777834d 	ldrbvs	r8, [r7, -sp, asr #6]!
    26d0:	4b4b4b4b 	blmi	12d5404 <_Min_Stack_Size+0x12d5004>
    26d4:	67322dad 	ldrvs	r2, [r2, -sp, lsr #27]!
    26d8:	4baf4b4b 	blmi	febd540c <_estack+0xdeba540c>
    26dc:	01000902 	tsteq	r0, r2, lsl #18
    26e0:	02050001 	andeq	r0, r5, #1
    26e4:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
    26e8:	0102d803 	tsteq	r2, r3, lsl #16
    26ec:	3f3f3f4c 	svccc	0x003f3f4c
    26f0:	3f3f3f3f 	svccc	0x003f3f3f
    26f4:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 2600 <_Min_Stack_Size+0x2200>
    26f8:	01000502 	tsteq	r0, r2, lsl #10
    26fc:	02050001 	andeq	r0, r5, #1
    2700:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
    2704:	01038503 	tsteq	r3, r3, lsl #10
    2708:	2f2f2f4c 	svccs	0x002f2f4c
    270c:	0d032f2f 	stceq	15, cr2, [r3, #-188]	; 0xffffff44
    2710:	77834d2e 	strvc	r4, [r3, lr, lsr #26]
    2714:	4b4b4b67 	blmi	12d54b8 <_Min_Stack_Size+0x12d50b8>
    2718:	322dad4b 	eorcc	sl, sp, #4800	; 0x12c0
    271c:	af4b4b67 	svcge	0x004b4b67
    2720:	0009024c 	andeq	r0, r9, ip, asr #4
    2724:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2728:	0042e802 	subeq	lr, r2, r2, lsl #16
    272c:	03ba0308 			; <UNDEFINED> instruction: 0x03ba0308
    2730:	3f3f4c01 	svccc	0x003f4c01
    2734:	3f3f3f3f 	svccc	0x003f3f3f
    2738:	3f3f3f3f 	svccc	0x003f3f3f
    273c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2740:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2744:	00433c02 	subeq	r3, r3, r2, lsl #24
    2748:	03e50308 	mvneq	r0, #8, 6	; 0x20000000
    274c:	793f5c01 	ldmdbvc	pc!, {r0, sl, fp, ip, lr}	; <UNPREDICTABLE>
    2750:	00070268 	andeq	r0, r7, r8, ror #4
    2754:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2758:	00437402 	subeq	r7, r3, r2, lsl #8
    275c:	03fd0308 	mvnseq	r0, #8, 6	; 0x20000000
    2760:	793f5c01 	ldmdbvc	pc!, {r0, sl, fp, ip, lr}	; <UNPREDICTABLE>
    2764:	00070268 	andeq	r0, r7, r8, ror #4
    2768:	05000101 	streq	r0, [r0, #-257]	; 0x101
    276c:	0043ac02 	subeq	sl, r3, r2, lsl #24
    2770:	04940308 	ldreq	r0, [r4], #776	; 0x308
    2774:	833f6d01 	teqhi	pc, #1, 26	; 0x40
    2778:	0268943d 	rsbeq	r9, r8, #1023410176	; 0x3d000000
    277c:	01010007 	tsteq	r1, r7
    2780:	00020500 	andeq	r0, r2, r0, lsl #10
    2784:	03080044 	movweq	r0, #32836	; 0x8044
    2788:	4f0104af 	svcmi	0x000104af
    278c:	0007023d 	andeq	r0, r7, sp, lsr r2
    2790:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2794:	00441c02 	subeq	r1, r4, r2, lsl #24
    2798:	04f20308 	ldrbteq	r0, [r2], #776	; 0x308
    279c:	793f6b01 	ldmdbvc	pc!, {r0, r8, r9, fp, sp, lr}	; <UNPREDICTABLE>
    27a0:	00070276 	andeq	r0, r7, r6, ror r2
    27a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    27a8:	00445802 	subeq	r5, r4, r2, lsl #16
    27ac:	05910308 	ldreq	r0, [r1, #776]	; 0x308
    27b0:	69344b01 	ldmdbvs	r4!, {r0, r8, r9, fp, lr}
    27b4:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    27b8:	01010008 	tsteq	r1, r8
    27bc:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    27c0:	03080044 	movweq	r0, #32836	; 0x8044
    27c4:	4f0105b3 	svcmi	0x000105b3
    27c8:	0007023d 	andeq	r0, r7, sp, lsr r2
    27cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    27d0:	0044a802 	subeq	sl, r4, r2, lsl #16
    27d4:	05c80308 	strbeq	r0, [r8, #776]	; 0x308
    27d8:	412f4b01 	teqmi	pc, r1, lsl #22
    27dc:	00314068 	eorseq	r4, r1, r8, rrx
    27e0:	06010402 	streq	r0, [r1], -r2, lsl #8
    27e4:	403e0666 	eorsmi	r0, lr, r6, ror #12
    27e8:	09022130 	stmdbeq	r2, {r4, r5, r8, sp}
    27ec:	00010100 	andeq	r0, r1, r0, lsl #2
    27f0:	45000205 	strmi	r0, [r0, #-517]	; 0x205
    27f4:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    27f8:	3f4d0105 	svccc	0x004d0105
    27fc:	0008023d 	andeq	r0, r8, sp, lsr r2
    2800:	04b50101 	ldrteq	r0, [r5], #257	; 0x101
    2804:	00020000 	andeq	r0, r2, r0
    2808:	0000019a 	muleq	r0, sl, r1
    280c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2810:	0101000d 	tsteq	r1, sp
    2814:	00000101 	andeq	r0, r0, r1, lsl #2
    2818:	00000100 	andeq	r0, r0, r0, lsl #2
    281c:	62696c01 	rsbvs	r6, r9, #256	; 0x100
    2820:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2824:	5f584554 	svcpl	0x00584554
    2828:	5f46344d 	svcpl	0x0046344d
    282c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2830:	2f344632 	svccs	0x00344632
    2834:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2838:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    283c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2840:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2844:	5f787834 	svcpl	0x00787834
    2848:	50647453 	rsbpl	r7, r4, r3, asr r4
    284c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2850:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2854:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2858:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    285c:	73752f00 	cmnvc	r5, #0, 30
    2860:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2864:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2868:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    286c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2870:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    2874:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    2878:	73752f00 	cmnvc	r5, #0, 30
    287c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2880:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2884:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    2888:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    288c:	62696c00 	rsbvs	r6, r9, #0, 24
    2890:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2894:	5f584554 	svcpl	0x00584554
    2898:	5f46344d 	svcpl	0x0046344d
    289c:	334d5453 	movtcc	r5, #54355	; 0xd453
    28a0:	2f344632 	svccs	0x00344632
    28a4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    28a8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    28ac:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    28b0:	2f534953 	svccs	0x00534953
    28b4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    28b8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    28bc:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    28c0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    28c4:	2f787834 	svccs	0x00787834
    28c8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    28cc:	00656475 	rsbeq	r6, r5, r5, ror r4
    28d0:	2f62696c 	svccs	0x0062696c
    28d4:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    28d8:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 27cc <_Min_Stack_Size+0x23cc>
    28dc:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    28e0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    28e4:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 27d4 <_Min_Stack_Size+0x23d4>
    28e8:	61726269 	cmnvs	r2, r9, ror #4
    28ec:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    28f0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    28f4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    28f8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    28fc:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2900:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2904:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2908:	2f726576 	svccs	0x00726576
    290c:	00636e69 	rsbeq	r6, r3, r9, ror #28
    2910:	2f62696c 	svccs	0x0062696c
    2914:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2918:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 280c <_Min_Stack_Size+0x240c>
    291c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2920:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2924:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 2814 <_Min_Stack_Size+0x2414>
    2928:	61726269 	cmnvs	r2, r9, ror #4
    292c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2930:	534d432f 	movtpl	r4, #54063	; 0xd32f
    2934:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    2938:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    293c:	00006564 	andeq	r6, r0, r4, ror #10
    2940:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2944:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2948:	746c5f78 	strbtvc	r5, [ip], #-3960	; 0xf78
    294c:	632e6364 	teqvs	lr, #100, 6	; 0x90000001
    2950:	00000100 	andeq	r0, r0, r0, lsl #2
    2954:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2958:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    295c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2960:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2964:	00000200 	andeq	r0, r0, r0, lsl #4
    2968:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    296c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2970:	00000300 	andeq	r0, r0, r0, lsl #6
    2974:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2978:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    297c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2980:	73000004 	movwvc	r0, #4
    2984:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2988:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    298c:	64746c5f 	ldrbtvs	r6, [r4], #-3167	; 0xc5f
    2990:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2994:	63000005 	movwvs	r0, #5
    2998:	5f65726f 	svcpl	0x0065726f
    299c:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    29a0:	00060068 	andeq	r0, r6, r8, rrx
    29a4:	05000000 	streq	r0, [r0, #-0]
    29a8:	00452402 	subeq	r2, r5, r2, lsl #8
    29ac:	00fb0308 	rscseq	r0, fp, r8, lsl #6
    29b0:	595a3001 	ldmdbpl	sl, {r0, ip, sp}^
    29b4:	01000102 	tsteq	r0, r2, lsl #2
    29b8:	02050001 	andeq	r0, r5, #1
    29bc:	08004540 	stmdaeq	r0, {r6, r8, sl, lr}
    29c0:	01018c03 	tsteq	r1, r3, lsl #24
    29c4:	2f2f2f4b 	svccs	0x002f2f4b
    29c8:	14032f2f 	strne	r2, [r3], #-3887	; 0xf2f
    29cc:	934b672e 	movtls	r6, #46894	; 0xb72e
    29d0:	67934b67 	ldrvs	r4, [r3, r7, ror #22]
    29d4:	4b67934b 	blmi	19e7708 <_Min_Stack_Size+0x19e7308>
    29d8:	2d836792 	stccs	7, cr6, [r3, #584]	; 0x248
    29dc:	4b402d21 	blmi	100de68 <_Min_Stack_Size+0x100da68>
    29e0:	02ad674c 	adceq	r6, sp, #76, 14	; 0x1300000
    29e4:	0101000b 	tsteq	r1, fp
    29e8:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    29ec:	03080046 	movweq	r0, #32838	; 0x8046
    29f0:	4c0101cd 	stfmis	f0, [r1], {205}	; 0xcd
    29f4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    29f8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    29fc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a00:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    2a04:	01010005 	tsteq	r1, r5
    2a08:	d8020500 	stmdale	r2, {r8, sl}
    2a0c:	03080046 	movweq	r0, #32838	; 0x8046
    2a10:	5c0101e8 	stfpls	f0, [r1], {232}	; 0xe8
    2a14:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    2a18:	01010007 	tsteq	r1, r7
    2a1c:	10020500 	andne	r0, r2, r0, lsl #10
    2a20:	03080047 	movweq	r0, #32839	; 0x8047
    2a24:	5c010280 	sfmpl	f0, 4, [r1], {128}	; 0x80
    2a28:	0268793f 	rsbeq	r7, r8, #1032192	; 0xfc000
    2a2c:	01010007 	tsteq	r1, r7
    2a30:	48020500 	stmdami	r2, {r8, sl}
    2a34:	03080047 	movweq	r0, #32839	; 0x8047
    2a38:	4d010298 	sfmmi	f0, 4, [r1, #-608]	; 0xfffffda0
    2a3c:	68676768 	stmdavs	r7!, {r3, r5, r6, r8, r9, sl, sp, lr}^
    2a40:	000a0267 	andeq	r0, sl, r7, ror #4
    2a44:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a48:	0047a002 	subeq	sl, r7, r2
    2a4c:	02ac0308 	adceq	r0, ip, #8, 6	; 0x20000000
    2a50:	3d3d4b01 	fldmdbxcc	sp!, {d4-d3}	;@ Deprecated
    2a54:	0005023d 	andeq	r0, r5, sp, lsr r2
    2a58:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a5c:	0047c402 	subeq	ip, r7, r2, lsl #8
    2a60:	02ba0308 	adcseq	r0, sl, #8, 6	; 0x20000000
    2a64:	023d4f01 	eorseq	r4, sp, #1, 30
    2a68:	01010007 	tsteq	r1, r7
    2a6c:	e0020500 	and	r0, r2, r0, lsl #10
    2a70:	03080047 	movweq	r0, #32839	; 0x8047
    2a74:	4f0102cc 	svcmi	0x000102cc
    2a78:	0007023d 	andeq	r0, r7, sp, lsr r2
    2a7c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a80:	0047fc02 	subeq	pc, r7, r2, lsl #24
    2a84:	02e10308 	rsceq	r0, r1, #8, 6	; 0x20000000
    2a88:	2f2f5a01 	svccs	0x002f5a01
    2a8c:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
    2a90:	674b2e13 	smlaldvs	r2, fp, r3, lr
    2a94:	69674b69 	stmdbvs	r7!, {r0, r3, r5, r6, r8, r9, fp, lr}^
    2a98:	4b4b4d67 	blmi	12d603c <_Min_Stack_Size+0x12d5c3c>
    2a9c:	2d67594b 	stclcs	9, cr5, [r7, #-300]!	; 0xfffffed4
    2aa0:	834d6732 	movthi	r6, #55090	; 0xd732
    2aa4:	4b4d5977 	blmi	1359088 <_Min_Stack_Size+0x1358c88>
    2aa8:	4c836967 	stcmi	9, cr6, [r3], {103}	; 0x67
    2aac:	01000502 	tsteq	r0, r2, lsl #10
    2ab0:	02050001 	andeq	r0, r5, #1
    2ab4:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
    2ab8:	0103af03 	tsteq	r3, r3, lsl #30
    2abc:	3d3f3d4e 	ldccc	13, cr3, [pc, #-312]!	; 298c <_Min_Stack_Size+0x258c>
    2ac0:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 29cc <_Min_Stack_Size+0x25cc>
    2ac4:	4b3f3d3d 	blmi	fd1fc0 <_Min_Stack_Size+0xfd1bc0>
    2ac8:	3f3d3f3f 	svccc	0x003d3f3f
    2acc:	0005023d 	andeq	r0, r5, sp, lsr r2
    2ad0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2ad4:	0049a402 	subeq	sl, r9, r2, lsl #8
    2ad8:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
    2adc:	793f6a01 	ldmdbvc	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2ae0:	00050268 	andeq	r0, r5, r8, ror #4
    2ae4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2ae8:	0049dc02 	subeq	sp, r9, r2, lsl #24
    2aec:	03f90308 	mvnseq	r0, #8, 6	; 0x20000000
    2af0:	4b5a4d01 	blmi	1695efc <_Min_Stack_Size+0x1695afc>
    2af4:	0802754c 	stmdaeq	r2, {r2, r3, r6, r8, sl, ip, sp, lr}
    2af8:	00010100 	andeq	r0, r1, r0, lsl #2
    2afc:	4a1c0205 	bmi	703318 <_Min_Stack_Size+0x702f18>
    2b00:	8c030800 	stchi	8, cr0, [r3], {-0}
    2b04:	3d4b0104 	stfcce	f0, [fp, #-16]
    2b08:	0005023d 	andeq	r0, r5, sp, lsr r2
    2b0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2b10:	004a3c02 	subeq	r3, sl, r2, lsl #24
    2b14:	049d0308 	ldreq	r0, [sp], #776	; 0x308
    2b18:	40685001 	rsbmi	r5, r8, r1
    2b1c:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    2b20:	00010100 	andeq	r0, r1, r0, lsl #2
    2b24:	4a6c0205 	bmi	1b03340 <_Min_Stack_Size+0x1b02f40>
    2b28:	b8030800 	stmdalt	r3, {fp}
    2b2c:	2f750104 	svccs	0x00750104
    2b30:	4b693f36 	blmi	1a52810 <_Min_Stack_Size+0x1a52410>
    2b34:	6abf674b 	bvs	fefdc868 <_estack+0xdefac868>
    2b38:	0007023d 	andeq	r0, r7, sp, lsr r2
    2b3c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2b40:	004ae802 	subeq	lr, sl, r2, lsl #16
    2b44:	04df0308 	ldrbeq	r0, [pc], #776	; 2b4c <_Min_Stack_Size+0x274c>
    2b48:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    2b4c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2b50:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2b54:	004b0c02 	subeq	r0, fp, r2, lsl #24
    2b58:	04f10308 	ldrbteq	r0, [r1], #776	; 0x308
    2b5c:	793f6a01 	ldmdbvc	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2b60:	07023d6a 	streq	r3, [r2, -sl, ror #26]
    2b64:	00010100 	andeq	r0, r1, r0, lsl #2
    2b68:	4b4c0205 	blmi	1303384 <_Min_Stack_Size+0x1302f84>
    2b6c:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
    2b70:	2f590105 	svccs	0x00590105
    2b74:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    2b78:	674b4b4b 	strbvs	r4, [fp, -fp, asr #22]
    2b7c:	0502302d 	streq	r3, [r2, #-45]	; 0x2d
    2b80:	00010100 	andeq	r0, r1, r0, lsl #2
    2b84:	4b980205 	blmi	fe6033a0 <_estack+0xde5d33a0>
    2b88:	a9030800 	stmdbge	r3, {fp}
    2b8c:	3d4c0105 	stfcce	f0, [ip, #-20]	; 0xffffffec
    2b90:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    2b94:	01010005 	tsteq	r1, r5
    2b98:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    2b9c:	0308004b 	movweq	r0, #32843	; 0x804b
    2ba0:	8a0105bd 	bhi	4429c <_Min_Stack_Size+0x43e9c>
    2ba4:	673d6967 	ldrvs	r6, [sp, -r7, ror #18]!
    2ba8:	3e3e3e6b 	cdpcc	14, 3, cr3, cr14, cr11, {3}
    2bac:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
    2bb0:	3c060104 	stfccs	f0, [r6], {4}
    2bb4:	3f3d3d06 	svccc	0x003d3d06
    2bb8:	ae3d3140 	rsfgeem	f3, f5, f0
    2bbc:	6767763d 			; <UNDEFINED> instruction: 0x6767763d
    2bc0:	01000702 	tsteq	r0, r2, lsl #14
    2bc4:	02050001 	andeq	r0, r5, #1
    2bc8:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
    2bcc:	0105fa03 	tsteq	r5, r3, lsl #20
    2bd0:	05023d68 	streq	r3, [r2, #-3432]	; 0xd68
    2bd4:	00010100 	andeq	r0, r1, r0, lsl #2
    2bd8:	4cbc0205 	lfmmi	f0, 4, [ip], #20
    2bdc:	89030800 	stmdbhi	r3, {fp}
    2be0:	3d5a0106 	ldfcce	f0, [sl, #-24]	; 0xffffffe8
    2be4:	01000502 	tsteq	r0, r2, lsl #10
    2be8:	02050001 	andeq	r0, r5, #1
    2bec:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
    2bf0:	01069903 	tsteq	r6, r3, lsl #18
    2bf4:	3e660903 	cdpcc	9, 6, cr0, cr6, cr3, {0}
    2bf8:	4c3e4c3e 	ldcmi	12, cr4, [lr], #-248	; 0xffffff08
    2bfc:	01040200 	mrseq	r0, R12_usr
    2c00:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    2c04:	404e3f3d 	submi	r3, lr, sp, lsr pc
    2c08:	3d5a4b3d 	vldrcc	d20, [sl, #-244]	; 0xffffff0c
    2c0c:	69675a4b 	stmdbvs	r7!, {r0, r1, r3, r6, r9, fp, ip, lr}^
    2c10:	05023ee7 	streq	r3, [r2, #-3815]	; 0xee7
    2c14:	00010100 	andeq	r0, r1, r0, lsl #2
    2c18:	4da40205 	sfmmi	f0, 4, [r4, #20]!
    2c1c:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    2c20:	3e5d0106 	rdfcce	f0, f5, f6
    2c24:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2c28:	01040200 	mrseq	r0, R12_usr
    2c2c:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    2c30:	31403f3d 	cmpcc	r0, sp, lsr pc
    2c34:	3e3e5a4b 	vsubcc.f32	s10, s28, s22
    2c38:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
    2c3c:	3c060104 	stfccs	f0, [r6], {4}
    2c40:	3f3d3d06 	svccc	0x003d3d06
    2c44:	3ecb3240 	cdpcc	2, 12, cr3, cr11, cr0, {2}
    2c48:	01000502 	tsteq	r0, r2, lsl #10
    2c4c:	02050001 	andeq	r0, r5, #1
    2c50:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
    2c54:	0107c903 	tsteq	r7, r3, lsl #18
    2c58:	76783e6b 	ldrbtvc	r3, [r8], -fp, ror #28
    2c5c:	01000702 	tsteq	r0, r2, lsl #14
    2c60:	02050001 	andeq	r0, r5, #1
    2c64:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
    2c68:	0107e303 	tsteq	r7, r3, lsl #6
    2c6c:	4068334b 	rsbmi	r3, r8, fp, asr #6
    2c70:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    2c74:	00010100 	andeq	r0, r1, r0, lsl #2
    2c78:	4ed40205 	cdpmi	2, 13, cr0, cr4, cr5, {0}
    2c7c:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    2c80:	3d4f0107 	stfcce	f0, [pc, #-28]	; 2c6c <_Min_Stack_Size+0x286c>
    2c84:	01000702 	tsteq	r0, r2, lsl #14
    2c88:	02050001 	andeq	r0, r5, #1
    2c8c:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
    2c90:	01089203 	tsteq	r8, r3, lsl #4
    2c94:	4068334b 	rsbmi	r3, r8, fp, asr #6
    2c98:	04020031 	streq	r0, [r2], #-49	; 0x31
    2c9c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2ca0:	2130403e 	teqcs	r0, lr, lsr r0
    2ca4:	01000802 	tsteq	r0, r2, lsl #16
    2ca8:	02050001 	andeq	r0, r5, #1
    2cac:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
    2cb0:	0108b803 	tsteq	r8, r3, lsl #16
    2cb4:	07023d4f 	streq	r3, [r2, -pc, asr #26]
    2cb8:	22010100 	andcs	r0, r1, #0, 2
    2cbc:	02000005 	andeq	r0, r0, #5
    2cc0:	00019800 	andeq	r9, r1, r0, lsl #16
    2cc4:	fb010200 	blx	434ce <_Min_Stack_Size+0x430ce>
    2cc8:	01000d0e 	tsteq	r0, lr, lsl #26
    2ccc:	00010101 	andeq	r0, r1, r1, lsl #2
    2cd0:	00010000 	andeq	r0, r1, r0
    2cd4:	696c0100 	stmdbvs	ip!, {r8}^
    2cd8:	4f432f62 	svcmi	0x00432f62
    2cdc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2ce0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2ce4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2ce8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2cec:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2cf0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2cf4:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2cf8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2cfc:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2d00:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2d04:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2d08:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2d10 <_Min_Stack_Size+0x2910>
    2d0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2d10:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2d14:	752f0063 	strvc	r0, [pc, #-99]!	; 2cb9 <_Min_Stack_Size+0x28b9>
    2d18:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2d1c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2d20:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2d24:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2d28:	616d2f62 	cmnvs	sp, r2, ror #30
    2d2c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    2d30:	752f0065 	strvc	r0, [pc, #-101]!	; 2cd3 <_Min_Stack_Size+0x28d3>
    2d34:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2d38:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2d3c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2d40:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2d44:	696c0062 	stmdbvs	ip!, {r1, r5, r6}^
    2d48:	4f432f62 	svcmi	0x00432f62
    2d4c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2d50:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2d54:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2d58:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2d5c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2d60:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2d64:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2d68:	5349534d 	movtpl	r5, #37709	; 0x934d
    2d6c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    2d70:	2f656369 	svccs	0x00656369
    2d74:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    2d78:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2d7c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2d80:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    2d84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2d88:	62696c00 	rsbvs	r6, r9, #0, 24
    2d8c:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2d90:	5f584554 	svcpl	0x00584554
    2d94:	5f46344d 	svcpl	0x0046344d
    2d98:	334d5453 	movtcc	r5, #54355	; 0xd453
    2d9c:	2f344632 	svccs	0x00344632
    2da0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2da4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2da8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2dac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2db0:	5f787834 	svcpl	0x00787834
    2db4:	50647453 	rsbpl	r7, r4, r3, asr r4
    2db8:	70697265 	rsbvc	r7, r9, r5, ror #4
    2dbc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2dc0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2dc4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2dc8:	62696c00 	rsbvs	r6, r9, #0, 24
    2dcc:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2dd0:	5f584554 	svcpl	0x00584554
    2dd4:	5f46344d 	svcpl	0x0046344d
    2dd8:	334d5453 	movtcc	r5, #54355	; 0xd453
    2ddc:	2f344632 	svccs	0x00344632
    2de0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2de4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2de8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    2dec:	2f534953 	svccs	0x00534953
    2df0:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    2df4:	00656475 	rsbeq	r6, r5, r5, ror r4
    2df8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2dfc:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    2e00:	665f7878 			; <UNDEFINED> instruction: 0x665f7878
    2e04:	632e636d 	teqvs	lr, #-1275068415	; 0xb4000001
    2e08:	00000100 	andeq	r0, r0, r0, lsl #2
    2e0c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2e10:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2e14:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2e18:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2e1c:	00000200 	andeq	r0, r0, r0, lsl #4
    2e20:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2e24:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2e28:	00000300 	andeq	r0, r0, r0, lsl #6
    2e2c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2e30:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    2e34:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2e38:	73000004 	movwvc	r0, #4
    2e3c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2e40:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2e44:	636d665f 	cmnvs	sp, #99614720	; 0x5f00000
    2e48:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    2e4c:	6f630000 	svcvs	0x00630000
    2e50:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2e54:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    2e58:	00000600 	andeq	r0, r0, r0, lsl #12
    2e5c:	02050000 	andeq	r0, r5, #0
    2e60:	08004f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, lr}
    2e64:	01018203 	tsteq	r1, r3, lsl #4
    2e68:	76873e4f 	strvc	r3, [r7], pc, asr #28
    2e6c:	08026783 	stmdaeq	r2, {r0, r1, r7, r8, r9, sl, sp, lr}
    2e70:	00010100 	andeq	r0, r1, r0, lsl #2
    2e74:	4fb40205 	svcmi	0x00b40205
    2e78:	9d030800 	stcls	8, cr0, [r3, #-0]
    2e7c:	034b0101 	movteq	r0, #45313	; 0xb101
    2e80:	2f4b2e1a 	svccs	0x004b2e1a
    2e84:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2e88:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2e8c:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2e90:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2e94:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    2e98:	032d222d 	teqeq	sp, #-805306366	; 0xd0000002
    2e9c:	10032074 	andne	r2, r3, r4, ror r0
    2ea0:	00da4c2e 	sbcseq	r4, sl, lr, lsr #24
    2ea4:	06010402 	streq	r0, [r1], -r2, lsl #8
    2ea8:	684c0658 	stmdavs	ip, {r3, r4, r6, r9, sl}^
    2eac:	59a28391 	stmibpl	r2!, {r0, r4, r7, r8, r9, pc}
    2eb0:	4922493d 	stmdbmi	r2!, {r0, r2, r3, r4, r5, r8, fp, lr}
    2eb4:	49224922 	stmdbmi	r2!, {r1, r5, r8, fp, lr}
    2eb8:	3b224922 	blcc	895348 <_Min_Stack_Size+0x894f48>
    2ebc:	03207a03 	teqeq	r0, #12288	; 0x3000
    2ec0:	09032e0a 	stmdbeq	r3, {r1, r3, r9, sl, fp, sp}
    2ec4:	493d3d58 	ldmdbmi	sp!, {r3, r4, r6, r8, sl, fp, ip, sp}
    2ec8:	49224922 	stmdbmi	r2!, {r1, r5, r8, fp, lr}
    2ecc:	3b224922 	blcc	89535c <_Min_Stack_Size+0x894f5c>
    2ed0:	3c0a031b 	stccc	3, cr0, [sl], {27}
    2ed4:	00080277 	andeq	r0, r8, r7, ror r2
    2ed8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2edc:	00514802 	subseq	r4, r1, r2, lsl #16
    2ee0:	02810308 	addeq	r0, r1, #8, 6	; 0x20000000
    2ee4:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    2ee8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2eec:	4b3d3d3d 	blmi	f523e8 <_Min_Stack_Size+0xf51fe8>
    2ef0:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
    2ef4:	4b4b4b4b 	blmi	12d5c28 <_Min_Stack_Size+0x12d5828>
    2ef8:	4b4b4b4b 	blmi	12d5c2c <_Min_Stack_Size+0x12d582c>
    2efc:	4b4b4b4b 	blmi	12d5c30 <_Min_Stack_Size+0x12d5830>
    2f00:	05024b4b 	streq	r4, [r2, #-2891]	; 0xb4b
    2f04:	00010100 	andeq	r0, r1, r0, lsl #2
    2f08:	52240205 	eorpl	r0, r4, #1342177280	; 0x50000000
    2f0c:	ae030800 	cdpge	8, 0, cr0, cr3, cr0, {0}
    2f10:	3f6a0102 	svccc	0x006a0102
    2f14:	0802bccd 	stmdaeq	r2, {r0, r2, r3, r6, r7, sl, fp, ip, sp, pc}
    2f18:	00010100 	andeq	r0, r1, r0, lsl #2
    2f1c:	52780205 	rsbspl	r0, r8, #1342177280	; 0x50000000
    2f20:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    2f24:	3f4e0102 	svccc	0x004e0102
    2f28:	5e4b3d3d 	mcrpl	13, 2, r3, cr11, cr13, {1}
    2f2c:	4c4b3d3d 	mcrrmi	13, 3, r3, fp, cr13
    2f30:	01000a02 	tsteq	r0, r2, lsl #20
    2f34:	02050001 	andeq	r0, r5, #1
    2f38:	080052d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, lr}
    2f3c:	01039603 	tsteq	r3, r3, lsl #12
    2f40:	6614034b 	ldrvs	r0, [r4], -fp, asr #6
    2f44:	2d222d30 	stccs	13, cr2, [r2, #-192]!	; 0xffffff40
    2f48:	3b222d22 	blcc	88e3d8 <_Min_Stack_Size+0x88dfd8>
    2f4c:	031b3b22 	tsteq	fp, #34816	; 0x8800
    2f50:	493d3c09 	ldmdbmi	sp!, {r0, r3, sl, fp, ip, sp}
    2f54:	47224922 	strmi	r4, [r2, -r2, lsr #18]!
    2f58:	22493d34 	subcs	r3, r9, #52, 26	; 0xd00
    2f5c:	33472249 	movtcc	r2, #29257	; 0x7249
    2f60:	4f3d3d4d 	svcmi	0x003d3d4d
    2f64:	023e3d3d 	eorseq	r3, lr, #3904	; 0xf40
    2f68:	01010009 	tsteq	r1, r9
    2f6c:	a0020500 	andge	r0, r2, r0, lsl #10
    2f70:	03080053 	movweq	r0, #32851	; 0x8053
    2f74:	4c0103d7 	stcmi	3, cr0, [r1], {215}	; 0xd7
    2f78:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2f7c:	4b3d3d3d 	blmi	f52478 <_Min_Stack_Size+0xf52078>
    2f80:	4b4b4b4b 	blmi	12d5cb4 <_Min_Stack_Size+0x12d58b4>
    2f84:	024b4b4b 	subeq	r4, fp, #76800	; 0x12c00
    2f88:	01010005 	tsteq	r1, r5
    2f8c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    2f90:	03080054 	movweq	r0, #32852	; 0x8054
    2f94:	6a0103f4 	bvs	43f6c <_Min_Stack_Size+0x43b6c>
    2f98:	7a783e3f 	bvc	1e1289c <_Min_Stack_Size+0x1e1249c>
    2f9c:	0269783e 	rsbeq	r7, r9, #4063232	; 0x3e0000
    2fa0:	0101000c 	tsteq	r1, ip
    2fa4:	88020500 	stmdahi	r2, {r8, sl}
    2fa8:	03080054 	movweq	r0, #32852	; 0x8054
    2fac:	6a01049c 	bvs	44224 <_Min_Stack_Size+0x43e24>
    2fb0:	7a783e3f 	bvc	1e128b4 <_Min_Stack_Size+0x1e124b4>
    2fb4:	0269783e 	rsbeq	r7, r9, #4063232	; 0x3e0000
    2fb8:	0101000c 	tsteq	r1, ip
    2fbc:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    2fc0:	03080054 	movweq	r0, #32852	; 0x8054
    2fc4:	4b0104c3 	blmi	442d8 <_Min_Stack_Size+0x43ed8>
    2fc8:	3f4f3f30 	svccc	0x004f3f30
    2fcc:	000b0221 	andeq	r0, fp, r1, lsr #4
    2fd0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2fd4:	00552c02 	subseq	r2, r5, r2, lsl #24
    2fd8:	05830308 	streq	r0, [r3, #776]	; 0x308
    2fdc:	3d3d3001 	ldccc	0, cr3, [sp, #-4]!
    2fe0:	024b4b4b 	subeq	r4, fp, #76800	; 0x12c00
    2fe4:	01010006 	tsteq	r1, r6
    2fe8:	60020500 	andvs	r0, r2, r0, lsl #10
    2fec:	03080055 	movweq	r0, #32853	; 0x8055
    2ff0:	03010594 	movweq	r0, #5524	; 0x1594
    2ff4:	3b3e4a15 	blcc	f95850 <_Min_Stack_Size+0xf95450>
    2ff8:	263a3b22 	ldrtcs	r3, [sl], -r2, lsr #22
    2ffc:	4922494b 	stmdbmi	r2!, {r0, r1, r3, r6, r8, fp, lr}
    3000:	261e4922 	ldrcs	r4, [lr], -r2, lsr #18
    3004:	4922494b 	stmdbmi	r2!, {r0, r1, r3, r6, r8, fp, lr}
    3008:	261e4922 	ldrcs	r4, [lr], -r2, lsr #18
    300c:	4922494b 	stmdbmi	r2!, {r0, r1, r3, r6, r8, fp, lr}
    3010:	241e4922 	ldrcs	r4, [lr], #-2338	; 0x922
    3014:	01000802 	tsteq	r0, r2, lsl #16
    3018:	02050001 	andeq	r0, r5, #1
    301c:	0800560c 	stmdaeq	r0, {r2, r3, r9, sl, ip, lr}
    3020:	0105c803 	tsteq	r5, r3, lsl #16
    3024:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    3028:	4b4b4b4b 	blmi	12d5d5c <_Min_Stack_Size+0x12d595c>
    302c:	4b4b4b4b 	blmi	12d5d60 <_Min_Stack_Size+0x12d5960>
    3030:	4b4b4b4b 	blmi	12d5d64 <_Min_Stack_Size+0x12d5964>
    3034:	01000502 	tsteq	r0, r2, lsl #10
    3038:	02050001 	andeq	r0, r5, #1
    303c:	08005690 	stmdaeq	r0, {r4, r7, r9, sl, ip, lr}
    3040:	0105e203 	tsteq	r5, r3, lsl #4
    3044:	68793f5b 	ldmdavs	r9!, {r0, r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    3048:	01000902 	tsteq	r0, r2, lsl #18
    304c:	02050001 	andeq	r0, r5, #1
    3050:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
    3054:	0106aa03 	tsteq	r6, r3, lsl #20
    3058:	3d75674e 	ldclcc	7, cr6, [r5, #-312]!	; 0xfffffec8
    305c:	08023d3d 	stmdaeq	r2, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    3060:	00010100 	andeq	r0, r1, r0, lsl #2
    3064:	57100205 	ldrpl	r0, [r0, -r5, lsl #4]
    3068:	be030800 	cdplt	8, 0, cr0, cr3, cr0, {0}
    306c:	2f4c0106 	svccs	0x004c0106
    3070:	1a032f2f 	bne	ced34 <_Min_Stack_Size+0xce934>
    3074:	222d2f2e 	eorcs	r2, sp, #46, 30	; 0xb8
    3078:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    307c:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    3080:	222d222d 	eorcs	r2, sp, #-805306366	; 0xd0000002
    3084:	032e7803 	teqeq	lr, #196608	; 0x30000
    3088:	784c2e0a 	stmdavc	ip, {r1, r3, r9, sl, fp, sp}^
    308c:	2c222d2f 	stccs	13, cr2, [r2], #-188	; 0xffffff44
    3090:	4c693d32 	stclmi	13, cr3, [r9], #-200	; 0xffffff38
    3094:	5722574b 	strpl	r5, [r2, -fp, asr #14]!
    3098:	57225722 	strpl	r5, [r2, -r2, lsr #14]!
    309c:	03225722 	teqeq	r2, #8912896	; 0x880000
    30a0:	8636587a 			; <UNDEFINED> instruction: 0x8636587a
    30a4:	5722574b 	strpl	r5, [r2, -fp, asr #14]!
    30a8:	59335522 	ldmdbpl	r3!, {r1, r5, r8, sl, ip, lr}
    30ac:	773d3157 			; <UNDEFINED> instruction: 0x773d3157
    30b0:	01000802 	tsteq	r0, r2, lsl #16
    30b4:	02050001 	andeq	r0, r5, #1
    30b8:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
    30bc:	01079803 	tsteq	r7, r3, lsl #16
    30c0:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    30c4:	4b3d3d3d 	blmi	f525c0 <_Min_Stack_Size+0xf521c0>
    30c8:	4b3e3d3d 	blmi	f925c4 <_Min_Stack_Size+0xf921c4>
    30cc:	4b4b4b4b 	blmi	12d5e00 <_Min_Stack_Size+0x12d5a00>
    30d0:	05024c4b 	streq	r4, [r2, #-3147]	; 0xc4b
    30d4:	00010100 	andeq	r0, r1, r0, lsl #2
    30d8:	58f40205 	ldmpl	r4!, {r0, r2, r9}^
    30dc:	b6030800 	strlt	r0, [r3], -r0, lsl #16
    30e0:	364b0107 	strbcc	r0, [fp], -r7, lsl #2
    30e4:	49222d2f 	stmdbmi	r2!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}
    30e8:	3e333922 	cdpcc	9, 3, cr3, cr3, cr2, {1}
    30ec:	01000802 	tsteq	r0, r2, lsl #16
    30f0:	02050001 	andeq	r0, r5, #1
    30f4:	08005934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, lr}
    30f8:	0107d003 	tsteq	r7, r3
    30fc:	6a3e344b 	bvs	f90230 <_Min_Stack_Size+0xf8fe30>
    3100:	0802216a 	stmdaeq	r2, {r1, r3, r5, r6, r8, sp}
    3104:	00010100 	andeq	r0, r1, r0, lsl #2
    3108:	59700205 	ldmdbpl	r0!, {r0, r2, r9}^
    310c:	ea030800 	b	c5114 <_Min_Stack_Size+0xc4d14>
    3110:	764e0107 	strbvc	r0, [lr], -r7, lsl #2
    3114:	01000702 	tsteq	r0, r2, lsl #14
    3118:	02050001 	andeq	r0, r5, #1
    311c:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    3120:	0107f803 	tsteq	r7, r3, lsl #16
    3124:	0702754e 	streq	r7, [r2, -lr, asr #10]
    3128:	00010100 	andeq	r0, r1, r0, lsl #2
    312c:	59b80205 	ldmibpl	r8!, {r0, r2, r9}
    3130:	88030800 	stmdahi	r3, {fp}
    3134:	3e6b0108 	powcce	f0, f3, #0.0
    3138:	0702afb0 			; <UNDEFINED> instruction: 0x0702afb0
    313c:	00010100 	andeq	r0, r1, r0, lsl #2
    3140:	5a040205 	bpl	10395c <_Min_Stack_Size+0x10355c>
    3144:	bc030800 	stclt	8, cr0, [r3], {-0}
    3148:	3f790108 	svccc	0x00790108
    314c:	774c773e 	smlaldxvc	r7, ip, lr, r7
    3150:	3f7a7a4c 	svccc	0x007a7a4c
    3154:	4c854c85 	stcmi	12, cr4, [r5], {133}	; 0x85
    3158:	0d027788 	stceq	7, cr7, [r2, #-544]	; 0xfffffde0
    315c:	00010100 	andeq	r0, r1, r0, lsl #2
    3160:	5ad40205 	bpl	ff50397c <_estack+0xdf4d397c>
    3164:	89030800 	stmdbhi	r3, {fp}
    3168:	2f590109 	svccs	0x00590109
    316c:	4c4c3e34 	mcrrmi	14, 3, r3, ip, cr4
    3170:	404e4c4c 	submi	r4, lr, ip, asr #24
    3174:	21314068 	teqcs	r1, r8, rrx
    3178:	01000f02 	tsteq	r0, r2, lsl #30
    317c:	02050001 	andeq	r0, r5, #1
    3180:	08005b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, lr}
    3184:	0109c103 	tsteq	r9, r3, lsl #2
    3188:	4c843e5d 	stcmi	14, cr3, [r4], {93}	; 0x5d
    318c:	77874c84 	strvc	r4, [r7, r4, lsl #25]
    3190:	01000d02 	tsteq	r0, r2, lsl #26
    3194:	02050001 	andeq	r0, r5, #1
    3198:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
    319c:	0109ec03 	tsteq	r9, r3, lsl #24
    31a0:	2f2f2f59 	svccs	0x002f2f59
    31a4:	4c3e342f 	cfldrsmi	mvf3, [lr], #-188	; 0xffffff44
    31a8:	4f4c4c4c 	svcmi	0x004c4c4c
    31ac:	004d403d 	subeq	r4, sp, sp, lsr r0
    31b0:	06010402 	streq	r0, [r1], -r2, lsl #8
    31b4:	5c3e063c 	ldcpl	6, cr0, [lr], #-240	; 0xffffff10
    31b8:	0402005b 	streq	r0, [r2], #-91	; 0x5b
    31bc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    31c0:	2130403e 	teqcs	r0, lr, lsr r0
    31c4:	01000e02 	tsteq	r0, r2, lsl #28
    31c8:	02050001 	andeq	r0, r5, #1
    31cc:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
    31d0:	010ab403 	tsteq	sl, r3, lsl #8
    31d4:	4c923e5d 	ldcmi	14, cr3, [r2], {93}	; 0x5d
    31d8:	68954c92 	ldmvs	r5, {r1, r4, r7, sl, fp, lr}
    31dc:	01000d02 	tsteq	r0, r2, lsl #26
    31e0:	0001e801 	andeq	lr, r1, r1, lsl #16
    31e4:	45000200 	strmi	r0, [r0, #-512]	; 0x200
    31e8:	02000001 	andeq	r0, r0, #1
    31ec:	0d0efb01 	vstreq	d15, [lr, #-4]
    31f0:	01010100 	mrseq	r0, (UNDEF: 17)
    31f4:	00000001 	andeq	r0, r0, r1
    31f8:	01000001 	tsteq	r0, r1
    31fc:	2f62696c 	svccs	0x0062696c
    3200:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3204:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 30f8 <_Min_Stack_Size+0x2cf8>
    3208:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    320c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3210:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3100 <_Min_Stack_Size+0x2d00>
    3214:	61726269 	cmnvs	r2, r9, ror #4
    3218:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    321c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3220:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3224:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3228:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    322c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3230:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3234:	2f726576 	svccs	0x00726576
    3238:	00637273 	rsbeq	r7, r3, r3, ror r2
    323c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3240:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3244:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3248:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    324c:	2f62696c 	svccs	0x0062696c
    3250:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3254:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3258:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    325c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3260:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3264:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3268:	0062696c 	rsbeq	r6, r2, ip, ror #18
    326c:	2f62696c 	svccs	0x0062696c
    3270:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3274:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3168 <_Min_Stack_Size+0x2d68>
    3278:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    327c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3280:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3170 <_Min_Stack_Size+0x2d70>
    3284:	61726269 	cmnvs	r2, r9, ror #4
    3288:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    328c:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3290:	442f5349 	strtmi	r5, [pc], #-841	; 3298 <_Min_Stack_Size+0x2e98>
    3294:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3298:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    329c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    32a0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    32a4:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    32a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    32ac:	6c006564 	cfstr32vs	mvfx6, [r0], {100}	; 0x64
    32b0:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    32b4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    32b8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    32bc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    32c0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    32c4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    32c8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    32cc:	2f736569 	svccs	0x00736569
    32d0:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    32d4:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    32d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    32dc:	73000065 	movwvc	r0, #101	; 0x65
    32e0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    32e4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    32e8:	676e725f 			; <UNDEFINED> instruction: 0x676e725f
    32ec:	0100632e 	tsteq	r0, lr, lsr #6
    32f0:	645f0000 	ldrbvs	r0, [pc], #-0	; 32f8 <_Min_Stack_Size+0x2ef8>
    32f4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    32f8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3300 <_Min_Stack_Size+0x2f00>
    32fc:	73657079 	cmnvc	r5, #121	; 0x79
    3300:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3304:	74730000 	ldrbtvc	r0, [r3], #-0
    3308:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    330c:	0300682e 	movweq	r6, #2094	; 0x82e
    3310:	74730000 	ldrbtvc	r0, [r3], #-0
    3314:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3318:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    331c:	00040068 	andeq	r0, r4, r8, rrx
    3320:	726f6300 	rsbvc	r6, pc, #0, 6
    3324:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    3328:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    332c:	00000005 	andeq	r0, r0, r5
    3330:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    3334:	0308005c 	movweq	r0, #32860	; 0x805c
    3338:	300100e3 	andcc	r0, r1, r3, ror #1
    333c:	01024b4d 	tsteq	r2, sp, asr #22
    3340:	00010100 	andeq	r0, r1, r0, lsl #2
    3344:	5d100205 	lfmpl	f0, 4, [r0, #-20]	; 0xffffffec
    3348:	f2030800 	vadd.i8	d0, d3, d0
    334c:	3f5c0100 	svccc	0x005c0100
    3350:	07026879 	smlsdxeq	r2, r9, r8, r6
    3354:	00010100 	andeq	r0, r1, r0, lsl #2
    3358:	5d480205 	sfmpl	f0, 2, [r8, #-20]	; 0xffffffec
    335c:	b0030800 	andlt	r0, r3, r0, lsl #16
    3360:	2f300101 	svccs	0x00300101
    3364:	01000802 	tsteq	r0, r2, lsl #16
    3368:	02050001 	andeq	r0, r5, #1
    336c:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
    3370:	01028b03 	tsteq	r2, r3, lsl #22
    3374:	68793f5c 	ldmdavs	r9!, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    3378:	01000702 	tsteq	r0, r2, lsl #14
    337c:	02050001 	andeq	r0, r5, #1
    3380:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
    3384:	0102a503 	tsteq	r2, r3, lsl #10
    3388:	41693359 	cmnmi	r9, r9, asr r3
    338c:	09022131 	stmdbeq	r2, {r0, r4, r5, r8, sp}
    3390:	00010100 	andeq	r0, r1, r0, lsl #2
    3394:	5dd00205 	lfmpl	f0, 2, [r0, #20]
    3398:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    339c:	595c0102 	ldmdbpl	ip, {r1, r8}^
    33a0:	01000802 	tsteq	r0, r2, lsl #16
    33a4:	02050001 	andeq	r0, r5, #1
    33a8:	08005df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    33ac:	0102d603 	tsteq	r2, r3, lsl #12
    33b0:	41693359 	cmnmi	r9, r9, asr r3
    33b4:	09022131 	stmdbeq	r2, {r0, r4, r5, r8, sp}
    33b8:	00010100 	andeq	r0, r1, r0, lsl #2
    33bc:	5e2c0205 	cdppl	2, 2, cr0, cr12, cr5, {0}
    33c0:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    33c4:	595d0102 	ldmdbpl	sp, {r1, r8}^
    33c8:	01000802 	tsteq	r0, r2, lsl #16
    33cc:	0002db01 	andeq	sp, r2, r1, lsl #22
    33d0:	ce000200 	cdpgt	2, 0, cr0, cr0, cr0, {0}
    33d4:	02000001 	andeq	r0, r0, #1
    33d8:	0d0efb01 	vstreq	d15, [lr, #-4]
    33dc:	01010100 	mrseq	r0, (UNDEF: 17)
    33e0:	00000001 	andeq	r0, r0, r1
    33e4:	01000001 	tsteq	r0, r1
    33e8:	2f62696c 	svccs	0x0062696c
    33ec:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    33f0:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    33f4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    33f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    33fc:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    3400:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    3404:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3408:	2f007972 	svccs	0x00007972
    340c:	2f727375 	svccs	0x00727375
    3410:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3414:	2f656475 	svccs	0x00656475
    3418:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    341c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 3280 <_Min_Stack_Size+0x2e80>
    3420:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3424:	2f00656e 	svccs	0x0000656e
    3428:	2f727375 	svccs	0x00727375
    342c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3430:	2f656475 	svccs	0x00656475
    3434:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3438:	6c006269 	sfmvs	f6, 4, [r0], {105}	; 0x69
    343c:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    3440:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3444:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3448:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    344c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3450:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    3454:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3458:	2f736569 	svccs	0x00736569
    345c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3460:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    3464:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    3468:	2f54532f 	svccs	0x0054532f
    346c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3470:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3474:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    3478:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    347c:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
    3480:	4f432f62 	svcmi	0x00432f62
    3484:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3488:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    348c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3490:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3494:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3498:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    349c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    34a0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    34a4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    34a8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    34ac:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    34b0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 34b8 <_Min_Stack_Size+0x30b8>
    34b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    34b8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    34bc:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    34c0:	4f432f62 	svcmi	0x00432f62
    34c4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    34c8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    34cc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    34d0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    34d4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    34d8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    34dc:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    34e0:	5349534d 	movtpl	r5, #37709	; 0x934d
    34e4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    34e8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    34ec:	74730000 	ldrbtvc	r0, [r3], #-0
    34f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    34f4:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    34f8:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    34fc:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3500:	632e7972 	teqvs	lr, #1867776	; 0x1c8000
    3504:	00000100 	andeq	r0, r0, r0, lsl #2
    3508:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    350c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3510:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3514:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3518:	00000200 	andeq	r0, r0, r0, lsl #4
    351c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3520:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3524:	00000300 	andeq	r0, r0, r0, lsl #6
    3528:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    352c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3530:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3534:	73000004 	movwvc	r0, #4
    3538:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    353c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3540:	616d645f 	cmnvs	sp, pc, asr r4
    3544:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3548:	74730000 	ldrbtvc	r0, [r3], #-0
    354c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3550:	5f787834 	svcpl	0x00787834
    3554:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    3558:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    355c:	74730000 	ldrbtvc	r0, [r3], #-0
    3560:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3564:	5f787834 	svcpl	0x00787834
    3568:	6f697067 	svcvs	0x00697067
    356c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3570:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    3574:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    3578:	00000500 	andeq	r0, r0, r0, lsl #10
    357c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3580:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    3584:	645f6939 	ldrbvs	r6, [pc], #-2361	; 358c <_Min_Stack_Size+0x318c>
    3588:	6f637369 	svcvs	0x00637369
    358c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3590:	0100682e 	tsteq	r0, lr, lsr #16
    3594:	6f630000 	svcvs	0x00630000
    3598:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    359c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    35a0:	00000600 	andeq	r0, r0, r0, lsl #12
    35a4:	02050000 	andeq	r0, r5, #0
    35a8:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
    35ac:	0100fa03 	tsteq	r0, r3, lsl #20
    35b0:	2f59855c 	svccs	0x0059855c
    35b4:	9f2f2f2f 	svcls	0x002f2f2f
    35b8:	01000a02 	tsteq	r0, r2, lsl #20
    35bc:	02050001 	andeq	r0, r5, #1
    35c0:	08005eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, lr}
    35c4:	01019203 	tsteq	r1, r3, lsl #4
    35c8:	0a029159 	beq	a7b34 <_Min_Stack_Size+0xa7734>
    35cc:	00010100 	andeq	r0, r1, r0, lsl #2
    35d0:	5edc0205 	cdppl	2, 13, cr0, cr12, cr5, {0}
    35d4:	9f030800 	svcls	0x00030800
    35d8:	91590101 	cmpls	r9, r1, lsl #2
    35dc:	01000a02 	tsteq	r0, r2, lsl #20
    35e0:	02050001 	andeq	r0, r5, #1
    35e4:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
    35e8:	0101ac03 	tsteq	r1, r3, lsl #24
    35ec:	0a02e559 	beq	bcb58 <_Min_Stack_Size+0xbc758>
    35f0:	00010100 	andeq	r0, r1, r0, lsl #2
    35f4:	5f480205 	svcpl	0x00480205
    35f8:	bc030800 	stclt	8, cr0, [r3], {-0}
    35fc:	597a0101 	ldmdbpl	sl!, {r0, r8}^
    3600:	2f2f2f5b 	svccs	0x002f2f5b
    3604:	2f693fa0 	svccs	0x00693fa0
    3608:	5b2f2f2f 	blpl	bcf2cc <_Min_Stack_Size+0xbceecc>
    360c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3610:	0006025a 	andeq	r0, r6, sl, asr r2
    3614:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3618:	005fdc02 	subseq	sp, pc, r2, lsl #24
    361c:	01e80308 	mvneq	r0, r8, lsl #6
    3620:	029f5901 	addseq	r5, pc, #16384	; 0x4000
    3624:	01010007 	tsteq	r1, r7
    3628:	08020500 	stmdaeq	r2, {r8, sl}
    362c:	03080060 	movweq	r0, #32864	; 0x8060
    3630:	400101f2 	strdmi	r0, [r1], -r2
    3634:	3d5c3f4d 	ldclcc	15, cr3, [ip, #-308]	; 0xfffffecc
    3638:	3d5b2f2f 	ldclcc	15, cr2, [fp, #-188]	; 0xffffff44
    363c:	3d3d3d5b 	ldccc	13, cr3, [sp, #-364]!	; 0xfffffe94
    3640:	3d3d3f3d 	ldccc	15, cr3, [sp, #-244]!	; 0xffffff0c
    3644:	4b4b3f3d 	blmi	12d3340 <_Min_Stack_Size+0x12d2f40>
    3648:	10023d3d 	andne	r3, r2, sp, lsr sp
    364c:	00010100 	andeq	r0, r1, r0, lsl #2
    3650:	60c00205 	sbcvs	r0, r0, r5, lsl #4
    3654:	a3030800 	movwge	r0, #14336	; 0x3800
    3658:	5b400102 	blpl	1003a68 <_Min_Stack_Size+0x1003668>
    365c:	5c5a5b4c 	mrrcpl	11, 4, r5, sl, cr12
    3660:	2f2f2f3d 	svccs	0x002f2f3d
    3664:	5b3d5b2f 	blpl	f5a328 <_Min_Stack_Size+0xf59f28>
    3668:	3d3d5b5b 	fldmdbxcc	sp!, {d5-d49}	;@ Deprecated
    366c:	3d3f3d3d 	ldccc	13, cr3, [pc, #-244]!	; 3580 <_Min_Stack_Size+0x3180>
    3670:	5b403d3d 	blpl	1012b6c <_Min_Stack_Size+0x101276c>
    3674:	4b3d4c4d 	blmi	f567b0 <_Min_Stack_Size+0xf563b0>
    3678:	4b3d3d3d 	blmi	f52b74 <_Min_Stack_Size+0xf52774>
    367c:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
    3680:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
    3684:	4d4d3d3d 	stclmi	13, cr3, [sp, #-244]	; 0xffffff0c
    3688:	594d3d4c 	stmdbpl	sp, {r2, r3, r6, r8, sl, fp, ip, sp}^
    368c:	00160259 	andseq	r0, r6, r9, asr r2
    3690:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3694:	00625802 	rsbeq	r5, r2, r2, lsl #16
    3698:	03830308 	orreq	r0, r3, #8, 6	; 0x20000000
    369c:	3d3f6801 	ldccc	8, cr6, [pc, #-4]!	; 36a0 <_Min_Stack_Size+0x32a0>
    36a0:	3d5d3d3d 	ldclcc	13, cr3, [sp, #-244]	; 0xffffff0c
    36a4:	024c3d3d 	subeq	r3, ip, #3904	; 0xf40
    36a8:	0101000a 	tsteq	r1, sl
    36ac:	000002f3 	strdeq	r0, [r0], -r3
    36b0:	019c0002 	orrseq	r0, ip, r2
    36b4:	01020000 	mrseq	r0, (UNDEF: 2)
    36b8:	000d0efb 	strdeq	r0, [sp], -fp
    36bc:	01010101 	tsteq	r1, r1, lsl #2
    36c0:	01000000 	mrseq	r0, (UNDEF: 0)
    36c4:	6c010000 	stcvs	0, cr0, [r1], {-0}
    36c8:	552f6269 	strpl	r6, [pc, #-617]!	; 3467 <_Min_Stack_Size+0x3067>
    36cc:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    36d0:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    36d4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    36d8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    36dc:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    36e0:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    36e4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    36e8:	752f0079 	strvc	r0, [pc, #-121]!	; 3677 <_Min_Stack_Size+0x3277>
    36ec:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    36f0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    36f4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    36f8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    36fc:	616d2f62 	cmnvs	sp, r2, ror #30
    3700:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3704:	752f0065 	strvc	r0, [pc, #-101]!	; 36a7 <_Min_Stack_Size+0x32a7>
    3708:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    370c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3710:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3714:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3718:	696c0062 	stmdbvs	ip!, {r1, r5, r6}^
    371c:	4f432f62 	svcmi	0x00432f62
    3720:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3724:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3728:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    372c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3730:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3734:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3738:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    373c:	5349534d 	movtpl	r5, #37709	; 0x934d
    3740:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3744:	2f656369 	svccs	0x00656369
    3748:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    374c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3750:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3754:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3758:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    375c:	62696c00 	rsbvs	r6, r9, #0, 24
    3760:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3764:	5f584554 	svcpl	0x00584554
    3768:	5f46344d 	svcpl	0x0046344d
    376c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3770:	2f344632 	svccs	0x00344632
    3774:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3778:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    377c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3780:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3784:	5f787834 	svcpl	0x00787834
    3788:	50647453 	rsbpl	r7, r4, r3, asr r4
    378c:	70697265 	rsbvc	r7, r9, r5, ror #4
    3790:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3794:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3798:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    379c:	62696c00 	rsbvs	r6, r9, #0, 24
    37a0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    37a4:	5f584554 	svcpl	0x00584554
    37a8:	5f46344d 	svcpl	0x0046344d
    37ac:	334d5453 	movtcc	r5, #54355	; 0xd453
    37b0:	2f344632 	svccs	0x00344632
    37b4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    37b8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    37bc:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    37c0:	2f534953 	svccs	0x00534953
    37c4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    37c8:	00656475 	rsbeq	r6, r5, r5, ror r4
    37cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    37d0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    37d4:	5f693932 	svcpl	0x00693932
    37d8:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    37dc:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    37e0:	64735f79 	ldrbtvs	r5, [r3], #-3961	; 0xf79
    37e4:	2e6d6172 	mcrcs	1, 3, r6, cr13, cr2, {3}
    37e8:	00010063 	andeq	r0, r1, r3, rrx
    37ec:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    37f0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    37f4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    37f8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    37fc:	00020068 	andeq	r0, r2, r8, rrx
    3800:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3804:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3808:	00030068 	andeq	r0, r3, r8, rrx
    380c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3810:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3814:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3818:	00000400 	andeq	r0, r0, r0, lsl #8
    381c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3820:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3824:	6d665f78 	stclvs	15, cr5, [r6, #-480]!	; 0xfffffe20
    3828:	00682e63 	rsbeq	r2, r8, r3, ror #28
    382c:	73000005 	movwvc	r0, #5
    3830:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3834:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3838:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    383c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3840:	63000005 	movwvs	r0, #5
    3844:	5f65726f 	svcpl	0x0065726f
    3848:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    384c:	00060068 	andeq	r0, r6, r8, rrx
    3850:	05000000 	streq	r0, [r0, #-0]
    3854:	0062b402 	rsbeq	fp, r2, r2, lsl #8
    3858:	00c10308 	sbceq	r0, r1, r8, lsl #6
    385c:	50314101 	eorspl	r4, r1, r1, lsl #2
    3860:	30303030 	eorscc	r3, r0, r0, lsr r0
    3864:	30313030 	eorscc	r3, r1, r0, lsr r0
    3868:	2f2f2f30 	svccs	0x002f2f30
    386c:	2f3d2f3d 	svccs	0x003d2f3d
    3870:	305b313d 	subscc	r3, fp, sp, lsr r1
    3874:	01000302 	tsteq	r0, r2, lsl #6
    3878:	02050001 	andeq	r0, r5, #1
    387c:	08006328 	stmdaeq	r0, {r3, r5, r8, r9, sp, lr}
    3880:	0100fa03 	tsteq	r0, r3, lsl #20
    3884:	4a1c0340 	bmi	70458c <_Min_Stack_Size+0x70418c>
    3888:	312f2f2f 	teqcc	pc, pc, lsr #30
    388c:	5b305a59 	blpl	c1a1f8 <_Min_Stack_Size+0xc19df8>
    3890:	595b305a 	ldmdbpl	fp, {r1, r3, r4, r6, ip, sp}^
    3894:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    3898:	5b405a59 	blpl	101a204 <_Min_Stack_Size+0x1019e04>
    389c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38a0:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38a4:	415a5959 	cmpmi	sl, r9, asr r9
    38a8:	5959595b 	ldmdbpl	r9, {r0, r1, r3, r4, r6, r8, fp, ip, lr}^
    38ac:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    38b0:	5a595959 	bpl	1659e1c <_Min_Stack_Size+0x1659a1c>
    38b4:	59595b41 	ldmdbpl	r9, {r0, r6, r8, r9, fp, ip, lr}^
    38b8:	5b595959 	blpl	1659e24 <_Min_Stack_Size+0x1659a24>
    38bc:	0f02593f 	svceq	0x0002593f
    38c0:	00010100 	andeq	r0, r1, r0, lsl #2
    38c4:	653c0205 	ldrvs	r0, [ip, #-517]!	; 0x205
    38c8:	fa030800 	blx	c58d0 <_Min_Stack_Size+0xc54d0>
    38cc:	323e0101 	eorscc	r0, lr, #1073741824	; 0x40000000
    38d0:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    38d4:	01040200 	mrseq	r0, R12_usr
    38d8:	78062006 	stmdavc	r6, {r1, r2, sp}
    38dc:	2f2f404e 	svccs	0x002f404e
    38e0:	0200302f 	andeq	r3, r0, #47	; 0x2f
    38e4:	20060104 	andcs	r0, r6, r4, lsl #2
    38e8:	2f4e7806 	svccs	0x004e7806
    38ec:	00302f2f 	eorseq	r2, r0, pc, lsr #30
    38f0:	06010402 	streq	r0, [r1], -r2, lsl #8
    38f4:	4d780620 	ldclmi	6, cr0, [r8, #-128]!	; 0xffffff80
    38f8:	01040200 	mrseq	r0, R12_usr
    38fc:	78062006 	stmdavc	r6, {r1, r2, sp}
    3900:	2f2f434e 	svccs	0x002f434e
    3904:	0200302f 	andeq	r3, r0, #47	; 0x2f
    3908:	20060104 	andcs	r0, r6, r4, lsl #2
    390c:	4c517806 	mrrcmi	8, 0, r7, r1, cr6
    3910:	01040200 	mrseq	r0, R12_usr
    3914:	77062006 	strvc	r2, [r6, -r6]
    3918:	01000302 	tsteq	r0, r2, lsl #6
    391c:	02050001 	andeq	r0, r5, #1
    3920:	08006628 	stmdaeq	r0, {r3, r5, r9, sl, sp, lr}
    3924:	0102da03 	tsteq	r2, r3, lsl #20
    3928:	004d3167 	subeq	r3, sp, r7, ror #2
    392c:	06010402 	streq	r0, [r1], -r2, lsl #8
    3930:	00790620 	rsbseq	r0, r9, r0, lsr #12
    3934:	23020402 	movwcs	r0, #9218	; 0x2402
    3938:	02040200 	andeq	r0, r4, #0, 4
    393c:	04020093 	streq	r0, [r2], #-147	; 0x93
    3940:	3c7a0302 	ldclcc	3, cr0, [sl], #-8
    3944:	01040200 	mrseq	r0, R12_usr
    3948:	03063c06 	movweq	r3, #27654	; 0x6c06
    394c:	03023c09 	movweq	r3, #11273	; 0x2c09
    3950:	00010100 	andeq	r0, r1, r0, lsl #2
    3954:	667c0205 	ldrbtvs	r0, [ip], -r5, lsl #4
    3958:	fa030800 	blx	c5960 <_Min_Stack_Size+0xc5560>
    395c:	32670102 	rsbcc	r0, r7, #-2147483648	; 0x80000000
    3960:	01040200 	mrseq	r0, R12_usr
    3964:	79062006 	stmdbvc	r6, {r1, r2, sp}
    3968:	02040200 	andeq	r0, r4, #0, 4
    396c:	04020022 	streq	r0, [r2], #-34	; 0x22
    3970:	02008502 	andeq	r8, r0, #8388608	; 0x800000
    3974:	00370204 	eorseq	r0, r7, r4, lsl #4
    3978:	06010402 	streq	r0, [r1], -r2, lsl #8
    397c:	0243063c 	subeq	r0, r3, #60, 12	; 0x3c00000
    3980:	01010003 	tsteq	r1, r3
    3984:	c8020500 	stmdagt	r2, {r8, sl}
    3988:	03080066 	movweq	r0, #32870	; 0x8066
    398c:	4b010394 	blmi	447e4 <_Min_Stack_Size+0x443e4>
    3990:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    3994:	00660602 	rsbeq	r0, r6, r2, lsl #12
    3998:	3c010402 	cfstrscc	mvf0, [r1], {2}
    399c:	08023f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, ip, sp}
    39a0:	3d010100 	stfccs	f0, [r1, #-0]
    39a4:	02000003 	andeq	r0, r0, #3
    39a8:	0001be00 	andeq	fp, r1, r0, lsl #28
    39ac:	fb010200 	blx	441b6 <_Min_Stack_Size+0x43db6>
    39b0:	01000d0e 	tsteq	r0, lr, lsl #26
    39b4:	00010101 	andeq	r0, r1, r1, lsl #2
    39b8:	00010000 	andeq	r0, r1, r0
    39bc:	696c0100 	stmdbvs	ip!, {r8}^
    39c0:	74552f62 	ldrbvc	r2, [r5], #-3938	; 0xf62
    39c4:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xc69
    39c8:	2f736569 	svccs	0x00736569
    39cc:	334d5453 	movtcc	r5, #54355	; 0xd453
    39d0:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    39d4:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    39d8:	6f637369 	svcvs	0x00637369
    39dc:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    39e0:	73752f00 	cmnvc	r5, #0, 30
    39e4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    39e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    39ec:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    39f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    39f4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    39f8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    39fc:	73752f00 	cmnvc	r5, #0, 30
    3a00:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3a04:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3a08:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    3a0c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3a10:	62696c00 	rsbvs	r6, r9, #0, 24
    3a14:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3a18:	5f584554 	svcpl	0x00584554
    3a1c:	5f46344d 	svcpl	0x0046344d
    3a20:	334d5453 	movtcc	r5, #54355	; 0xd453
    3a24:	2f344632 	svccs	0x00344632
    3a28:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3a2c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3a30:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3a34:	2f534953 	svccs	0x00534953
    3a38:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3a3c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    3a40:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    3a44:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3a48:	2f787834 	svccs	0x00787834
    3a4c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3a50:	00656475 	rsbeq	r6, r5, r5, ror r4
    3a54:	2f62696c 	svccs	0x0062696c
    3a58:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3a5c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3950 <_Min_Stack_Size+0x3550>
    3a60:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3a64:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3a68:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3958 <_Min_Stack_Size+0x3558>
    3a6c:	61726269 	cmnvs	r2, r9, ror #4
    3a70:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3a74:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3a78:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3a7c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3a80:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3a84:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3a88:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3a8c:	2f726576 	svccs	0x00726576
    3a90:	00636e69 	rsbeq	r6, r3, r9, ror #28
    3a94:	2f62696c 	svccs	0x0062696c
    3a98:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3a9c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3990 <_Min_Stack_Size+0x3590>
    3aa0:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3aa4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3aa8:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 3998 <_Min_Stack_Size+0x3598>
    3aac:	61726269 	cmnvs	r2, r9, ror #4
    3ab0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3ab4:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3ab8:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    3abc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3ac0:	00006564 	andeq	r6, r0, r4, ror #10
    3ac4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ac8:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    3acc:	645f6939 	ldrbvs	r6, [pc], #-2361	; 3ad4 <_Min_Stack_Size+0x36d4>
    3ad0:	6f637369 	svcvs	0x00637369
    3ad4:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3ad8:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
    3adc:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
    3ae0:	00010063 	andeq	r0, r1, r3, rrx
    3ae4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    3ae8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3aec:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3af0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3af4:	00020068 	andeq	r0, r2, r8, rrx
    3af8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3afc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3b00:	00030068 	andeq	r0, r3, r8, rrx
    3b04:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3b08:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3b0c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3b10:	00000400 	andeq	r0, r0, r0, lsl #8
    3b14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3b18:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3b1c:	70675f78 	rsbvc	r5, r7, r8, ror pc
    3b20:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3b24:	00000500 	andeq	r0, r0, r0, lsl #10
    3b28:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3b2c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3b30:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    3b34:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3b38:	73000005 	movwvc	r0, #5
    3b3c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3b40:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    3b44:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3b48:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3b4c:	5f797265 	svcpl	0x00797265
    3b50:	6467336c 	strbtvs	r3, [r7], #-876	; 0x36c
    3b54:	682e3032 	stmdavs	lr!, {r1, r4, r5, ip, sp}
    3b58:	00000100 	andeq	r0, r0, r0, lsl #2
    3b5c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3b60:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3b64:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3b68:	00000000 	andeq	r0, r0, r0
    3b6c:	66fc0205 	ldrbtvs	r0, [ip], r5, lsl #4
    3b70:	e2030800 	and	r0, r3, #0, 16
    3b74:	4d4b0100 	stfmie	f0, [fp, #-0]
    3b78:	2f2d6731 	svccs	0x002d6731
    3b7c:	2d67692d 	stclcs	9, cr6, [r7, #-180]!	; 0xffffff4c
    3b80:	0275776a 	rsbseq	r7, r5, #27787264	; 0x1a80000
    3b84:	01010003 	tsteq	r1, r3
    3b88:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    3b8c:	03080067 	movweq	r0, #32871	; 0x8067
    3b90:	400100fc 	strdmi	r0, [r1], -ip
    3b94:	02675b69 	rsbeq	r5, r7, #107520	; 0x1a400
    3b98:	01010003 	tsteq	r1, r3
    3b9c:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    3ba0:	03080067 	movweq	r0, #32871	; 0x8067
    3ba4:	4b010190 	blmi	441ec <_Min_Stack_Size+0x43dec>
    3ba8:	5a76774d 	bpl	1da18e4 <_Min_Stack_Size+0x1da14e4>
    3bac:	692d2f5b 	pushvs	{r0, r1, r3, r4, r6, r8, r9, sl, fp, sp}
    3bb0:	02757769 	rsbseq	r7, r5, #27525120	; 0x1a40000
    3bb4:	01010003 	tsteq	r1, r3
    3bb8:	28020500 	stmdacs	r2, {r8, sl}
    3bbc:	03080068 	movweq	r0, #32872	; 0x8068
    3bc0:	5c0101b3 	stfpls	f0, [r1], {179}	; 0xb3
    3bc4:	755b5976 	ldrbvc	r5, [fp, #-2422]	; 0x976
    3bc8:	01000302 	tsteq	r0, r2, lsl #6
    3bcc:	02050001 	andeq	r0, r5, #1
    3bd0:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
    3bd4:	0101c903 	tsteq	r1, r3, lsl #18
    3bd8:	5b59765c 	blpl	1661550 <_Min_Stack_Size+0x1661150>
    3bdc:	00030275 	andeq	r0, r3, r5, ror r2
    3be0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3be4:	0068a802 	rsbeq	sl, r8, r2, lsl #16
    3be8:	01dd0308 	bicseq	r0, sp, r8, lsl #6
    3bec:	5b764e01 	blpl	1d973f8 <_Min_Stack_Size+0x1d96ff8>
    3bf0:	756a2d2f 	strbvc	r2, [sl, #-3375]!	; 0xd2f
    3bf4:	01000302 	tsteq	r0, r2, lsl #6
    3bf8:	02050001 	andeq	r0, r5, #1
    3bfc:	080068f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, sp, lr}
    3c00:	0101f603 	tsteq	r1, r3, lsl #12
    3c04:	5b5a765c 	blpl	16a157c <_Min_Stack_Size+0x16a117c>
    3c08:	00030275 	andeq	r0, r3, r5, ror r2
    3c0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c10:	00693002 	rsbeq	r3, r9, r2
    3c14:	028a0308 	addeq	r0, sl, #8, 6	; 0x20000000
    3c18:	21684001 	cmncs	r8, r1
    3c1c:	01000402 	tsteq	r0, r2, lsl #8
    3c20:	02050001 	andeq	r0, r5, #1
    3c24:	0800694c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp, lr}
    3c28:	01029b03 	tsteq	r2, r3, lsl #22
    3c2c:	4d4d3e87 	stclmi	14, cr3, [sp, #-540]	; 0xfffffde4
    3c30:	3d59224d 	lfmcc	f2, 2, [r9, #-308]	; 0xfffffecc
    3c34:	01040200 	mrseq	r0, R12_usr
    3c38:	024b4438 	subeq	r4, fp, #56, 8	; 0x38000000
    3c3c:	01010006 	tsteq	r1, r6
    3c40:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    3c44:	03080069 	movweq	r0, #32873	; 0x8069
    3c48:	830102be 	movwhi	r0, #4798	; 0x12be
    3c4c:	4d4d5c3e 	stclmi	12, cr5, [sp, #-248]	; 0xffffff08
    3c50:	3d75234d 	ldclcc	3, cr2, [r5, #-308]!	; 0xfffffecc
    3c54:	01040200 	mrseq	r0, R12_usr
    3c58:	3c090337 	stccc	3, cr0, [r9], {55}	; 0x37
    3c5c:	0005024b 	andeq	r0, r5, fp, asr #4
    3c60:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c64:	006a1802 	rsbeq	r1, sl, r2, lsl #16
    3c68:	02e00308 	rsceq	r0, r0, #8, 6	; 0x20000000
    3c6c:	4d5b4101 	ldfmie	f4, [fp, #-4]
    3c70:	594c4d4d 	stmdbpl	ip, {r0, r2, r3, r6, r8, sl, fp, lr}^
    3c74:	2f2f5a59 	svccs	0x002f5a59
    3c78:	692f312f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3c7c:	693d693d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, fp, sp, lr}
    3c80:	2f3d2f3d 	svccs	0x003d2f3d
    3c84:	2f432f2f 	svccs	0x00432f2f
    3c88:	4d5b2f2f 	ldclmi	15, cr2, [fp, #-188]	; 0xffffff44
    3c8c:	2f2f2f2f 	svccs	0x002f2f2f
    3c90:	2f4d692f 	svccs	0x004d692f
    3c94:	2f682f2f 	svccs	0x00682f2f
    3c98:	000b0267 	andeq	r0, fp, r7, ror #4
    3c9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ca0:	006b5002 	rsbeq	r5, fp, r2
    3ca4:	03ba0308 			; <UNDEFINED> instruction: 0x03ba0308
    3ca8:	224b5a01 	subcs	r5, fp, #4096	; 0x1000
    3cac:	01040200 	mrseq	r0, R12_usr
    3cb0:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    3cb4:	56060104 	strpl	r0, [r6], -r4, lsl #2
    3cb8:	224b687a 	subcs	r6, fp, #7995392	; 0x7a0000
    3cbc:	01040200 	mrseq	r0, R12_usr
    3cc0:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    3cc4:	56060104 	strpl	r0, [r6], -r4, lsl #2
    3cc8:	0802597a 	stmdaeq	r2, {r1, r3, r4, r5, r6, r8, fp, ip, lr}
    3ccc:	00010100 	andeq	r0, r1, r0, lsl #2
    3cd0:	6be00205 	blvs	ff8044ec <_estack+0xdf7d44ec>
    3cd4:	d6030800 	strle	r0, [r3], -r0, lsl #16
    3cd8:	02000103 	andeq	r0, r0, #-1073741824	; 0xc0000000
    3cdc:	02320104 	eorseq	r0, r2, #4, 2
    3ce0:	01010001 	tsteq	r1, r1
    3ce4:	000009cd 	andeq	r0, r0, sp, asr #19
    3ce8:	02240002 	eoreq	r0, r4, #2
    3cec:	01020000 	mrseq	r0, (UNDEF: 2)
    3cf0:	000d0efb 	strdeq	r0, [sp], -fp
    3cf4:	01010101 	tsteq	r1, r1, lsl #2
    3cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    3cfc:	6c010000 	stcvs	0, cr0, [r1], {-0}
    3d00:	552f6269 	strpl	r6, [pc, #-617]!	; 3a9f <_Min_Stack_Size+0x369f>
    3d04:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    3d08:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    3d0c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3d10:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3d14:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    3d18:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    3d1c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3d20:	752f0079 	strvc	r0, [pc, #-121]!	; 3caf <_Min_Stack_Size+0x38af>
    3d24:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3d28:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3d2c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3d30:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3d34:	616d2f62 	cmnvs	sp, r2, ror #30
    3d38:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3d3c:	752f0065 	strvc	r0, [pc, #-101]!	; 3cdf <_Min_Stack_Size+0x38df>
    3d40:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3d44:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3d48:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3d4c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3d50:	696c0062 	stmdbvs	ip!, {r1, r5, r6}^
    3d54:	4f432f62 	svcmi	0x00432f62
    3d58:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3d5c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3d60:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3d64:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3d68:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3d6c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3d70:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3d74:	5349534d 	movtpl	r5, #37709	; 0x934d
    3d78:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3d7c:	2f656369 	svccs	0x00656369
    3d80:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    3d84:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3d88:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3d8c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3d90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3d94:	62696c00 	rsbvs	r6, r9, #0, 24
    3d98:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3d9c:	5f584554 	svcpl	0x00584554
    3da0:	5f46344d 	svcpl	0x0046344d
    3da4:	334d5453 	movtcc	r5, #54355	; 0xd453
    3da8:	2f344632 	svccs	0x00344632
    3dac:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3db0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3db4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    3db8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3dbc:	5f787834 	svcpl	0x00787834
    3dc0:	50647453 	rsbpl	r7, r4, r3, asr r4
    3dc4:	70697265 	rsbvc	r7, r9, r5, ror #4
    3dc8:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3dcc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3dd0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3dd4:	62696c00 	rsbvs	r6, r9, #0, 24
    3dd8:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    3ddc:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    3de0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3de4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3de8:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    3dec:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    3df0:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    3df4:	2f797265 	svccs	0x00797265
    3df8:	432f2e2e 	teqmi	pc, #736	; 0x2e0
    3dfc:	6f6d6d6f 	svcvs	0x006d6d6f
    3e00:	696c006e 	stmdbvs	ip!, {r1, r2, r3, r5, r6}^
    3e04:	4f432f62 	svcmi	0x00432f62
    3e08:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3e0c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3e10:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3e14:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3e18:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3e1c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3e20:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    3e24:	5349534d 	movtpl	r5, #37709	; 0x934d
    3e28:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3e2c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3e30:	74730000 	ldrbtvc	r0, [r3], #-0
    3e34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3e38:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    3e3c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    3e40:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3e44:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    3e48:	632e6463 	teqvs	lr, #1660944384	; 0x63000000
    3e4c:	00000100 	andeq	r0, r0, r0, lsl #2
    3e50:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3e54:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3e58:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3e5c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3e60:	00000200 	andeq	r0, r0, r0, lsl #4
    3e64:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3e68:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3e6c:	00000300 	andeq	r0, r0, r0, lsl #6
    3e70:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3e74:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3e78:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3e7c:	73000004 	movwvc	r0, #4
    3e80:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3e84:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3e88:	64746c5f 	ldrbtvs	r6, [r4], #-3167	; 0xc5f
    3e8c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3e90:	73000005 	movwvc	r0, #5
    3e94:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3e98:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3e9c:	616d645f 	cmnvs	sp, pc, asr r4
    3ea0:	682e6432 	stmdavs	lr!, {r1, r4, r5, sl, sp, lr}
    3ea4:	00000500 	andeq	r0, r0, r0, lsl #10
    3ea8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3eac:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3eb0:	70675f78 	rsbvc	r5, r7, r8, ror pc
    3eb4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3eb8:	00000500 	andeq	r0, r0, r0, lsl #10
    3ebc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ec0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3ec4:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    3ec8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3ecc:	66000005 	strvs	r0, [r0], -r5
    3ed0:	73746e6f 	cmnvc	r4, #1776	; 0x6f0
    3ed4:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3ed8:	74730000 	ldrbtvc	r0, [r3], #-0
    3edc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3ee0:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    3ee4:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    3ee8:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    3eec:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    3ef0:	682e6463 	stmdavs	lr!, {r0, r1, r5, r6, sl, sp, lr}
    3ef4:	00000100 	andeq	r0, r0, r0, lsl #2
    3ef8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3efc:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3f00:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    3f04:	6f660000 	svcvs	0x00660000
    3f08:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    3f0c:	00060063 	andeq	r0, r6, r3, rrx
    3f10:	05000000 	streq	r0, [r0, #-0]
    3f14:	006be802 	rsbeq	lr, fp, r2, lsl #16
    3f18:	00f20308 	rscseq	r0, r2, r8, lsl #6
    3f1c:	4d314001 	ldcmi	0, cr4, [r1, #-4]!
    3f20:	2f2f5b3f 	svccs	0x002f5b3f
    3f24:	5a2f5b2f 	bpl	bdabe8 <_Min_Stack_Size+0xbda7e8>
    3f28:	5b3d5a3d 	blpl	f5a824 <_Min_Stack_Size+0xf5a424>
    3f2c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    3f30:	2f2f3e5a 	svccs	0x002f3e5a
    3f34:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3f38:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    3f3c:	2f2f3e5a 	svccs	0x002f3e5a
    3f40:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3f44:	2f3d5a59 	svccs	0x003d5a59
    3f48:	5b2f2f2f 	blpl	bcfc0c <_Min_Stack_Size+0xbcf80c>
    3f4c:	2f2f5a59 	svccs	0x002f5a59
    3f50:	5b2f2f2f 	blpl	bcfc14 <_Min_Stack_Size+0xbcf814>
    3f54:	2f2f3d5a 	svccs	0x002f3d5a
    3f58:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3f5c:	5a595959 	bpl	165a4c8 <_Min_Stack_Size+0x165a0c8>
    3f60:	2f2f2f3e 	svccs	0x002f2f3e
    3f64:	1202592f 	andne	r5, r2, #770048	; 0xbc000
    3f68:	00010100 	andeq	r0, r1, r0, lsl #2
    3f6c:	6e0c0205 	cdpvs	2, 0, cr0, cr12, cr5, {0}
    3f70:	e7030800 	str	r0, [r3, -r0, lsl #16]
    3f74:	2f400101 	svccs	0x00400101
    3f78:	31313f3d 	teqcc	r1, sp, lsr pc
    3f7c:	33315b5b 	teqcc	r1, #93184	; 0x16c00
    3f80:	31303030 	teqcc	r0, r0, lsr r0
    3f84:	59362f2f 	ldmdbpl	r6!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    3f88:	02003e4d 	andeq	r3, r0, #1232	; 0x4d0
    3f8c:	20060104 	andcs	r0, r6, r4, lsl #2
    3f90:	30306c06 	eorscc	r6, r0, r6, lsl #24
    3f94:	3e3e3030 	mrccc	0, 1, r3, cr14, cr0, {1}
    3f98:	024b3e3e 	subeq	r3, fp, #992	; 0x3e0
    3f9c:	01010003 	tsteq	r1, r3
    3fa0:	c0020500 	andgt	r0, r2, r0, lsl #10
    3fa4:	0308006e 	movweq	r0, #32878	; 0x806e
    3fa8:	030102bc 	movweq	r0, #4796	; 0x12bc
    3fac:	3d2f3c09 	stccc	12, cr3, [pc, #-36]!	; 3f90 <_Min_Stack_Size+0x3b90>
    3fb0:	30303f2f 	eorscc	r3, r0, pc, lsr #30
    3fb4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    3fb8:	3f40353d 	svccc	0x0040353d
    3fbc:	315c3f3f 	cmpcc	ip, pc, lsr pc
    3fc0:	3f5b313d 	svccc	0x005b313d
    3fc4:	3f3f4d4b 	svccc	0x003f4d4b
    3fc8:	000b023d 	andeq	r0, fp, sp, lsr r2
    3fcc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3fd0:	006f7402 	rsbeq	r7, pc, r2, lsl #8
    3fd4:	038d0308 	orreq	r0, sp, #8, 6	; 0x20000000
    3fd8:	5c3e5901 	ldcpl	9, cr5, [lr], #-4
    3fdc:	0005024c 	andeq	r0, r5, ip, asr #4
    3fe0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3fe4:	006fa002 	rsbeq	sl, pc, r2
    3fe8:	039e0308 	orrseq	r0, lr, #8, 6	; 0x20000000
    3fec:	4b3e4b01 	blmi	f96bf8 <_Min_Stack_Size+0xf967f8>
    3ff0:	023e3d4e 	eorseq	r3, lr, #4992	; 0x1380
    3ff4:	0101000b 	tsteq	r1, fp
    3ff8:	e0020500 	and	r0, r2, r0, lsl #10
    3ffc:	0308006f 	movweq	r0, #32879	; 0x806f
    4000:	750103b2 	strvc	r0, [r1, #-946]	; 0x3b2
    4004:	09023d3d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    4008:	00010100 	andeq	r0, r1, r0, lsl #2
    400c:	700c0205 	andvc	r0, ip, r5, lsl #4
    4010:	c0030800 	andgt	r0, r3, r0, lsl #16
    4014:	4b590103 	blmi	1644428 <_Min_Stack_Size+0x1644028>
    4018:	0009024b 	andeq	r0, r9, fp, asr #4
    401c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4020:	00703802 	rsbseq	r3, r0, r2, lsl #16
    4024:	03cb0308 	biceq	r0, fp, #8, 6	; 0x20000000
    4028:	023d5901 	eorseq	r5, sp, #16384	; 0x4000
    402c:	01010008 	tsteq	r1, r8
    4030:	58020500 	stmdapl	r2, {r8, sl}
    4034:	03080070 	movweq	r0, #32880	; 0x8070
    4038:	590103d5 	stmdbpl	r1, {r0, r2, r4, r6, r7, r8, r9}
    403c:	0008023d 	andeq	r0, r8, sp, lsr r2
    4040:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4044:	00707802 	rsbseq	r7, r0, r2, lsl #16
    4048:	03df0308 	bicseq	r0, pc, #8, 6	; 0x20000000
    404c:	023d4b01 	eorseq	r4, sp, #1024	; 0x400
    4050:	01010007 	tsteq	r1, r7
    4054:	94020500 	strls	r0, [r2], #-1280	; 0x500
    4058:	03080070 	movweq	r0, #32880	; 0x8070
    405c:	590103ea 	stmdbpl	r1, {r1, r3, r5, r6, r7, r8, r9}
    4060:	3d5a6a4c 	vldrcc	s13, [sl, #-304]	; 0xfffffed0
    4064:	01000902 	tsteq	r0, r2, lsl #18
    4068:	02050001 	andeq	r0, r5, #1
    406c:	080070d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, sp, lr}
    4070:	0103fc03 	tsteq	r3, r3, lsl #24
    4074:	08022f2f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    4078:	00010100 	andeq	r0, r1, r0, lsl #2
    407c:	70ec0205 	rscvc	r0, ip, r5, lsl #4
    4080:	8a030800 	bhi	c6088 <_Min_Stack_Size+0xc5c88>
    4084:	30590104 	subscc	r0, r9, r4, lsl #2
    4088:	02007623 	andeq	r7, r0, #36700160	; 0x2300000
    408c:	00610104 	rsbeq	r0, r1, r4, lsl #2
    4090:	06020402 	streq	r0, [r2], -r2, lsl #8
    4094:	02b3063c 	adcseq	r0, r3, #60, 12	; 0x3c00000
    4098:	01010005 	tsteq	r1, r5
    409c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    40a0:	03080071 	movweq	r0, #32881	; 0x8071
    40a4:	5901049c 	stmdbpl	r1, {r2, r3, r4, r7, sl}
    40a8:	04020031 	streq	r0, [r2], #-49	; 0x31
    40ac:	02003e02 	andeq	r3, r0, #2, 28
    40b0:	00720204 	rsbseq	r0, r2, r4, lsl #4
    40b4:	06010402 	streq	r0, [r1], -r2, lsl #8
    40b8:	024e063c 	subeq	r0, lr, #60, 12	; 0x3c00000
    40bc:	01010008 	tsteq	r1, r8
    40c0:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    40c4:	03080071 	movweq	r0, #32881	; 0x8071
    40c8:	750104ad 	strvc	r0, [r1, #-1197]	; 0x4ad
    40cc:	000902bb 			; <UNDEFINED> instruction: 0x000902bb
    40d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    40d4:	0071b402 	rsbseq	fp, r1, r2, lsl #8
    40d8:	04b70308 	ldrteq	r0, [r7], #776	; 0x308
    40dc:	593d4e01 	ldmdbpl	sp!, {r0, r9, sl, fp, lr}
    40e0:	4f754d5a 	svcmi	0x00754d5a
    40e4:	0a023e75 	beq	93ac0 <_Min_Stack_Size+0x936c0>
    40e8:	00010100 	andeq	r0, r1, r0, lsl #2
    40ec:	721c0205 	andsvc	r0, ip, #1342177280	; 0x50000000
    40f0:	d3030800 	movwle	r0, #14336	; 0x3800
    40f4:	4d3f0104 	ldfmis	f0, [pc, #-16]!	; 40ec <_Min_Stack_Size+0x3cec>
    40f8:	3e674f67 	cdpcc	15, 6, cr4, cr7, cr7, {3}
    40fc:	01000a02 	tsteq	r0, r2, lsl #20
    4100:	02050001 	andeq	r0, r5, #1
    4104:	08007264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp, lr}
    4108:	0104ec03 	tsteq	r4, r3, lsl #24
    410c:	67306783 	ldrvs	r6, [r0, -r3, lsl #15]!
    4110:	003f3f4c 	eorseq	r3, pc, ip, asr #30
    4114:	06010402 	streq	r0, [r1], -r2, lsl #8
    4118:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
    411c:	59060204 	stmdbpl	r6, {r2, r9}
    4120:	02040200 	andeq	r0, r4, #0, 4
    4124:	b15b2fab 	cmplt	fp, fp, lsr #31
    4128:	3c7203a0 	ldclcc	3, cr0, [r2], #-640	; 0xfffffd80
    412c:	01040200 	mrseq	r0, R12_usr
    4130:	03063c06 	movweq	r3, #27654	; 0x6c06
    4134:	6d037410 	cfstrsvs	mvf7, [r3, #-64]	; 0xffffffc0
    4138:	04020074 	streq	r0, [r2], #-116	; 0x74
    413c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4140:	02741503 	rsbseq	r1, r4, #12582912	; 0xc00000
    4144:	0101000f 	tsteq	r1, pc
    4148:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    414c:	03080073 	movweq	r0, #32883	; 0x8073
    4150:	91010594 			; <UNDEFINED> instruction: 0x91010594
    4154:	0221083e 	eoreq	r0, r1, #4063232	; 0x3e0000
    4158:	01010006 	tsteq	r1, r6
    415c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    4160:	03080073 	movweq	r0, #32883	; 0x8073
    4164:	670105a3 	strvs	r0, [r1, -r3, lsr #11]
    4168:	68922330 	ldmvs	r2, {r4, r5, r8, r9, sp}
    416c:	01040200 	mrseq	r0, R12_usr
    4170:	003c7903 	eorseq	r7, ip, r3, lsl #18
    4174:	06020402 	streq	r0, [r2], -r2, lsl #8
    4178:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
    417c:	05028208 	streq	r8, [r2, #-520]	; 0x208
    4180:	00010100 	andeq	r0, r1, r0, lsl #2
    4184:	74440205 	strbvc	r0, [r4], #-517	; 0x205
    4188:	ba030800 	blt	c6190 <_Min_Stack_Size+0xc5d90>
    418c:	4d760105 	ldfmie	f0, [r6, #-20]!	; 0xffffffec
    4190:	4f753f75 	svcmi	0x00753f75
    4194:	3e753f75 	mrccc	15, 3, r3, cr5, cr5, {3}
    4198:	01000a02 	tsteq	r0, r2, lsl #20
    419c:	02050001 	andeq	r0, r5, #1
    41a0:	080074c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, lr}
    41a4:	0105d803 	tsteq	r5, r3, lsl #16
    41a8:	0102752f 	tsteq	r2, pc, lsr #10
    41ac:	00010100 	andeq	r0, r1, r0, lsl #2
    41b0:	74d40205 	ldrbvc	r0, [r4], #517	; 0x205
    41b4:	e6030800 	str	r0, [r3], -r0, lsl #16
    41b8:	2f770105 	svccs	0x00770105
    41bc:	594bd868 	stmdbpl	fp, {r3, r5, r6, fp, ip, lr, pc}^
    41c0:	2f3d2f77 	svccs	0x003d2f77
    41c4:	2f2f2f2f 	svccs	0x002f2f2f
    41c8:	2f2f3e30 	svccs	0x002f3e30
    41cc:	312f2f40 	teqcc	pc, r0, asr #30
    41d0:	0200305a 	andeq	r3, r0, #90	; 0x5a
    41d4:	20060104 	andcs	r0, r6, r4, lsl #2
    41d8:	08026a06 	stmdaeq	r2, {r1, r2, r9, fp, sp, lr}
    41dc:	00010100 	andeq	r0, r1, r0, lsl #2
    41e0:	759c0205 	ldrvc	r0, [ip, #517]	; 0x205
    41e4:	9c030800 	stcls	8, cr0, [r3], {-0}
    41e8:	91760106 	cmnls	r6, r6, lsl #2
    41ec:	02bb91bd 	adcseq	r9, fp, #1073741871	; 0x4000002f
    41f0:	01010003 	tsteq	r1, r3
    41f4:	04020500 	streq	r0, [r2], #-1280	; 0x500
    41f8:	03080076 	movweq	r0, #32886	; 0x8076
    41fc:	910106ae 	smlatbls	r1, lr, r6, r0
    4200:	082f08bc 	stmdaeq	pc!, {r2, r3, r4, r5, r7, fp}	; <UNPREDICTABLE>
    4204:	082f082f 	stmdaeq	pc!, {r0, r1, r2, r3, r5, fp}	; <UNPREDICTABLE>
    4208:	914b2f30 	cmpls	fp, r0, lsr pc
    420c:	01040200 	mrseq	r0, R12_usr
    4210:	68065806 	stmdavs	r6, {r1, r2, fp, ip, lr}
    4214:	01040200 	mrseq	r0, R12_usr
    4218:	92064a06 	andls	r4, r6, #24576	; 0x6000
    421c:	0009023d 	andeq	r0, r9, sp, lsr r2
    4220:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4224:	00772c02 	rsbseq	r2, r7, r2, lsl #24
    4228:	06c90308 	strbeq	r0, [r9], r8, lsl #6
    422c:	92bb7501 	adcsls	r7, fp, #4194304	; 0x400000
    4230:	835c7675 	cmphi	ip, #122683392	; 0x7500000
    4234:	02133002 	andseq	r3, r3, #2
    4238:	4c2f1430 	cfstrsmi	mvf1, [pc], #-192	; 4180 <_Min_Stack_Size+0x3d80>
    423c:	04020091 	streq	r0, [r2], #-145	; 0x91
    4240:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    4244:	04020068 	streq	r0, [r2], #-104	; 0x68
    4248:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    424c:	313d5c93 			; <UNDEFINED> instruction: 0x313d5c93
    4250:	13300283 	teqne	r0, #805306376	; 0x30000008
    4254:	2f143002 	svccs	0x00143002
    4258:	0200914c 	andeq	r9, r0, #76, 2
    425c:	58060104 	stmdapl	r6, {r2, r8}
    4260:	02006806 	andeq	r6, r0, #393216	; 0x60000
    4264:	4a060104 	bmi	18467c <_Min_Stack_Size+0x18427c>
    4268:	024c9206 	subeq	r9, ip, #1610612736	; 0x60000000
    426c:	01010003 	tsteq	r1, r3
    4270:	e8020500 	stmda	r2, {r8, sl}
    4274:	03080079 	movweq	r0, #32889	; 0x8079
    4278:	75010782 	strvc	r0, [r1, #-1922]	; 0x782
    427c:	767592bb 			; <UNDEFINED> instruction: 0x767592bb
    4280:	f308835b 	vcge.u8	q4, q4, <illegal reg q5.5>
    4284:	e508f308 	str	pc, [r8, #-776]	; 0x308
    4288:	4b2fe608 	blmi	bfdab0 <_Min_Stack_Size+0xbfd6b0>
    428c:	04020091 	streq	r0, [r2], #-145	; 0x91
    4290:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    4294:	04020068 	streq	r0, [r2], #-104	; 0x68
    4298:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    429c:	303d5c92 	mlascc	sp, r2, ip, r5
    42a0:	08e50883 	stmiaeq	r5!, {r0, r1, r7, fp}^
    42a4:	08f308f3 	ldmeq	r3!, {r0, r1, r4, r5, r6, r7, fp}^
    42a8:	914b2fe6 	smlalttls	r2, fp, r6, pc	; <UNPREDICTABLE>
    42ac:	01040200 	mrseq	r0, R12_usr
    42b0:	68065806 	stmdavs	r6, {r1, r2, fp, ip, lr}
    42b4:	01040200 	mrseq	r0, R12_usr
    42b8:	92064a06 	andls	r4, r6, #24576	; 0x6000
    42bc:	0009024c 	andeq	r0, r9, ip, asr #4
    42c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    42c4:	007d3802 	rsbseq	r3, sp, r2, lsl #16
    42c8:	07b70308 	ldreq	r0, [r7, r8, lsl #6]!
    42cc:	3e4d4b01 	vmlacc.f64	d20, d13, d1
    42d0:	036abc3e 	cmneq	sl, #15872	; 0x3e00
    42d4:	02005878 	andeq	r5, r0, #120, 16	; 0x780000
    42d8:	3c060104 	stfccs	f0, [r6], {4}
    42dc:	02003a06 	andeq	r3, r0, #24576	; 0x6000
    42e0:	3c060104 	stfccs	f0, [r6], {4}
    42e4:	4a0e0306 	bmi	384f04 <_Min_Stack_Size+0x384b04>
    42e8:	01000c02 	tsteq	r0, r2, lsl #24
    42ec:	02050001 	andeq	r0, r5, #1
    42f0:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    42f4:	0107d103 	tsteq	r7, r3, lsl #2
    42f8:	3f4ca04b 	svccc	0x004ca04b
    42fc:	85598559 	ldrbhi	r8, [r9, #-1369]	; 0x559
    4300:	774b774b 	strbvc	r7, [fp, -fp, asr #14]
    4304:	3f594d4c 	svccc	0x00594d4c
    4308:	4c4c4b4c 	mcrrmi	11, 4, r4, ip, cr12
    430c:	504b4e4b 	subpl	r4, fp, fp, asr #28
    4310:	4b4c3f59 	blmi	131407c <_Min_Stack_Size+0x1313c7c>
    4314:	4e4b4c4c 	cdpmi	12, 4, cr4, cr11, cr12, {2}
    4318:	4d4d414b 	stfmie	f4, [sp, #-300]	; 0xfffffed4
    431c:	3d5b3ebc 	ldclcc	14, cr3, [fp, #-752]	; 0xfffffd10
    4320:	4c843e3d 	stcmi	14, cr3, [r4], {61}	; 0x3d
    4324:	7103913d 	tstvc	r3, sp, lsr r1
    4328:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    432c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4330:	024a1303 	subeq	r1, sl, #201326592	; 0xc000000
    4334:	0101000c 	tsteq	r1, ip
    4338:	90020500 	andls	r0, r2, r0, lsl #10
    433c:	0308007f 	movweq	r0, #32895	; 0x807f
    4340:	770108c1 	strvc	r0, [r1, -r1, asr #17]
    4344:	594b682f 	stmdbpl	fp, {r0, r1, r2, r3, r5, fp, sp, lr}^
    4348:	3d2fd976 	stccc	9, cr13, [pc, #-472]!	; 4178 <_Min_Stack_Size+0x3d78>
    434c:	2f2f2f2f 	svccs	0x002f2f2f
    4350:	2f4b2f2f 	svccs	0x004b2f2f
    4354:	00315b2f 	eorseq	r5, r1, pc, lsr #22
    4358:	06010402 	streq	r0, [r1], -r2, lsl #8
    435c:	596a0620 	stmdbpl	sl!, {r5, r9, sl}^
    4360:	01000702 	tsteq	r0, r2, lsl #14
    4364:	02050001 	andeq	r0, r5, #1
    4368:	08008050 	stmdaeq	r0, {r4, r6, pc}
    436c:	0108ee03 	tsteq	r8, r3, lsl #28
    4370:	302f5a95 	mlacc	pc, r5, sl, r5	; <UNPREDICTABLE>
    4374:	3d083e22 	stccc	14, cr3, [r8, #-136]	; 0xffffff78
    4378:	083e3f08 	ldmdaeq	lr!, {r3, r8, r9, sl, fp, ip, sp}
    437c:	3e3e083d 	mrccc	8, 1, r0, cr14, cr13, {1}
    4380:	003e8378 	eorseq	r8, lr, r8, ror r3
    4384:	03010402 	movweq	r0, #5122	; 0x1402
    4388:	19033c6a 	stmdbne	r3, {r1, r3, r5, r6, sl, fp, ip, sp}
    438c:	0302834a 	movweq	r8, #9034	; 0x234a
    4390:	00010100 	andeq	r0, r1, r0, lsl #2
    4394:	81700205 	cmnhi	r0, r5, lsl #4
    4398:	9d030800 	stcls	8, cr0, [r3, #-0]
    439c:	bb750109 	bllt	1d447c8 <_Min_Stack_Size+0x1d443c8>
    43a0:	757530bb 	ldrbvc	r3, [r5, #-187]!	; 0xbb
    43a4:	2f4c302f 	svccs	0x004c302f
    43a8:	4c3f3d40 	ldcmi	13, cr3, [pc], #-256	; 42b0 <_Min_Stack_Size+0x3eb0>
    43ac:	3f3d402f 	svccc	0x003d402f
    43b0:	2f2f2f68 	svccs	0x002f2f68
    43b4:	2f402f67 	svccs	0x00402f67
    43b8:	2f672f2f 	svccs	0x00672f2f
    43bc:	59833e31 	stmibpl	r3, {r0, r4, r5, r9, sl, fp, ip, sp}
    43c0:	5a595968 	bpl	165a968 <_Min_Stack_Size+0x165a568>
    43c4:	58750359 	ldmdapl	r5!, {r0, r3, r4, r6, r8, r9}^
    43c8:	01040200 	mrseq	r0, R12_usr
    43cc:	03063c06 	movweq	r3, #27654	; 0x6c06
    43d0:	0302660d 	movweq	r6, #9741	; 0x260d
    43d4:	00010100 	andeq	r0, r1, r0, lsl #2
    43d8:	82d80205 	sbcshi	r0, r8, #1342177280	; 0x50000000
    43dc:	e5030800 	str	r0, [r3, #-2048]	; 0x800
    43e0:	4b670109 	blmi	19c480c <_Min_Stack_Size+0x19c440c>
    43e4:	22233e30 	eorcs	r3, r3, #48, 28	; 0x300
    43e8:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
    43ec:	99010402 	stmdbls	r1, {r1, sl}
    43f0:	0302d76d 	movweq	sp, #10093	; 0x276d
    43f4:	00010100 	andeq	r0, r1, r0, lsl #2
    43f8:	83500205 	cmphi	r0, #1342177280	; 0x50000000
    43fc:	ff030800 			; <UNDEFINED> instruction: 0xff030800
    4400:	bb760109 	bllt	1d8482c <_Min_Stack_Size+0x1d8442c>
    4404:	757530bb 	ldrbvc	r3, [r5, #-187]!	; 0xbb
    4408:	2f4c302f 	svccs	0x004c302f
    440c:	4c3f3d40 	ldcmi	13, cr3, [pc], #-256	; 4314 <_Min_Stack_Size+0x3f14>
    4410:	3f3d402f 	svccc	0x003d402f
    4414:	2f2f2f68 	svccs	0x002f2f68
    4418:	2f402f67 	svccs	0x00402f67
    441c:	2f672f2f 	svccs	0x00672f2f
    4420:	59683e31 	stmdbpl	r8!, {r0, r4, r5, r9, sl, fp, ip, sp}^
    4424:	5a595968 	bpl	165a9cc <_Min_Stack_Size+0x165a5cc>
    4428:	58740359 	ldmdapl	r4!, {r0, r3, r4, r6, r8, r9}^
    442c:	01040200 	mrseq	r0, R12_usr
    4430:	03063c06 	movweq	r3, #27654	; 0x6c06
    4434:	03026610 	movweq	r6, #9744	; 0x2610
    4438:	00010100 	andeq	r0, r1, r0, lsl #2
    443c:	84b40205 	ldrthi	r0, [r4], #517	; 0x205
    4440:	cb030800 	blgt	c6448 <_Min_Stack_Size+0xc6048>
    4444:	4c67010a 	stfmie	f0, [r7], #-40	; 0xffffffd8
    4448:	3d22233e 	stccc	3, cr2, [r2, #-248]!	; 0xffffff08
    444c:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
    4450:	6d990104 	ldfvss	f0, [r9, #16]
    4454:	01000302 	tsteq	r0, r2, lsl #6
    4458:	02050001 	andeq	r0, r5, #1
    445c:	0800850c 	stmdaeq	r0, {r2, r3, r8, sl, pc}
    4460:	010ae503 	tsteq	sl, r3, lsl #10
    4464:	3e304b83 	vaddcc.f64	d4, d16, d3
    4468:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
    446c:	0075f33d 	rsbseq	pc, r5, sp, lsr r3	; <UNPREDICTABLE>
    4470:	6f010402 	svcvs	0x00010402
    4474:	02a03e6d 	adceq	r3, r0, #1744	; 0x6d0
    4478:	01010003 	tsteq	r1, r3
    447c:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    4480:	03080085 	movweq	r0, #32901	; 0x8085
    4484:	67010b83 	strvs	r0, [r1, -r3, lsl #23]
    4488:	02910859 	addseq	r0, r1, #5832704	; 0x590000
    448c:	01010003 	tsteq	r1, r3
    4490:	fc020500 	stc2	5, cr0, [r2], {-0}
    4494:	03080085 	movweq	r0, #32901	; 0x8085
    4498:	67010b8f 	strvs	r0, [r1, -pc, lsl #23]
    449c:	00030267 	andeq	r0, r3, r7, ror #4
    44a0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    44a4:	00861c02 	addeq	r1, r6, r2, lsl #24
    44a8:	0b9a0308 	bleq	fe6850d0 <_estack+0xde6550d0>
    44ac:	02676701 	rsbeq	r6, r7, #262144	; 0x40000
    44b0:	01010003 	tsteq	r1, r3
    44b4:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    44b8:	03080086 	movweq	r0, #32902	; 0x8086
    44bc:	68010ba5 	stmdavs	r1, {r0, r2, r5, r7, r8, r9, fp}
    44c0:	59845908 	stmibpl	r4, {r3, r8, fp, ip, lr}
    44c4:	5a753e5a 	bpl	1d53e34 <_Min_Stack_Size+0x1d53a34>
    44c8:	75315a30 	ldrvc	r5, [r1, #-2608]!	; 0xa30
    44cc:	035a305a 	cmpeq	sl, #90	; 0x5a
    44d0:	02002e6d 	andeq	r2, r0, #1744	; 0x6d0
    44d4:	3c060104 	stfccs	f0, [r6], {4}
    44d8:	58170306 	ldmdapl	r7, {r1, r2, r8, r9}
    44dc:	7675233e 			; <UNDEFINED> instruction: 0x7675233e
    44e0:	3d223e3d 	stccc	14, cr3, [r2, #-244]!	; 0xffffff0c
    44e4:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
    44e8:	02009f9f 	andeq	r9, r0, #636	; 0x27c
    44ec:	76030104 	strvc	r0, [r3], -r4, lsl #2
    44f0:	660d039e 			; <UNDEFINED> instruction: 0x660d039e
    44f4:	029f9f9f 	addseq	r9, pc, #636	; 0x27c
    44f8:	01010003 	tsteq	r1, r3
    44fc:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    4500:	03080087 	movweq	r0, #32903	; 0x8087
    4504:	5a010be7 	bpl	474a8 <_Min_Stack_Size+0x470a8>
    4508:	006a3d69 	rsbeq	r3, sl, r9, ror #26
    450c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4510:	00760620 	rsbseq	r0, r6, r0, lsr #12
    4514:	06010402 	streq	r0, [r1], -r2, lsl #8
    4518:	3d760620 	ldclcc	6, cr0, [r6, #-128]!	; 0xffffff80
    451c:	01000702 	tsteq	r0, r2, lsl #14
    4520:	02050001 	andeq	r0, r5, #1
    4524:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
    4528:	010bff03 	tsteq	fp, r3, lsl #30
    452c:	6a3d695a 	bvs	f5ea9c <_Min_Stack_Size+0xf5e69c>
    4530:	01040200 	mrseq	r0, R12_usr
    4534:	76062006 	strvc	r2, [r6], -r6
    4538:	01040200 	mrseq	r0, R12_usr
    453c:	76062006 	strvc	r2, [r6], -r6
    4540:	0007023d 	andeq	r0, r7, sp, lsr r2
    4544:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4548:	00889402 	addeq	r9, r8, r2, lsl #8
    454c:	0c960308 	ldceq	3, cr0, [r6], {8}
    4550:	3d3d2f01 	ldccc	15, cr2, [sp, #-4]!
    4554:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4558:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    455c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4560:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4564:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4568:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    456c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4570:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4574:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4578:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    457c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4580:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4584:	3f3d3d3d 	svccc	0x003d3d3d
    4588:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    458c:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
    4590:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4594:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    4598:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    459c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45a0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45a4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45ac:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45b0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45b4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    45b8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    45bc:	01023d3e 	tsteq	r2, lr, lsr sp
    45c0:	00010100 	andeq	r0, r1, r0, lsl #2
    45c4:	8b240205 	blhi	904de0 <_Min_Stack_Size+0x9049e0>
    45c8:	93030800 	movwls	r0, #14336	; 0x3800
    45cc:	3d2f010d 	stfccs	f0, [pc, #-52]!	; 45a0 <_Min_Stack_Size+0x41a0>
    45d0:	01000102 	tsteq	r0, r2, lsl #2
    45d4:	02050001 	andeq	r0, r5, #1
    45d8:	08008b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, pc}
    45dc:	010d9d03 	tsteq	sp, r3, lsl #26
    45e0:	01023d30 	tsteq	r2, r0, lsr sp
    45e4:	00010100 	andeq	r0, r1, r0, lsl #2
    45e8:	8b3c0205 	blhi	f04e04 <_Min_Stack_Size+0xf04a04>
    45ec:	aa030800 	bge	c65f4 <_Min_Stack_Size+0xc61f4>
    45f0:	4d40010d 	stfmie	f0, [r0, #-52]	; 0xffffffcc
    45f4:	2f2f2f2f 	svccs	0x002f2f2f
    45f8:	5b3d5b2f 	blpl	f5b2bc <_Min_Stack_Size+0xf5aebc>
    45fc:	00070259 	andeq	r0, r7, r9, asr r2
    4600:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4604:	008b9002 	addeq	r9, fp, r2
    4608:	0dcf0308 	stcleq	3, cr0, [pc, #32]	; 4630 <_Min_Stack_Size+0x4230>
    460c:	02758401 	rsbseq	r8, r5, #16777216	; 0x1000000
    4610:	01010003 	tsteq	r1, r3
    4614:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    4618:	0308008b 	movweq	r0, #32907	; 0x808b
    461c:	41010dda 	ldrdmi	r0, [r1, -sl]
    4620:	2f2f5b4d 	svccs	0x002f5b4d
    4624:	5b2f2f2f 	blpl	bd02e8 <_Min_Stack_Size+0xbcfee8>
    4628:	5b3d5b3d 	blpl	f5b324 <_Min_Stack_Size+0xf5af24>
    462c:	405a5b5b 	subsmi	r5, sl, fp, asr fp
    4630:	2f3d2f76 	svccs	0x003d2f76
    4634:	2f432f2f 	svccs	0x00432f2f
    4638:	4c692f2f 	stclmi	15, cr2, [r9], #-188	; 0xffffff44
    463c:	01000802 	tsteq	r0, r2, lsl #16
    4640:	02050001 	andeq	r0, r5, #1
    4644:	08008c88 	stmdaeq	r0, {r3, r7, sl, fp, pc}
    4648:	010e9f03 	tsteq	lr, r3, lsl #30
    464c:	4a170340 	bmi	5c5354 <_Min_Stack_Size+0x5c4f54>
    4650:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    4654:	2f2f3f5a 	svccs	0x002f3f5a
    4658:	595b2f2f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    465c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    4660:	595b3f5a 	ldmdbpl	fp, {r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}^
    4664:	5b3e5a59 	blpl	f9afd0 <_Min_Stack_Size+0xf9abd0>
    4668:	5b305a59 	blpl	c1afd4 <_Min_Stack_Size+0xc1abd4>
    466c:	595b3e5a 	ldmdbpl	fp, {r1, r3, r4, r6, r9, sl, fp, ip, sp}^
    4670:	5a595959 	bpl	165abdc <_Min_Stack_Size+0x165a7dc>
    4674:	10025a3f 	andne	r5, r2, pc, lsr sl
    4678:	00010100 	andeq	r0, r1, r0, lsl #2
    467c:	8e000205 	cdphi	2, 0, cr0, cr0, cr5, {0}
    4680:	83030800 	movwhi	r0, #14336	; 0x3800
    4684:	0075010f 	rsbseq	r0, r5, pc, lsl #2
    4688:	06010402 	streq	r0, [r1], -r2, lsl #8
    468c:	22ca064a 	sbccs	r0, sl, #77594624	; 0x4a00000
    4690:	00030283 	andeq	r0, r3, r3, lsl #5
    4694:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4698:	008e4802 	addeq	r4, lr, r2, lsl #16
    469c:	0f920308 	svceq	0x00920308
    46a0:	002f4b01 	eoreq	r4, pc, r1, lsl #22
    46a4:	06020402 	streq	r0, [r2], -r2, lsl #8
    46a8:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    46ac:	3f063c01 	svccc	0x00063c01
    46b0:	01000502 	tsteq	r0, r2, lsl #10
    46b4:	00070c01 	andeq	r0, r7, r1, lsl #24
    46b8:	cb000200 	blgt	4ec0 <_Min_Stack_Size+0x4ac0>
    46bc:	02000001 	andeq	r0, r0, #1
    46c0:	0d0efb01 	vstreq	d15, [lr, #-4]
    46c4:	01010100 	mrseq	r0, (UNDEF: 17)
    46c8:	00000001 	andeq	r0, r0, r1
    46cc:	01000001 	tsteq	r0, r1
    46d0:	2f62696c 	svccs	0x0062696c
    46d4:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    46d8:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    46dc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    46e0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    46e4:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    46e8:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    46ec:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    46f0:	2f007972 	svccs	0x00007972
    46f4:	2f727375 	svccs	0x00727375
    46f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    46fc:	2f656475 	svccs	0x00656475
    4700:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4704:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4568 <_Min_Stack_Size+0x4168>
    4708:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    470c:	2f00656e 	svccs	0x0000656e
    4710:	2f727375 	svccs	0x00727375
    4714:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4718:	2f656475 	svccs	0x00656475
    471c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4720:	6c006269 	sfmvs	f6, 4, [r0], {105}	; 0x69
    4724:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    4728:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    472c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    4730:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4734:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4738:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    473c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    4740:	2f736569 	svccs	0x00736569
    4744:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    4748:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    474c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    4750:	2f54532f 	svccs	0x0054532f
    4754:	334d5453 	movtcc	r5, #54355	; 0xd453
    4758:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    475c:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    4760:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4764:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
    4768:	4f432f62 	svcmi	0x00432f62
    476c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4770:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4774:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4778:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    477c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4780:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4784:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4788:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    478c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    4790:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    4794:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4798:	445f6870 	ldrbmi	r6, [pc], #-2160	; 47a0 <_Min_Stack_Size+0x43a0>
    479c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    47a0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    47a4:	696c0063 	stmdbvs	ip!, {r0, r1, r5, r6}^
    47a8:	4f432f62 	svcmi	0x00432f62
    47ac:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    47b0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    47b4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    47b8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    47bc:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    47c0:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    47c4:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    47c8:	5349534d 	movtpl	r5, #37709	; 0x934d
    47cc:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    47d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    47d4:	74730000 	ldrbtvc	r0, [r3], #-0
    47d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    47dc:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    47e0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    47e4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    47e8:	695f7972 	ldmdbvs	pc, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    47ec:	632e656f 	teqvs	lr, #465567744	; 0x1bc00000
    47f0:	00000100 	andeq	r0, r0, r0, lsl #2
    47f4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    47f8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    47fc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4800:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4804:	00000200 	andeq	r0, r0, r0, lsl #4
    4808:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    480c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4810:	00000300 	andeq	r0, r0, r0, lsl #6
    4814:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4818:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    481c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4820:	73000004 	movwvc	r0, #4
    4824:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4828:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    482c:	616d645f 	cmnvs	sp, pc, asr r4
    4830:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4834:	74730000 	ldrbtvc	r0, [r3], #-0
    4838:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    483c:	5f787834 	svcpl	0x00787834
    4840:	6f697067 	svcvs	0x00697067
    4844:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4848:	74730000 	ldrbtvc	r0, [r3], #-0
    484c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4850:	5f787834 	svcpl	0x00787834
    4854:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    4858:	00050068 	andeq	r0, r5, r8, rrx
    485c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4860:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4864:	5f693932 	svcpl	0x00693932
    4868:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    486c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    4870:	6f695f79 	svcvs	0x00695f79
    4874:	00682e65 	rsbeq	r2, r8, r5, ror #28
    4878:	63000001 	movwvs	r0, #1
    487c:	5f65726f 	svcpl	0x0065726f
    4880:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    4884:	00060068 	andeq	r0, r6, r8, rrx
    4888:	05000000 	streq	r0, [r0, #-0]
    488c:	008e7002 	addeq	r7, lr, r2
    4890:	00ff0308 	rscseq	r0, pc, r8, lsl #6
    4894:	31313001 	teqcc	r1, r1
    4898:	4b32325a 	blmi	c91208 <_Min_Stack_Size+0xc90e08>
    489c:	02022131 	andeq	r2, r2, #1073741836	; 0x4000000c
    48a0:	00010100 	andeq	r0, r1, r0, lsl #2
    48a4:	8ea00205 	cdphi	2, 10, cr0, cr0, cr5, {0}
    48a8:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    48ac:	3f300101 	svccc	0x00300101
    48b0:	02213f4d 	eoreq	r3, r1, #308	; 0x134
    48b4:	01010002 	tsteq	r1, r2
    48b8:	c0020500 	andgt	r0, r2, r0, lsl #10
    48bc:	0308008e 	movweq	r0, #32910	; 0x808e
    48c0:	410101b2 			; <UNDEFINED> instruction: 0x410101b2
    48c4:	4b4b4c92 	blmi	12d7b14 <_Min_Stack_Size+0x12d7714>
    48c8:	01040200 	mrseq	r0, R12_usr
    48cc:	02005806 	andeq	r5, r0, #393216	; 0x60000
    48d0:	00580204 	subseq	r0, r8, r4, lsl #4
    48d4:	4a030402 	bmi	c58e4 <_Min_Stack_Size+0xc54e4>
    48d8:	03040200 	movweq	r0, #16896	; 0x4200
    48dc:	02002106 	andeq	r2, r0, #-2147483647	; 0x80000001
    48e0:	58060104 	stmdapl	r6, {r2, r8}
    48e4:	02040200 	andeq	r0, r4, #0, 4
    48e8:	04020058 	streq	r0, [r2], #-88	; 0x58
    48ec:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    48f0:	21060304 	tstcs	r6, r4, lsl #6
    48f4:	5b403d5a 	blpl	1013e64 <_Min_Stack_Size+0x1013a64>
    48f8:	4d4b695a 	stclmi	9, cr6, [fp, #-360]	; 0xfffffe98
    48fc:	000a0221 	andeq	r0, sl, r1, lsr #4
    4900:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4904:	008f8802 	addeq	r8, pc, r2, lsl #16
    4908:	01e10308 	mvneq	r0, r8, lsl #6
    490c:	5a315901 	bpl	c5ad18 <_Min_Stack_Size+0xc5a918>
    4910:	02223276 	eoreq	r3, r2, #1610612743	; 0x60000007
    4914:	01010004 	tsteq	r1, r4
    4918:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    491c:	0308008f 	movweq	r0, #32911	; 0x808f
    4920:	5a0101fe 	bpl	45120 <_Min_Stack_Size+0x44d20>
    4924:	0402215b 	streq	r2, [r2], #-347	; 0x15b
    4928:	00010100 	andeq	r0, r1, r0, lsl #2
    492c:	8fdc0205 	svchi	0x00dc0205
    4930:	8e030800 	cdphi	8, 0, cr0, cr3, cr0, {0}
    4934:	85300102 	ldrhi	r0, [r0, #-258]!	; 0x102
    4938:	22334e4c 	eorscs	r4, r3, #76, 28	; 0x4c0
    493c:	01000502 	tsteq	r0, r2, lsl #10
    4940:	02050001 	andeq	r0, r5, #1
    4944:	08009010 	stmdaeq	r0, {r4, ip, pc}
    4948:	0102a803 	tsteq	r2, r3, lsl #16
    494c:	4d3f4d30 	ldcmi	13, cr4, [pc, #-192]!	; 4894 <_Min_Stack_Size+0x4494>
    4950:	00020221 	andeq	r0, r2, r1, lsr #4
    4954:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4958:	00903002 	addseq	r3, r0, r2
    495c:	02bc0308 	adcseq	r0, ip, #8, 6	; 0x20000000
    4960:	59313d01 	ldmdbpl	r1!, {r0, r8, sl, fp, ip, sp}
    4964:	0221853d 	eoreq	r8, r1, #255852544	; 0xf400000
    4968:	01010004 	tsteq	r1, r4
    496c:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    4970:	03080090 	movweq	r0, #32912	; 0x8090
    4974:	750102d3 	strvc	r0, [r1, #-723]	; 0x2d3
    4978:	873f5a31 			; <UNDEFINED> instruction: 0x873f5a31
    497c:	02215b4e 	eoreq	r5, r1, #79872	; 0x13800
    4980:	01010004 	tsteq	r1, r4
    4984:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    4988:	03080090 	movweq	r0, #32912	; 0x8090
    498c:	590102f2 	stmdbpl	r1, {r1, r4, r5, r6, r7, r9}
    4990:	5d3f5a31 	vldmdbpl	pc!, {s10-s58}
    4994:	02215b4e 	eoreq	r5, r1, #79872	; 0x13800
    4998:	01010004 	tsteq	r1, r4
    499c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    49a0:	03080090 	movweq	r0, #32912	; 0x8090
    49a4:	75010397 	strvc	r0, [r1, #-919]	; 0x397
    49a8:	5d3f5a31 	vldmdbpl	pc!, {s10-s58}
    49ac:	02215b77 	eoreq	r5, r1, #121856	; 0x1dc00
    49b0:	01010004 	tsteq	r1, r4
    49b4:	48020500 	stmdami	r2, {r8, sl}
    49b8:	03080091 	movweq	r0, #32913	; 0x8091
    49bc:	300103b4 			; <UNDEFINED> instruction: 0x300103b4
    49c0:	4d3f4d4d 	ldcmi	13, cr4, [pc, #-308]!	; 4894 <_Min_Stack_Size+0x4494>
    49c4:	4d4d4d4d 	stclmi	13, cr4, [sp, #-308]	; 0xfffffecc
    49c8:	4d4e4d4d 	stclmi	13, cr4, [lr, #-308]	; 0xfffffecc
    49cc:	0221e74d 	eoreq	lr, r1, #20185088	; 0x1340000
    49d0:	01010005 	tsteq	r1, r5
    49d4:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    49d8:	03080091 	movweq	r0, #32913	; 0x8091
    49dc:	750103ec 	strvc	r0, [r1, #-1004]	; 0x3ec
    49e0:	5d3f5a31 	vldmdbpl	pc!, {s10-s58}
    49e4:	02215b78 	eoreq	r5, r1, #120, 22	; 0x1e000
    49e8:	01010004 	tsteq	r1, r4
    49ec:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    49f0:	03080092 	movweq	r0, #32914	; 0x8092
    49f4:	7501048b 	strvc	r0, [r1, #-1163]	; 0x48b
    49f8:	6931312f 	ldmdbvs	r1!, {r0, r1, r2, r3, r5, r8, ip, sp}
    49fc:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4a00:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a04:	04020074 	streq	r0, [r2], #-116	; 0x74
    4a08:	7a480601 	bvc	1206214 <_Min_Stack_Size+0x1205e14>
    4a0c:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4a10:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a14:	04020074 	streq	r0, [r2], #-116	; 0x74
    4a18:	7a480601 	bvc	1206224 <_Min_Stack_Size+0x1205e24>
    4a1c:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4a20:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a24:	04020074 	streq	r0, [r2], #-116	; 0x74
    4a28:	00480601 	subeq	r0, r8, r1, lsl #12
    4a2c:	06020402 	streq	r0, [r2], -r2, lsl #8
    4a30:	4d7a0674 	ldclmi	6, cr0, [sl, #-464]!	; 0xfffffe30
    4a34:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4a38:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a3c:	04020074 	streq	r0, [r2], #-116	; 0x74
    4a40:	7a480601 	bvc	120624c <_Min_Stack_Size+0x1205e4c>
    4a44:	0200223d 	andeq	r2, r0, #-805306365	; 0xd0000003
    4a48:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4a4c:	01040200 	mrseq	r0, R12_usr
    4a50:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4a54:	15034d4d 	strne	r4, [r3, #-3405]	; 0xd4d
    4a58:	16022f4a 	strne	r2, [r2], -sl, asr #30
    4a5c:	00010100 	andeq	r0, r1, r0, lsl #2
    4a60:	93c00205 	bicls	r0, r0, #1342177280	; 0x50000000
    4a64:	ef030800 	svc	0x00030800
    4a68:	4d590104 	ldfmie	f0, [r9, #-16]
    4a6c:	4b4d4d69 	blmi	1358018 <_Min_Stack_Size+0x1357c18>
    4a70:	04020022 	streq	r0, [r2], #-34	; 0x22
    4a74:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4a78:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a7c:	4b5b7a48 	blmi	16e33a4 <_Min_Stack_Size+0x16e2fa4>
    4a80:	04020022 	streq	r0, [r2], #-34	; 0x22
    4a84:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4a88:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a8c:	4b5b7a48 	blmi	16e33b4 <_Min_Stack_Size+0x16e2fb4>
    4a90:	04020022 	streq	r0, [r2], #-34	; 0x22
    4a94:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4a98:	06010402 	streq	r0, [r1], -r2, lsl #8
    4a9c:	04020048 	streq	r0, [r2], #-72	; 0x48
    4aa0:	06740602 	ldrbteq	r0, [r4], -r2, lsl #12
    4aa4:	224b4d7a 	subcs	r4, fp, #7808	; 0x1e80
    4aa8:	01040200 	mrseq	r0, R12_usr
    4aac:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4ab0:	48060104 	stmdami	r6, {r2, r8}
    4ab4:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4ab8:	01040200 	mrseq	r0, R12_usr
    4abc:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4ac0:	48060104 	stmdami	r6, {r2, r8}
    4ac4:	4b4d4d7a 	blmi	13580b4 <_Min_Stack_Size+0x1357cb4>
    4ac8:	04020022 	streq	r0, [r2], #-34	; 0x22
    4acc:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4ad0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ad4:	4d4d7a48 	vstrmi	s15, [sp, #-288]	; 0xfffffee0
    4ad8:	02214d4d 	eoreq	r4, r1, #4928	; 0x1340
    4adc:	01010016 	tsteq	r1, r6, lsl r0
    4ae0:	94020500 	strls	r0, [r2], #-1280	; 0x500
    4ae4:	03080095 	movweq	r0, #32917	; 0x8095
    4ae8:	4b0105ce 	blmi	46228 <_Min_Stack_Size+0x45e28>
    4aec:	4d694d2f 	stclmi	13, cr4, [r9, #-188]!	; 0xffffff44
    4af0:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4af4:	06010402 	streq	r0, [r1], -r2, lsl #8
    4af8:	04020074 	streq	r0, [r2], #-116	; 0x74
    4afc:	7a480601 	bvc	1206308 <_Min_Stack_Size+0x1205f08>
    4b00:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4b04:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b08:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b0c:	7a480601 	bvc	1206318 <_Min_Stack_Size+0x1205f18>
    4b10:	00224b69 	eoreq	r4, r2, r9, ror #22
    4b14:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b18:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b1c:	00480601 	subeq	r0, r8, r1, lsl #12
    4b20:	06020402 	streq	r0, [r2], -r2, lsl #8
    4b24:	4d7a0674 	ldclmi	6, cr0, [sl, #-464]!	; 0xfffffe30
    4b28:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4b2c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4b30:	01040200 	mrseq	r0, R12_usr
    4b34:	5b7a4806 	blpl	1e96b54 <_Min_Stack_Size+0x1e96754>
    4b38:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4b3c:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4b40:	01040200 	mrseq	r0, R12_usr
    4b44:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4b48:	00224b4d 	eoreq	r4, r2, sp, asr #22
    4b4c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b50:	04020074 	streq	r0, [r2], #-116	; 0x74
    4b54:	7a480601 	bvc	1206360 <_Min_Stack_Size+0x1205f60>
    4b58:	4d4d4d4d 	stclmi	13, cr4, [sp, #-308]	; 0xfffffecc
    4b5c:	83312f2f 	teqhi	r1, #47, 30	; 0xbc
    4b60:	01001702 	tsteq	r0, r2, lsl #14
    4b64:	02050001 	andeq	r0, r5, #1
    4b68:	08009788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, pc}
    4b6c:	0106b303 	tsteq	r6, r3, lsl #6
    4b70:	6a5a5b40 	bvs	169b878 <_Min_Stack_Size+0x169b478>
    4b74:	3e3e935c 	mrccc	3, 1, r9, cr14, cr12, {2}
    4b78:	022f323e 	eoreq	r3, pc, #-536870909	; 0xe0000003
    4b7c:	01010006 	tsteq	r1, r6
    4b80:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    4b84:	03080097 	movweq	r0, #32919	; 0x8097
    4b88:	400106da 	ldrdmi	r0, [r1], -sl
    4b8c:	3e854d5c 	mcrcc	13, 4, r4, cr5, cr12, {2}
    4b90:	2f404c3e 	svccs	0x00404c3e
    4b94:	01000702 	tsteq	r0, r2, lsl #14
    4b98:	02050001 	andeq	r0, r5, #1
    4b9c:	08009844 	stmdaeq	r0, {r2, r6, fp, ip, pc}
    4ba0:	0106fb03 	tsteq	r6, r3, lsl #22
    4ba4:	2f3d5b40 	svccs	0x003d5b40
    4ba8:	0004022f 	andeq	r0, r4, pc, lsr #4
    4bac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4bb0:	00986c02 	addseq	r6, r8, r2, lsl #24
    4bb4:	078d0308 	streq	r0, [sp, r8, lsl #6]
    4bb8:	5a594001 	bpl	1654bc4 <_Min_Stack_Size+0x16547c4>
    4bbc:	5a5b5a5b 	bpl	16db530 <_Min_Stack_Size+0x16db130>
    4bc0:	2f2f3d5b 	svccs	0x002f3d5b
    4bc4:	3d5a2f2f 	ldclcc	15, cr2, [sl, #-188]	; 0xffffff44
    4bc8:	0008025a 	andeq	r0, r8, sl, asr r2
    4bcc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4bd0:	0098f802 	addseq	pc, r8, r2, lsl #16
    4bd4:	07b30308 	ldreq	r0, [r3, r8, lsl #6]!
    4bd8:	2f774001 	svccs	0x00774001
    4bdc:	3d3d2f3d 	ldccc	15, cr2, [sp, #-244]!	; 0xffffff0c
    4be0:	024c5b31 	subeq	r5, ip, #50176	; 0xc400
    4be4:	01010008 	tsteq	r1, r8
    4be8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    4bec:	03080099 	movweq	r0, #32921	; 0x8099
    4bf0:	690107cf 	stmdbvs	r1, {r0, r1, r2, r3, r6, r7, r8, r9, sl}
    4bf4:	31313f5b 	teqcc	r1, fp, asr pc
    4bf8:	31313f31 	teqcc	r1, r1, lsr pc
    4bfc:	31313131 	teqcc	r1, r1, lsr r1
    4c00:	313f3131 	teqcc	pc, r1, lsr r1	; <UNPREDICTABLE>
    4c04:	3f773e30 	svccc	0x00773e30
    4c08:	683e3031 	ldmdavs	lr!, {r0, r4, r5, ip, sp}
    4c0c:	01000a02 	tsteq	r0, r2, lsl #20
    4c10:	02050001 	andeq	r0, r5, #1
    4c14:	080099f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, pc}
    4c18:	01089e03 	tsteq	r8, r3, lsl #28
    4c1c:	4b4d3175 	blmi	13511f8 <_Min_Stack_Size+0x1350df8>
    4c20:	04020022 	streq	r0, [r2], #-34	; 0x22
    4c24:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4c28:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c2c:	4b5b7a48 	blmi	16e3554 <_Min_Stack_Size+0x16e3154>
    4c30:	04020022 	streq	r0, [r2], #-34	; 0x22
    4c34:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4c38:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c3c:	4b317a48 	blmi	c63564 <_Min_Stack_Size+0xc63164>
    4c40:	04020022 	streq	r0, [r2], #-34	; 0x22
    4c44:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4c48:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c4c:	4b5b7a48 	blmi	16e3574 <_Min_Stack_Size+0x16e3174>
    4c50:	04020022 	streq	r0, [r2], #-34	; 0x22
    4c54:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4c58:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c5c:	4b5b7a48 	blmi	16e3584 <_Min_Stack_Size+0x16e3184>
    4c60:	04020022 	streq	r0, [r2], #-34	; 0x22
    4c64:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4c68:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c6c:	04020048 	streq	r0, [r2], #-72	; 0x48
    4c70:	06740602 	ldrbteq	r0, [r4], -r2, lsl #12
    4c74:	4a16037a 	bmi	585a64 <_Min_Stack_Size+0x585664>
    4c78:	00100230 	andseq	r0, r0, r0, lsr r2
    4c7c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4c80:	009b4c02 	addseq	r4, fp, r2, lsl #24
    4c84:	08f40308 	ldmeq	r4!, {r3, r8, r9}^
    4c88:	4d315901 	ldcmi	9, cr5, [r1, #-4]!
    4c8c:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4c90:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4c94:	01040200 	mrseq	r0, R12_usr
    4c98:	4d794806 	ldclmi	8, cr4, [r9, #-24]!	; 0xffffffe8
    4c9c:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4ca0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ca4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4ca8:	7a480601 	bvc	12064b4 <_Min_Stack_Size+0x12060b4>
    4cac:	00224b31 	eoreq	r4, r2, r1, lsr fp
    4cb0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4cb4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4cb8:	7a480601 	bvc	12064c4 <_Min_Stack_Size+0x12060c4>
    4cbc:	00224b5b 	eoreq	r4, r2, fp, asr fp
    4cc0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4cc4:	04020074 	streq	r0, [r2], #-116	; 0x74
    4cc8:	00480601 	subeq	r0, r8, r1, lsl #12
    4ccc:	06020402 	streq	r0, [r2], -r2, lsl #8
    4cd0:	4d7a0674 	ldclmi	6, cr0, [sl, #-464]!	; 0xfffffe30
    4cd4:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4cd8:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4cdc:	01040200 	mrseq	r0, R12_usr
    4ce0:	5b7a4806 	blpl	1e96d00 <_Min_Stack_Size+0x1e96900>
    4ce4:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4ce8:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4cec:	01040200 	mrseq	r0, R12_usr
    4cf0:	317a4806 	cmncc	sl, r6, lsl #16
    4cf4:	0200224b 	andeq	r2, r0, #-1342177276	; 0xb0000004
    4cf8:	74060104 	strvc	r0, [r6], #-260	; 0x104
    4cfc:	01040200 	mrseq	r0, R12_usr
    4d00:	4d7a4806 	ldclmi	8, cr4, [sl, #-24]!	; 0xffffffe8
    4d04:	02224d5b 	eoreq	r4, r2, #5824	; 0x16c0
    4d08:	01010012 	tsteq	r1, r2, lsl r0
    4d0c:	28020500 	stmdacs	r2, {r8, sl}
    4d10:	0308009d 	movweq	r0, #32925	; 0x809d
    4d14:	4b0109d3 	blmi	47468 <_Min_Stack_Size+0x47068>
    4d18:	224b4d4d 	subcs	r4, fp, #4928	; 0x1340
    4d1c:	01040200 	mrseq	r0, R12_usr
    4d20:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4d24:	48060104 	stmdami	r6, {r2, r8}
    4d28:	224b5b7a 	subcs	r5, fp, #124928	; 0x1e800
    4d2c:	01040200 	mrseq	r0, R12_usr
    4d30:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4d34:	48060104 	stmdami	r6, {r2, r8}
    4d38:	224b317a 	subcs	r3, fp, #-2147483618	; 0x8000001e
    4d3c:	01040200 	mrseq	r0, R12_usr
    4d40:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
    4d44:	48060104 	stmdami	r6, {r2, r8}
    4d48:	4b4d697a 	blmi	135f338 <_Min_Stack_Size+0x135ef38>
    4d4c:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d50:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d54:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d58:	4b5b7a48 	blmi	16e3680 <_Min_Stack_Size+0x16e3280>
    4d5c:	04020022 	streq	r0, [r2], #-34	; 0x22
    4d60:	00740601 	rsbseq	r0, r4, r1, lsl #12
    4d64:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d68:	5b4b7a48 	blpl	12e3690 <_Min_Stack_Size+0x12e3290>
    4d6c:	00224b31 	eoreq	r4, r2, r1, lsr fp
    4d70:	06010402 	streq	r0, [r1], -r2, lsl #8
    4d74:	04020074 	streq	r0, [r2], #-116	; 0x74
    4d78:	7a480601 	bvc	1206584 <_Min_Stack_Size+0x1206184>
    4d7c:	4b5b5b4d 	blmi	16dbab8 <_Min_Stack_Size+0x16db6b8>
    4d80:	1002835b 	andne	r8, r2, fp, asr r3
    4d84:	00010100 	andeq	r0, r1, r0, lsl #2
    4d88:	9ef40205 	cdpls	2, 15, cr0, cr4, cr5, {0}
    4d8c:	b1030800 	tstlt	r3, r0, lsl #16
    4d90:	4b3f010a 	blmi	fc51c0 <_Min_Stack_Size+0xfc4dc0>
    4d94:	3d314c4b 	ldccc	12, cr4, [r1, #-300]!	; 0xfffffed4
    4d98:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 4ce4 <_Min_Stack_Size+0x48e4>
    4d9c:	5a4b313d 	bpl	12d1298 <_Min_Stack_Size+0x12d0e98>
    4da0:	00090221 	andeq	r0, r9, r1, lsr #4
    4da4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4da8:	009f6002 	addseq	r6, pc, r2
    4dac:	0ad20308 	beq	ff4859d4 <_estack+0xdf4559d4>
    4db0:	002f4b01 	eoreq	r4, pc, r1, lsl #22
    4db4:	06020402 	streq	r0, [r2], -r2, lsl #8
    4db8:	04020066 	streq	r0, [r2], #-102	; 0x66
    4dbc:	3f063c01 	svccc	0x00063c01
    4dc0:	01000802 	tsteq	r0, r2, lsl #16
    4dc4:	Address 0x0000000000004dc4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
       8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
       c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      10:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      14:	4673006e 	ldrbtmi	r0, [r3], -lr, rrx
      18:	00544e4f 	subseq	r4, r4, pc, asr #28
      1c:	4f495047 	svcmi	0x00495047
      20:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
      24:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      28:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      2c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      30:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
      34:	555f6450 	ldrbpl	r6, [pc, #-1104]	; fffffbec <_estack+0xdffcfbec>
      38:	68730050 	ldmdavs	r3!, {r4, r6}^
      3c:	2074726f 	rsbscs	r7, r4, pc, ror #4
      40:	00746e69 	rsbseq	r6, r4, r9, ror #28
      44:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
      48:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
      4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      50:	544f5f4f 	strbpl	r5, [pc], #-3919	; 58 <_Min_Heap_Size+0x58>
      54:	5f657079 	svcpl	0x00657079
      58:	6d00444f 	cfstrsvs	mvf4, [r0, #-316]	; 0xfffffec4
      5c:	006e6961 	rsbeq	r6, lr, r1, ror #18
      60:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      64:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
      68:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
      6c:	6b636f6c 	blvs	18dbe24 <_Min_Stack_Size+0x18dba24>
      70:	61746144 	cmnvs	r4, r4, asr #2
      74:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
      78:	00657461 	rsbeq	r7, r5, r1, ror #8
      7c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      80:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
      84:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
      88:	5f4f4950 	svcpl	0x004f4950
      8c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      90:	50470065 	subpl	r0, r7, r5, rrx
      94:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ffffff78 <_estack+0xdffcff78>
      98:	5f65646f 	svcpl	0x0065646f
      9c:	4c004641 	stcmi	6, cr4, [r0], {65}	; 0x41
      a0:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
      a4:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
      a8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
      ac:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
      b0:	4e450066 	cdpmi	0, 4, cr0, cr5, cr6, {3}
      b4:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
      b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      bc:	70535f4f 	subsvc	r5, r3, pc, asr #30
      c0:	00646565 	rsbeq	r6, r4, r5, ror #10
      c4:	4f495047 	svcmi	0x00495047
      c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; d0 <_Min_Heap_Size+0xd0>
      cc:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
      d0:	62617400 	rsbvs	r7, r1, #0, 8
      d4:	4700656c 	strmi	r6, [r0, -ip, ror #10]
      d8:	4f4f4950 	svcmi	0x004f4950
      dc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
      e0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      e4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      e8:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
      ec:	00524550 	subseq	r4, r2, r0, asr r5
      f0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
      f4:	6f4d5f72 	svcvs	0x004d5f72
      f8:	6c006564 	cfstr32vs	mvfx6, [r0], {100}	; 0x64
      fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     100:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     104:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     108:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     10c:	6f4d5f4f 	svcvs	0x004d5f4f
     110:	4f5f6564 	svcmi	0x005f6564
     114:	50005455 	andpl	r5, r0, r5, asr r4
     118:	52445055 	subpl	r5, r4, #85	; 0x55
     11c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     120:	6f4d5f4f 	svcvs	0x004d5f4f
     124:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     128:	4e47004e 	cdpmi	0, 4, cr0, cr7, cr14, {2}
     12c:	20432055 	subcs	r2, r3, r5, asr r0
     130:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     134:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     138:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     13c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     140:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     144:	6d2d2034 	stcvs	0, cr2, [sp, #-208]!	; 0xffffff30
     148:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     14c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     150:	2d653776 	stclcs	7, cr3, [r5, #-472]!	; 0xfffffe28
     154:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
     158:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0x574
     15c:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     160:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     164:	2d20346d 	cfstrscs	mvf3, [r0, #-436]!	; 0xfffffe4c
     168:	74696c6d 	strbtvc	r6, [r9], #-3181	; 0xc6d
     16c:	2d656c74 	stclcs	12, cr6, [r5, #-464]!	; 0xfffffe30
     170:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     174:	2d206e61 	stccs	14, cr6, [r0, #-388]!	; 0xfffffe7c
     178:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
     17c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     180:	7570666d 	ldrbvc	r6, [r0, #-1645]!	; 0x66d
     184:	7670663d 			; <UNDEFINED> instruction: 0x7670663d
     188:	70732d34 	rsbsvc	r2, r3, r4, lsr sp
     18c:	3631642d 	ldrtcc	r6, [r1], -sp, lsr #8
     190:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     194:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xf6c
     198:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
     19c:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     1a0:	20706674 	rsbscs	r6, r0, r4, ror r6
     1a4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     1a8:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     1ac:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     1b0:	20393963 	eorscs	r3, r9, r3, ror #18
     1b4:	6166662d 	cmnvs	r6, sp, lsr #12
     1b8:	6d2d7473 	cfstrsvs	mvf7, [sp, #-460]!	; 0xfffffe34
     1bc:	20687461 	rsbcs	r7, r8, r1, ror #8
     1c0:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0x62d
     1c4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     1c8:	732d6e6f 	teqvc	sp, #1776	; 0x6f0
     1cc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     1d0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     1d4:	6164662d 	cmnvs	r4, sp, lsr #12
     1d8:	732d6174 	teqvc	sp, #116, 2
     1dc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     1e0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     1e4:	6f6e662d 	svcvs	0x006e662d
     1e8:	6d6f632d 	stclvs	3, cr6, [pc, #-180]!	; 13c <_Min_Heap_Size+0x13c>
     1ec:	206e6f6d 	rsbcs	r6, lr, sp, ror #30
     1f0:	61702d2d 	cmnvs	r0, sp, lsr #26
     1f4:	206d6172 	rsbcs	r6, sp, r2, ror r1
     1f8:	2d78616d 	ldfcse	f6, [r8, #-436]!	; 0xfffffe4c
     1fc:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     200:	692d656e 	pushvs	{r1, r2, r3, r5, r6, r8, sl, sp, lr}
     204:	736e736e 	cmnvc	lr, #-1207959551	; 0xb8000001
     208:	6e69732d 	cdpvs	3, 6, cr7, cr9, cr13, {1}
     20c:	3d656c67 	stclcc	12, cr6, [r5, #-412]!	; 0xfffffe64
     210:	30303031 	eorscc	r3, r0, r1, lsr r0
     214:	52534200 	subspl	r4, r3, #0, 4
     218:	52004852 	andpl	r4, r0, #5373952	; 0x520000
     21c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     220:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     224:	61727567 	cmnvs	r2, r7, ror #10
     228:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     22c:	444f4d00 	strbmi	r4, [pc], #-3328	; 234 <_Min_Heap_Size+0x234>
     230:	5f005245 	svcpl	0x00005245
     234:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     238:	745f3874 	ldrbvc	r3, [pc], #-2164	; 240 <_Min_Heap_Size+0x240>
     23c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     240:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     244:	535f6867 	cmppl	pc, #6750208	; 0x670000
     248:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     24c:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
     250:	5f303244 	svcpl	0x00303244
     254:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
     258:	6f437265 	svcvs	0x00437265
     25c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     260:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     264:	00666544 	rsbeq	r6, r6, r4, asr #10
     268:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
     26c:	435f3032 	cmpmi	pc, #50	; 0x32
     270:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     274:	61727567 	cmnvs	r2, r7, ror #10
     278:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     27c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     280:	544f5f4f 	strbpl	r5, [pc], #-3919	; 288 <_Min_Heap_Size+0x288>
     284:	5f657079 	svcpl	0x00657079
     288:	47005050 	smlsdmi	r0, r0, r0, r5
     28c:	534f4950 	movtpl	r4, #63824	; 0xf950
     290:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     294:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     298:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     29c:	46745f00 	ldrbtmi	r5, [r4], -r0, lsl #30
     2a0:	00746e6f 	rsbseq	r6, r4, pc, ror #28
     2a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     2a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     2ac:	61686320 	cmnvs	r8, r0, lsr #6
     2b0:	50470072 	subpl	r0, r7, r2, ror r0
     2b4:	505f4f49 	subspl	r4, pc, r9, asr #30
     2b8:	00645075 	rsbeq	r5, r4, r5, ror r0
     2bc:	39494c49 	stmdbcc	r9, {r0, r3, r6, sl, fp, lr}^
     2c0:	5f313433 	svcpl	0x00313433
     2c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     2c8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     2cc:	6f697461 	svcvs	0x00697461
     2d0:	6948006e 	stmdbvs	r8, {r1, r2, r3, r5, r6}^
     2d4:	61506867 	cmpvs	r0, r7, ror #16
     2d8:	69467373 	stmdbvs	r6, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     2dc:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     2e0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2e8 <_Min_Heap_Size+0x2e8>
     2e4:	65535f65 	ldrbvs	r5, [r3, #-3941]	; 0xf65
     2e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
     2ec:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     2f0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     2f4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     2f8:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     2fc:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     300:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     304:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     308:	5f4f4950 	svcpl	0x004f4950
     30c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     310:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     314:	6f697461 	svcvs	0x00697461
     318:	5047006e 	subpl	r0, r7, lr, rrx
     31c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     320:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     324:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     328:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     32c:	50686769 	rsbpl	r6, r8, r9, ror #14
     330:	46737361 	ldrbtmi	r7, [r3], -r1, ror #6
     334:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
     338:	75435f72 	strbvc	r5, [r3, #-3954]	; 0xf72
     33c:	66664f74 	uqsub16vs	r4, r6, r4
     340:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
     344:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     348:	73007963 	movwvc	r7, #2403	; 0x963
     34c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     350:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     354:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     358:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     35c:	6e450074 	mcrvs	0, 2, r0, cr5, cr4, {3}
     360:	6e616964 	cdpvs	9, 6, cr6, cr1, cr4, {3}
     364:	7373656e 	cmnvc	r3, #461373440	; 0x1b800000
     368:	6f682f00 	svcvs	0x00682f00
     36c:	632f656d 	teqvs	pc, #457179136	; 0x1b400000
     370:	68656968 	stmdavs	r5!, {r3, r5, r6, r8, fp, sp, lr}^
     374:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     378:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     37c:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     380:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     384:	334c2f79 	movtcc	r2, #53113	; 0xcf79
     388:	30324447 	eorscc	r4, r2, r7, asr #8
     38c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     390:	61465f4f 	cmpvs	r6, pc, asr #30
     394:	535f7473 	cmppl	pc, #1929379840	; 0x73000000
     398:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     39c:	53494400 	movtpl	r4, #37888	; 0x9400
     3a0:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     3a4:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xf00
     3a8:	5f747570 	svcpl	0x00747570
     3ac:	61746144 	cmnvs	r4, r4, asr #2
     3b0:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0x152
     3b4:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
     3b8:	5f303244 	svcpl	0x00303244
     3bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     3c0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     3c4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     3c8:	50470065 	subpl	r0, r7, r5, rrx
     3cc:	4c5f4f49 	mrrcmi	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     3d0:	535f776f 	cmppl	pc, #29097984	; 0x1bc0000
     3d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     3d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     3dc:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xf4f
     3e0:	6d756964 	ldclvs	9, cr6, [r5, #-400]!	; 0xfffffe70
     3e4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     3e8:	4f006465 	svcmi	0x00006465
     3ec:	45455053 	strbmi	r5, [r5, #-83]	; 0x53
     3f0:	48005244 	stmdami	r0, {r2, r6, r9, ip, lr}
     3f4:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     3f8:	61420074 	hvcvs	8196	; 0x2004
     3fc:	575f646e 	ldrbpl	r6, [pc, -lr, ror #8]
     400:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
     404:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     408:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     40c:	445f6450 	ldrbmi	r6, [pc], #-1104	; 414 <_Min_Stack_Size+0x14>
     410:	004e574f 	subeq	r5, lr, pc, asr #14
     414:	5f4d5449 	svcpl	0x004d5449
     418:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
     41c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     420:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     424:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     428:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
     42c:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
     430:	5047004c 	subpl	r0, r7, ip, asr #32
     434:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     438:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     43c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     440:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     444:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     448:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     44c:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
     450:	5f6c6c75 	svcpl	0x006c6c75
     454:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
     458:	78410065 	stmdavc	r1, {r0, r2, r5, r6}^
     45c:	455f7365 	ldrbmi	r7, [pc, #-869]	; ff <_Min_Heap_Size+0xff>
     460:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     464:	50470065 	subpl	r0, r7, r5, rrx
     468:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xf49
     46c:	545f6450 	ldrbpl	r6, [pc], #-1104	; 474 <_Min_Stack_Size+0x74>
     470:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     474:	4c006665 	stcmi	6, cr6, [r0], {101}	; 0x65
     478:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
     47c:	6c694630 	stclvs	6, cr4, [r9], #-192	; 0xffffff40
     480:	5f726574 	svcpl	0x00726574
     484:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     488:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     48c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     490:	53420065 	movtpl	r0, #8293	; 0x2065
     494:	004c5252 	subeq	r5, ip, r2, asr r2
     498:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
     49c:	63727300 	cmnvs	r2, #0, 6
     4a0:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
     4a4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     4a8:	4f495047 	svcmi	0x00495047
     4ac:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4b4 <_Min_Stack_Size+0xb4>
     4b0:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
     4b4:	504c3142 	subpl	r3, ip, r2, asr #2
     4b8:	00524e45 	subseq	r4, r2, r5, asr #28
     4bc:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     4c0:	00524746 	subseq	r4, r2, r6, asr #14
     4c4:	31425041 	cmpcc	r2, r1, asr #32
     4c8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     4cc:	42484100 	submi	r4, r8, #0, 2
     4d0:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     4d4:	42484100 	submi	r4, r8, #0, 2
     4d8:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     4dc:	44420052 	strbmi	r0, [r2], #-82	; 0x52
     4e0:	50005243 	andpl	r5, r0, r3, asr #4
     4e4:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     4e8:	47464353 	smlsldmi	r4, r6, r3, r3
     4ec:	57500052 			; <UNDEFINED> instruction: 0x57500052
     4f0:	79545f52 	ldmdbvc	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
     4f4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     4f8:	53530066 	cmppl	r3, #102	; 0x66
     4fc:	00524743 	subseq	r4, r2, r3, asr #14
     500:	53455348 	movtpl	r5, #21320	; 0x5348
     504:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     508:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
     50c:	4f432f62 	svcmi	0x00432f62
     510:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     514:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     518:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     51c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     520:	6174732f 	cmnvs	r4, pc, lsr #6
     524:	70757472 	rsbsvc	r7, r5, r2, ror r4
     528:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     52c:	5f6d6574 	svcpl	0x006d6574
     530:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     534:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     538:	00632e78 	rsbeq	r2, r3, r8, ror lr
     53c:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     540:	48410044 	stmdami	r1, {r2, r6}^
     544:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     548:	41005254 	tstmi	r0, r4, asr r2
     54c:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
     550:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     554:	53455200 	movtpl	r5, #20992	; 0x5200
     558:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     55c:	53003344 	movwpl	r3, #836	; 0x344
     560:	545f4243 	ldrbpl	r4, [pc], #-579	; 568 <_Min_Stack_Size+0x168>
     564:	00657079 	rsbeq	r7, r5, r9, ror r0
     568:	31425041 	cmpcc	r2, r1, asr #32
     56c:	00524e45 	subseq	r4, r2, r5, asr #28
     570:	434b4344 	movtmi	r4, #45892	; 0xb344
     574:	00524746 	subseq	r4, r2, r6, asr #14
     578:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
     57c:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
     580:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
     584:	41464200 	mrsmi	r4, (UNDEF: 102)
     588:	43520052 	cmpmi	r2, #82	; 0x52
     58c:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     590:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     594:	50410066 	subpl	r0, r1, r6, rrx
     598:	53523242 	cmppl	r2, #536870916	; 0x20000004
     59c:	43005254 	movwmi	r5, #596	; 0x254
     5a0:	00525346 	subseq	r5, r2, r6, asr #6
     5a4:	4354504f 	cmpmi	r4, #79	; 0x4f
     5a8:	70003152 	andvc	r3, r0, r2, asr r1
     5ac:	6f736c6c 	svcvs	0x00736c6c
     5b0:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     5b4:	42484100 	submi	r4, r8, #0, 2
     5b8:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
     5bc:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     5c0:	6c70006d 	ldclvs	0, cr0, [r0], #-436	; 0xfffffe4c
     5c4:	4100706c 	tstmi	r0, ip, rrx
     5c8:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
     5cc:	42504100 	subsmi	r4, r0, #0, 2
     5d0:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     5d4:	61745300 	cmnvs	r4, r0, lsl #6
     5d8:	70557472 	subsvc	r7, r5, r2, ror r4
     5dc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     5e0:	00726574 	rsbseq	r6, r2, r4, ror r5
     5e4:	53434853 	movtpl	r4, #14419	; 0x3853
     5e8:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     5ec:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     5f0:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xf43
     5f4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     5f8:	6470556b 	ldrbtvs	r5, [r0], #-1387	; 0x56b
     5fc:	00657461 	rsbeq	r7, r5, r1, ror #8
     600:	41464d4d 	cmpmi	r6, sp, asr #26
     604:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     608:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     60c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     610:	42504100 	subsmi	r4, r0, #0, 2
     614:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xc31
     618:	7000524e 	andvc	r5, r0, lr, asr #4
     61c:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
     620:	5456006f 	ldrbpl	r0, [r6], #-111	; 0x6f
     624:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     628:	00524153 	subseq	r4, r2, r3, asr r1
     62c:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     630:	73795300 	cmnvc	r9, #0, 6
     634:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     638:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     63c:	6b636f6c 	blvs	18dc3f4 <_Min_Stack_Size+0x18dbff4>
     640:	53464800 	movtpl	r4, #26624	; 0x6800
     644:	48410052 	stmdami	r1, {r1, r4, r6}^
     648:	504c3242 	subpl	r3, ip, r2, asr #4
     64c:	00524e45 	subseq	r4, r2, r5, asr #28
     650:	52464d4d 	subpl	r4, r6, #4928	; 0x1340
     654:	53455200 	movtpl	r5, #20992	; 0x5200
     658:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     65c:	52003044 	andpl	r3, r0, #68	; 0x44
     660:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     664:	31444556 	cmpcc	r4, r6, asr r5
     668:	53455200 	movtpl	r5, #20992	; 0x5200
     66c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     670:	53003244 	movwpl	r3, #580	; 0x244
     674:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     678:	6f6c4373 	svcvs	0x006c4373
     67c:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
     680:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     684:	34444556 	strbcc	r4, [r4], #-1366	; 0x556
     688:	53455200 	movtpl	r5, #20992	; 0x5200
     68c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     690:	52003544 	andpl	r3, r0, #68, 10	; 0x11000000
     694:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     698:	36444556 			; <UNDEFINED> instruction: 0x36444556
     69c:	42484100 	submi	r4, r8, #0, 2
     6a0:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     6a4:	53464100 	movtpl	r4, #24832	; 0x6100
     6a8:	48410052 	stmdami	r1, {r1, r4, r6}^
     6ac:	53523342 	cmppl	r2, #134217729	; 0x8000001
     6b0:	46005254 			; <UNDEFINED> instruction: 0x46005254
     6b4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     6b8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     6bc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     6c0:	4c4c5000 	marmi	acc0, r5, ip
     6c4:	43494153 	movtmi	r4, #37203	; 0x9153
     6c8:	00524746 	subseq	r4, r2, r6, asr #14
     6cc:	43415043 	movtmi	r5, #4163	; 0x1043
     6d0:	50410052 	subpl	r0, r1, r2, asr r0
     6d4:	504c3242 	subpl	r3, ip, r2, asr #4
     6d8:	00524e45 	subseq	r4, r2, r5, asr #28
     6dc:	4354504f 	cmpmi	r4, #79	; 0x4f
     6e0:	41490052 	qdaddmi	r0, r2, r9
     6e4:	4e005242 	cdpmi	2, 0, cr5, cr0, cr2, {2}
     6e8:	5f434956 	svcpl	0x00434956
     6ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     6f0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     6f4:	00666544 	rsbeq	r6, r6, r4, asr #10
     6f8:	4349564e 	movtmi	r5, #38478	; 0x964e
     6fc:	5152495f 	cmppl	r2, pc, asr r9
     700:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     704:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
     708:	5300646d 	movwpl	r6, #1133	; 0x46d
     70c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     710:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     714:	6f534b4c 	svcvs	0x00534b4c
     718:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     71c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     720:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     724:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     728:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     72c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     730:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     734:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     738:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     73c:	0070756f 	rsbseq	r7, r0, pc, ror #10
     740:	4349564e 	movtmi	r5, #38478	; 0x964e
     744:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     748:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
     74c:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
     750:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
     754:	654e0052 	strbvs	r0, [lr, #-82]	; 0x52
     758:	61745377 	cmnvs	r4, r7, ror r3
     75c:	53006574 	movwpl	r6, #1396	; 0x574
     760:	00524954 	subseq	r4, r2, r4, asr r9
     764:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
     768:	31444556 	cmpcc	r4, r6, asr r5
     76c:	52544300 	subspl	r4, r4, #0, 6
     770:	564e004c 	strbpl	r0, [lr], -ip, asr #32
     774:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     778:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0x465
     77c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
     780:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     784:	43490065 	movtmi	r0, #36965	; 0x9065
     788:	43005250 	movwmi	r5, #592	; 0x250
     78c:	42494c41 	submi	r4, r9, #16640	; 0x4100
     790:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
     794:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     798:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
     79c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7a0:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     7a4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     7a8:	6f43504c 	svcvs	0x0043504c
     7ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     7b0:	73795300 	cmnvc	r9, #0, 6
     7b4:	6b636954 	blvs	18dad0c <_Min_Stack_Size+0x18da90c>
     7b8:	4b4c435f 	blmi	131153c <_Min_Stack_Size+0x131113c>
     7bc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     7c0:	6f436563 	svcvs	0x00436563
     7c4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     7c8:	73795300 	cmnvc	r9, #0, 6
     7cc:	6b636954 	blvs	18dad24 <_Min_Stack_Size+0x18da924>
     7d0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     7d4:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
     7d8:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
     7dc:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     7e0:	53490079 	movtpl	r0, #36985	; 0x9079
     7e4:	4e005250 	mcrmi	2, 0, r5, cr0, cr0, {2}
     7e8:	5f434956 	svcpl	0x00434956
     7ec:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     7f0:	6e6e6168 	powvsez	f6, f6, #0.0
     7f4:	4e006c65 	cdpmi	12, 0, cr6, cr0, cr5, {3}
     7f8:	5f434956 	svcpl	0x00434956
     7fc:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     800:	6e6e6168 	powvsez	f6, f6, #0.0
     804:	75536c65 	ldrbvc	r6, [r3, #-3173]	; 0xc65
     808:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
     80c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     810:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
     814:	545f4349 	ldrbpl	r4, [pc], #-841	; 81c <_Min_Stack_Size+0x41c>
     818:	00657079 	rsbeq	r7, r5, r9, ror r0
     81c:	4349564e 	movtmi	r5, #38478	; 0x964e
     820:	5152495f 	cmppl	r2, pc, asr r9
     824:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     828:	506c656e 	rsbpl	r6, ip, lr, ror #10
     82c:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     830:	6f697470 	svcvs	0x00697470
     834:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     838:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     83c:	75460079 	strbvc	r0, [r6, #-121]	; 0x79
     840:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     844:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
     848:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     84c:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
     850:	4f432f62 	svcmi	0x00432f62
     854:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     858:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     85c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     860:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     864:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     868:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     86c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     870:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     874:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     878:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     87c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     880:	445f6870 	ldrbmi	r6, [pc], #-2160	; 888 <_Min_Stack_Size+0x488>
     884:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     888:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     88c:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     890:	632e6373 	teqvs	lr, #-872415231	; 0xcc000001
     894:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     898:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
     89c:	61547463 	cmpvs	r4, r3, ror #8
     8a0:	4f4c0062 	svcmi	0x004c0062
     8a4:	4c004441 	cfstrsmi	mvf4, [r0], {65}	; 0x41
     8a8:	6f50776f 	svcvs	0x0050776f
     8ac:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
     8b0:	0065646f 	rsbeq	r6, r5, pc, ror #8
     8b4:	4349564e 	movtmi	r5, #38478	; 0x964e
     8b8:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     8bc:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     8c0:	6f724779 	svcvs	0x00724779
     8c4:	6f437075 	svcvs	0x00437075
     8c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8cc:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     8d0:	00736f70 	rsbseq	r6, r3, r0, ror pc
     8d4:	5f746942 	svcpl	0x00746942
     8d8:	00544553 	subseq	r4, r4, r3, asr r5
     8dc:	4f495047 	svcmi	0x00495047
     8e0:	6165525f 	cmnvs	r5, pc, asr r2
     8e4:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
     8e8:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
     8ec:	00617461 	rsbeq	r7, r1, r1, ror #8
     8f0:	4f495047 	svcmi	0x00495047
     8f4:	0046415f 	subeq	r4, r6, pc, asr r1
     8f8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     8fc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     900:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xf4f
     904:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     908:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     90c:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
     910:	006c6156 	rsbeq	r6, ip, r6, asr r1
     914:	5f746942 	svcpl	0x00746942
     918:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     91c:	50470054 	subpl	r0, r7, r4, asr r0
     920:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     924:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     928:	00746942 	rsbseq	r6, r4, r2, asr #18
     92c:	4f495047 	svcmi	0x00495047
     930:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     934:	73746942 	cmnvc	r4, #1081344	; 0x108000
     938:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     93c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     940:	47007469 	strmi	r7, [r0, -r9, ror #8]
     944:	5f4f4950 	svcpl	0x004f4950
     948:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     94c:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     950:	50470073 	subpl	r0, r7, r3, ror r0
     954:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 95c <_Min_Stack_Size+0x55c>
     958:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     95c:	50470074 	subpl	r0, r7, r4, ror r0
     960:	525f4f49 	subspl	r4, pc, #292	; 0x124
     964:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     968:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
     96c:	61746144 	cmnvs	r4, r4, asr #2
     970:	00746942 	rsbseq	r6, r4, r2, asr #18
     974:	73746962 	cmnvc	r4, #1605632	; 0x188000
     978:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     97c:	50470073 	subpl	r0, r7, r3, ror r0
     980:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     984:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     988:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     98c:	6f500074 	svcvs	0x00500074
     990:	61567472 	cmpvs	r6, r2, ror r4
     994:	5047006c 	subpl	r0, r7, ip, rrx
     998:	505f4f49 	subspl	r4, pc, r9, asr #30
     99c:	6f536e69 	svcvs	0x00536e69
     9a0:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     9a4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9a8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     9ac:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
     9b0:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
     9b4:	00617461 	rsbeq	r7, r1, r1, ror #8
     9b8:	4f495047 	svcmi	0x00495047
     9bc:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     9c0:	6b636f4c 	blvs	18dc6f8 <_Min_Stack_Size+0x18dc2f8>
     9c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     9c8:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     9cc:	63417469 	movtvs	r7, #5225	; 0x1469
     9d0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     9d4:	72756300 	rsbsvc	r6, r5, #0, 6
     9d8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     9dc:	006e6970 	rsbeq	r6, lr, r0, ror r9
     9e0:	4f495047 	svcmi	0x00495047
     9e4:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     9e8:	47006574 	smlsdxmi	r0, r4, r5, r6
     9ec:	5f4f4950 	svcpl	0x004f4950
     9f0:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     9f4:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     9f8:	74007374 	strvc	r7, [r0], #-884	; 0x374
     9fc:	5f706d65 	svcpl	0x00706d65
     a00:	696c0032 	stmdbvs	ip!, {r1, r4, r5}^
     a04:	4f432f62 	svcmi	0x00432f62
     a08:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     a0c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     a10:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     a14:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a18:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     a1c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     a20:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     a24:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     a28:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     a2c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     a30:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a34:	445f6870 	ldrbmi	r6, [pc], #-2160	; a3c <_Min_Stack_Size+0x63c>
     a38:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     a3c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     a40:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
     a44:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a48:	5f787834 	svcpl	0x00787834
     a4c:	6f697067 	svcvs	0x00697067
     a50:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
     a54:	5f4f4950 	svcpl	0x004f4950
     a58:	416e6950 	cmnmi	lr, r0, asr r9
     a5c:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
     a60:	00676966 	rsbeq	r6, r7, r6, ror #18
     a64:	4f495047 	svcmi	0x00495047
     a68:	6165525f 	cmnvs	r5, pc, asr r2
     a6c:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
     a70:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
     a74:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
     a78:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     a7c:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     a80:	004b4c43 	subeq	r4, fp, r3, asr #24
     a84:	5f434352 	svcpl	0x00434352
     a88:	0045534c 	subeq	r5, r5, ip, asr #6
     a8c:	5f434352 	svcpl	0x00434352
     a90:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     a94:	6d434941 	stclvs	9, cr4, [r3, #-260]	; 0xfffffefc
     a98:	43520064 	cmpmi	r2, #100	; 0x64
     a9c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     aa0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     aa4:	51766944 	cmnpl	r6, r4, asr #18
     aa8:	43435200 	movtmi	r5, #12800	; 0x3200
     aac:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     ab0:	44494153 	strbmi	r4, [r9], #-339	; 0x153
     ab4:	00527669 	subseq	r7, r2, r9, ror #12
     ab8:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     abc:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0x375
     ac0:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
     ac4:	4b4c4353 	blmi	1311818 <_Min_Stack_Size+0x1311418>
     ac8:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
     acc:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     ad0:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
     ad4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 9d0 <_Min_Stack_Size+0x5d0>
     ad8:	53314f43 	teqpl	r1, #268	; 0x10c
     adc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     ae0:	43520065 	cmpmi	r2, #101	; 0x65
     ae4:	50415f43 	subpl	r5, r1, r3, asr #30
     ae8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
     aec:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     af0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     af4:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
     af8:	4c4c5000 	marmi	acc0, r5, ip
     afc:	4352004e 	cmpmi	r2, #78	; 0x4e
     b00:	41535f43 	cmpmi	r3, r3, asr #30
     b04:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     b08:	43494153 	movtmi	r4, #37203	; 0x9153
     b0c:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     b10:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     b14:	00676966 	rsbeq	r6, r7, r6, ror #18
     b18:	504c4c50 	subpl	r4, ip, r0, asr ip
     b1c:	4c4c5000 	marmi	acc0, r5, ip
     b20:	43520051 	cmpmi	r2, #81	; 0x51
     b24:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     b28:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b2c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
     b30:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     b34:	00746942 	rsbseq	r6, r4, r2, asr #18
     b38:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]	; 0xfffffec0
     b3c:	43435200 	movtmi	r5, #12800	; 0x3200
     b40:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     b44:	72655031 	rsbvc	r5, r5, #49	; 0x31
     b48:	00687069 	rsbeq	r7, r8, r9, rrx
     b4c:	5f434352 	svcpl	0x00434352
     b50:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     b54:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
     b58:	415f4343 	cmpmi	pc, r3, asr #6
     b5c:	50324250 	eorspl	r4, r2, r0, asr r2
     b60:	70697265 	rsbvc	r7, r9, r5, ror #4
     b64:	6f6c4368 	svcvs	0x006c4368
     b68:	504c6b63 	subpl	r6, ip, r3, ror #22
     b6c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     b70:	00646d43 	rsbeq	r6, r4, r3, asr #26
     b74:	5f434352 	svcpl	0x00434352
     b78:	61656c43 	cmnvs	r5, r3, asr #24
     b7c:	616c4672 	smcvs	50274	; 0xc462
     b80:	43520067 	cmpmi	r2, #103	; 0x67
     b84:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
     b88:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     b8c:	00676572 	rsbeq	r6, r7, r2, ror r5
     b90:	4b4c4350 	blmi	13118d8 <_Min_Stack_Size+0x13114d8>
     b94:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
     b98:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     b9c:	0079636e 	rsbseq	r6, r9, lr, ror #6
     ba0:	5f434352 	svcpl	0x00434352
     ba4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     ba8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     bac:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     bb0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     bb4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     bb8:	505f4343 	subspl	r4, pc, r3, asr #6
     bbc:	314b4c43 	cmpcc	fp, r3, asr #24
     bc0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     bc4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     bc8:	415f4343 	cmpmi	pc, r3, asr #6
     bcc:	50334248 	eorspl	r4, r3, r8, asr #4
     bd0:	70697265 	rsbvc	r7, r9, r5, ror #4
     bd4:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     bd8:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     bdc:	43520064 	cmpmi	r2, #100	; 0x64
     be0:	41535f43 	cmpmi	r3, r3, asr #30
     be4:	6f6c4249 	svcvs	0x006c4249
     be8:	43416b63 	movtmi	r6, #7011	; 0x1b63
     bec:	6f434b4c 	svcvs	0x00434b4c
     bf0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     bf4:	43435200 	movtmi	r5, #12800	; 0x3200
     bf8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     bfc:	72655031 	rsbvc	r5, r5, #49	; 0x31
     c00:	52687069 	rsbpl	r7, r8, #105	; 0x69
     c04:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     c08:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c0c:	5f434352 	svcpl	0x00434352
     c10:	4b4c4348 	blmi	1311938 <_Min_Stack_Size+0x1311538>
     c14:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     c18:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     c1c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     c20:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     c24:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     c28:	00676966 	rsbeq	r6, r7, r6, ror #18
     c2c:	5f434352 	svcpl	0x00434352
     c30:	4345534c 	movtmi	r5, #21324	; 0x534c
     c34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c38:	43520067 	cmpmi	r2, #103	; 0x67
     c3c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     c40:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
     c44:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
     c48:	756b6361 	strbvc	r6, [fp, #-865]!	; 0x361
     c4c:	73655270 	cmnvc	r5, #112, 4
     c50:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     c54:	72450064 	subvc	r0, r5, #100	; 0x64
     c58:	53726f72 	cmnpl	r2, #456	; 0x1c8
     c5c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     c60:	43520073 	cmpmi	r2, #115	; 0x73
     c64:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     c68:	756f534c 	strbvc	r5, [pc, #-844]!	; 924 <_Min_Stack_Size+0x524>
     c6c:	00656372 	rsbeq	r6, r5, r2, ror r3
     c70:	5f434352 	svcpl	0x00434352
     c74:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     c78:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     c7c:	756f534b 	strbvc	r5, [pc, #-843]!	; 939 <_Min_Stack_Size+0x539>
     c80:	00656372 	rsbeq	r6, r5, r2, ror r3
     c84:	5f434352 	svcpl	0x00434352
     c88:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     c8c:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     c90:	74534553 	ldrbvc	r4, [r3], #-1363	; 0x553
     c94:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
     c98:	43480070 	movtmi	r0, #32880	; 0x8070
     c9c:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
     ca0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
     ca4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     ca8:	42504100 	subsmi	r4, r0, #0, 2
     cac:	50424841 	subpl	r4, r2, r1, asr #16
     cb0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     cb4:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     cb8:	43520065 	cmpmi	r2, #101	; 0x65
     cbc:	50415f43 	subpl	r5, r1, r3, asr #30
     cc0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
     cc4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     cc8:	43435200 	movtmi	r5, #12800	; 0x3200
     ccc:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     cd0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     cd4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     cd8:	43520067 	cmpmi	r2, #103	; 0x67
     cdc:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     ce0:	6f43314f 	svcvs	0x0043314f
     ce4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ce8:	43435200 	movtmi	r5, #12800	; 0x3200
     cec:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     cf0:	004b4c43 	subeq	r4, fp, r3, asr #24
     cf4:	5f434352 	svcpl	0x00434352
     cf8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     cfc:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
     d00:	72700064 	rsbsvc	r0, r0, #100	; 0x64
     d04:	00637365 	rsbeq	r7, r3, r5, ror #6
     d08:	5f434352 	svcpl	0x00434352
     d0c:	43435452 	movtmi	r5, #13394	; 0x3452
     d10:	6f534b4c 	svcvs	0x00534b4c
     d14:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     d18:	43435200 	movtmi	r5, #12800	; 0x3200
     d1c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     d20:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     d24:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
     d28:	756f534b 	strbvc	r5, [pc, #-843]!	; 9e5 <_Min_Stack_Size+0x5e5>
     d2c:	00656372 	rsbeq	r6, r5, r2, ror r3
     d30:	5f434352 	svcpl	0x00434352
     d34:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     d38:	6b636f6c 	blvs	18dcaf0 <_Min_Stack_Size+0x18dc6f0>
     d3c:	4b4c4342 	blmi	1311a4c <_Min_Stack_Size+0x131164c>
     d40:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     d44:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     d48:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     d4c:	43434454 	movtmi	r4, #13396	; 0x3454
     d50:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
     d54:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     d58:	00676966 	rsbeq	r6, r7, r6, ror #18
     d5c:	5f434352 	svcpl	0x00434352
     d60:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     d64:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     d68:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     d6c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     d70:	646f4d50 	strbtvs	r4, [pc], #-3408	; d78 <_Min_Stack_Size+0x978>
     d74:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
     d78:	43435200 	movtmi	r5, #12800	; 0x3200
     d7c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     d80:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     d84:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     d88:	43520067 	cmpmi	r2, #103	; 0x67
     d8c:	53485f43 	movtpl	r5, #36675	; 0x8f43
     d90:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
     d94:	43435200 	movtmi	r5, #12800	; 0x3200
     d98:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     d9c:	72655032 	rsbvc	r5, r5, #50	; 0x32
     da0:	00687069 	rsbeq	r7, r8, r9, rrx
     da4:	5f434352 	svcpl	0x00434352
     da8:	33424841 	movtcc	r4, #10305	; 0x2841
     dac:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     db0:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     db4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; cb0 <_Min_Stack_Size+0x8b0>
     db8:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xf43
     dbc:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
     dc0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     dc4:	4c504941 	mrrcmi	9, 4, r4, r0, cr1
     dc8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     dcc:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xc43
     dd0:	6f437669 	svcvs	0x00437669
     dd4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     dd8:	43435200 	movtmi	r5, #12800	; 0x3200
     ddc:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     de0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     de4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     de8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     dec:	6b636f6c 	blvs	18dcba4 <_Min_Stack_Size+0x18dc7a4>
     df0:	75636553 	strbvc	r6, [r3, #-1363]!	; 0x553
     df4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     df8:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     dfc:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
     e00:	43520064 	cmpmi	r2, #100	; 0x64
     e04:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     e08:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     e0c:	51766944 	cmnpl	r6, r4, asr #18
     e10:	43435200 	movtmi	r5, #12800	; 0x3200
     e14:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     e18:	43494153 	movtmi	r4, #37203	; 0x9153
     e1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     e20:	43520067 	cmpmi	r2, #103	; 0x67
     e24:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     e28:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     e2c:	43520076 	cmpmi	r2, #118	; 0x76
     e30:	50415f43 	subpl	r5, r1, r3, asr #30
     e34:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     e38:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e3c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     e40:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
     e44:	43435200 	movtmi	r5, #12800	; 0x3200
     e48:	4f434d5f 	svcmi	0x00434d5f
     e4c:	756f5332 	strbvc	r5, [pc, #-818]!	; b22 <_Min_Stack_Size+0x722>
     e50:	00656372 	rsbeq	r6, r5, r2, ror r3
     e54:	5f434352 	svcpl	0x00434352
     e58:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     e5c:	6f534b4c 	svcvs	0x00534b4c
     e60:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     e64:	43435200 	movtmi	r5, #12800	; 0x3200
     e68:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     e6c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     e70:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e74:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     e78:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     e7c:	6f434553 	svcvs	0x00434553
     e80:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e84:	43435200 	movtmi	r5, #12800	; 0x3200
     e88:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     e8c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     e90:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     e94:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     e98:	00676966 	rsbeq	r6, r7, r6, ror #18
     e9c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     ea0:	004e4941 	subeq	r4, lr, r1, asr #18
     ea4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     ea8:	00514941 	subseq	r4, r1, r1, asr #18
     eac:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     eb0:	00524941 	subseq	r4, r2, r1, asr #18
     eb4:	5f434352 	svcpl	0x00434352
     eb8:	434d4954 	movtmi	r4, #55636	; 0xd954
     ebc:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     ec0:	61637365 	cmnvs	r3, r5, ror #6
     ec4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ec8:	5f434352 	svcpl	0x00434352
     ecc:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     ed0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     ed4:	415f4343 	cmpmi	pc, r3, asr #6
     ed8:	50314248 	eorspl	r4, r1, r8, asr #4
     edc:	70697265 	rsbvc	r7, r9, r5, ror #4
     ee0:	6f6c4368 	svcvs	0x006c4368
     ee4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     ee8:	43520064 	cmpmi	r2, #100	; 0x64
     eec:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     ef0:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     ef4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ef8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     efc:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
     f00:	43435200 	movtmi	r5, #12800	; 0x3200
     f04:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f08:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f0c:	43687069 	cmnmi	r8, #105	; 0x69
     f10:	6b636f6c 	blvs	18dccc8 <_Min_Stack_Size+0x18dc8c8>
     f14:	6f4d504c 	svcvs	0x004d504c
     f18:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     f1c:	43520064 	cmpmi	r2, #100	; 0x64
     f20:	43505f43 	cmpmi	r0, #268	; 0x10c
     f24:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     f28:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f2c:	43520067 	cmpmi	r2, #103	; 0x67
     f30:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     f34:	4b4c4353 	blmi	1311c88 <_Min_Stack_Size+0x1311888>
     f38:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     f3c:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     f40:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f44:	50004553 	andpl	r4, r0, r3, asr r5
     f48:	314b4c43 	cmpcc	fp, r3, asr #24
     f4c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
     f50:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     f54:	6c007963 	stcvs	9, cr7, [r0], {99}	; 0x63
     f58:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
     f5c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     f60:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     f64:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     f68:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     f6c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
     f70:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     f74:	2f736569 	svccs	0x00736569
     f78:	334d5453 	movtcc	r5, #54355	; 0xd453
     f7c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     f80:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     f84:	72655064 	rsbvc	r5, r5, #100	; 0x64
     f88:	5f687069 	svcpl	0x00687069
     f8c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     f90:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
     f94:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
     f98:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     f9c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     fa0:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     fa4:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
     fa8:	415f4343 	cmpmi	pc, r3, asr #6
     fac:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     fb0:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
     fb4:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
     fb8:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
     fbc:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
     fc0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
     fc4:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0x800
     fc8:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     fcc:	50007375 	andpl	r7, r0, r5, ror r3
     fd0:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     fd4:	52004e53 	andpl	r4, r0, #1328	; 0x530
     fd8:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     fdc:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
     fe0:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     fe4:	71657246 	cmnvc	r5, r6, asr #4
     fe8:	43435200 	movtmi	r5, #12800	; 0x3200
     fec:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     ff0:	72655032 	rsbvc	r5, r5, #50	; 0x32
     ff4:	43687069 	cmnmi	r8, #105	; 0x69
     ff8:	6b636f6c 	blvs	18dcdb0 <_Min_Stack_Size+0x18dc9b0>
     ffc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1000:	5f434352 	svcpl	0x00434352
    1004:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1008:	50007469 	andpl	r7, r0, r9, ror #8
    100c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1010:	50005153 	andpl	r5, r0, r3, asr r1
    1014:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    1018:	52005253 	andpl	r5, r0, #805306373	; 0x30000005
    101c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1020:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    1024:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1028:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    102c:	415f4343 	cmpmi	pc, r3, asr #6
    1030:	50334248 	eorspl	r4, r3, r8, asr #4
    1034:	70697265 	rsbvc	r7, r9, r5, ror #4
    1038:	6f6c4368 	svcvs	0x006c4368
    103c:	504c6b63 	subpl	r6, ip, r3, ror #22
    1040:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1044:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1048:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    104c:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
    1050:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1054:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1058:	415f4343 	cmpmi	pc, r3, asr #6
    105c:	50324250 	eorspl	r4, r2, r0, asr r2
    1060:	70697265 	rsbvc	r7, r9, r5, ror #4
    1064:	43520068 	cmpmi	r2, #104	; 0x68
    1068:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    106c:	4b4c434d 	blmi	1311da8 <_Min_Stack_Size+0x13119a8>
    1070:	73657250 	cmnvc	r5, #80, 4
    1074:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1078:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    107c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1080:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    1084:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1088:	00676966 	rsbeq	r6, r7, r6, ror #18
    108c:	5f434352 	svcpl	0x00434352
    1090:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    1094:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1098:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    109c:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    10a0:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    10a4:	43520064 	cmpmi	r2, #100	; 0x64
    10a8:	50415f43 	subpl	r5, r1, r3, asr #30
    10ac:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    10b0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10b4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10b8:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    10bc:	43435200 	movtmi	r5, #12800	; 0x3200
    10c0:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    10c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    10c8:	55530067 	ldrbpl	r0, [r3, #-103]	; 0x67
    10cc:	53454343 	movtpl	r4, #21315	; 0x5343
    10d0:	43520053 	cmpmi	r2, #83	; 0x53
    10d4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    10d8:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    10dc:	00676966 	rsbeq	r6, r7, r6, ror #18
    10e0:	5f434352 	svcpl	0x00434352
    10e4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10e8:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    10ec:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    10f0:	43520066 	cmpmi	r2, #102	; 0x66
    10f4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10f8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    10fc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1100:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1104:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1108:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    110c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1110:	415f4343 	cmpmi	pc, r3, asr #6
    1114:	50334248 	eorspl	r4, r3, r8, asr #4
    1118:	70697265 	rsbvc	r7, r9, r5, ror #4
    111c:	6f6c4368 	svcvs	0x006c4368
    1120:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1124:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
    1128:	65676574 	strbvs	r6, [r7, #-1396]!	; 0x574
    112c:	76696472 			; <UNDEFINED> instruction: 0x76696472
    1130:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1134:	41535500 	cmpmi	r3, r0, lsl #10
    1138:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    113c:	00414850 	subeq	r4, r1, r0, asr r8
    1140:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    1144:	41535500 	cmpmi	r3, r0, lsl #10
    1148:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    114c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1150:	57726576 			; <UNDEFINED> instruction: 0x57726576
    1154:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1158:	646d4370 	strbtvs	r4, [sp], #-880	; 0x370
    115c:	41535500 	cmpmi	r3, r0, lsl #10
    1160:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1164:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1168:	61637365 	cmnvs	r3, r5, ror #6
    116c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1170:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1174:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1178:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    117c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1180:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1184:	61657242 	cmnvs	r5, r2, asr #4
    1188:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    118c:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    1190:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1194:	53550068 	cmppl	r5, #104	; 0x68
    1198:	5f545241 	svcpl	0x00545241
    119c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    11a0:	00666544 	rsbeq	r6, r6, r4, asr #10
    11a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11a8:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    11ac:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    11b0:	55007374 	strpl	r7, [r0, #-884]	; 0x374
    11b4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11b8:	6f6c435f 	svcvs	0x006c435f
    11bc:	6e496b63 	vmlsvs.f64	d22, d9, d19
    11c0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    11c4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    11c8:	53550066 	cmppl	r5, #102	; 0x66
    11cc:	5f545241 	svcpl	0x00545241
    11d0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    11d4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11d8:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    11dc:	6144646e 	cmpvs	r4, lr, ror #8
    11e0:	55006174 	strpl	r6, [r0, #-372]	; 0x174
    11e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11e8:	6b61575f 	blvs	1856f6c <_Min_Stack_Size+0x1856b6c>
    11ec:	00705565 	rsbseq	r5, r0, r5, ror #10
    11f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11f4:	6f575f54 	svcvs	0x00575f54
    11f8:	654c6472 	strbvs	r6, [ip, #-1138]	; 0x472
    11fc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1200:	41535500 	cmpmi	r3, r0, lsl #10
    1204:	445f5452 	ldrbmi	r5, [pc], #-1106	; 120c <_Min_Stack_Size+0xe0c>
    1208:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    120c:	53550064 	cmppl	r5, #100	; 0x64
    1210:	5f545241 	svcpl	0x00545241
    1214:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    1218:	00746942 	rsbseq	r6, r4, r2, asr #18
    121c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1220:	61425f54 	cmpvs	r2, r4, asr pc
    1224:	61526475 	cmpvs	r2, r5, ror r4
    1228:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
    122c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1230:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    1234:	646f4d41 	strbtvs	r4, [pc], #-3393	; 123c <_Min_Stack_Size+0xe3c>
    1238:	70610065 	rsbvc	r0, r1, r5, rrx
    123c:	6f6c6362 	svcvs	0x006c6362
    1240:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    1244:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1248:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    124c:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    1250:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1254:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1258:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    125c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1260:	6175475f 	cmnvs	r5, pc, asr r7
    1264:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    1268:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    126c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1270:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1274:	61657242 	cmnvs	r5, r2, asr #4
    1278:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    127c:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    1280:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1284:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    1288:	00676966 	rsbeq	r6, r7, r6, ror #18
    128c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1290:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    1294:	55004741 	strpl	r4, [r0, #-1857]	; 0x741
    1298:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    129c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    12a0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    12a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    12a8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    12ac:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    12b0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    12b4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    12b8:	53550074 	cmppl	r5, #116	; 0x74
    12bc:	5f545241 	svcpl	0x00545241
    12c0:	69726150 	ldmdbvs	r2!, {r4, r6, r8, sp, lr}^
    12c4:	55007974 	strpl	r7, [r0, #-2420]	; 0x974
    12c8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    12cc:	6f6c435f 	svcvs	0x006c435f
    12d0:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xb63
    12d4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    12d8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    12dc:	61737500 	cmnvs	r3, r0, lsl #10
    12e0:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    12e4:	00657361 	rsbeq	r7, r5, r1, ror #6
    12e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    12ec:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    12f0:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    12f4:	0067616c 	rsbeq	r6, r7, ip, ror #2
    12f8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    12fc:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    1300:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    1304:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1308:	41535500 	cmpmi	r3, r0, lsl #10
    130c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1310:	75477465 	strbvc	r7, [r7, #-1125]	; 0x465
    1314:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    1318:	00656d69 	rsbeq	r6, r5, r9, ror #26
    131c:	2f62696c 	svccs	0x0062696c
    1320:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    1324:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 1218 <_Min_Stack_Size+0xe18>
    1328:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    132c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1330:	4c2f3446 	cfstrsmi	mvf3, [pc], #-280	; 1220 <_Min_Stack_Size+0xe20>
    1334:	61726269 	cmnvs	r2, r9, ror #4
    1338:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    133c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1340:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1344:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1348:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    134c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1350:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1354:	2f726576 	svccs	0x00726576
    1358:	2f637273 	svccs	0x00637273
    135c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1360:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1364:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1368:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    136c:	53550063 	cmppl	r5, #99	; 0x63
    1370:	5f545241 	svcpl	0x00545241
    1374:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    1378:	61657242 	cmnvs	r5, r2, asr #4
    137c:	5355006b 	cmppl	r5, #107	; 0x6b
    1380:	5f545241 	svcpl	0x00545241
    1384:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1388:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    138c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1390:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1394:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    1398:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    139c:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    13a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13a4:	414d445f 	cmpmi	sp, pc, asr r4
    13a8:	00716552 	rsbseq	r6, r1, r2, asr r5
    13ac:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    13b0:	55007854 	strpl	r7, [r0, #-2132]	; 0x854
    13b4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13b8:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xf5f
    13bc:	4d746942 	ldclmi	9, cr6, [r4, #-264]!	; 0xfffffef8
    13c0:	6f687465 	svcvs	0x00687465
    13c4:	646d4364 	strbtvs	r4, [sp], #-868	; 0x364
    13c8:	41535500 	cmpmi	r3, r0, lsl #10
    13cc:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    13d0:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
    13d4:	46657261 	strbtmi	r7, [r5], -r1, ror #4
    13d8:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    13dc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    13e0:	55006c6f 	strpl	r6, [r0, #-3183]	; 0xc6f
    13e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13e8:	616d535f 	cmnvs	sp, pc, asr r3
    13ec:	61437472 	hvcvs	14146	; 0x3742
    13f0:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    13f4:	53550064 	cmppl	r5, #100	; 0x64
    13f8:	5f545241 	svcpl	0x00545241
    13fc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1400:	41535500 	cmpmi	r3, r0, lsl #10
    1404:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    1408:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    140c:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    1410:	6f707469 	svcvs	0x00707469
    1414:	53550073 	cmppl	r5, #115	; 0x73
    1418:	5f545241 	svcpl	0x00545241
    141c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    1420:	706d6153 	rsbvc	r6, sp, r3, asr r1
    1424:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    1428:	646d4338 	strbtvs	r4, [sp], #-824	; 0x338
    142c:	41535500 	cmpmi	r3, r0, lsl #10
    1430:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    1434:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    1438:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    143c:	55007375 	strpl	r7, [r0, #-885]	; 0x375
    1440:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1444:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    1448:	00646d43 	rsbeq	r6, r4, r3, asr #26
    144c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1450:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    1454:	6f434144 	svcvs	0x00434144
    1458:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    145c:	41535500 	cmpmi	r3, r0, lsl #10
    1460:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1464:	6b636f6c 	blvs	18dd21c <_Min_Stack_Size+0x18dce1c>
    1468:	41535500 	cmpmi	r3, r0, lsl #10
    146c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1470:	43414472 	movtmi	r4, #5234	; 0x1472
    1474:	6600646d 	strvs	r6, [r0], -sp, ror #8
    1478:	74636172 	strbtvc	r6, [r3], #-370	; 0x172
    147c:	616e6f69 	cmnvs	lr, r9, ror #30
    1480:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    1484:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1488:	41535500 	cmpmi	r3, r0, lsl #10
    148c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1490:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0x16d
    1494:	64726143 	ldrbtvs	r6, [r2], #-323	; 0x143
    1498:	4b43414e 	blmi	10d19d8 <_Min_Stack_Size+0x10d15d8>
    149c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14a0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14a4:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
    14a8:	616c4674 	smcvs	50276	; 0xc464
    14ac:	61745367 	cmnvs	r4, r7, ror #6
    14b0:	00737574 	rsbseq	r7, r3, r4, ror r5
    14b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14b8:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    14bc:	41535500 	cmpmi	r3, r0, lsl #10
    14c0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    14c4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    14c8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    14cc:	43520074 	cmpmi	r2, #116	; 0x74
    14d0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    14d4:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    14d8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    14dc:	55007375 	strpl	r7, [r0, #-885]	; 0x375
    14e0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    14e4:	6f6c435f 	svcvs	0x006c435f
    14e8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    14ec:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    14f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    14f4:	6b61575f 	blvs	1857278 <_Min_Stack_Size+0x1856e78>
    14f8:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    14fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1500:	53550067 	cmppl	r5, #103	; 0x67
    1504:	5f545241 	svcpl	0x00545241
    1508:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    150c:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    1510:	6d437865 	stclvs	8, cr7, [r3, #-404]	; 0xfffffe6c
    1514:	53550064 	cmppl	r5, #100	; 0x64
    1518:	5f545241 	svcpl	0x00545241
    151c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1520:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1524:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1528:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    152c:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
    1530:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1534:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    1538:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    153c:	4f50435f 	svcmi	0x0050435f
    1540:	7469004c 	strbtvc	r0, [r9], #-76	; 0x4c
    1544:	6b73616d 	blvs	1cd9b00 <_Min_Stack_Size+0x1cd9700>
    1548:	41535500 	cmpmi	r3, r0, lsl #10
    154c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1550:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1554:	61446576 	hvcvs	18006	; 0x4656
    1558:	75006174 	strvc	r6, [r0, #-372]	; 0x174
    155c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1560:	00676572 	rsbeq	r6, r7, r2, ror r5
    1564:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1568:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    156c:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xd6f
    1570:	7461736e 	strbtvc	r7, [r1], #-878	; 0x36e
    1574:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1578:	436c6c65 	cmnmi	ip, #25856	; 0x6500
    157c:	5300646d 	movwpl	r6, #1133	; 0x46d
    1580:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1584:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    1588:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 13c0 <_Min_Stack_Size+0xfc0>
    158c:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    1590:	6f697461 	svcvs	0x00697461
    1594:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    1598:	6174536c 	cmnvs	r4, ip, ror #6
    159c:	00737574 	rsbseq	r7, r3, r4, ror r5
    15a0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    15a4:	445f4746 	ldrbmi	r4, [pc], #-1862	; 15ac <_Min_Stack_Size+0x11ac>
    15a8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    15ac:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
    15b0:	47464353 	smlsldmi	r4, r6, r3, r3
    15b4:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
    15b8:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    15bc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    15c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    15c4:	43504d43 	cmpmi	r0, #4288	; 0x10c0
    15c8:	454d0052 	strbmi	r0, [sp, #-82]	; 0x52
    15cc:	504d524d 	subpl	r5, sp, sp, asr #4
    15d0:	53595300 	cmppl	r9, #0, 6
    15d4:	5f474643 	svcpl	0x00474643
    15d8:	5f485445 	svcpl	0x00485445
    15dc:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    15e0:	746e4961 	strbtvc	r4, [lr], #-2401	; 0x961
    15e4:	61667265 	cmnvs	r6, r5, ror #4
    15e8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    15ec:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    15f0:	00444556 	subeq	r4, r4, r6, asr r5
    15f4:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    15f8:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 14e8 <_Min_Stack_Size+0x10e8>
    15fc:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1600:	61775379 	cmnvs	r7, r9, ror r3
    1604:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
    1608:	6e614267 	cdpvs	2, 6, cr4, cr1, cr7, {3}
    160c:	696c006b 	stmdbvs	ip!, {r0, r1, r3, r5, r6}^
    1610:	4f432f62 	svcmi	0x00432f62
    1614:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    1618:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    161c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    1620:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1624:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1628:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    162c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1630:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1634:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1638:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    163c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1640:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1648 <_Min_Stack_Size+0x1248>
    1644:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1648:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    164c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    1650:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1654:	5f787834 	svcpl	0x00787834
    1658:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
    165c:	632e6766 	teqvs	lr, #26738688	; 0x1980000
    1660:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1664:	00524349 	subseq	r4, r2, r9, asr #6
    1668:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    166c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1670:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1674:	00786563 	rsbseq	r6, r8, r3, ror #10
    1678:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    167c:	455f4746 	ldrbmi	r4, [pc, #-1862]	; f3e <_Min_Stack_Size+0xb3e>
    1680:	4d5f4854 	ldclmi	8, cr4, [pc, #-336]	; 1538 <_Min_Stack_Size+0x1138>
    1684:	61696465 	cmnvs	r9, r5, ror #8
    1688:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    168c:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1690:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1694:	00676966 	rsbeq	r6, r7, r6, ror #18
    1698:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    169c:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 158c <_Min_Stack_Size+0x118c>
    16a0:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    16a4:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
    16a8:	53007061 	movwpl	r7, #97	; 0x61
    16ac:	46435359 			; <UNDEFINED> instruction: 0x46435359
    16b0:	79545f47 	ldmdbvc	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    16b4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    16b8:	58450066 	stmdapl	r5, {r1, r2, r5, r6}^
    16bc:	505f4954 	subspl	r4, pc, r4, asr r9	; <UNPREDICTABLE>
    16c0:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    16c4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    16c8:	49504765 	ldmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, lr}^
    16cc:	5300784f 	movwpl	r7, #2127	; 0x84f
    16d0:	46435359 			; <UNDEFINED> instruction: 0x46435359
    16d4:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    16d8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    16dc:	616d6552 	cmnvs	sp, r2, asr r5
    16e0:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    16e4:	00676966 	rsbeq	r6, r7, r6, ror #18
    16e8:	5f433249 	svcpl	0x00433249
    16ec:	61656c43 	cmnvs	r5, r3, asr #24
    16f0:	50544972 	subspl	r4, r4, r2, ror r9
    16f4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    16f8:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    16fc:	32490074 	subcc	r0, r9, #116	; 0x74
    1700:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1704:	6172656e 	cmnvs	r2, lr, ror #10
    1708:	54536574 	ldrbpl	r6, [r3], #-1396	; 0x574
    170c:	00545241 	subseq	r5, r4, r1, asr #4
    1710:	5f433249 	svcpl	0x00433249
    1714:	50746547 	rsbspl	r6, r4, r7, asr #10
    1718:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    171c:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1720:	74657274 	strbtvc	r7, [r5], #-628	; 0x274
    1724:	6c436863 	mcrrvs	8, 6, r6, r3, cr3
    1728:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    172c:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    1730:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    1734:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    1738:	00726574 	rsbseq	r6, r2, r4, ror r5
    173c:	53495254 	movtpl	r5, #37460	; 0x9254
    1740:	32490045 	subcc	r0, r9, #69	; 0x45
    1744:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    1748:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    174c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1750:	4e5f4332 	mrcmi	3, 2, r4, cr15, cr2, {1}
    1754:	504b4341 	subpl	r4, fp, r1, asr #6
    1758:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    175c:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1760:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1764:	32490067 	subcc	r0, r9, #103	; 0x67
    1768:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    176c:	6464416e 	strbtvs	r4, [r4], #-366	; 0x16e
    1770:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1774:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1778:	00676966 	rsbeq	r6, r7, r6, ror #18
    177c:	5f433249 	svcpl	0x00433249
    1780:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1784:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1788:	66007463 	strvs	r7, [r0], -r3, ror #8
    178c:	72716572 	rsbsvc	r6, r1, #478150656	; 0x1c800000
    1790:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xe61
    1794:	43324900 	teqmi	r2, #0, 18
    1798:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    179c:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    17a0:	32490061 	subcc	r0, r9, #97	; 0x61
    17a4:	61435f43 	cmpvs	r3, r3, asr #30
    17a8:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    17ac:	50657461 	rsbpl	r7, r5, r1, ror #8
    17b0:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    17b4:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    17b8:	6b636f6c 	blvs	18dd570 <_Min_Stack_Size+0x18dd170>
    17bc:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    17c0:	32490064 	subcc	r0, r9, #100	; 0x64
    17c4:	6f4d5f43 	svcvs	0x004d5f43
    17c8:	49006564 	stmdbmi	r0, {r2, r5, r6, r8, sl, sp, lr}
    17cc:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    17d0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    17d4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    17d8:	414f0074 	hvcmi	61444	; 0xf004
    17dc:	46003152 			; <UNDEFINED> instruction: 0x46003152
    17e0:	0052544c 	subseq	r5, r2, ip, asr #8
    17e4:	5f433249 	svcpl	0x00433249
    17e8:	4c414d44 	mcrrmi	13, 4, r4, r1, cr4
    17ec:	54747361 	ldrbtpl	r7, [r4], #-865	; 0x361
    17f0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    17f4:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    17f8:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    17fc:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1800:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    1804:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    1808:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    180c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1810:	5f433249 	svcpl	0x00433249
    1814:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1818:	00666544 	rsbeq	r6, r6, r4, asr #10
    181c:	5f433249 	svcpl	0x00433249
    1820:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    1824:	466c6174 			; <UNDEFINED> instruction: 0x466c6174
    1828:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    182c:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1830:	00676966 	rsbeq	r6, r7, r6, ror #18
    1834:	5f433249 	svcpl	0x00433249
    1838:	50434550 	subpl	r4, r3, r0, asr r5
    183c:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    1840:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1844:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1848:	6c660067 	stclvs	0, cr0, [r6], #-412	; 0xfffffe64
    184c:	6f706761 	svcvs	0x00706761
    1850:	32490073 	subcc	r0, r9, #115	; 0x73
    1854:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1858:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    185c:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1860:	6d435052 	stclvs	0, cr5, [r3, #-328]	; 0xfffffeb8
    1864:	32490064 	subcc	r0, r9, #100	; 0x64
    1868:	75445f43 	strbvc	r5, [r4, #-3907]	; 0xf43
    186c:	79437974 	stmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    1870:	00656c63 	rsbeq	r6, r5, r3, ror #24
    1874:	72633269 	rsbvc	r3, r3, #-1879048186	; 0x90000006
    1878:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
    187c:	545f4332 	ldrbpl	r4, [pc], #-818	; 1884 <_Min_Stack_Size+0x1484>
    1880:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    1884:	5074696d 	rsbspl	r6, r4, sp, ror #18
    1888:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    188c:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    1890:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    1894:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    1898:	32490074 	subcc	r0, r9, #116	; 0x74
    189c:	49007843 	stmdbmi	r0, {r0, r1, r6, fp, ip, sp, lr}
    18a0:	445f4332 	ldrbmi	r4, [pc], #-818	; 18a8 <_Min_Stack_Size+0x14a8>
    18a4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    18a8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    18ac:	43324900 	teqmi	r2, #0, 18
    18b0:	43414e5f 	movtmi	r4, #7775	; 0x1e5f
    18b4:	736f504b 	cmnvc	pc, #75	; 0x4b
    18b8:	6f697469 	svcvs	0x00697469
    18bc:	696c006e 	stmdbvs	ip!, {r1, r2, r3, r5, r6}^
    18c0:	4f432f62 	svcmi	0x00432f62
    18c4:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    18c8:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    18cc:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    18d0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    18d4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    18d8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    18dc:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    18e0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    18e4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    18e8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    18ec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    18f0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 18f8 <_Min_Stack_Size+0x14f8>
    18f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    18f8:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    18fc:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    1900:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1904:	5f787834 	svcpl	0x00787834
    1908:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    190c:	32490063 	subcc	r0, r9, #99	; 0x63
    1910:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1914:	73614c74 	cmnvc	r1, #116, 24	; 0x7400
    1918:	65764574 	ldrbvs	r4, [r6, #-1396]!	; 0x574
    191c:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1920:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    1924:	0047414c 	subeq	r4, r7, ip, asr #2
    1928:	5f433249 	svcpl	0x00433249
    192c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1930:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1934:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1938:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    193c:	61436c61 	cmpvs	r3, r1, ror #24
    1940:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    1944:	32490064 	subcc	r0, r9, #100	; 0x64
    1948:	68435f43 	stmdavs	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    194c:	456b6365 	strbmi	r6, [fp, #-869]!	; 0x365
    1950:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1954:	43324900 	teqmi	r2, #0, 18
    1958:	414d445f 	cmpmi	sp, pc, asr r4
    195c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1960:	5f433249 	svcpl	0x00433249
    1964:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1968:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    196c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1970:	5f433249 	svcpl	0x00433249
    1974:	70005449 	andvc	r5, r0, r9, asr #8
    1978:	316b6c63 	cmncc	fp, r3, ror #24
    197c:	43324900 	teqmi	r2, #0, 18
    1980:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1984:	53455200 	movtpl	r5, #20992	; 0x5200
    1988:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    198c:	52003744 	andpl	r3, r0, #68, 14	; 0x1100000
    1990:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1994:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
    1998:	53455200 	movtpl	r5, #20992	; 0x5200
    199c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    19a0:	49003944 	stmdbmi	r0, {r2, r6, r8, fp, ip, sp}
    19a4:	4f5f4332 	svcmi	0x005f4332
    19a8:	64416e77 	strbvs	r6, [r1], #-3703	; 0xe77
    19ac:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    19b0:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
    19b4:	635f6363 	cmpvs	pc, #-1946157055	; 0x8c000001
    19b8:	6b636f6c 	blvs	18dd770 <_Min_Stack_Size+0x18dd370>
    19bc:	32490073 	subcc	r0, r9, #115	; 0x73
    19c0:	63415f43 	movtvs	r5, #8003	; 0x1f43
    19c4:	3249006b 	subcc	r0, r9, #107	; 0x6b
    19c8:	56455f43 	strbpl	r5, [r5], -r3, asr #30
    19cc:	00544e45 	subseq	r4, r4, r5, asr #28
    19d0:	5f433249 	svcpl	0x00433249
    19d4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    19d8:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
    19dc:	00617461 	rsbeq	r7, r1, r1, ror #8
    19e0:	5f433249 	svcpl	0x00433249
    19e4:	61656c43 	cmnvs	r5, r3, asr #24
    19e8:	616c4672 	smcvs	50274	; 0xc462
    19ec:	32490067 	subcc	r0, r9, #103	; 0x67
    19f0:	63415f43 	movtvs	r5, #8003	; 0x1f43
    19f4:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    19f8:	6764656c 	strbvs	r6, [r4, -ip, ror #10]!
    19fc:	64416465 	strbvs	r6, [r1], #-1125	; 0x465
    1a00:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1a04:	32490073 	subcc	r0, r9, #115	; 0x73
    1a08:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    1a0c:	65526461 	ldrbvs	r6, [r2, #-1121]	; 0x461
    1a10:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    1a14:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1a18:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    1a1c:	4d747361 	ldclmi	3, cr7, [r4, #-388]!	; 0xfffffe7c
    1a20:	4465646f 	strbtmi	r6, [r5], #-1135	; 0x46f
    1a24:	43797475 	cmnmi	r9, #1962934272	; 0x75000000
    1a28:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1a2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a30:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1a34:	445f4332 	ldrbmi	r4, [pc], #-818	; 1a3c <_Min_Stack_Size+0x163c>
    1a38:	416c6175 	smcmi	50709	; 0xc615
    1a3c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1a40:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
    1a44:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
    1a48:	00316761 	eorseq	r6, r1, r1, ror #14
    1a4c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1a50:	6e650032 	mcrvs	0, 3, r0, cr5, cr2, {1}
    1a54:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    1a58:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1a5c:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1a60:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1a64:	6f6e6b63 	svcvs	0x006e6b63
    1a68:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xc77
    1a6c:	6f436567 	svcvs	0x00436567
    1a70:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a74:	43324900 	teqmi	r2, #0, 18
    1a78:	4345505f 	movtmi	r5, #20575	; 0x505f
    1a7c:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1a80:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1a84:	43324900 	teqmi	r2, #0, 18
    1a88:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1a8c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1a90:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1a94:	6c007375 	stcvs	3, cr7, [r0], {117}	; 0x75
    1a98:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0x361
    1a9c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1aa0:	43324900 	teqmi	r2, #0, 18
    1aa4:	666f535f 			; <UNDEFINED> instruction: 0x666f535f
    1aa8:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
    1aac:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    1ab0:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1ab4:	32490064 	subcc	r0, r9, #100	; 0x64
    1ab8:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    1abc:	6237646e 	eorsvs	r6, r7, #1845493760	; 0x6e000000
    1ac0:	64417469 	strbvs	r7, [r1], #-1129	; 0x469
    1ac4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1ac8:	32690073 	rsbcc	r0, r9, #115	; 0x73
    1acc:	61627863 	cmnvs	r2, r3, ror #16
    1ad0:	4f006573 	svcmi	0x00006573
    1ad4:	00325241 	eorseq	r5, r2, r1, asr #4
    1ad8:	5f433249 	svcpl	0x00433249
    1adc:	69676944 	stmdbvs	r7!, {r2, r6, r8, fp, sp, lr}^
    1ae0:	466c6174 			; <UNDEFINED> instruction: 0x466c6174
    1ae4:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    1ae8:	32490072 	subcc	r0, r9, #114	; 0x72
    1aec:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1af0:	6172656e 	cmnvs	r2, lr, ror #10
    1af4:	54536574 	ldrbpl	r6, [r3], #-1396	; 0x574
    1af8:	4900504f 	stmdbmi	r0, {r0, r1, r2, r3, r6, ip, lr}
    1afc:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    1b00:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    1b04:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1b08:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1b0c:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    1b10:	6f6c616e 	svcvs	0x006c616e
    1b14:	6c694667 	stclvs	6, cr4, [r9], #-412	; 0xfffffe64
    1b18:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    1b1c:	7200646d 	andvc	r6, r0, #1828716544	; 0x6d000000
    1b20:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    1b24:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    1b28:	75435f41 	strbvc	r5, [r3, #-3905]	; 0xf41
    1b2c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1b30:	6d654d74 	stclvs	13, cr4, [r5, #-464]!	; 0xfffffe30
    1b34:	0079726f 	rsbseq	r7, r9, pc, ror #4
    1b38:	5f414d44 	svcpl	0x00414d44
    1b3c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b40:	5f414d44 	svcpl	0x00414d44
    1b44:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    1b48:	545f6d61 	ldrbpl	r6, [pc], #-3425	; 1b50 <_Min_Stack_Size+0x1750>
    1b4c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1b50:	73006665 	movwvc	r6, #1637	; 0x665
    1b54:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1b58:	414d4400 	cmpmi	sp, r0, lsl #8
    1b5c:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1b60:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1b64:	4d440079 	stclmi	0, cr0, [r4, #-484]	; 0xfffffe1c
    1b68:	654d5f41 	strbvs	r5, [sp, #-3905]	; 0xf41
    1b6c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1b70:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    1b74:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    1b78:	74535f41 	ldrbvc	r5, [r3], #-3905	; 0xf41
    1b7c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1b80:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1b84:	414d4400 	cmpmi	sp, r0, lsl #8
    1b88:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    1b8c:	65687069 	strbvs	r7, [r8, #-105]!	; 0x69
    1b90:	426c6172 	rsbmi	r6, ip, #-2147483620	; 0x8000001c
    1b94:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    1b98:	414d4400 	cmpmi	sp, r0, lsl #8
    1b9c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1ba0:	4f464946 	svcmi	0x00464946
    1ba4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1ba8:	44007375 	strmi	r7, [r0], #-885	; 0x375
    1bac:	545f414d 	ldrbpl	r4, [pc], #-333	; 1bb4 <_Min_Stack_Size+0x17b4>
    1bb0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1bb4:	44006665 	strmi	r6, [r0], #-1637	; 0x665
    1bb8:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    1bbc:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    1bc0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1bc4:	6d654d74 	stclvs	13, cr4, [r5, #-464]!	; 0xfffffe30
    1bc8:	5479726f 	ldrbtpl	r7, [r9], #-623	; 0x26f
    1bcc:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    1bd0:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    1bd4:	654d5f41 	strbvs	r5, [sp, #-3905]	; 0xf41
    1bd8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1bdc:	67726154 			; <UNDEFINED> instruction: 0x67726154
    1be0:	44007465 	strmi	r7, [r0], #-1125	; 0x465
    1be4:	0079414d 	rsbseq	r4, r9, sp, asr #2
    1be8:	79414d44 	stmdbvc	r1, {r2, r6, r8, sl, fp, lr}^
    1bec:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1bf0:	786d6165 	stmdavc	sp!, {r0, r2, r5, r6, r8, sp, lr}^
    1bf4:	414d4400 	cmpmi	sp, r0, lsl #8
    1bf8:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    1bfc:	414d4400 	cmpmi	sp, r0, lsl #8
    1c00:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    1c04:	65687069 	strbvs	r7, [r8, #-105]!	; 0x69
    1c08:	426c6172 	rsbmi	r6, ip, #-2147483620	; 0x8000001c
    1c0c:	41657361 	cmnmi	r5, r1, ror #6
    1c10:	00726464 	rsbseq	r6, r2, r4, ror #8
    1c14:	5f414d44 	svcpl	0x00414d44
    1c18:	6f6d654d 	svcvs	0x006d654d
    1c1c:	6e497972 	mcrvs	9, 2, r7, cr9, cr2, {3}
    1c20:	49480063 	stmdbmi	r8, {r0, r1, r5, r6}^
    1c24:	00524346 	subseq	r4, r2, r6, asr #6
    1c28:	5f414d44 	svcpl	0x00414d44
    1c2c:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    1c30:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    1c34:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    1c38:	6f437265 	svcvs	0x00437265
    1c3c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c40:	414d4400 	cmpmi	sp, r0, lsl #8
    1c44:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1c48:	5479726f 	ldrbtpl	r7, [r9], #-623	; 0x26f
    1c4c:	65677261 	strbvs	r7, [r7, #-609]!	; 0x261
    1c50:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1c54:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c58:	5f414d44 	svcpl	0x00414d44
    1c5c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c60:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
    1c64:	6e496c61 	cdpvs	12, 4, cr6, cr9, cr1, {3}
    1c68:	4d440063 	stclmi	0, cr0, [r4, #-396]	; 0xfffffe74
    1c6c:	6f445f41 	svcvs	0x00445f41
    1c70:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    1c74:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1c78:	6f4d7265 	svcvs	0x004d7265
    1c7c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    1c80:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    1c84:	6e495f41 	cdpvs	15, 4, cr5, cr9, cr1, {2}
    1c88:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    1c8c:	00525349 	subseq	r5, r2, r9, asr #6
    1c90:	5f414d44 	svcpl	0x00414d44
    1c94:	61656c43 	cmnvs	r5, r3, asr #24
    1c98:	616c4672 	smcvs	50274	; 0xc462
    1c9c:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    1ca0:	65535f41 	ldrbvs	r5, [r3, #-3905]	; 0xf41
    1ca4:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    1ca8:	74614472 	strbtvc	r4, [r1], #-1138	; 0x472
    1cac:	756f4361 	strbvc	r4, [pc, #-865]!	; 1953 <_Min_Stack_Size+0x1553>
    1cb0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1cb4:	414d4400 	cmpmi	sp, r0, lsl #8
    1cb8:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    1cbc:	65687069 	strbvs	r7, [r8, #-105]!	; 0x69
    1cc0:	446c6172 	strbtmi	r6, [ip], #-370	; 0x172
    1cc4:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    1cc8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1ccc:	5f414d44 	svcpl	0x00414d44
    1cd0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1cd4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1cd8:	00666544 	rsbeq	r6, r6, r4, asr #10
    1cdc:	5f414d44 	svcpl	0x00414d44
    1ce0:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    1ce4:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    1ce8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1cec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1cf0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1cf4:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    1cf8:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    1cfc:	544f4649 	strbpl	r4, [pc], #-1609	; 1d04 <_Min_Stack_Size+0x1904>
    1d00:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    1d04:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
    1d08:	414d4400 	cmpmi	sp, r0, lsl #8
    1d0c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1d10:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    1d14:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1d18:	53494800 	movtpl	r4, #38912	; 0x9800
    1d1c:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    1d20:	6e495f41 	cdpvs	15, 4, cr5, cr9, cr1, {2}
    1d24:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1d28:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1d2c:	414d4400 	cmpmi	sp, r0, lsl #8
    1d30:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1d34:	00736f63 	rsbseq	r6, r3, r3, ror #30
    1d38:	5241314d 	subpl	r3, r1, #1073741843	; 0x40000013
    1d3c:	414d4400 	cmpmi	sp, r0, lsl #8
    1d40:	6f6c465f 	svcvs	0x006c465f
    1d44:	72744377 	rsbsvc	r4, r4, #-603979775	; 0xdc000001
    1d48:	4d44006c 	stclmi	0, cr0, [r4, #-432]	; 0xfffffe50
    1d4c:	4c465f41 	mcrrmi	15, 4, r5, r6, cr1
    1d50:	44004741 	strmi	r4, [r0], #-1857	; 0x741
    1d54:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    1d58:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1d5c:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    1d60:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1d64:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    1d68:	414d4400 	cmpmi	sp, r0, lsl #8
    1d6c:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    1d70:	49687069 	stmdbmi	r8!, {r0, r3, r5, r6, ip, sp, lr}^
    1d74:	664f636e 	strbvs	r6, [pc], -lr, ror #6
    1d78:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    1d7c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    1d80:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d84:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    1d88:	445f414d 	ldrbmi	r4, [pc], #-333	; 1d90 <_Min_Stack_Size+0x1990>
    1d8c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1d90:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
    1d94:	65475f41 	strbvs	r5, [r7, #-3905]	; 0xf41
    1d98:	616c4674 	smcvs	50276	; 0xc464
    1d9c:	61745367 	cmnvs	r4, r7, ror #6
    1da0:	00737574 	rsbseq	r7, r3, r4, ror r5
    1da4:	4346494c 	movtmi	r4, #26956	; 0x694c
    1da8:	304d0052 	subcc	r0, sp, r2, asr r0
    1dac:	6c005241 	sfmvs	f5, 4, [r0], {65}	; 0x41
    1db0:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    1db4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    1db8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    1dbc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    1dc0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1dc4:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    1dc8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1dcc:	2f736569 	svccs	0x00736569
    1dd0:	334d5453 	movtcc	r5, #54355	; 0xd453
    1dd4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1dd8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1ddc:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1de0:	5f687069 	svcpl	0x00687069
    1de4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1de8:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1dec:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1df0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1df4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1df8:	616d645f 	cmnvs	sp, pc, asr r4
    1dfc:	4d00632e 	stcmi	3, cr6, [r0, #-184]	; 0xffffff48
    1e00:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    1e04:	61423179 	hvcvs	8985	; 0x2319
    1e08:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    1e0c:	44007264 	strmi	r7, [r0], #-612	; 0x264
    1e10:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    1e14:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; 1cf8 <_Min_Stack_Size+0x18f8>
    1e18:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1e1c:	5f414d44 	svcpl	0x00414d44
    1e20:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1e24:	7453646d 	ldrbvc	r6, [r3], #-1133	; 0x46d
    1e28:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e2c:	54444e00 	strbpl	r4, [r4], #-3584	; 0xe00
    1e30:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    1e34:	68435f41 	stmdavs	r3, {r0, r6, r8, r9, sl, fp, ip, lr}^
    1e38:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1e3c:	654d006c 	strbvs	r0, [sp, #-108]	; 0x6c
    1e40:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1e44:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    1e48:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e4c:	414d4400 	cmpmi	sp, r0, lsl #8
    1e50:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1e54:	3079726f 	rsbscc	r7, r9, pc, ror #4
    1e58:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    1e5c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e60:	414d4400 	cmpmi	sp, r0, lsl #8
    1e64:	6675425f 			; <UNDEFINED> instruction: 0x6675425f
    1e68:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    1e6c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1e70:	5f414d44 	svcpl	0x00414d44
    1e74:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1e78:	414d4400 	cmpmi	sp, r0, lsl #8
    1e7c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1e80:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1e84:	61746144 	cmnvs	r4, r4, asr #2
    1e88:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1e8c:	00726574 	rsbseq	r6, r2, r4, ror r5
    1e90:	5f414d44 	svcpl	0x00414d44
    1e94:	6f435449 	svcvs	0x00435449
    1e98:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e9c:	414d4400 	cmpmi	sp, r0, lsl #8
    1ea0:	0054495f 	subseq	r4, r4, pc, asr r9
    1ea4:	5f414d44 	svcpl	0x00414d44
    1ea8:	6f6d654d 	svcvs	0x006d654d
    1eac:	61447972 	hvcvs	18322	; 0x4792
    1eb0:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    1eb4:	5200657a 	andpl	r6, r0, #511705088	; 0x1e800000
    1eb8:	43524358 	cmpmi	r2, #88, 6	; 0x60000001
    1ebc:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
    1ec0:	53006e6c 	movwpl	r6, #3692	; 0xe6c
    1ec4:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1ec8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1ecc:	726c6c70 	rsbvc	r6, ip, #112, 24	; 0x7000
    1ed0:	53324900 	teqpl	r2, #0, 18
    1ed4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1ed8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1edc:	00746375 	rsbseq	r6, r4, r5, ror r3
    1ee0:	50435243 	subpl	r5, r3, r3, asr #4
    1ee4:	50530052 	subspl	r0, r3, r2, asr r0
    1ee8:	32495f49 	subcc	r5, r9, #292	; 0x124
    1eec:	54495f53 	strbpl	r5, [r9], #-3923	; 0xf53
    1ef0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1ef4:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1ef8:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    1efc:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    1f00:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1f04:	53006665 	movwpl	r6, #1637	; 0x665
    1f08:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1f0c:	445f5332 	ldrbmi	r5, [pc], #-818	; 1f14 <_Min_Stack_Size+0x1b14>
    1f10:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1f14:	32490074 	subcc	r0, r9, #116	; 0x74
    1f18:	74535f53 	ldrbvc	r5, [r3], #-3923	; 0xf53
    1f1c:	61646e61 	cmnvs	r4, r1, ror #28
    1f20:	53006472 	movwpl	r6, #1138	; 0x472
    1f24:	425f4950 	subsmi	r4, pc, #80, 18	; 0x140000
    1f28:	72694469 	rsbvc	r4, r9, #1761607680	; 0x69000000
    1f2c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1f30:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    1f34:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    1f38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f3c:	53006769 	movwpl	r6, #1897	; 0x769
    1f40:	475f4950 			; <UNDEFINED> instruction: 0x475f4950
    1f44:	52437465 	subpl	r7, r3, #1694498816	; 0x65000000
    1f48:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 1e44 <_Min_Stack_Size+0x1a44>
    1f4c:	6d6f6e79 	stclvs	14, cr6, [pc, #-484]!	; 1d70 <_Min_Stack_Size+0x1970>
    1f50:	006c6169 	rsbeq	r6, ip, r9, ror #2
    1f54:	72637263 	rsbvc	r7, r3, #805306374	; 0x30000006
    1f58:	53006765 	movwpl	r6, #1893	; 0x765
    1f5c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1f60:	445f5332 	ldrbmi	r5, [pc], #-818	; 1f68 <_Min_Stack_Size+0x1b68>
    1f64:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    1f68:	50530064 	subspl	r0, r3, r4, rrx
    1f6c:	32495f49 	subcc	r5, r9, #292	; 0x124
    1f70:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xf53
    1f74:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1f78:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1f7c:	50530073 	subspl	r0, r3, r3, ror r0
    1f80:	534e5f49 	movtpl	r5, #61257	; 0xef49
    1f84:	746e4953 	strbtvc	r4, [lr], #-2387	; 0x953
    1f88:	616e7265 	cmnvs	lr, r5, ror #4
    1f8c:	666f536c 	strbtvs	r5, [pc], -ip, ror #6
    1f90:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
    1f94:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1f98:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f9c:	5f495053 	svcpl	0x00495053
    1fa0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1fa4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1fa8:	53007469 	movwpl	r7, #1129	; 0x469
    1fac:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1fb0:	475f5332 	smmlarmi	pc, r2, r3, r5	; <UNPREDICTABLE>
    1fb4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    1fb8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    1fbc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1fc0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1fc4:	4f53535f 	svcmi	0x0053535f
    1fc8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    1fcc:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    1fd0:	53324900 	teqpl	r2, #0, 18
    1fd4:	74786578 	ldrbtvc	r6, [r8], #-1400	; 0x578
    1fd8:	43585400 	cmpmi	r8, #0, 8
    1fdc:	00524352 	subseq	r4, r2, r2, asr r3
    1fe0:	5f495053 	svcpl	0x00495053
    1fe4:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0x944
    1fe8:	6f697463 	svcvs	0x00697463
    1fec:	5053006e 	subspl	r0, r3, lr, rrx
    1ff0:	52435f49 	subpl	r5, r3, #292	; 0x124
    1ff4:	50530043 	subspl	r0, r3, r3, asr #32
    1ff8:	534e5f49 	movtpl	r5, #61257	; 0xef49
    1ffc:	746e4953 	strbtvc	r4, [lr], #-2387	; 0x953
    2000:	616e7265 	cmnvs	lr, r5, ror #4
    2004:	666f536c 	strbtvs	r5, [pc], -ip, ror #6
    2008:	50530074 	subspl	r0, r3, r4, ror r0
    200c:	72545f49 	subsvc	r5, r4, #292	; 0x124
    2010:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    2014:	52437469 	subpl	r7, r3, #1761607680	; 0x69000000
    2018:	32490043 	subcc	r0, r9, #67	; 0x43
    201c:	434d5f53 	movtmi	r5, #57171	; 0xdf53
    2020:	754f4b4c 	strbvc	r4, [pc, #-2892]	; 14dc <_Min_Stack_Size+0x10dc>
    2024:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    2028:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    202c:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    2030:	414c465f 	cmpmi	ip, pc, asr r6
    2034:	50530047 	subspl	r0, r3, r7, asr #32
    2038:	32495f49 	subcc	r5, r9, #292	; 0x124
    203c:	54495f53 	strbpl	r5, [r9], #-3923	; 0xf53
    2040:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2044:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    2048:	7a695361 	bvc	1a56dd4 <_Min_Stack_Size+0x1a569d4>
    204c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2050:	00676966 	rsbeq	r6, r7, r6, ror #18
    2054:	5f495053 	svcpl	0x00495053
    2058:	50435243 	subpl	r5, r3, r3, asr #4
    205c:	6e796c6f 	cdpvs	12, 7, cr6, cr9, cr15, {3}
    2060:	61696d6f 	cmnvs	r9, pc, ror #26
    2064:	3249006c 	subcc	r0, r9, #108	; 0x6c
    2068:	50435f53 	subpl	r5, r3, r3, asr pc
    206c:	53004c4f 	movwpl	r4, #3151	; 0xc4f
    2070:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2074:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    2078:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    207c:	53006665 	movwpl	r6, #1637	; 0x665
    2080:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2084:	445f5332 	ldrbmi	r5, [pc], #-818	; 208c <_Min_Stack_Size+0x1c8c>
    2088:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0x14d
    208c:	50530071 	subspl	r0, r3, r1, ror r0
    2090:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    2094:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2098:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    209c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20a0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    20a4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    20a8:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    20ac:	445f5332 	ldrbmi	r5, [pc], #-818	; 20b4 <_Min_Stack_Size+0x1cb4>
    20b0:	46617461 	strbtmi	r7, [r1], -r1, ror #8
    20b4:	616d726f 	cmnvs	sp, pc, ror #4
    20b8:	32490074 	subcc	r0, r9, #116	; 0x74
    20bc:	00525053 	subseq	r5, r2, r3, asr r0
    20c0:	5f495053 	svcpl	0x00495053
    20c4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    20c8:	5f533249 	svcpl	0x00533249
    20cc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    20d0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20d4:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    20d8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    20dc:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    20e0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    20e4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    20e8:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    20ec:	69647332 	stmdbvs	r4!, {r1, r4, r5, r8, r9, ip, sp, lr}^
    20f0:	32490076 	subcc	r0, r9, #118	; 0x76
    20f4:	75415f53 	strbvc	r5, [r1, #-3923]	; 0xf53
    20f8:	466f6964 	strbtmi	r6, [pc], -r4, ror #18
    20fc:	00716572 	rsbseq	r6, r1, r2, ror r5
    2100:	5f495053 	svcpl	0x00495053
    2104:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    2108:	53324900 	teqpl	r2, #0, 18
    210c:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    2110:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2114:	7269465f 	rsbvc	r4, r9, #99614720	; 0x5f00000
    2118:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    211c:	50530074 	subspl	r0, r3, r4, ror r0
    2120:	50435f49 	subpl	r5, r3, r9, asr #30
    2124:	53004148 	movwpl	r4, #328	; 0x148
    2128:	00784950 	rsbseq	r4, r8, r0, asr r9
    212c:	5f495053 	svcpl	0x00495053
    2130:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
    2134:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0x152
    2138:	73657250 	cmnvc	r5, #80, 4
    213c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    2140:	50530072 	subspl	r0, r3, r2, ror r0
    2144:	79545f49 	ldmdbvc	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    2148:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    214c:	50530066 	subspl	r0, r3, r6, rrx
    2150:	6f4d5f49 	svcvs	0x004d5f49
    2154:	53006564 	movwpl	r6, #1380	; 0x564
    2158:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    215c:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    2160:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2164:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2168:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    216c:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    2170:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2174:	6c61435f 	stclvs	3, cr4, [r1], #-380	; 0xfffffe84
    2178:	616c7563 	cmnvs	ip, r3, ror #10
    217c:	52436574 	subpl	r6, r3, #116, 10	; 0x1d000000
    2180:	50530043 	subspl	r0, r3, r3, asr #32
    2184:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    2188:	43524374 	cmpmi	r2, #116, 6	; 0xd0000001
    218c:	53324900 	teqpl	r2, #0, 18
    2190:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    2194:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2198:	0074696e 	rsbseq	r6, r4, lr, ror #18
    219c:	5f533249 	svcpl	0x00533249
    21a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    21a4:	53324900 	teqpl	r2, #0, 18
    21a8:	6c75465f 	ldclvs	6, cr4, [r5], #-380	; 0xfffffe84
    21ac:	7075446c 	rsbsvc	r4, r5, ip, ror #8
    21b0:	4378656c 	cmnmi	r8, #108, 10	; 0x1b000000
    21b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    21b8:	696c0067 	stmdbvs	ip!, {r0, r1, r2, r5, r6}^
    21bc:	4f432f62 	svcmi	0x00432f62
    21c0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    21c4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    21c8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    21cc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    21d0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    21d4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    21d8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    21dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    21e0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    21e4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    21e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    21ec:	445f6870 	ldrbmi	r6, [pc], #-2160	; 21f4 <_Min_Stack_Size+0x1df4>
    21f0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    21f4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    21f8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    21fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2200:	5f787834 	svcpl	0x00787834
    2204:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    2208:	50530063 	subspl	r0, r3, r3, rrx
    220c:	61445f49 	cmpvs	r4, r9, asr #30
    2210:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    2214:	6900657a 	stmdbvs	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    2218:	646f7332 	strbtvs	r7, [pc], #-818	; 2220 <_Min_Stack_Size+0x1e20>
    221c:	61700064 	cmnvs	r0, r4, rrx
    2220:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    2224:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    2228:	53006874 	movwpl	r6, #2164	; 0x874
    222c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2230:	535f5332 	cmppl	pc, #-939524096	; 0xc8000000
    2234:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xe65
    2238:	00617461 	rsbeq	r7, r1, r1, ror #8
    223c:	5f495053 	svcpl	0x00495053
    2240:	5f533249 	svcpl	0x00533249
    2244:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    2248:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
    224c:	00617461 	rsbeq	r7, r1, r1, ror #8
    2250:	63733269 	cmnvs	r3, #-1879048186	; 0x90000006
    2254:	45006b6c 	strmi	r6, [r0, #-2924]	; 0xb6c
    2258:	5f495458 	svcpl	0x00495458
    225c:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2260:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2264:	6f4d5f49 	svcvs	0x004d5f49
    2268:	45006564 	strmi	r6, [r0, #-1380]	; 0x564
    226c:	5f495458 	svcpl	0x00495458
    2270:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2274:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2278:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    227c:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2280:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2284:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2288:	6f4d5f49 	svcvs	0x004d5f49
    228c:	455f6564 	ldrbmi	r6, [pc, #-1380]	; 1d30 <_Min_Stack_Size+0x1930>
    2290:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    2294:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2298:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    229c:	6172656e 	cmnvs	r2, lr, ror #10
    22a0:	57536574 			; <UNDEFINED> instruction: 0x57536574
    22a4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    22a8:	70757272 	rsbsvc	r7, r5, r2, ror r2
    22ac:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    22b0:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    22b4:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    22b8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    22bc:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
    22c0:	5f495458 	svcpl	0x00495458
    22c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    22c8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    22cc:	45007463 	strmi	r7, [r0, #-1123]	; 0x463
    22d0:	5f495458 	svcpl	0x00495458
    22d4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    22d8:	746e495f 	strbtvc	r4, [lr], #-2399	; 0x95f
    22dc:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    22e0:	45007470 	strmi	r7, [r0, #-1136]	; 0x470
    22e4:	5f495458 	svcpl	0x00495458
    22e8:	61656c43 	cmnvs	r5, r3, asr #24
    22ec:	616c4672 	smcvs	50274	; 0xc462
    22f0:	58450067 	stmdapl	r5, {r0, r1, r2, r5, r6}^
    22f4:	6f4d4954 	svcvs	0x004d4954
    22f8:	545f6564 	ldrbpl	r6, [pc], #-1380	; 2300 <_Min_Stack_Size+0x1f00>
    22fc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2300:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
    2304:	5f495458 	svcpl	0x00495458
    2308:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    230c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2310:	52535452 	subspl	r5, r3, #1375731712	; 0x52000000
    2314:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2318:	72545f49 	subsvc	r5, r4, #292	; 0x124
    231c:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    2320:	69525f72 	ldmdbvs	r2, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2324:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    2328:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    232c:	72545f49 	subsvc	r5, r4, #292	; 0x124
    2330:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    2334:	69525f72 	ldmdbvs	r2, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2338:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    233c:	6c61465f 	stclvs	6, cr4, [r1], #-380	; 0xfffffe84
    2340:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    2344:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    2348:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    234c:	45007469 	strmi	r7, [r0, #-1129]	; 0x469
    2350:	5f495458 	svcpl	0x00495458
    2354:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2358:	5367616c 	cmnpl	r7, #108, 2
    235c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2360:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
    2364:	535f4954 	cmppl	pc, #84, 18	; 0x150000
    2368:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    236c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2370:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    2374:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
    2378:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    237c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2380:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    2384:	5f495458 	svcpl	0x00495458
    2388:	61656c43 	cmnvs	r5, r3, asr #24
    238c:	50544972 	subspl	r4, r4, r2, ror r9
    2390:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2394:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2398:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    239c:	545f4954 	ldrbpl	r4, [pc], #-2388	; 23a4 <_Min_Stack_Size+0x1fa4>
    23a0:	67676972 			; <UNDEFINED> instruction: 0x67676972
    23a4:	465f7265 	ldrbmi	r7, [pc], -r5, ror #4
    23a8:	696c6c61 	stmdbvs	ip!, {r0, r5, r6, sl, fp, sp, lr}^
    23ac:	4600676e 	strmi	r6, [r0], -lr, ror #14
    23b0:	00525354 	subseq	r5, r2, r4, asr r3
    23b4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    23b8:	67697254 			; <UNDEFINED> instruction: 0x67697254
    23bc:	5f726567 	svcpl	0x00726567
    23c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    23c4:	00666544 	rsbeq	r6, r6, r4, asr #10
    23c8:	45495753 	strbmi	r5, [r9, #-1875]	; 0x753
    23cc:	58450052 	stmdapl	r5, {r1, r4, r6}^
    23d0:	445f4954 	ldrbmi	r4, [pc], #-2388	; 23d8 <_Min_Stack_Size+0x1fd8>
    23d4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    23d8:	696c0074 	stmdbvs	ip!, {r2, r4, r5, r6}^
    23dc:	4f432f62 	svcmi	0x00432f62
    23e0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    23e4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    23e8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    23ec:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    23f0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    23f4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    23f8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    23fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2400:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2404:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2408:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    240c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2414 <_Min_Stack_Size+0x2014>
    2410:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2414:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2418:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    241c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2420:	5f787834 	svcpl	0x00787834
    2424:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    2428:	4400632e 	strmi	r6, [r0], #-814	; 0x32e
    242c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2430:	5347425f 	movtpl	r4, #29279	; 0x725f
    2434:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    2438:	414d4400 	cmpmi	sp, r0, lsl #8
    243c:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2440:	43465047 	movtmi	r5, #24647	; 0x6047
    2444:	504c415f 	subpl	r4, ip, pc, asr r1
    2448:	565f4148 	ldrbpl	r4, [pc], -r8, asr #2
    244c:	45554c41 	ldrbmi	r4, [r5, #-3137]	; 0xc41
    2450:	414d4400 	cmpmi	sp, r0, lsl #8
    2454:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    2458:	6e495f47 	cdpvs	15, 4, cr5, cr9, cr7, {2}
    245c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2460:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2464:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    2468:	5f443241 	svcpl	0x00443241
    246c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2470:	6c427475 	cfstrdvs	mvd7, [r2], {117}	; 0x75
    2474:	44006575 	strmi	r6, [r0], #-1397	; 0x575
    2478:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    247c:	4347465f 	movtmi	r4, #30303	; 0x765f
    2480:	4445525f 	strbmi	r5, [r5], #-607	; 0x25f
    2484:	414d4400 	cmpmi	sp, r0, lsl #8
    2488:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    248c:	61745347 	cmnvs	r4, r7, asr #6
    2490:	44007472 	strmi	r7, [r0], #-1138	; 0x472
    2494:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2498:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    249c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    24a0:	44006761 	strmi	r6, [r0], #-1889	; 0x761
    24a4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    24a8:	5f54495f 	svcpl	0x0054495f
    24ac:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    24b0:	414d4400 	cmpmi	sp, r0, lsl #8
    24b4:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    24b8:	4c435f47 	mcrrmi	15, 4, r5, r3, cr7
    24bc:	435f5455 	cmpmi	pc, #1426063360	; 0x55000000
    24c0:	4746004d 	strbmi	r0, [r6, -sp, asr #32]
    24c4:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    24c8:	414d4400 	cmpmi	sp, r0, lsl #8
    24cc:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    24d0:	4c435f47 	mcrrmi	15, 4, r5, r3, cr7
    24d4:	435f5455 	cmpmi	pc, #1426063360	; 0x55000000
    24d8:	4d44004d 	stclmi	0, cr0, [r4, #-308]	; 0xfffffecc
    24dc:	5f443241 	svcpl	0x00443241
    24e0:	535f4742 	cmppl	pc, #17301504	; 0x1080000
    24e4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    24e8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    24ec:	67660074 			; <UNDEFINED> instruction: 0x67660074
    24f0:	706c615f 	rsbvc	r6, ip, pc, asr r1
    24f4:	61766168 	cmnvs	r6, r8, ror #2
    24f8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    24fc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2500:	574c5f44 	strbpl	r5, [ip, -r4, asr #30]
    2504:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    2508:	6b72616d 	blvs	1c9aac4 <_Min_Stack_Size+0x1c9a6c4>
    250c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2510:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    2514:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2518:	5f47425f 	svcpl	0x0047425f
    251c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2520:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2524:	44007463 	strmi	r7, [r0], #-1123	; 0x463
    2528:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    252c:	4d47465f 	stclmi	6, cr4, [r7, #-380]	; 0xfffffe84
    2530:	4d440041 	stclmi	0, cr0, [r4, #-260]	; 0xfffffefc
    2534:	5f443241 	svcpl	0x00443241
    2538:	004f4746 	subeq	r4, pc, r6, asr #14
    253c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2540:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    2544:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2548:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    254c:	4400455a 	strmi	r4, [r0], #-1370	; 0x55a
    2550:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2554:	4347425f 	movtmi	r4, #29279	; 0x725f
    2558:	0052414d 	subseq	r4, r2, sp, asr #2
    255c:	43544d41 	cmpmi	r4, #4160	; 0x1040
    2560:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2564:	5f443241 	svcpl	0x00443241
    2568:	46504742 	ldrbmi	r4, [r0], -r2, asr #14
    256c:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
    2570:	5f414850 	svcpl	0x00414850
    2574:	554c4156 	strbpl	r4, [ip, #-342]	; 0x156
    2578:	756f0045 	strbvc	r0, [pc, #-69]!	; 253b <_Min_Stack_Size+0x213b>
    257c:	65726774 	ldrbvs	r6, [r2, #-1908]!	; 0x774
    2580:	44006e65 	strmi	r6, [r0], #-3685	; 0xe65
    2584:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2588:	4347425f 	movtmi	r4, #29279	; 0x725f
    258c:	4552475f 	ldrbmi	r4, [r2, #-1887]	; 0x75f
    2590:	44004e45 	strmi	r4, [r0], #-3653	; 0xe45
    2594:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2598:	7869505f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    259c:	65506c65 	ldrbvs	r6, [r0, #-3173]	; 0xc65
    25a0:	6e694c72 	mcrvs	12, 3, r4, cr9, cr2, {3}
    25a4:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    25a8:	5f443241 	svcpl	0x00443241
    25ac:	5f434746 	svcpl	0x00434746
    25b0:	45554c42 	ldrbmi	r4, [r5, #-3138]	; 0xc42
    25b4:	414d4400 	cmpmi	sp, r0, lsl #8
    25b8:	4d5f4432 	cfldrdmi	mvd4, [pc, #-200]	; 24f8 <_Min_Stack_Size+0x20f8>
    25bc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    25c0:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    25c4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    25c8:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    25cc:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    25d0:	5f443241 	svcpl	0x00443241
    25d4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    25d8:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    25dc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    25e0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    25e4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    25e8:	00746375 	rsbseq	r6, r4, r5, ror r3
    25ec:	4c434742 	mcrrmi	7, 4, r4, r3, cr2
    25f0:	44005455 	strmi	r5, [r0], #-1109	; 0x455
    25f4:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    25f8:	4347425f 	movtmi	r4, #29279	; 0x725f
    25fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2600:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    2604:	5f443241 	svcpl	0x00443241
    2608:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    260c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2610:	46007469 	strmi	r7, [r0], -r9, ror #8
    2614:	4c4f4347 	mcrrmi	3, 4, r4, pc, cr7
    2618:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    261c:	5f443241 	svcpl	0x00443241
    2620:	64616544 	strbtvs	r6, [r1], #-1348	; 0x544
    2624:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2628:	4d474600 	stclmi	6, cr4, [r7, #-0]
    262c:	44005241 	strmi	r5, [r0], #-577	; 0x241
    2630:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2634:	5047425f 	subpl	r4, r7, pc, asr r2
    2638:	415f4346 	cmpmi	pc, r6, asr #6
    263c:	4148504c 	cmpmi	r8, ip, asr #32
    2640:	444f4d5f 	strbmi	r4, [pc], #-3423	; 2648 <_Min_Stack_Size+0x2248>
    2644:	4d440045 	stclmi	0, cr0, [r4, #-276]	; 0xfffffeec
    2648:	5f443241 	svcpl	0x00443241
    264c:	646f4d43 	strbtvs	r4, [pc], #-3395	; 2654 <_Min_Stack_Size+0x2254>
    2650:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    2654:	5f443241 	svcpl	0x00443241
    2658:	6f434746 	svcvs	0x00434746
    265c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2660:	5f676200 	svcpl	0x00676200
    2664:	74756c63 	ldrbtvc	r6, [r5], #-3171	; 0xc63
    2668:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    266c:	414d4400 	cmpmi	sp, r0, lsl #8
    2670:	4e5f4432 	mrcmi	4, 2, r4, cr15, cr2, {1}
    2674:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    2678:	4c664f72 	stclmi	15, cr4, [r6], #-456	; 0xfffffe38
    267c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2680:	635f6766 	cmpvs	pc, #26738688	; 0x1980000
    2684:	6374756c 	cmnvs	r4, #108, 10	; 0x1b000000
    2688:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    268c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    2690:	4f474600 	svcmi	0x00474600
    2694:	756f0052 	strbvc	r0, [pc, #-82]!	; 264a <_Min_Stack_Size+0x224a>
    2698:	706c6174 	rsbvc	r6, ip, r4, ror r1
    269c:	44006168 	strmi	r6, [r0], #-360	; 0x168
    26a0:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    26a4:	7375535f 	cmnvc	r5, #2080374785	; 0x7c000001
    26a8:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    26ac:	414d4400 	cmpmi	sp, r0, lsl #8
    26b0:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    26b4:	74535f47 	ldrbvc	r5, [r3], #-3911	; 0xf47
    26b8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    26bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    26c0:	414d4400 	cmpmi	sp, r0, lsl #8
    26c4:	415f4432 	cmpmi	pc, r2, lsr r4	; <UNPREDICTABLE>
    26c8:	74726f62 	ldrbtvc	r6, [r2], #-3938	; 0xf62
    26cc:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    26d0:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    26d4:	414d4400 	cmpmi	sp, r0, lsl #8
    26d8:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    26dc:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    26e0:	00676966 	rsbeq	r6, r7, r6, ror #18
    26e4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    26e8:	54495f44 	strbpl	r5, [r9], #-3908	; 0xf44
    26ec:	5f676200 	svcpl	0x00676200
    26f0:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    26f4:	6c617661 	stclvs	6, cr7, [r1], #-388	; 0xfffffe7c
    26f8:	66006575 			; <UNDEFINED> instruction: 0x66006575
    26fc:	6c635f67 	stclvs	15, cr5, [r3], #-412	; 0xfffffe64
    2700:	69737475 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    2704:	6c00657a 	cfstr32vs	mvfx6, [r0], {122}	; 0x7a
    2708:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    270c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2710:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2714:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2718:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    271c:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    2720:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2724:	2f736569 	svccs	0x00736569
    2728:	334d5453 	movtcc	r5, #54355	; 0xd453
    272c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2730:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2734:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2738:	5f687069 	svcpl	0x00687069
    273c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2740:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    2744:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2748:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    274c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2750:	616d645f 	cmnvs	sp, pc, asr r4
    2754:	632e6432 	teqvs	lr, #838860800	; 0x32000000
    2758:	414d4f00 	cmpmi	sp, r0, lsl #30
    275c:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2760:	5f443241 	svcpl	0x00443241
    2764:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    2768:	65746157 	ldrbvs	r6, [r4, #-343]!	; 0x157
    276c:	72616d72 	rsbvc	r6, r1, #7296	; 0x1c80
    2770:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2774:	00676966 	rsbeq	r6, r7, r6, ror #18
    2778:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    277c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2780:	00646572 	rsbeq	r6, r4, r2, ror r5
    2784:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2788:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    278c:	44004d43 	strmi	r4, [r0], #-3395	; 0xd43
    2790:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2794:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2798:	67660074 			; <UNDEFINED> instruction: 0x67660074
    279c:	706c615f 	rsbvc	r6, ip, pc, asr r1
    27a0:	6d5f6168 	ldfvse	f6, [pc, #-416]	; 2608 <_Min_Stack_Size+0x2208>
    27a4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    27a8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    27ac:	6e495f44 	cdpvs	15, 4, cr5, cr9, cr4, {2}
    27b0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    27b4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    27b8:	434f0066 	movtmi	r0, #61542	; 0xf066
    27bc:	00524c4f 	subseq	r4, r2, pc, asr #24
    27c0:	4f434742 	svcmi	0x00434742
    27c4:	4400524c 	strmi	r5, [r0], #-588	; 0x24c
    27c8:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    27cc:	4d47425f 	sfmmi	f4, 2, [r7, #-380]	; 0xfffffe84
    27d0:	4d440041 	stclmi	0, cr0, [r4, #-260]	; 0xfffffefc
    27d4:	5f443241 	svcpl	0x00443241
    27d8:	5f434742 	svcpl	0x00434742
    27dc:	45554c42 	ldrbmi	r4, [r5, #-3138]	; 0xc42
    27e0:	414d4400 	cmpmi	sp, r0, lsl #8
    27e4:	535f4432 	cmppl	pc, #838860800	; 0x32000000
    27e8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    27ec:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    27f0:	72656673 	rsbvc	r6, r5, #120586240	; 0x7300000
    27f4:	414d4400 	cmpmi	sp, r0, lsl #8
    27f8:	465f4432 			; <UNDEFINED> instruction: 0x465f4432
    27fc:	0047414c 	subeq	r4, r7, ip, asr #2
    2800:	4346504f 	movtmi	r5, #24655	; 0x604f
    2804:	44005243 	strmi	r5, [r0], #-579	; 0x243
    2808:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    280c:	5f47425f 	svcpl	0x0047425f
    2810:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2814:	5a49535f 	bpl	1257598 <_Min_Stack_Size+0x1257198>
    2818:	47420045 	strbmi	r0, [r2, -r5, asr #32]
    281c:	43434650 	movtmi	r4, #13904	; 0x3650
    2820:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2824:	5f443241 	svcpl	0x00443241
    2828:	64616544 	strbtvs	r6, [r1], #-1348	; 0x544
    282c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2830:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2834:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    2838:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    283c:	5f47465f 	svcpl	0x0047465f
    2840:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2844:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2848:	44007463 	strmi	r7, [r0], #-1123	; 0x463
    284c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2850:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2854:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    2858:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    285c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2860:	46007469 	strmi	r7, [r0], -r9, ror #8
    2864:	43465047 	movtmi	r5, #24647	; 0x6047
    2868:	44005243 	strmi	r5, [r0], #-579	; 0x243
    286c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2870:	4347465f 	movtmi	r4, #30303	; 0x765f
    2874:	4552475f 	ldrbmi	r4, [r2, #-1887]	; 0x75f
    2878:	44004e45 	strmi	r4, [r0], #-3653	; 0xe45
    287c:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2880:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    2884:	4d747570 	cfldr64mi	mvdx7, [r4, #-448]!	; 0xfffffe40
    2888:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    288c:	64644179 	strbtvs	r4, [r4], #-377	; 0x179
    2890:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    2894:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    2898:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    289c:	00646572 	rsbeq	r6, r4, r2, ror r5
    28a0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    28a4:	754f5f44 	strbvc	r5, [pc, #-3908]	; 1968 <_Min_Stack_Size+0x1568>
    28a8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    28ac:	00646552 	rsbeq	r6, r4, r2, asr r5
    28b0:	635f6766 	cmpvs	pc, #26738688	; 0x1980000
    28b4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    28b8:	65657267 	strbvs	r7, [r5, #-615]!	; 0x267
    28bc:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    28c0:	5f443241 	svcpl	0x00443241
    28c4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    28c8:	72477475 	subvc	r7, r7, #1962934272	; 0x75000000
    28cc:	006e6565 	rsbeq	r6, lr, r5, ror #10
    28d0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    28d4:	47465f44 	strbmi	r5, [r6, -r4, asr #30]
    28d8:	44004d43 	strmi	r4, [r0], #-3395	; 0xd43
    28dc:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    28e0:	5f47425f 	svcpl	0x0047425f
    28e4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    28e8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    28ec:	00666544 	rsbeq	r6, r6, r4, asr #10
    28f0:	414d4742 	cmpmi	sp, r2, asr #14
    28f4:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    28f8:	5f443241 	svcpl	0x00443241
    28fc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2900:	00666544 	rsbeq	r6, r6, r4, asr #10
    2904:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    2908:	47425f44 	strbmi	r5, [r2, -r4, asr #30]
    290c:	4d44004f 	stclmi	0, cr0, [r4, #-316]	; 0xfffffec4
    2910:	5f443241 	svcpl	0x00443241
    2914:	46504746 	ldrbmi	r4, [r0], -r6, asr #14
    2918:	4c415f43 	mcrrmi	15, 4, r5, r1, cr3
    291c:	5f414850 	svcpl	0x00414850
    2920:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    2924:	414d4400 	cmpmi	sp, r0, lsl #8
    2928:	475f4432 	smmlarmi	pc, r2, r4, r4	; <UNPREDICTABLE>
    292c:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    2930:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    2934:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2938:	4f474200 	svcmi	0x00474200
    293c:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    2940:	5f443241 	svcpl	0x00443241
    2944:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2948:	664f7475 			; <UNDEFINED> instruction: 0x664f7475
    294c:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    2950:	414d4400 	cmpmi	sp, r0, lsl #8
    2954:	475f4432 	smmlarmi	pc, r2, r4, r4	; <UNPREDICTABLE>
    2958:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    295c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2960:	44007375 	strmi	r7, [r0], #-885	; 0x375
    2964:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2968:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
    296c:	41747570 	cmnmi	r4, r0, ror r5
    2970:	6168706c 	cmnvs	r8, ip, rrx
    2974:	414d4400 	cmpmi	sp, r0, lsl #8
    2978:	425f4432 	subsmi	r4, pc, #838860800	; 0x32000000
    297c:	525f4347 	subspl	r4, pc, #469762049	; 0x1c000001
    2980:	66004445 	strvs	r4, [r0], -r5, asr #8
    2984:	6f635f67 	svcvs	0x00635f67
    2988:	72726f6c 	rsbsvc	r6, r2, #108, 30	; 0x1b0
    298c:	44006465 	strmi	r6, [r0], #-1125	; 0x465
    2990:	4432414d 	ldrtmi	r4, [r2], #-333	; 0x14d
    2994:	4347465f 	movtmi	r4, #30303	; 0x765f
    2998:	0052414d 	subseq	r4, r2, sp, asr #2
    299c:	635f6762 	cmpvs	pc, #25690112	; 0x1880000
    29a0:	6374756c 	cmnvs	r4, #108, 10	; 0x1b000000
    29a4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    29a8:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xf6d
    29ac:	5f676200 	svcpl	0x00676200
    29b0:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    29b4:	6f6d5f61 	svcvs	0x006d5f61
    29b8:	4c006564 	cfstr32mi	mvfx6, [r0], {100}	; 0x64
    29bc:	5f434454 	svcpl	0x00434454
    29c0:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    29c4:	6e495f72 	mcrvs	15, 2, r5, cr9, cr2, {3}
    29c8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    29cc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    29d0:	46430066 	strbmi	r0, [r3], -r6, rrx
    29d4:	524e4c42 	subpl	r4, lr, #16896	; 0x4200
    29d8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    29dc:	6f435f43 	svcvs	0x00435f43
    29e0:	4b726f6c 	blmi	1c9e798 <_Min_Stack_Size+0x1c9e398>
    29e4:	6e697965 	cdpvs	9, 6, cr7, cr9, cr5, {3}
    29e8:	6e6f4367 	cdpvs	3, 6, cr4, cr15, cr7, {3}
    29ec:	00676966 	rsbeq	r6, r7, r6, ror #18
    29f0:	4344544c 	movtmi	r5, #17484	; 0x444c
    29f4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    29f8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    29fc:	4344544c 	movtmi	r5, #17484	; 0x444c
    2a00:	554c435f 	strbpl	r4, [ip, #-863]	; 0x35f
    2a04:	696e4954 	stmdbvs	lr!, {r2, r4, r6, r8, fp, lr}^
    2a08:	43420074 	movtmi	r0, #8308	; 0x2074
    2a0c:	43005243 	movwmi	r5, #579	; 0x243
    2a10:	524c4246 	subpl	r4, ip, #1610612740	; 0x60000004
    2a14:	63636100 	cmnvs	r3, #0, 2
    2a18:	6c756d75 	ldclvs	13, cr6, [r5], #-468	; 0xfffffe2c
    2a1c:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    2a20:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2a24:	00576576 	subseq	r6, r7, r6, ror r5
    2a28:	4344544c 	movtmi	r5, #17484	; 0x444c
    2a2c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2a30:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2a34:	4c006761 	stcmi	7, cr6, [r0], {97}	; 0x61
    2a38:	5f434454 	svcpl	0x00434454
    2a3c:	6f6c6f63 	svcvs	0x006c6f63
    2a40:	79656b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    2a44:	5f676e69 	svcpl	0x00676e69
    2a48:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2a4c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2a50:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    2a54:	5f434454 	svcpl	0x00434454
    2a58:	53424643 	movtpl	r4, #9795	; 0x2643
    2a5c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    2a60:	65726441 	ldrbvs	r6, [r2, #-1089]!	; 0x441
    2a64:	4c007373 	stcmi	3, cr7, [r0], {115}	; 0x73
    2a68:	5f434454 	svcpl	0x00434454
    2a6c:	61666544 	cmnvs	r6, r4, asr #10
    2a70:	43746c75 	cmnmi	r4, #29952	; 0x7500
    2a74:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2a78:	00646552 	rsbeq	r6, r4, r2, asr r5
    2a7c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2a80:	7265565f 	rsbvc	r5, r5, #99614720	; 0x5f00000
    2a84:	61636974 	smcvs	13972	; 0x3694
    2a88:	6174536c 	cmnvs	r4, ip, ror #6
    2a8c:	4c007472 	cfstrsmi	mvf7, [r0], {114}	; 0x72
    2a90:	5f434454 	svcpl	0x00434454
    2a94:	75636341 	strbvc	r6, [r3, #-833]!	; 0x341
    2a98:	616c756d 	cmnvs	ip, sp, ror #10
    2a9c:	41646574 	smcmi	18004	; 0x4654
    2aa0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    2aa4:	4c004865 	stcmi	8, cr4, [r0], {101}	; 0x65
    2aa8:	5f434454 	svcpl	0x00434454
    2aac:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2ab0:	78695072 	stmdavc	r9!, {r1, r4, r5, r6, ip, lr}^
    2ab4:	6f466c65 	svcvs	0x00466c65
    2ab8:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xd72
    2abc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ac0:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2ac4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2ac8:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    2acc:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2ad0:	736f5049 	cmnvc	pc, #73	; 0x49
    2ad4:	6f697469 	svcvs	0x00697469
    2ad8:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    2adc:	00676966 	rsbeq	r6, r7, r6, ror #18
    2ae0:	43505657 	cmpmi	r0, #91226112	; 0x5700000
    2ae4:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2ae8:	485f4344 	ldmdami	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2aec:	6c6f5053 	stclvs	0, cr5, [pc], #-332	; 29a8 <_Min_Stack_Size+0x25a8>
    2af0:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2af4:	544c0079 	strbpl	r0, [ip], #-121	; 0x79
    2af8:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2afc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2b00:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2b04:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2b08:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    2b0c:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
    2b10:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
    2b14:	65724764 	ldrbvs	r4, [r2, #-1892]!	; 0x764
    2b18:	61566e65 	cmpvs	r6, r5, ror #28
    2b1c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2b20:	4344544c 	movtmi	r5, #17484	; 0x444c
    2b24:	6363415f 	cmnvs	r3, #-1073741801	; 0xc0000017
    2b28:	6c756d75 	ldclvs	13, cr6, [r5], #-468	; 0xfffffe2c
    2b2c:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    2b30:	00504256 	subseq	r4, r0, r6, asr r2
    2b34:	69726f68 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2b38:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2b3c:	79736c61 	ldmdbvc	r3!, {r0, r5, r6, sl, fp, sp, lr}^
    2b40:	4c00636e 	stcmi	3, cr6, [r0], {110}	; 0x6e
    2b44:	5f434454 	svcpl	0x00434454
    2b48:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2b4c:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    2b50:	63640074 	cmnvs	r4, #116	; 0x74
    2b54:	68706c61 	ldmdavs	r0!, {r0, r5, r6, sl, fp, sp, lr}^
    2b58:	544c0061 	strbpl	r0, [ip], #-97	; 0x61
    2b5c:	415f4344 	cmpmi	pc, r4, asr #6
    2b60:	6d756363 	ldclvs	3, cr6, [r5, #-396]!	; 0xfffffe74
    2b64:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    2b68:	63416465 	movtvs	r6, #5221	; 0x1465
    2b6c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2b70:	544c0057 	strbpl	r0, [ip], #-87	; 0x57
    2b74:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2b78:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2b7c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    2b80:	72657600 	rsbvc	r7, r5, #0, 12
    2b84:	61636974 	smcvs	13972	; 0x3694
    2b88:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
    2b8c:	00747261 	rsbseq	r7, r4, r1, ror #4
    2b90:	4344544c 	movtmi	r5, #17484	; 0x444c
    2b94:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    2b98:	72636400 	rsbvc	r6, r3, #0, 8
    2b9c:	62006465 	andvs	r6, r0, #1694498816	; 0x65000000
    2ba0:	726b6361 	rsbvc	r6, fp, #-2080374783	; 0x84000001
    2ba4:	77006465 	strvc	r6, [r0, -r5, ror #8]
    2ba8:	70707376 	rsbsvc	r7, r0, r6, ror r3
    2bac:	4c00736f 	stcmi	3, cr7, [r0], {111}	; 0x6f
    2bb0:	5f434454 	svcpl	0x00434454
    2bb4:	69726f48 	ldmdbvs	r2!, {r3, r6, r8, r9, sl, fp, sp, lr}^
    2bb8:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2bbc:	79536c61 	ldmdbvc	r3, {r0, r5, r6, sl, fp, sp, lr}^
    2bc0:	4c00636e 	stcmi	3, cr6, [r0], {110}	; 0x6e
    2bc4:	5f434454 	svcpl	0x00434454
    2bc8:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2bcc:	79545f72 	ldmdbvc	r4, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2bd0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2bd4:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    2bd8:	4c5f4344 	mrrcmi	3, 4, r4, pc, cr4	; <UNPREDICTABLE>
    2bdc:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    2be0:	41430078 	hvcmi	12296	; 0x3008
    2be4:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    2be8:	5f434454 	svcpl	0x00434454
    2bec:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    2bf0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    2bf4:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    2bf8:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2bfc:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2c00:	4779654b 	ldrbmi	r6, [r9, -fp, asr #10]!
    2c04:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2c08:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c0c:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2c10:	53444374 	movtpl	r4, #17268	; 0x4374
    2c14:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2c18:	6f680073 	svcvs	0x00680073
    2c1c:	6f7a6972 	svcvs	0x007a6972
    2c20:	6c61746e 	cfstrdvs	mvd7, [r1], #-440	; 0xfffffe48
    2c24:	6f74735f 	svcvs	0x0074735f
    2c28:	61620070 	smcvs	8192	; 0x2000
    2c2c:	72676b63 	rsbvc	r6, r7, #101376	; 0x18c00
    2c30:	006e6565 	rsbeq	r6, lr, r5, ror #10
    2c34:	4344544c 	movtmi	r5, #17484	; 0x444c
    2c38:	6665445f 			; <UNDEFINED> instruction: 0x6665445f
    2c3c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2c40:	6f6c6f43 	svcvs	0x006c6f43
    2c44:	756c4272 	strbvc	r4, [ip, #-626]!	; 0x272
    2c48:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    2c4c:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2c50:	694c4246 	stmdbvs	ip, {r1, r2, r6, r9, lr}^
    2c54:	654c656e 	strbvs	r6, [ip, #-1390]	; 0x56e
    2c58:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2c5c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2c60:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
    2c64:	63697472 	cmnvs	r9, #1912602624	; 0x72000000
    2c68:	79536c61 	ldmdbvc	r3, {r0, r5, r6, sl, fp, sp, lr}^
    2c6c:	4c00636e 	stcmi	3, cr6, [r0], {110}	; 0x6e
    2c70:	5f434454 	svcpl	0x00434454
    2c74:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2c78:	61745354 	cmnvs	r4, r4, asr r3
    2c7c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2c80:	4344544c 	movtmi	r5, #17484	; 0x444c
    2c84:	726f485f 	rsbvc	r4, pc, #6225920	; 0x5f0000
    2c88:	6e6f7a69 	vnmulvs.f32	s15, s30, s19
    2c8c:	536c6174 	cmnpl	ip, #116, 2
    2c90:	00706f74 	rsbseq	r6, r0, r4, ror pc
    2c94:	4344544c 	movtmi	r5, #17484	; 0x444c
    2c98:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    2c9c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2ca0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2ca4:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ca8:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    2cac:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2cb0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2cb4:	544c0067 	strbpl	r0, [ip], #-103	; 0x67
    2cb8:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    2cbc:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
    2cc0:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
    2cc4:	756c4264 	strbvc	r4, [ip, #-612]!	; 0x264
    2cc8:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    2ccc:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    2cd0:	5f434454 	svcpl	0x00434454
    2cd4:	65756c42 	ldrbvs	r6, [r5, #-3138]!	; 0xc42
    2cd8:	74646957 	strbtvc	r6, [r4], #-2391	; 0x957
    2cdc:	48570068 	ldmdami	r7, {r3, r5, r6}^
    2ce0:	00524350 	subseq	r4, r2, r0, asr r3
    2ce4:	4344544c 	movtmi	r5, #17484	; 0x444c
    2ce8:	6665445f 			; <UNDEFINED> instruction: 0x6665445f
    2cec:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2cf0:	6f6c6f43 	svcvs	0x006c6f43
    2cf4:	65724772 	ldrbvs	r4, [r2, #-1906]!	; 0x772
    2cf8:	4c006e65 	stcmi	14, cr6, [r0], {101}	; 0x65
    2cfc:	5f434454 	svcpl	0x00434454
    2d00:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2d04:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2d08:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2d0c:	00746375 	rsbseq	r6, r4, r5, ror r3
    2d10:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d14:	7265565f 	rsbvc	r5, r5, #99614720	; 0x5f00000
    2d18:	61636974 	smcvs	13972	; 0x3694
    2d1c:	6f74536c 	svcvs	0x0074536c
    2d20:	544c0070 	strbpl	r0, [ip], #-112	; 0x70
    2d24:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2d28:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2d2c:	6979654b 	ldmdbvs	r9!, {r0, r1, r3, r6, r8, sl, sp, lr}^
    2d30:	495f676e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    2d34:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    2d38:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2d3c:	4c006665 	stcmi	6, cr6, [r0], {101}	; 0x65
    2d40:	5f434454 	svcpl	0x00434454
    2d44:	69726f48 	ldmdbvs	r2!, {r3, r6, r8, r9, sl, fp, sp, lr}^
    2d48:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2d4c:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
    2d50:	00747261 	rsbseq	r7, r4, r1, ror #4
    2d54:	61746f74 	cmnvs	r4, r4, ror pc
    2d58:	6469776c 	strbtvs	r7, [r9], #-1900	; 0x76c
    2d5c:	43006874 	movwmi	r6, #2164	; 0x874
    2d60:	5754554c 	ldrbpl	r5, [r4, -ip, asr #10]
    2d64:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2d68:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2d6c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    2d70:	5279654b 	rsbspl	r6, r9, #314572800	; 0x12c00000
    2d74:	54006465 	strpl	r6, [r0], #-1125	; 0x465
    2d78:	00524357 	subseq	r4, r2, r7, asr r3
    2d7c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2d80:	746f545f 	strbtvc	r5, [pc], #-1119	; 2d88 <_Min_Stack_Size+0x2988>
    2d84:	69576c61 	ldmdbvs	r7, {r0, r5, r6, sl, fp, sp, lr}^
    2d88:	00687464 	rsbeq	r7, r8, r4, ror #8
    2d8c:	52435253 	subpl	r5, r3, #805306373	; 0x30000005
    2d90:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2d94:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    2d98:	434b4300 	movtmi	r4, #45824	; 0xb300
    2d9c:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    2da0:	505f4344 	subspl	r4, pc, r4, asr #6
    2da4:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 2ca0 <_Min_Stack_Size+0x28a0>
    2da8:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2dac:	544c0079 	strbpl	r0, [ip], #-121	; 0x79
    2db0:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2db4:	4354554c 	cmpmi	r4, #76, 10	; 0x13000000
    2db8:	4200646d 	andmi	r6, r0, #1828716544	; 0x6d000000
    2dbc:	00524346 	subseq	r4, r2, r6, asr #6
    2dc0:	75636361 	strbvc	r6, [r3, #-865]!	; 0x361
    2dc4:	616c756d 	cmnvs	ip, sp, ror #10
    2dc8:	48646574 	stmdami	r4!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2dcc:	4c005042 	stcmi	0, cr5, [r0], {66}	; 0x42
    2dd0:	5f434454 	svcpl	0x00434454
    2dd4:	5f736f50 	svcpl	0x00736f50
    2dd8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2ddc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2de0:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    2de4:	5f434454 	svcpl	0x00434454
    2de8:	53736f50 	cmnpl	r3, #80, 30	; 0x140
    2dec:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2df0:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2df4:	57410074 	smlsldxpl	r0, r1, r4, r0
    2df8:	4c005243 	sfmmi	f5, 4, [r0], {67}	; 0x43
    2dfc:	5f434454 	svcpl	0x00434454
    2e00:	50746547 	rsbspl	r6, r4, r7, asr #10
    2e04:	7453736f 	ldrbvc	r7, [r3], #-879	; 0x36f
    2e08:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2e0c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e10:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    2e14:	64695764 	strbtvs	r5, [r9], #-1892	; 0x764
    2e18:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    2e1c:	5f434454 	svcpl	0x00434454
    2e20:	736e6f43 	cmnvc	lr, #268	; 0x10c
    2e24:	746e6174 	strbtvc	r6, [lr], #-372	; 0x174
    2e28:	68706c41 	ldmdavs	r0!, {r0, r6, sl, fp, sp, lr}^
    2e2c:	544c0061 	strbpl	r0, [ip], #-97	; 0x61
    2e30:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2e34:	5f54554c 	svcpl	0x0054554c
    2e38:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e3c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2e40:	00666544 	rsbeq	r6, r6, r4, asr #10
    2e44:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e48:	534f505f 	movtpl	r5, #61535	; 0xf05f
    2e4c:	544c0058 	strbpl	r0, [ip], #-88	; 0x58
    2e50:	505f4344 	subspl	r4, pc, r4, asr #6
    2e54:	0059534f 	subseq	r5, r9, pc, asr #6
    2e58:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e5c:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    2e60:	74537265 	ldrbvc	r7, [r3], #-613	; 0x265
    2e64:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2e68:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e6c:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2e70:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2e74:	616c4674 	smcvs	50276	; 0xc464
    2e78:	61745367 	cmnvs	r4, r7, ror #6
    2e7c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2e80:	4344544c 	movtmi	r5, #17484	; 0x444c
    2e84:	7469445f 	strbtvc	r4, [r9], #-1119	; 0x45f
    2e88:	43726568 	cmnmi	r2, #104, 10	; 0x1a000000
    2e8c:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    2e90:	5f434454 	svcpl	0x00434454
    2e94:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2e98:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2e9c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2ea0:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    2ea4:	5f434454 	svcpl	0x00434454
    2ea8:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2eac:	706c4172 	rsbvc	r4, ip, r2, ror r1
    2eb0:	43006168 	movwmi	r6, #360	; 0x168
    2eb4:	52414246 	subpl	r4, r1, #1610612740	; 0x60000004
    2eb8:	756c6300 	strbvc	r6, [ip, #-768]!	; 0x300
    2ebc:	64646174 	strbtvs	r6, [r4], #-372	; 0x174
    2ec0:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2ec4:	614c5f43 	cmpvs	ip, r3, asr #30
    2ec8:	5f726579 	svcpl	0x00726579
    2ecc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2ed0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2ed4:	4c007463 	cfstrsmi	mvf7, [r0], {99}	; 0x63
    2ed8:	5f434454 	svcpl	0x00434454
    2edc:	65657247 	strbvs	r7, [r5, #-583]!	; 0x247
    2ee0:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2ee4:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    2ee8:	5f434454 	svcpl	0x00434454
    2eec:	61656c43 	cmnvs	r5, r3, asr #24
    2ef0:	50544972 	subspl	r4, r4, r2, ror r9
    2ef4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2ef8:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2efc:	66630074 			; <UNDEFINED> instruction: 0x66630074
    2f00:	4c007062 	stcmi	0, cr7, [r0], {98}	; 0x62
    2f04:	5f434454 	svcpl	0x00434454
    2f08:	53424752 	movtpl	r4, #10066	; 0x2752
    2f0c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2f10:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2f14:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    2f18:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    2f1c:	544c0044 	strbpl	r0, [ip], #-68	; 0x44
    2f20:	445f4344 	ldrbmi	r4, [pc], #-836	; 2f28 <_Min_Stack_Size+0x2b28>
    2f24:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2f28:	6f43746c 	svcvs	0x0043746c
    2f2c:	41726f6c 	cmnmi	r2, ip, ror #30
    2f30:	6168706c 	cmnvs	r8, ip, rrx
    2f34:	50494c00 	subpl	r4, r9, r0, lsl #24
    2f38:	74005243 	strvc	r5, [r0], #-579	; 0x243
    2f3c:	72706d65 	rsbsvc	r6, r0, #6464	; 0x1940
    2f40:	4c006765 	stcmi	7, cr6, [r0], {101}	; 0x65
    2f44:	5f434454 	svcpl	0x00434454
    2f48:	54554c43 	ldrbpl	r4, [r5], #-3139	; 0xc43
    2f4c:	65726441 	ldrbvs	r6, [r2, #-1089]!	; 0x441
    2f50:	4c007373 	stcmi	3, cr7, [r0], {115}	; 0x73
    2f54:	5f434454 	svcpl	0x00434454
    2f58:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    2f5c:	64644172 	strbtvs	r4, [r4], #-370	; 0x172
    2f60:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2f64:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2f68:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2f6c:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    2f70:	5f434454 	svcpl	0x00434454
    2f74:	4c424643 	mcrrmi	6, 4, r4, r2, cr3
    2f78:	4e656e69 	cdpmi	14, 6, cr6, cr5, cr9, {3}
    2f7c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    2f80:	50430072 	subpl	r0, r3, r2, ror r0
    2f84:	42005253 	andmi	r5, r0, #805306373	; 0x30000005
    2f88:	00524350 	subseq	r4, r2, r0, asr r3
    2f8c:	4344544c 	movtmi	r5, #17484	; 0x444c
    2f90:	6572475f 	ldrbvs	r4, [r2, #-1887]!	; 0x75f
    2f94:	69576e65 	ldmdbvs	r7, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2f98:	00687464 	rsbeq	r7, r8, r4, ror #8
    2f9c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2fa0:	00587465 	subseq	r7, r8, r5, ror #8
    2fa4:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2fa8:	00597465 	subseq	r7, r9, r5, ror #8
    2fac:	4344544c 	movtmi	r5, #17484	; 0x444c
    2fb0:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2fb4:	6f72676b 	svcvs	0x0072676b
    2fb8:	52646e75 	rsbpl	r6, r4, #1872	; 0x750
    2fbc:	61566465 	cmpvs	r6, r5, ror #8
    2fc0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2fc4:	69726f68 	ldmdbvs	r2!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2fc8:	746e6f7a 	strbtvc	r6, [lr], #-3962	; 0xf7a
    2fcc:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2fd0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    2fd4:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2fd8:	63415f43 	movtvs	r5, #8003	; 0x1f43
    2fdc:	756d7563 	strbvc	r7, [sp, #-1379]!	; 0x563
    2fe0:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2fe4:	50424864 	subpl	r4, r2, r4, ror #16
    2fe8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    2fec:	6f545f43 	svcvs	0x00545f43
    2ff0:	486c6174 	stmdami	ip!, {r2, r4, r5, r6, r8, sp, lr}^
    2ff4:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    2ff8:	73687700 	cmnvc	r8, #0, 14
    2ffc:	736f7070 	cmnvc	pc, #112	; 0x70
    3000:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    3004:	6f435f43 	svcvs	0x00435f43
    3008:	4b726f6c 	blmi	1c9edc0 <_Min_Stack_Size+0x1c9e9c0>
    300c:	6c427965 	mcrrvs	9, 6, r7, r2, cr5
    3010:	53006575 	movwpl	r6, #1397	; 0x575
    3014:	00524353 	subseq	r4, r2, r3, asr r3
    3018:	4344544c 	movtmi	r5, #17484	; 0x444c
    301c:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 2ea8 <_Min_Stack_Size+0x2aa8>
    3020:	654b726f 	strbvs	r7, [fp, #-623]	; 0x26f
    3024:	676e6979 			; <UNDEFINED> instruction: 0x676e6979
    3028:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    302c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    3030:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    3034:	5f434454 	svcpl	0x00434454
    3038:	6f504544 	svcvs	0x00504544
    303c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    3040:	4c007974 	stcmi	9, cr7, [r0], {116}	; 0x74
    3044:	5f434454 	svcpl	0x00434454
    3048:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0x950
    304c:	726f466c 	rsbvc	r4, pc, #108, 12	; 0x6c00000
    3050:	0074616d 	rsbseq	r6, r4, sp, ror #2
    3054:	4344544c 	movtmi	r5, #17484	; 0x444c
    3058:	414c465f 	cmpmi	ip, pc, asr r6
    305c:	544c0047 	strbpl	r0, [ip], #-71	; 0x47
    3060:	505f4344 	subspl	r4, pc, r4, asr #6
    3064:	7954736f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3068:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    306c:	544c0066 	strbpl	r0, [ip], #-102	; 0x66
    3070:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    3074:	616f6c65 	cmnvs	pc, r5, ror #24
    3078:	544c0064 	strbpl	r0, [ip], #-100	; 0x64
    307c:	425f4344 	subsmi	r4, pc, #68, 6	; 0x10000001
    3080:	646e656c 	strbtvs	r6, [lr], #-1388	; 0x56c
    3084:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    3088:	6f746361 	svcvs	0x00746361
    308c:	00315f72 	eorseq	r5, r1, r2, ror pc
    3090:	4344544c 	movtmi	r5, #17484	; 0x444c
    3094:	656c425f 	strbvs	r4, [ip, #-607]!	; 0x25f
    3098:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    309c:	63614667 	cmnvs	r1, #108003328	; 0x6700000
    30a0:	5f726f74 	svcpl	0x00726f74
    30a4:	43440032 	movtmi	r0, #16434	; 0x4032
    30a8:	76005243 	strvc	r5, [r0], -r3, asr #4
    30ac:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    30b0:	5f6c6163 	svcpl	0x006c6163
    30b4:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    30b8:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    30bc:	494c5f43 	stmdbmi	ip, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    30c0:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    30c4:	00676966 	rsbeq	r6, r7, r6, ror #18
    30c8:	4344544c 	movtmi	r5, #17484	; 0x444c
    30cc:	4247525f 	submi	r5, r7, #-268435451	; 0xf0000005
    30d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    30d4:	00666544 	rsbeq	r6, r6, r4, asr #10
    30d8:	52534443 	subspl	r4, r3, #1124073472	; 0x43000000
    30dc:	44544c00 	ldrbmi	r4, [r4], #-3072	; 0xc00
    30e0:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    30e4:	6c615664 	stclvs	6, cr5, [r1], #-400	; 0xfffffe70
    30e8:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    30ec:	5f434454 	svcpl	0x00434454
    30f0:	6579614c 	ldrbvs	r6, [r9, #-332]!	; 0x14c
    30f4:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    30f8:	62696c00 	rsbvs	r6, r9, #0, 24
    30fc:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3100:	5f584554 	svcpl	0x00584554
    3104:	5f46344d 	svcpl	0x0046344d
    3108:	334d5453 	movtcc	r5, #54355	; 0xd453
    310c:	2f344632 	svccs	0x00344632
    3110:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3114:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3118:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    311c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3120:	5f787834 	svcpl	0x00787834
    3124:	50647453 	rsbpl	r7, r4, r3, asr r4
    3128:	70697265 	rsbvc	r7, r9, r5, ror #4
    312c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3130:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3134:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3138:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    313c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3140:	6c5f7878 	mrrcvs	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    3144:	2e636474 	mcrcs	4, 3, r6, cr3, cr4, {3}
    3148:	544c0063 	strbpl	r0, [ip], #-99	; 0x63
    314c:	525f4344 	subspl	r4, pc, #68, 6	; 0x10000001
    3150:	495f4247 	ldmdbmi	pc, {r0, r1, r2, r6, r9, lr}^	; <UNPREDICTABLE>
    3154:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3158:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    315c:	544c0074 	strbpl	r0, [ip], #-116	; 0x74
    3160:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    3164:	6c6f5053 	stclvs	0, cr5, [pc], #-332	; 3020 <_Min_Stack_Size+0x2c20>
    3168:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    316c:	544c0079 	strbpl	r0, [ip], #-121	; 0x79
    3170:	435f4344 	cmpmi	pc, #68, 6	; 0x10000001
    3174:	69504246 	ldmdbvs	r0, {r1, r2, r6, r9, lr}^
    3178:	00686374 	rsbeq	r6, r8, r4, ror r3
    317c:	72676364 	rsbvc	r6, r7, #100, 6	; 0x90000001
    3180:	006e6565 	rsbeq	r6, lr, r5, ror #10
    3184:	4344544c 	movtmi	r5, #17484	; 0x444c
    3188:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    318c:	6f507265 	svcvs	0x00507265
    3190:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    3194:	4c006e6f 	stcmi	14, cr6, [r0], {111}	; 0x6f
    3198:	5f434454 	svcpl	0x00434454
    319c:	6f435449 	svcvs	0x00435449
    31a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    31a4:	43465000 	movtmi	r5, #24576	; 0x6000
    31a8:	544c0052 	strbpl	r0, [ip], #-82	; 0x52
    31ac:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    31b0:	47527465 	ldrbmi	r7, [r2, -r5, ror #8]
    31b4:	64695742 	strbtvs	r5, [r9], #-1858	; 0x742
    31b8:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    31bc:	5f434454 	svcpl	0x00434454
    31c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    31c4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    31c8:	00666544 	rsbeq	r6, r6, r4, asr #10
    31cc:	4d454d50 	stclmi	13, cr4, [r5, #-320]	; 0xfffffec0
    31d0:	4d460032 	stclmi	0, cr0, [r6, #-200]	; 0xffffff38
    31d4:	78455f43 	stmdavc	r5, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    31d8:	646e6574 	strbtvs	r6, [lr], #-1396	; 0x574
    31dc:	6f4d6465 	svcvs	0x004d6465
    31e0:	50006564 	andpl	r6, r0, r4, ror #10
    31e4:	344d454d 	strbcc	r4, [sp], #-1357	; 0x54d
    31e8:	434d4600 	movtmi	r4, #54784	; 0xd600
    31ec:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    31f0:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    31f4:	53006761 	movwpl	r6, #1889	; 0x761
    31f8:	00524344 	subseq	r4, r2, r4, asr #6
    31fc:	5f434d46 	svcpl	0x00434d46
    3200:	6b6e6142 	blvs	1b9b710 <_Min_Stack_Size+0x1b9b310>
    3204:	5f365f35 	svcpl	0x00365f35
    3208:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    320c:	00666544 	rsbeq	r6, r6, r4, asr #10
    3210:	5f434d46 	svcpl	0x00434d46
    3214:	41524453 	cmpmi	r2, r3, asr r4
    3218:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    321c:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3220:	41435f43 	cmpmi	r3, r3, asr #30
    3224:	74614c53 	strbtvc	r4, [r1], #-3155	; 0xc53
    3228:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    322c:	63636500 	cmnvs	r3, #0, 10
    3230:	006c6176 	rsbeq	r6, ip, r6, ror r1
    3234:	5f434d46 	svcpl	0x00434d46
    3238:	666c6553 			; <UNDEFINED> instruction: 0x666c6553
    323c:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
    3240:	54687365 	strbtpl	r7, [r8], #-869	; 0x365
    3244:	00656d69 	rsbeq	r6, r5, r9, ror #26
    3248:	4d454d50 	stclmi	13, cr4, [r5, #-320]	; 0xfffffec0
    324c:	4d460033 	stclmi	0, cr0, [r6, #-204]	; 0xffffff34
    3250:	61575f43 	cmpvs	r7, r3, asr #30
    3254:	69537469 	ldmdbvs	r3, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3258:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    325c:	616c6f50 	cmnvs	ip, r0, asr pc
    3260:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3264:	434d4600 	movtmi	r4, #54784	; 0xd600
    3268:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 3270 <_Min_Stack_Size+0x2e70>
    326c:	67655265 	strbvs	r5, [r5, -r5, ror #4]!
    3270:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    3274:	66654472 			; <UNDEFINED> instruction: 0x66654472
    3278:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    327c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3280:	54524453 	ldrbpl	r4, [r2], #-1107	; 0x453
    3284:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    3288:	6f435f43 	svcvs	0x00435f43
    328c:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    3290:	63617053 	cmnvs	r1, #83	; 0x53
    3294:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    3298:	53676e69 	cmnpl	r7, #1680	; 0x690
    329c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    32a0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    32a4:	6f435f43 	svcvs	0x00435f43
    32a8:	6e69746e 	cdpvs	4, 6, cr7, cr9, cr14, {3}
    32ac:	4373756f 	cmnmi	r3, #465567744	; 0x1bc00000
    32b0:	6b636f6c 	blvs	18df068 <_Min_Stack_Size+0x18dec68>
    32b4:	434d4600 	movtmi	r4, #54784	; 0xd600
    32b8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    32bc:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0x574
    32c0:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    32c4:	69547972 	ldmdbvs	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    32c8:	6c00656d 	cfstr32vs	mvfx6, [r0], {109}	; 0x6d
    32cc:	432f6269 	teqmi	pc, #-1879048186	; 0x90000006
    32d0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    32d4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    32d8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    32dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    32e0:	694c2f34 	stmdbvs	ip, {r2, r4, r5, r8, r9, sl, fp, sp}^
    32e4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    32e8:	2f736569 	svccs	0x00736569
    32ec:	334d5453 	movtcc	r5, #54355	; 0xd453
    32f0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    32f4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    32f8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    32fc:	5f687069 	svcpl	0x00687069
    3300:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3304:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3308:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    330c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3310:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3314:	636d665f 	cmnvs	sp, #99614720	; 0x5f00000
    3318:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    331c:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3320:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    3324:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3328:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    332c:	46007463 	strmi	r7, [r0], -r3, ror #8
    3330:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3334:	316b6e61 	cmncc	fp, r1, ror #28
    3338:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    333c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3340:	53445300 	movtpl	r5, #17152	; 0x4300
    3344:	44530052 	ldrbmi	r0, [r3], #-82	; 0x52
    3348:	46005254 			; <UNDEFINED> instruction: 0x46005254
    334c:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3350:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    3354:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    3358:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    335c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3360:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    3364:	69485f43 	stmdbvs	r8, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3368:	7465535a 	strbtvc	r5, [r5], #-858	; 0x35a
    336c:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    3370:	4600656d 	strmi	r6, [r0], -sp, ror #10
    3374:	475f434d 	ldrbmi	r4, [pc, -sp, asr #6]
    3378:	6f4d7465 	svcvs	0x004d7465
    337c:	74536564 	ldrbvc	r6, [r3], #-1380	; 0x564
    3380:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3384:	43434500 	movtmi	r4, #13568	; 0x3500
    3388:	46003352 			; <UNDEFINED> instruction: 0x46003352
    338c:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3390:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    3394:	74534d41 	ldrbvc	r4, [r3], #-3393	; 0xd41
    3398:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    339c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    33a0:	434d4600 	movtmi	r4, #54784	; 0xd600
    33a4:	4343505f 	movtmi	r5, #12383	; 0x305f
    33a8:	44445241 	strbmi	r5, [r4], #-577	; 0x241
    33ac:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    33b0:	43450074 	movtmi	r0, #20596	; 0x5074
    33b4:	00325243 	eorseq	r5, r2, r3, asr #4
    33b8:	5f434d46 	svcpl	0x00434d46
    33bc:	53524f4e 	cmppl	r2, #312	; 0x138
    33c0:	444d4152 	strbmi	r4, [sp], #-338	; 0x152
    33c4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    33c8:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    33cc:	414e5f43 	cmpmi	lr, r3, asr #30
    33d0:	505f444e 	subspl	r4, pc, lr, asr #8
    33d4:	52414343 	subpl	r4, r1, #201326593	; 0xc000001
    33d8:	6d695444 	cfstrdvs	mvd5, [r9, #-272]!	; 0xfffffef0
    33dc:	49676e69 	stmdbmi	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    33e0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    33e4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    33e8:	46006665 	strmi	r6, [r0], -r5, ror #12
    33ec:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    33f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    33f4:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    33f8:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    33fc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3400:	434d4600 	movtmi	r4, #54784	; 0xd600
    3404:	6978455f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
    3408:	6c655374 	stclvs	3, cr5, [r5], #-464	; 0xfffffe30
    340c:	66655266 	strbtvs	r5, [r5], -r6, ror #4
    3410:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3414:	616c6544 	cmnvs	ip, r4, asr #10
    3418:	6d740079 	ldclvs	0, cr0, [r4, #-484]!	; 0xfffffe1c
    341c:	74617070 	strbtvc	r7, [r1], #-112	; 0x70
    3420:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    3424:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3428:	434d4152 	movtmi	r4, #53586	; 0xd152
    342c:	6f43646d 	svcvs	0x0043646d
    3430:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3434:	434d4600 	movtmi	r4, #54784	; 0xd600
    3438:	4d44535f 	stclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    343c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3440:	74614479 	strbtvc	r4, [r1], #-1145	; 0x479
    3444:	64695761 	strbtvs	r5, [r9], #-1889	; 0x761
    3448:	46006874 			; <UNDEFINED> instruction: 0x46006874
    344c:	505f434d 	subspl	r4, pc, sp, asr #6
    3450:	52414343 	subpl	r4, r1, #201326593	; 0xc000001
    3454:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3458:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    345c:	74415f43 	strbvc	r5, [r1], #-3907	; 0xf43
    3460:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    3464:	53657475 	cmnpl	r5, #1962934272	; 0x75000000
    3468:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
    346c:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3470:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    3474:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3478:	434d4600 	movtmi	r4, #54784	; 0xd600
    347c:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    3480:	72574d41 	subsvc	r4, r7, #4160	; 0x1040
    3484:	50657469 	rsbpl	r7, r5, r9, ror #8
    3488:	65746f72 	ldrbvs	r6, [r4, #-3954]!	; 0xf72
    348c:	6f697463 	svcvs	0x00697463
    3490:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    3494:	00676966 	rsbeq	r6, r7, r6, ror #18
    3498:	5f434d46 	svcpl	0x00434d46
    349c:	61746144 	cmnvs	r4, r4, asr #2
    34a0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    34a4:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    34a8:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    34ac:	4f4e5f43 	svcmi	0x004e5f43
    34b0:	41525352 	cmpmi	r2, r2, asr r3
    34b4:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    34b8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    34bc:	00746375 	rsbseq	r6, r4, r5, ror r3
    34c0:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    34c4:	434d4600 	movtmi	r4, #54784	; 0xd600
    34c8:	7475415f 	ldrbtvc	r4, [r5], #-351	; 0x15f
    34cc:	6665526f 	strbtvs	r5, [r5], -pc, ror #4
    34d0:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    34d4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    34d8:	46007265 	strmi	r7, [r0], -r5, ror #4
    34dc:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    34e0:	326b6e61 	rsbcc	r6, fp, #1552	; 0x610
    34e4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    34e8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    34ec:	434d4600 	movtmi	r4, #54784	; 0xd600
    34f0:	4c43545f 	cfstrdmi	mvd5, [r3], {95}	; 0x5f
    34f4:	74655352 	strbtvc	r5, [r5], #-850	; 0x352
    34f8:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    34fc:	4600656d 	strmi	r6, [r0], -sp, ror #10
    3500:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    3504:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    3508:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    350c:	6f4d7373 	svcvs	0x004d7373
    3510:	46006564 	strmi	r6, [r0], -r4, ror #10
    3514:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    3518:	50646165 	rsbpl	r6, r4, r5, ror #2
    351c:	44657069 	strbtmi	r7, [r5], #-105	; 0x69
    3520:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    3524:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    3528:	00726370 	rsbseq	r6, r2, r0, ror r3
    352c:	4d434453 	cfstrdmi	mvd4, [r3, #-332]	; 0xfffffeb4
    3530:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    3534:	43525f43 	cmpmi	r2, #268	; 0x10c
    3538:	6c654444 	cfstrdvs	mvd4, [r5], #-272	; 0xfffffef0
    353c:	46007961 	strmi	r7, [r0], -r1, ror #18
    3540:	535f434d 	cmppl	pc, #872415233	; 0x34000001
    3544:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
    3548:	73657266 	cmnvc	r5, #1610612742	; 0x60000006
    354c:	756f4368 	strbvc	r4, [pc, #-872]!	; 31ec <_Min_Stack_Size+0x2dec>
    3550:	4600746e 	strmi	r7, [r0], -lr, ror #8
    3554:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    3558:	53746961 	cmnpl	r4, #1589248	; 0x184000
    355c:	616e6769 	cmnvs	lr, r9, ror #14
    3560:	7463416c 	strbtvc	r4, [r3], #-364	; 0x16c
    3564:	00657669 	rsbeq	r7, r5, r9, ror #12
    3568:	5f434d46 	svcpl	0x00434d46
    356c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    3570:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3574:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3578:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    357c:	74754174 	ldrbtvc	r4, [r5], #-372	; 0x174
    3580:	6665526f 	strbtvs	r5, [r5], -pc, ror #4
    3584:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3588:	6d754e5f 	ldclvs	14, cr4, [r5, #-380]!	; 0xfffffe84
    358c:	00726562 	rsbseq	r6, r2, r2, ror #10
    3590:	5f434d46 	svcpl	0x00434d46
    3594:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    3598:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    359c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    35a0:	46007469 	strmi	r7, [r0], -r9, ror #8
    35a4:	545f434d 	ldrbpl	r4, [pc], #-845	; 35ac <_Min_Stack_Size+0x31ac>
    35a8:	65535241 	ldrbvs	r5, [r3, #-577]	; 0x241
    35ac:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    35b0:	00656d69 	rsbeq	r6, r5, r9, ror #26
    35b4:	5f434d46 	svcpl	0x00434d46
    35b8:	43776f52 	cmnmi	r7, #328	; 0x148
    35bc:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    35c0:	616c6544 	cmnvs	ip, r4, asr #10
    35c4:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    35c8:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    35cc:	494d4152 	stmdbmi	sp, {r1, r4, r6, r8, lr}^
    35d0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    35d4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    35d8:	46006665 	strmi	r6, [r0], -r5, ror #12
    35dc:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    35e0:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    35e4:	6d434d41 	stclvs	13, cr4, [r3, #-260]	; 0xfffffefc
    35e8:	4d460064 	stclmi	0, cr0, [r6, #-400]	; 0xfffffe70
    35ec:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    35f0:	444d4152 	strbmi	r4, [sp], #-338	; 0x152
    35f4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    35f8:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    35fc:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    3600:	4f657469 	svcmi	0x00657469
    3604:	61726570 	cmnvs	r2, r0, ror r5
    3608:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    360c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3610:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    3614:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3618:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    361c:	75425f43 	strbvc	r5, [r2, #-3907]	; 0xf43
    3620:	72755473 	rsbsvc	r5, r5, #1929379840	; 0x73000000
    3624:	6f72416e 	svcvs	0x0072416e
    3628:	44646e75 	strbtmi	r6, [r4], #-3701	; 0xe75
    362c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    3630:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3634:	5f434d46 	svcpl	0x00434d46
    3638:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    363c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    3640:	6b6e6142 	blvs	1b9bb50 <_Min_Stack_Size+0x1b9b750>
    3644:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    3648:	74007265 	strvc	r7, [r0], #-613	; 0x265
    364c:	6d70706d 	ldclvs	0, cr7, [r0, #-436]!	; 0xfffffe4c
    3650:	46006d65 	strmi	r6, [r0], -r5, ror #26
    3654:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    3658:	53746961 	cmnpl	r4, #1589248	; 0x184000
    365c:	616e6769 	cmnvs	lr, r9, ror #14
    3660:	4d46006c 	stclmi	0, cr0, [r6, #-432]	; 0xfffffe50
    3664:	64415f43 	strbvs	r5, [r1], #-3907	; 0xf43
    3668:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    366c:	6c6f4873 	stclvs	8, cr4, [pc], #-460	; 34a8 <_Min_Stack_Size+0x30a8>
    3670:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    3674:	4d460065 	stclmi	0, cr0, [r6, #-404]	; 0xfffffe6c
    3678:	754e5f43 	strbvc	r5, [lr, #-3907]	; 0xf43
    367c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    3680:	52435000 	subpl	r5, r3, #0
    3684:	43500032 	cmpmi	r0, #50	; 0x32
    3688:	50003352 	andpl	r3, r0, r2, asr r3
    368c:	00345243 	eorseq	r5, r4, r3, asr #4
    3690:	5f434d46 	svcpl	0x00434d46
    3694:	41434350 	cmpmi	r3, r0, asr r3
    3698:	6e494452 	mcrvs	4, 2, r4, cr9, cr2, {2}
    369c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    36a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    36a4:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    36a8:	50525f43 	subspl	r5, r2, r3, asr #30
    36ac:	616c6544 	cmnvs	ip, r4, asr #10
    36b0:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    36b4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    36b8:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    36bc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    36c0:	6d740073 	ldclvs	0, cr0, [r4, #-460]!	; 0xfffffe34
    36c4:	00317270 	eorseq	r7, r1, r0, ror r2
    36c8:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    36cc:	6d740032 	ldclvs	0, cr0, [r4, #-200]!	; 0xffffff38
    36d0:	00337270 	eorseq	r7, r3, r0, ror r2
    36d4:	5f434d46 	svcpl	0x00434d46
    36d8:	41524453 	cmpmi	r2, r3, asr r4
    36dc:	6d6f434d 	stclvs	3, cr4, [pc, #-308]!	; 35b0 <_Min_Stack_Size+0x31b0>
    36e0:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    36e4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    36e8:	50007463 	andpl	r7, r0, r3, ror #8
    36ec:	32545441 	subscc	r5, r4, #1090519040	; 0x41000000
    36f0:	54415000 	strbpl	r5, [r1], #-0
    36f4:	46003354 			; <UNDEFINED> instruction: 0x46003354
    36f8:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    36fc:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    3700:	7469426e 	strbtvc	r4, [r9], #-622	; 0x26e
    3704:	6d754e73 	ldclvs	14, cr4, [r5, #-460]!	; 0xfffffe34
    3708:	00726562 	rsbseq	r6, r2, r2, ror #10
    370c:	5f434d46 	svcpl	0x00434d46
    3710:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    3714:	6f4d7373 	svcvs	0x004d7373
    3718:	46006564 	strmi	r6, [r0], -r4, ror #10
    371c:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3720:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    3724:	6e494d41 	cdpvs	13, 4, cr4, cr9, cr1, {2}
    3728:	46007469 	strmi	r7, [r0], -r9, ror #8
    372c:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    3730:	5253524f 	subspl	r5, r3, #-268435452	; 0xf0000004
    3734:	69544d41 	ldmdbvs	r4, {r0, r6, r8, sl, fp, lr}^
    3738:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    373c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3740:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3744:	00666544 	rsbeq	r6, r6, r4, asr #10
    3748:	5f434d46 	svcpl	0x00434d46
    374c:	6b6e6142 	blvs	1b9bc5c <_Min_Stack_Size+0x1b9b85c>
    3750:	79545f33 	ldmdbvc	r4, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    3754:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3758:	4d460066 	stclmi	0, cr0, [r6, #-408]	; 0xfffffe68
    375c:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    3760:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    3764:	74737275 	ldrbtvc	r7, [r3], #-629	; 0x275
    3768:	434d4600 	movtmi	r4, #54784	; 0xd600
    376c:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    3770:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    3774:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3778:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    377c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3780:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    3784:	5f45316b 	svcpl	0x0045316b
    3788:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    378c:	00666544 	rsbeq	r6, r6, r4, asr #10
    3790:	5f434d46 	svcpl	0x00434d46
    3794:	41434350 	cmpmi	r3, r0, asr r3
    3798:	74534452 	ldrbvc	r4, [r3], #-1106	; 0x452
    379c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    37a0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    37a4:	434d4600 	movtmi	r4, #54784	; 0xd600
    37a8:	6e61425f 	mcrvs	2, 3, r4, cr1, cr15, {2}
    37ac:	4d46006b 	stclmi	0, cr0, [r6, #-428]	; 0xfffffe54
    37b0:	72575f43 	subsvc	r5, r7, #268	; 0x10c
    37b4:	6f4d7061 	svcvs	0x004d7061
    37b8:	46006564 	strmi	r6, [r0], -r4, ror #10
    37bc:	425f434d 	subsmi	r4, pc, #872415233	; 0x34000001
    37c0:	346b6e61 	strbtcc	r6, [fp], #-3681	; 0xe61
    37c4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    37c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    37cc:	434d4600 	movtmi	r4, #54784	; 0xd600
    37d0:	6c6f485f 	stclvs	8, cr4, [pc], #-380	; 365c <_Min_Stack_Size+0x325c>
    37d4:	74655364 	strbtvc	r5, [r5], #-868	; 0x364
    37d8:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    37dc:	4600656d 	strmi	r6, [r0], -sp, ror #10
    37e0:	4e5f434d 	cdpmi	3, 5, cr4, cr15, cr13, {2}
    37e4:	49444e41 	stmdbmi	r4, {r0, r6, r9, sl, fp, lr}^
    37e8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    37ec:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    37f0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    37f4:	43505f43 	cmpmi	r0, #268	; 0x10c
    37f8:	44524143 	ldrbmi	r4, [r2], #-323	; 0x143
    37fc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3800:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    3804:	46003272 			; <UNDEFINED> instruction: 0x46003272
    3808:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    380c:	616d6d6f 	cmnvs	sp, pc, ror #26
    3810:	6154646e 	cmpvs	r4, lr, ror #8
    3814:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    3818:	434d4600 	movtmi	r4, #54784	; 0xd600
    381c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3820:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3824:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    3828:	46007375 			; <UNDEFINED> instruction: 0x46007375
    382c:	415f434d 	cmpmi	pc, sp, asr #6
    3830:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    3834:	65537373 	ldrbvs	r7, [r3, #-883]	; 0x373
    3838:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    383c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    3840:	5f434d46 	svcpl	0x00434d46
    3844:	42776f52 	rsbsmi	r6, r7, #328	; 0x148
    3848:	4e737469 	cdpmi	4, 7, cr7, cr3, cr9, {3}
    384c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    3850:	41500072 	cmpmi	r0, r2, ror r0
    3854:	00345454 	eorseq	r5, r4, r4, asr r4
    3858:	5f434d46 	svcpl	0x00434d46
    385c:	6f6d654d 	svcvs	0x006d654d
    3860:	79547972 	ldmdbvc	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3864:	46006570 			; <UNDEFINED> instruction: 0x46006570
    3868:	525f434d 	subspl	r4, pc, #872415233	; 0x34000001
    386c:	57646165 	strbpl	r6, [r4, -r5, ror #2]!
    3870:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    3874:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3878:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    387c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3880:	54574200 	ldrbpl	r4, [r7], #-512	; 0x200
    3884:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
    3888:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    388c:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3890:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    3894:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3898:	00746942 	rsbseq	r6, r4, r2, asr #18
    389c:	5f434d46 	svcpl	0x00434d46
    38a0:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    38a4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    38a8:	46007469 	strmi	r7, [r0], -r9, ror #8
    38ac:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    38b0:	53746961 	cmnpl	r4, #1589248	; 0x184000
    38b4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    38b8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    38bc:	434d4600 	movtmi	r4, #54784	; 0xd600
    38c0:	4e414e5f 	mcrmi	14, 2, r4, cr1, cr15, {2}
    38c4:	43434544 	movtmi	r4, #13636	; 0x3544
    38c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    38cc:	5f434d46 	svcpl	0x00434d46
    38d0:	61746144 	cmnvs	r4, r4, asr #2
    38d4:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0x14c
    38d8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    38dc:	5f434d46 	svcpl	0x00434d46
    38e0:	41524453 	cmpmi	r2, r3, asr r4
    38e4:	6d6f434d 	stclvs	3, cr4, [pc, #-308]!	; 37b8 <_Min_Stack_Size+0x33b8>
    38e8:	646e616d 	strbtvs	r6, [lr], #-365	; 0x16d
    38ec:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    38f0:	00666544 	rsbeq	r6, r6, r4, asr #10
    38f4:	5f434d46 	svcpl	0x00434d46
    38f8:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xf4c
    38fc:	63416f54 	movtvs	r6, #8020	; 0x1f54
    3900:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    3904:	616c6544 	cmnvs	ip, r4, asr #10
    3908:	4d460079 	stclmi	0, cr0, [r6, #-484]	; 0xfffffe1c
    390c:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    3910:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3914:	7265506b 	rsbvc	r5, r5, #107	; 0x6b
    3918:	00646f69 	rsbeq	r6, r4, r9, ror #30
    391c:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    3920:	4d460072 	stclmi	0, cr0, [r6, #-456]	; 0xfffffe38
    3924:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    3928:	43434574 	movtmi	r4, #13684	; 0x3574
    392c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3930:	6165525f 	cmnvs	r5, pc, asr r2
    3934:	72754264 	rsbsvc	r4, r5, #100, 4	; 0x40000006
    3938:	46007473 			; <UNDEFINED> instruction: 0x46007473
    393c:	455f434d 	ldrbmi	r4, [pc, #-845]	; 35f7 <_Min_Stack_Size+0x31f7>
    3940:	61504343 	cmpvs	r0, r3, asr #6
    3944:	69536567 	ldmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    3948:	4600657a 			; <UNDEFINED> instruction: 0x4600657a
    394c:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3950:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    3954:	00676966 	rsbeq	r6, r7, r6, ror #18
    3958:	5f434d46 	svcpl	0x00434d46
    395c:	41434350 	cmpmi	r3, r0, asr r3
    3960:	6e494452 	mcrvs	4, 2, r4, cr9, cr2, {2}
    3964:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    3968:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    396c:	434d4600 	movtmi	r4, #54784	; 0xd600
    3970:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    3974:	69544d41 	ldmdbvs	r4, {r0, r6, r8, sl, fp, lr}^
    3978:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    397c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3980:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3984:	00666544 	rsbeq	r6, r6, r4, asr #10
    3988:	5f434d46 	svcpl	0x00434d46
    398c:	00434345 	subeq	r4, r3, r5, asr #6
    3990:	5f434d46 	svcpl	0x00434d46
    3994:	6f6d654d 	svcvs	0x006d654d
    3998:	61447972 	hvcvs	18322	; 0x4792
    399c:	69576174 	ldmdbvs	r7, {r2, r4, r5, r6, r8, sp, lr}^
    39a0:	00687464 	rsbeq	r7, r8, r4, ror #8
    39a4:	5f434d46 	svcpl	0x00434d46
    39a8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    39ac:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    39b0:	00347270 	eorseq	r7, r4, r0, ror r2
    39b4:	5f434d46 	svcpl	0x00434d46
    39b8:	41524453 	cmpmi	r2, r3, asr r4
    39bc:	7274534d 	rsbsvc	r5, r4, #872415233	; 0x34000001
    39c0:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    39c4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    39c8:	5f434d46 	svcpl	0x00434d46
    39cc:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    39d0:	6f725065 	svcvs	0x00725065
    39d4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    39d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    39dc:	5f434d46 	svcpl	0x00434d46
    39e0:	46005449 	strmi	r5, [r0], -r9, asr #8
    39e4:	415f434d 	cmpmi	pc, sp, asr #6
    39e8:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    39ec:	6e6f7268 	cdpvs	2, 6, cr7, cr15, cr8, {3}
    39f0:	5773756f 	ldrbpl	r7, [r3, -pc, ror #10]!
    39f4:	00746961 	rsbseq	r6, r4, r1, ror #18
    39f8:	5f434d46 	svcpl	0x00434d46
    39fc:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    3a00:	4d646e61 	stclmi	14, cr6, [r4, #-388]!	; 0xfffffe7c
    3a04:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3a08:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
    3a0c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    3a10:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a14:	534f495f 	movtpl	r4, #63839	; 0xf95f
    3a18:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
    3a1c:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
    3a20:	7453676e 	ldrbvc	r6, [r3], #-1902	; 0x76e
    3a24:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3a28:	434d4600 	movtmi	r4, #54784	; 0xd600
    3a2c:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    3a30:	69544d41 	ldmdbvs	r4, {r0, r6, r8, sl, fp, lr}^
    3a34:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    3a38:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3a3c:	46007463 	strmi	r7, [r0], -r3, ror #8
    3a40:	465f434d 	ldrbmi	r4, [pc], -sp, asr #6
    3a44:	0047414c 	subeq	r4, r7, ip, asr #2
    3a48:	5f434d46 	svcpl	0x00434d46
    3a4c:	444e414e 	strbmi	r4, [lr], #-334	; 0x14e
    3a50:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3a54:	41524453 	cmpmi	r2, r3, asr r4
    3a58:	61425f4d 	cmpvs	r2, sp, asr #30
    3a5c:	46006b6e 	strmi	r6, [r0], -lr, ror #22
    3a60:	575f434d 	ldrbpl	r4, [pc, -sp, asr #6]
    3a64:	66746961 	ldrbtvs	r6, [r4], -r1, ror #18
    3a68:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    3a6c:	50006572 	andpl	r6, r0, r2, ror r5
    3a70:	00344f49 	eorseq	r4, r4, r9, asr #30
    3a74:	5f434d46 	svcpl	0x00434d46
    3a78:	61746144 	cmnvs	r4, r4, asr #2
    3a7c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    3a80:	4d737365 	ldclmi	3, cr7, [r3, #-404]!	; 0xfffffe6c
    3a84:	46007875 			; <UNDEFINED> instruction: 0x46007875
    3a88:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
    3a8c:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
    3a90:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3a94:	42006e6f 	andmi	r6, r0, #1776	; 0x6f0
    3a98:	00524354 	subseq	r4, r2, r4, asr r3
    3a9c:	5f474e52 	svcpl	0x00474e52
    3aa0:	6f435449 	svcvs	0x00435449
    3aa4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3aa8:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3aac:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    3ab0:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
    3ab4:	0054495f 	subseq	r4, r4, pc, asr r9
    3ab8:	5f474e52 	svcpl	0x00474e52
    3abc:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3ac0:	6f646e61 	svcvs	0x00646e61
    3ac4:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
    3ac8:	00726562 	rsbseq	r6, r2, r2, ror #10
    3acc:	5f474e52 	svcpl	0x00474e52
    3ad0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    3ad4:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    3ad8:	545f474e 	ldrbpl	r4, [pc], #-1870	; 3ae0 <_Min_Stack_Size+0x36e0>
    3adc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3ae0:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    3ae4:	465f474e 	ldrbmi	r4, [pc], -lr, asr #14
    3ae8:	0047414c 	subeq	r4, r7, ip, asr #2
    3aec:	5f474e52 	svcpl	0x00474e52
    3af0:	61656c43 	cmnvs	r5, r3, asr #24
    3af4:	616c4672 	smcvs	50274	; 0xc462
    3af8:	4e520067 	cdpmi	0, 5, cr0, cr2, cr7, {3}
    3afc:	65475f47 	strbvs	r5, [r7, #-3911]	; 0xf47
    3b00:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    3b04:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3b08:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
    3b0c:	4f432f62 	svcmi	0x00432f62
    3b10:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3b14:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3b18:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3b1c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3b20:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3b24:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3b28:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3b2c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3b30:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3b34:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3b38:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3b3c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3b44 <_Min_Stack_Size+0x3744>
    3b40:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3b44:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3b48:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3b4c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3b50:	5f787834 	svcpl	0x00787834
    3b54:	2e676e72 	mcrcs	14, 3, r6, cr7, cr2, {3}
    3b58:	4e520063 	cdpmi	0, 5, cr0, cr2, cr3, {3}
    3b5c:	6c435f47 	mcrrvs	15, 4, r5, r3, cr7
    3b60:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3b64:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    3b68:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    3b6c:	00746942 	rsbseq	r6, r4, r2, asr #18
    3b70:	5f474e52 	svcpl	0x00474e52
    3b74:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3b78:	5367616c 	cmnpl	r7, #108, 2
    3b7c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3b80:	54530073 	ldrbpl	r0, [r3], #-115	; 0x73
    3b84:	56455f4d 	strbpl	r5, [r5], -sp, asr #30
    3b88:	505f4c41 	subspl	r4, pc, r1, asr #24
    3b8c:	696e4942 	stmdbvs	lr!, {r1, r6, r8, fp, lr}^
    3b90:	54520074 	ldrbpl	r0, [r2], #-116	; 0x74
    3b94:	4b575f43 	blmi	15db8a8 <_Min_Stack_Size+0x15db4a8>
    3b98:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    3b9c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ba0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    3ba4:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    3ba8:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    3bac:	5f31414d 	svcpl	0x0031414d
    3bb0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3bb4:	5f366d61 	svcpl	0x00366d61
    3bb8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3bbc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3bc0:	50555f38 	subspl	r5, r5, r8, lsr pc
    3bc4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    3bc8:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    3bcc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3bd0:	5f454573 	svcpl	0x00454573
    3bd4:	4c776f4c 	ldclmi	15, cr6, [r7], #-304	; 0xfffffed0
    3bd8:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    3bdc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3be0:	55420074 	strbpl	r0, [r2, #-116]	; 0x74
    3be4:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    3be8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
    3bec:	494c5f49 	stmdbmi	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    3bf0:	4200454e 	andmi	r4, r0, #327155712	; 0x13800000
    3bf4:	4f545455 	svcmi	0x00545455
    3bf8:	49505f4e 	ldmdbmi	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3bfc:	4f535f4e 	svcmi	0x00535f4e
    3c00:	45435255 	strbmi	r5, [r3, #-597]	; 0x255
    3c04:	414d4400 	cmpmi	sp, r0, lsl #8
    3c08:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    3c0c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3c10:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    3c14:	53006e51 	movwpl	r6, #3665	; 0xe51
    3c18:	5f334950 	svcpl	0x00334950
    3c1c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c20:	414c4600 	cmpmi	ip, r0, lsl #12
    3c24:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    3c28:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c2c:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    3c30:	435f4e4f 	cmpmi	pc, #1264	; 0x4f0
    3c34:	44004b4c 	strmi	r4, [r0], #-2892	; 0xb4c
    3c38:	5f494d43 	svcpl	0x00494d43
    3c3c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c40:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3c44:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    3c48:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
    3c4c:	5f434956 	svcpl	0x00434956
    3c50:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3c54:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3c58:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    3c5c:	41430065 	cmpmi	r3, r5, rrx
    3c60:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
    3c64:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    3c68:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c6c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3c70:	495f3654 	ldmdbmi	pc, {r2, r4, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    3c74:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c78:	32495053 	subcc	r5, r9, #83	; 0x53
    3c7c:	5152495f 	cmppl	r2, pc, asr r9
    3c80:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3c84:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
    3c88:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 3c90 <_Min_Stack_Size+0x3890>
    3c8c:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
    3c90:	5152495f 	cmppl	r2, pc, asr r9
    3c94:	5453006e 	ldrbpl	r0, [r3], #-110	; 0x6e
    3c98:	56455f4d 	strbpl	r5, [r5], -sp, asr #30
    3c9c:	4c5f4c41 	mrrcmi	12, 4, r4, pc, cr1	; <UNPREDICTABLE>
    3ca0:	6e4f4445 	cdpvs	4, 4, cr4, cr15, cr5, {2}
    3ca4:	414d4400 	cmpmi	sp, r0, lsl #8
    3ca8:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    3cac:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3cb0:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    3cb4:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3cb8:	5f314d49 	svcpl	0x00314d49
    3cbc:	5f475254 	svcpl	0x00475254
    3cc0:	5f4d4f43 	svcpl	0x004d4f43
    3cc4:	314d4954 	cmpcc	sp, r4, asr r9
    3cc8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    3ccc:	47006e51 	smlsdmi	r0, r1, lr, r6
    3cd0:	5f4f4950 	svcpl	0x004f4950
    3cd4:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    3cd8:	73795300 	cmnvc	r9, #0, 6
    3cdc:	6b636954 	blvs	18de234 <_Min_Stack_Size+0x18dde34>
    3ce0:	5152495f 	cmppl	r2, pc, asr r9
    3ce4:	5355006e 	cmppl	r5, #110	; 0x6e
    3ce8:	33545241 	cmpcc	r4, #268435460	; 0x10000004
    3cec:	5152495f 	cmppl	r2, pc, asr r9
    3cf0:	5047006e 	subpl	r0, r7, lr, rrx
    3cf4:	435f4f49 	cmpmi	pc, #292	; 0x124
    3cf8:	42004b4c 	andmi	r4, r0, #76, 22	; 0x13000
    3cfc:	6f747475 	svcvs	0x00747475
    3d00:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3d04:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3d08:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    3d0c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    3d10:	61657274 	smcvs	22308	; 0x5724
    3d14:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3d18:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d1c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    3d20:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3d24:	346d6165 	strbtcc	r6, [sp], #-357	; 0x165
    3d28:	5152495f 	cmppl	r2, pc, asr r9
    3d2c:	5053006e 	subspl	r0, r3, lr, rrx
    3d30:	495f3649 	ldmdbmi	pc, {r0, r3, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    3d34:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d38:	31433249 	cmpcc	r3, r9, asr #4
    3d3c:	5f52455f 	svcpl	0x0052455f
    3d40:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d44:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    3d48:	43535f32 	cmpmi	r3, #50, 30	; 0xc8
    3d4c:	52495f45 	subpl	r5, r9, #276	; 0x114
    3d50:	42006e51 	andmi	r6, r0, #1296	; 0x510
    3d54:	4f545455 	svcmi	0x00545455
    3d58:	4f505f4e 	svcmi	0x00505f4e
    3d5c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3d60:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    3d64:	49540045 	ldmdbmi	r4, {r0, r2, r6}^
    3d68:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    3d6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d70:	67617355 			; <UNDEFINED> instruction: 0x67617355
    3d74:	75614665 	strbvc	r4, [r1, #-1637]!	; 0x665
    3d78:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3d7c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d80:	4344544c 	movtmi	r5, #17484	; 0x444c
    3d84:	5152495f 	cmppl	r2, pc, asr r9
    3d88:	4143006e 	cmpmi	r3, lr, rrx
    3d8c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    3d90:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    3d94:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d98:	35495053 	strbcc	r5, [r9, #-83]	; 0x53
    3d9c:	5152495f 	cmppl	r2, pc, asr r9
    3da0:	4153006e 	cmpmi	r3, lr, rrx
    3da4:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    3da8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3dac:	344d4954 	strbcc	r4, [sp], #-2388	; 0x954
    3db0:	5152495f 	cmppl	r2, pc, asr r9
    3db4:	5355006e 	cmppl	r5, #110	; 0x6e
    3db8:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
    3dbc:	5152495f 	cmppl	r2, pc, asr r9
    3dc0:	4155006e 	cmpmi	r5, lr, rrx
    3dc4:	5f385452 	svcpl	0x00385452
    3dc8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3dcc:	4d545300 	ldclmi	3, cr5, [r4, #-0]
    3dd0:	4156455f 	cmpmi	r6, pc, asr r5
    3dd4:	454c5f4c 	strbmi	r5, [ip, #-3916]	; 0xf4c
    3dd8:	66664f44 	strbtvs	r4, [r6], -r4, asr #30
    3ddc:	43324900 	teqmi	r2, #0, 18
    3de0:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
    3de4:	5152495f 	cmppl	r2, pc, asr r9
    3de8:	4270006e 	rsbsmi	r0, r0, #110	; 0x6e
    3dec:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    3df0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    3df4:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
    3df8:	52495f43 	subpl	r5, r9, #268	; 0x10c
    3dfc:	48006e51 	stmdami	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    3e00:	5f485341 	svcpl	0x00485341
    3e04:	5f474e52 	svcpl	0x00474e52
    3e08:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e0c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    3e10:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    3e14:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e18:	314e4143 	cmpcc	lr, r3, asr #2
    3e1c:	5f58545f 	svcpl	0x0058545f
    3e20:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e24:	414d4400 	cmpmi	sp, r0, lsl #8
    3e28:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    3e2c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3e30:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    3e34:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3e38:	5f384d49 	svcpl	0x00384d49
    3e3c:	5f475254 	svcpl	0x00475254
    3e40:	5f4d4f43 	svcpl	0x004d4f43
    3e44:	314d4954 	cmpcc	sp, r4, asr r9
    3e48:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    3e4c:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    3e50:	5f32414d 	svcpl	0x0032414d
    3e54:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    3e58:	5f376d61 	svcpl	0x00376d61
    3e5c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e60:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    3e64:	5f53465f 	svcpl	0x0053465f
    3e68:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e6c:	6e6f4e00 	cdpvs	14, 6, cr4, cr15, cr0, {0}
    3e70:	6b73614d 	blvs	1cdc3ac <_Min_Stack_Size+0x1cdbfac>
    3e74:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    3e78:	5f746e49 	svcpl	0x00746e49
    3e7c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3e80:	44575700 	ldrbmi	r5, [r7], #-1792	; 0x700
    3e84:	52495f47 	subpl	r5, r9, #284	; 0x11c
    3e88:	4f006e51 	svcmi	0x00006e51
    3e8c:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    3e90:	4b575f53 	blmi	15dbbe4 <_Min_Stack_Size+0x15db7e4>
    3e94:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    3e98:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3e9c:	6f6d654d 	svcvs	0x006d654d
    3ea0:	614d7972 	hvcvs	55186	; 0xd792
    3ea4:	6567616e 	strbvs	r6, [r7, #-366]!	; 0x16e
    3ea8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    3eac:	5152495f 	cmppl	r2, pc, asr r9
    3eb0:	4154006e 	cmpmi	r4, lr, rrx
    3eb4:	535f504d 	cmppl	pc, #77	; 0x4d
    3eb8:	504d4154 	subpl	r4, sp, r4, asr r1
    3ebc:	5152495f 	cmppl	r2, pc, asr r9
    3ec0:	4143006e 	cmpmi	r3, lr, rrx
    3ec4:	535f314e 	cmppl	pc, #-2147483629	; 0x80000013
    3ec8:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    3ecc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ed0:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    3ed4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3ed8:	306d6165 	rsbcc	r6, sp, r5, ror #2
    3edc:	5152495f 	cmppl	r2, pc, asr r9
    3ee0:	5453006e 	ldrbpl	r0, [r3], #-110	; 0x6e
    3ee4:	56455f4d 	strbpl	r5, [r5], -sp, asr #30
    3ee8:	4c5f4c41 	mrrcmi	12, 4, r4, pc, cr1	; <UNPREDICTABLE>
    3eec:	6e494445 	cdpvs	4, 4, cr4, cr9, cr5, {2}
    3ef0:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    3ef4:	5f324332 	svcpl	0x00324332
    3ef8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    3efc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f00:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
    3f04:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3f08:	5152495f 	cmppl	r2, pc, asr r9
    3f0c:	4155006e 	cmpmi	r5, lr, rrx
    3f10:	5f355452 	svcpl	0x00355452
    3f14:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3f18:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3f1c:	52425f31 	subpl	r5, r2, #49, 30	; 0xc4
    3f20:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    3f24:	495f394d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, ip, sp}^	; <UNPREDICTABLE>
    3f28:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f2c:	374d4954 	smlsldcc	r4, sp, r4, r9
    3f30:	5152495f 	cmppl	r2, pc, asr r9
    3f34:	5445006e 	strbpl	r0, [r5], #-110	; 0x6e
    3f38:	4b575f48 	blmi	15dbc60 <_Min_Stack_Size+0x15db860>
    3f3c:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    3f40:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f44:	5f47544f 	svcpl	0x0047544f
    3f48:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    3f4c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3f50:	31495053 	qdaddcc	r5, r3, r9
    3f54:	5152495f 	cmppl	r2, pc, asr r9
    3f58:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
    3f5c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    3f60:	5152495f 	cmppl	r2, pc, asr r9
    3f64:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    3f68:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    3f6c:	444f4d5f 	strbmi	r4, [pc], #-3423	; 3f74 <_Min_Stack_Size+0x3b74>
    3f70:	58455f45 	stmdapl	r5, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
    3f74:	73004954 	movwvc	r4, #2388	; 0x954
    3f78:	4c5f4545 	cfldr64mi	mvdx4, [pc], {69}	; 0x45
    3f7c:	654c776f 	strbvs	r7, [ip, #-1903]	; 0x76f
    3f80:	5f6c6576 	svcpl	0x006c6576
    3f84:	43414d44 	movtmi	r4, #7492	; 0x1d44
    3f88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3f8c:	50460067 	subpl	r0, r6, r7, rrx
    3f90:	52495f55 	subpl	r5, r9, #340	; 0x154
    3f94:	55006e51 	strpl	r6, [r0, #-3665]	; 0xe51
    3f98:	34545241 	ldrbcc	r5, [r4], #-577	; 0x241
    3f9c:	5152495f 	cmppl	r2, pc, asr r9
    3fa0:	544f006e 	strbpl	r0, [pc], #-110	; 3fa8 <_Min_Stack_Size+0x3ba8>
    3fa4:	53465f47 	movtpl	r5, #28487	; 0x6f47
    3fa8:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
    3fac:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    3fb0:	42006e51 	andmi	r6, r0, #1296	; 0x510
    3fb4:	4f545455 	svcmi	0x00545455
    3fb8:	4f4d5f4e 	svcmi	0x004d5f4e
    3fbc:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
    3fc0:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
    3fc4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    3fc8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    3fcc:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    3fd0:	5f364d49 	svcpl	0x00364d49
    3fd4:	5f434144 	svcpl	0x00434144
    3fd8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3fdc:	414d4400 	cmpmi	sp, r0, lsl #8
    3fe0:	495f4432 	ldmdbmi	pc, {r1, r4, r5, sl, lr}^	; <UNPREDICTABLE>
    3fe4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3fe8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    3fec:	5f56455f 	svcpl	0x0056455f
    3ff0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3ff4:	4d545300 	ldclmi	3, cr5, [r4, #-0]
    3ff8:	4156455f 	cmpmi	r6, pc, asr r5
    3ffc:	454c5f4c 	strbmi	r5, [ip, #-3916]	; 0xf4c
    4000:	676f5444 	strbvs	r5, [pc, -r4, asr #8]!
    4004:	00656c67 	rsbeq	r6, r5, r7, ror #24
    4008:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    400c:	505f4e4f 	subspl	r4, pc, pc, asr #28
    4010:	44004e49 	strmi	r4, [r0], #-3657	; 0xe49
    4014:	5f31414d 	svcpl	0x0031414d
    4018:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    401c:	5f316d61 	svcpl	0x00316d61
    4020:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4024:	44454c00 	strbmi	r4, [r5], #-3072	; 0xc00
    4028:	454c0033 	strbmi	r0, [ip, #-51]	; 0x33
    402c:	44003444 	strmi	r3, [r0], #-1092	; 0x444
    4030:	5f32414d 	svcpl	0x0032414d
    4034:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    4038:	5f336d61 	svcpl	0x00336d61
    403c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4040:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    4044:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    4048:	5152495f 	cmppl	r2, pc, asr r9
    404c:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    4050:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    4054:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    4058:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    405c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    4060:	74754200 	ldrbtvc	r4, [r5], #-512	; 0x200
    4064:	006e6f74 	rsbeq	r6, lr, r4, ror pc
    4068:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    406c:	555f4e4f 	ldrbpl	r4, [pc, #-3663]	; 3225 <_Min_Stack_Size+0x2e25>
    4070:	00524553 	subseq	r4, r2, r3, asr r5
    4074:	4f494453 	svcmi	0x00494453
    4078:	5152495f 	cmppl	r2, pc, asr r9
    407c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    4080:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    4084:	61657274 	smcvs	22308	; 0x5724
    4088:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
    408c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4090:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
    4094:	6f4d6e6f 	svcvs	0x004d6e6f
    4098:	545f6564 	ldrbpl	r6, [pc], #-1380	; 40a0 <_Min_Stack_Size+0x3ca0>
    409c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    40a0:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    40a4:	415f4354 	cmpmi	pc, r4, asr r3	; <UNPREDICTABLE>
    40a8:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    40ac:	5152495f 	cmppl	r2, pc, asr r9
    40b0:	5053006e 	subspl	r0, r3, lr, rrx
    40b4:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    40b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    40bc:	5f434d46 	svcpl	0x00434d46
    40c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    40c4:	43324900 	teqmi	r2, #0, 18
    40c8:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
    40cc:	5152495f 	cmppl	r2, pc, asr r9
    40d0:	5243006e 	subpl	r0, r3, #110	; 0x6e
    40d4:	495f5059 	ldmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    40d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    40dc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    40e0:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    40e4:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    40e8:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    40ec:	5f334d49 	svcpl	0x00334d49
    40f0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    40f4:	41535500 	cmpmi	r3, r0, lsl #10
    40f8:	5f315452 	svcpl	0x00315452
    40fc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4100:	52415500 	subpl	r5, r1, #0, 10
    4104:	495f3754 	ldmdbmi	pc, {r2, r4, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    4108:	006e5152 	rsbeq	r5, lr, r2, asr r1
    410c:	4f495047 	svcmi	0x00495047
    4110:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    4114:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    4118:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    411c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    4120:	41006e51 	tstmi	r0, r1, asr lr
    4124:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    4128:	006e5152 	rsbeq	r5, lr, r2, asr r1
    412c:	54545542 	ldrbpl	r5, [r4], #-1346	; 0x542
    4130:	505f4e4f 	subspl	r4, pc, pc, asr #28
    4134:	0054524f 	subseq	r5, r4, pc, asr #4
    4138:	5f445650 	svcpl	0x00445650
    413c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4140:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    4144:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
    4148:	006e5152 	rsbeq	r5, lr, r2, asr r1
    414c:	31414d44 	cmpcc	r1, r4, asr #26
    4150:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    4154:	346d6165 	strbtcc	r6, [sp], #-357	; 0x165
    4158:	5152495f 	cmppl	r2, pc, asr r9
    415c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    4160:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    4164:	61657274 	smcvs	22308	; 0x5724
    4168:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    416c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4170:	75626544 	strbvc	r6, [r2, #-1348]!	; 0x544
    4174:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
    4178:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    417c:	5152495f 	cmppl	r2, pc, asr r9
    4180:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    4184:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    4188:	5152495f 	cmppl	r2, pc, asr r9
    418c:	3249006e 	subcc	r0, r9, #110	; 0x6e
    4190:	455f3343 	ldrbmi	r3, [pc, #-835]	; 3e55 <_Min_Stack_Size+0x3a55>
    4194:	52495f56 	subpl	r5, r9, #344	; 0x158
    4198:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
    419c:	495f4854 	ldmdbmi	pc, {r2, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    41a0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    41a4:	5f64654c 	svcpl	0x0064654c
    41a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    41ac:	00666544 	rsbeq	r6, r6, r4, asr #10
    41b0:	5f434352 	svcpl	0x00434352
    41b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    41b8:	414d4400 	cmpmi	sp, r0, lsl #8
    41bc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    41c0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    41c4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    41c8:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    41cc:	5f314d49 	svcpl	0x00314d49
    41d0:	545f5055 	ldrbpl	r5, [pc], #-85	; 41d8 <_Min_Stack_Size+0x3dd8>
    41d4:	30314d49 	eorscc	r4, r1, r9, asr #26
    41d8:	5152495f 	cmppl	r2, pc, asr r9
    41dc:	4573006e 	ldrbmi	r0, [r3, #-110]!	; 0x6e
    41e0:	6f4c5f45 	svcvs	0x004c5f45
    41e4:	76654c77 			; <UNDEFINED> instruction: 0x76654c77
    41e8:	445f6c65 	ldrbmi	r6, [pc], #-3173	; 41f0 <_Min_Stack_Size+0x3df0>
    41ec:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    41f0:	54530074 	ldrbpl	r0, [r3], #-116	; 0x74
    41f4:	56455f4d 	strbpl	r5, [r5], -sp, asr #30
    41f8:	505f4c41 	subspl	r4, pc, r1, asr #24
    41fc:	74654742 	strbtvc	r4, [r5], #-1858	; 0x742
    4200:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4204:	544c0065 	strbpl	r0, [ip], #-101	; 0x65
    4208:	455f4344 	ldrbmi	r4, [pc, #-836]	; 3ecc <_Min_Stack_Size+0x3acc>
    420c:	52495f52 	subpl	r5, r9, #328	; 0x148
    4210:	4f006e51 	svcmi	0x00006e51
    4214:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    4218:	50455f53 	subpl	r5, r5, r3, asr pc
    421c:	554f5f31 	strbpl	r5, [pc, #-3889]	; 32f3 <_Min_Stack_Size+0x2ef3>
    4220:	52495f54 	subpl	r5, r9, #84, 30	; 0x150
    4224:	43006e51 	movwmi	r6, #3665	; 0xe51
    4228:	5f314e41 	svcpl	0x00314e41
    422c:	5f315852 	svcpl	0x00315852
    4230:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4234:	74754200 	ldrbtvc	r4, [r5], #-512	; 0x200
    4238:	5f6e6f74 	svcpl	0x006e6f74
    423c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    4240:	45457300 	strbmi	r7, [r5, #-768]	; 0x300
    4244:	5f414d44 	svcpl	0x00414d44
    4248:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    424c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4250:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    4254:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
    4258:	5f394954 	svcpl	0x00394954
    425c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    4260:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    4264:	5f384d49 	svcpl	0x00384d49
    4268:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    426c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4270:	2f62696c 	svccs	0x0062696c
    4274:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    4278:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    427c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    4280:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4284:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4288:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    428c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4290:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    4294:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4298:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    429c:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    42a0:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    42a4:	2e797265 	cdpcs	2, 7, cr7, cr9, cr5, {3}
    42a8:	58450063 	stmdapl	r5, {r0, r1, r5, r6}^
    42ac:	5f334954 	svcpl	0x00334954
    42b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    42b4:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    42b8:	5f565364 	svcpl	0x00565364
    42bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    42c0:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    42c4:	5f53485f 	svcpl	0x0053485f
    42c8:	5f315045 	svcpl	0x00315045
    42cc:	495f4e49 	ldmdbmi	pc, {r0, r3, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    42d0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    42d4:	31414d44 	cmpcc	r1, r4, asr #26
    42d8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    42dc:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
    42e0:	5152495f 	cmppl	r2, pc, asr r9
    42e4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    42e8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    42ec:	61657274 	smcvs	22308	; 0x5724
    42f0:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    42f4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    42f8:	2f62696c 	svccs	0x0062696c
    42fc:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    4300:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    4304:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    4308:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    430c:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    4310:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    4314:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4318:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    431c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4320:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    4324:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4328:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    432c:	5f797265 	svcpl	0x00797265
    4330:	61726473 	cmnvs	r2, r3, ror r4
    4334:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    4338:	41524453 	cmpmi	r2, r3, asr r4
    433c:	65525f4d 	ldrbvs	r5, [r2, #-3917]	; 0xf4d
    4340:	75426461 	strbvc	r6, [r2, #-1121]	; 0x461
    4344:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    4348:	52445300 	subpl	r5, r4, #0, 6
    434c:	575f4d41 	ldrbpl	r4, [pc, -r1, asr #26]
    4350:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    4354:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    4358:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    435c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    4360:	434d4600 	movtmi	r4, #54784	; 0xd600
    4364:	5244535f 	subpl	r5, r4, #2080374785	; 0x7c000001
    4368:	69544d41 	ldmdbvs	r4, {r0, r6, r8, sl, fp, lr}^
    436c:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
    4370:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4374:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4378:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    437c:	65640065 	strbvs	r0, [r4, #-101]!	; 0x65
    4380:	0079616c 	rsbseq	r6, r9, ip, ror #2
    4384:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
    4388:	6f705f65 	svcvs	0x00705f65
    438c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    4390:	44530072 	ldrbmi	r0, [r3], #-114	; 0x72
    4394:	5f4d4152 	svcpl	0x004d4152
    4398:	4f495047 	svcmi	0x00495047
    439c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    43a0:	53006769 	movwpl	r6, #1897	; 0x769
    43a4:	4d415244 	sfmmi	f5, 2, [r1, #-272]	; 0xfffffef0
    43a8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    43ac:	71655374 	smcvc	21812	; 0x5534
    43b0:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    43b4:	44530065 	ldrbmi	r0, [r3], #-101	; 0x65
    43b8:	5f4d4152 	svcpl	0x004d4152
    43bc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    43c0:	57777500 	ldrbpl	r7, [r7, -r0, lsl #10]!
    43c4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    43c8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    43cc:	00737365 	rsbseq	r7, r3, r5, ror #6
    43d0:	75427775 	strbvc	r7, [r2, #-1909]	; 0x775
    43d4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    43d8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    43dc:	52777500 	rsbspl	r7, r7, #0, 10
    43e0:	41646165 	cmnmi	r4, r5, ror #2
    43e4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    43e8:	6e007373 	mcrvs	3, 0, r7, cr0, cr3, {3}
    43ec:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    43f0:	4d460074 	stclmi	0, cr0, [r6, #-464]	; 0xfffffe30
    43f4:	44535f43 	ldrbmi	r5, [r3], #-3907	; 0xf43
    43f8:	434d4152 	movtmi	r4, #53586	; 0xd152
    43fc:	616d6d6f 	cmnvs	sp, pc, ror #26
    4400:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0x46e
    4404:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4408:	00657275 	rsbeq	r7, r5, r5, ror r2
    440c:	5f434d46 	svcpl	0x00434d46
    4410:	41524453 	cmpmi	r2, r3, asr r4
    4414:	696e494d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, lr}^
    4418:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    441c:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
    4420:	4c006572 	cfstr32mi	mvfx6, [r0], {114}	; 0x72
    4424:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    4428:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
    442c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    4430:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    4434:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    4438:	5f303244 	svcpl	0x00303244
    443c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    4440:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    4444:	74614c00 	strbtvc	r4, [r1], #-3072	; 0xc00
    4448:	525f6863 	subspl	r6, pc, #6488064	; 0x630000
    444c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    4450:	4c007473 	cfstrsmi	mvf7, [r0], {115}	; 0x73
    4454:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    4458:	65475f30 	strbvs	r5, [r7, #-3888]	; 0xf30
    445c:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    4460:	61745361 	cmnvs	r4, r1, ror #6
    4464:	00737574 	rsbseq	r7, r3, r4, ror r5
    4468:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    446c:	525f3032 	subspl	r3, pc, #50	; 0x32
    4470:	6f6f6265 	svcvs	0x006f6265
    4474:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    4478:	72746300 	rsbsvc	r6, r4, #0, 6
    447c:	66635f6c 	strbtvs	r5, [r3], -ip, ror #30
    4480:	754e0072 	strbvc	r0, [lr, #-114]	; 0x72
    4484:	7479426d 	ldrbtvc	r4, [r9], #-621	; 0x26d
    4488:	526f5465 	rsbpl	r5, pc, #1694498816	; 0x65000000
    448c:	00646165 	rsbeq	r6, r4, r5, ror #2
    4490:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    4494:	73736150 	cmnvc	r3, #80, 2
    4498:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
    449c:	74537265 	ldrbvc	r7, [r3], #-613	; 0x265
    44a0:	00657461 	rsbeq	r7, r5, r1, ror #8
    44a4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    44a8:	70757272 	rsbsvc	r7, r5, r2, ror r2
    44ac:	63415f74 	movtvs	r5, #8052	; 0x1f74
    44b0:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    44b4:	65676445 	strbvs	r6, [r7, #-1093]!	; 0x445
    44b8:	47334c00 	ldrmi	r4, [r3, -r0, lsl #24]!
    44bc:	5f303244 	svcpl	0x00303244
    44c0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0x946
    44c4:	74537265 	ldrbvc	r7, [r3], #-613	; 0x265
    44c8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    44cc:	62696c00 	rsbvs	r6, r9, #0, 24
    44d0:	6974552f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, lr}^
    44d4:	6974696c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    44d8:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    44dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    44e0:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    44e4:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    44e8:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    44ec:	2f797265 	svccs	0x00797265
    44f0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    44f4:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    44f8:	645f6939 	ldrbvs	r6, [pc], #-2361	; 4500 <_Min_Stack_Size+0x4100>
    44fc:	6f637369 	svcvs	0x00637369
    4500:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    4504:	67336c5f 			; <UNDEFINED> instruction: 0x67336c5f
    4508:	2e303264 	cdpcs	2, 3, cr3, cr0, cr4, {3}
    450c:	334c0063 	movtcc	r0, #49251	; 0xc063
    4510:	30324447 	eorscc	r4, r2, r7, asr #8
    4514:	544e495f 	strbpl	r4, [lr], #-2399	; 0x95f
    4518:	746e4931 	strbtvc	r4, [lr], #-2353	; 0x931
    451c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    4520:	6d437470 	cfstrdvs	mvd7, [r3, #-448]	; 0xfffffe40
    4524:	334c0064 	movtcc	r0, #49252	; 0xc064
    4528:	30324447 	eorscc	r4, r2, r7, asr #8
    452c:	6165525f 	cmnvs	r5, pc, asr r2
    4530:	72570064 	subsvc	r0, r7, #100	; 0x64
    4534:	41657469 	cmnmi	r5, r9, ror #8
    4538:	00726464 	rsbseq	r6, r2, r4, ror #8
    453c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    4540:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    4544:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4548:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    454c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4550:	79546769 	ldmdbvc	r4, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    4554:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    4558:	334c0066 	movtcc	r0, #49254	; 0xc066
    455c:	30324447 	eorscc	r4, r2, r7, asr #8
    4560:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
    4564:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    4568:	6e495f6c 	cdpvs	15, 4, cr5, cr9, cr12, {3}
    456c:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    4570:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4574:	6f546574 	svcvs	0x00546574
    4578:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    457c:	334c0065 	movtcc	r0, #49253	; 0xc065
    4580:	30324447 	eorscc	r4, r2, r7, asr #8
    4584:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    4588:	0074756f 	rsbseq	r7, r4, pc, ror #10
    458c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    4590:	74630031 	strbtvc	r0, [r3], #-49	; 0x31
    4594:	00336c72 	eorseq	r6, r3, r2, ror ip
    4598:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    459c:	334c0034 	movtcc	r0, #49204	; 0xc034
    45a0:	30324447 	eorscc	r4, r2, r7, asr #8
    45a4:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    45a8:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    45ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    45b0:	334c0067 	movtcc	r0, #49255	; 0xc067
    45b4:	30324447 	eorscc	r4, r2, r7, asr #8
    45b8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    45bc:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    45c0:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    45c4:	6e495f30 	mcrvs	15, 2, r5, cr9, cr0, {1}
    45c8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    45cc:	53676966 	cmnpl	r7, #1671168	; 0x198000
    45d0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    45d4:	334c0074 	movtcc	r0, #49268	; 0xc074
    45d8:	30324447 	eorscc	r4, r2, r7, asr #8
    45dc:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    45e0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    45e4:	4c00646d 	cfstrsmi	mvf6, [r0], {109}	; 0x6d
    45e8:	32444733 	subcc	r4, r4, #13369344	; 0xcc0000
    45ec:	49545f30 	ldmdbmi	r4, {r4, r5, r8, r9, sl, fp, ip, lr}^
    45f0:	554f454d 	strbpl	r4, [pc, #-1357]	; 40ab <_Min_Stack_Size+0x3cab>
    45f4:	73555f54 	cmpvc	r5, #84, 30	; 0x150
    45f8:	61437265 	cmpvs	r3, r5, ror #4
    45fc:	61626c6c 	cmnvs	r2, ip, ror #24
    4600:	53006b63 	movwpl	r6, #2915	; 0xb63
    4604:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    4608:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    460c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4610:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    4614:	74796200 	ldrbtvc	r6, [r9], #-512	; 0x200
    4618:	334c0065 	movtcc	r0, #49253	; 0xc065
    461c:	30324447 	eorscc	r4, r2, r7, asr #8
    4620:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    4624:	6e490074 	mcrvs	0, 2, r0, cr9, cr4, {3}
    4628:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    462c:	53747075 	cmnpl	r4, #117	; 0x75
    4630:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    4634:	746e4900 	strbtvc	r4, [lr], #-2304	; 0x900
    4638:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    463c:	415f7470 	cmpmi	pc, r0, ror r4	; <UNPREDICTABLE>
    4640:	00736578 	rsbseq	r6, r3, r8, ror r5
    4644:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    4648:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    464c:	4932544e 	ldmdbmi	r2!, {r1, r2, r3, r6, sl, ip, lr}
    4650:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4654:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    4658:	00646d43 	rsbeq	r6, r4, r3, asr #26
    465c:	4447334c 	strbmi	r3, [r7], #-844	; 0x34c
    4660:	495f3032 	ldmdbmi	pc, {r1, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    4664:	4931544e 	ldmdbmi	r1!, {r1, r2, r3, r6, sl, ip, lr}
    4668:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    466c:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    4670:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4674:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    4678:	41646165 	cmnmi	r4, r5, ror #2
    467c:	00726464 	rsbseq	r6, r2, r4, ror #8
    4680:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    4684:	6c746e65 	ldclvs	14, cr6, [r4], #-404	; 0xfffffe6c
    4688:	00656e69 	rsbeq	r6, r5, r9, ror #28
    468c:	5f44434c 	svcpl	0x0044434c
    4690:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0x553
    4694:	43747865 	cmnmi	r4, #6619136	; 0x650000
    4698:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    469c:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    46a0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    46a4:	694c7261 	stmdbvs	ip, {r0, r5, r6, r9, ip, sp, lr}^
    46a8:	4900656e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, sl, sp, lr}
    46ac:	4547414d 	strbmi	r4, [r7, #-333]	; 0x14d
    46b0:	4749525f 	smlsldmi	r5, r9, pc, r2	; <UNPREDICTABLE>
    46b4:	58005448 	stmdapl	r0, {r3, r6, sl, ip, lr}
    46b8:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
    46bc:	4c007473 	cfstrsmi	mvf7, [r0], {115}	; 0x73
    46c0:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    46c4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    46c8:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    46cc:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    46d0:	6f436574 	svcvs	0x00436574
    46d4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    46d8:	73410064 	movtvc	r0, #4196	; 0x1064
    46dc:	00696963 	rsbeq	r6, r9, r3, ror #18
    46e0:	5f44434c 	svcpl	0x0044434c
    46e4:	475f4641 	ldrbmi	r4, [pc, -r1, asr #12]
    46e8:	434f4950 	movtmi	r4, #63824	; 0xf950
    46ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    46f0:	434c0067 	movtmi	r0, #49255	; 0xc067
    46f4:	6e495f44 	cdpvs	15, 4, cr5, cr9, cr4, {2}
    46f8:	59007469 	stmdbpl	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    46fc:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
    4700:	6c007473 	cfstrsvs	mvf7, [r0], {115}	; 0x73
    4704:	6e656e69 	cdpvs	14, 6, cr6, cr5, cr9, {3}
    4708:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    470c:	61520072 	cmpvs	r2, r2, ror r0
    4710:	73756964 	cmnvc	r5, #100, 18	; 0x190000
    4714:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4718:	79614c5f 	stmdbvc	r1!, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    471c:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    4720:	4c007469 	cfstrsmi	mvf7, [r0], {105}	; 0x69
    4724:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4728:	69447465 	stmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    472c:	616c7073 	smcvs	50947	; 0xc703
    4730:	6e695779 	mcrvs	7, 3, r5, cr9, cr9, {3}
    4734:	00776f64 	rsbseq	r6, r7, r4, ror #30
    4738:	69646152 	stmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    473c:	00327375 	eorseq	r7, r2, r5, ror r3
    4740:	5f44434c 	svcpl	0x0044434c
    4744:	70736944 	rsbsvc	r6, r3, r4, asr #18
    4748:	4379616c 	cmnmi	r9, #108, 2
    474c:	00726168 	rsbseq	r6, r2, r8, ror #2
    4750:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    4754:	454c5f45 	strbmi	r5, [ip, #-3909]	; 0xf45
    4758:	4c005446 	cfstrsmi	mvf5, [r0], {70}	; 0x46
    475c:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4764 <_Min_Stack_Size+0x4364>
    4760:	55776172 	ldrbpl	r6, [r7, #-370]!	; 0x172
    4764:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    4768:	4c00656e 	cfstr32mi	mvfx6, [r0], {110}	; 0x6e
    476c:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4770:	6f437465 	svcvs	0x00437465
    4774:	4b726f6c 	blmi	1ca052c <_Min_Stack_Size+0x1ca012c>
    4778:	6e697965 	cdpvs	9, 6, cr7, cr9, cr5, {3}
    477c:	5f580067 	svcpl	0x00580067
    4780:	746e6563 	strbtvc	r6, [lr], #-1379	; 0x563
    4784:	4c007265 	sfmmi	f7, 4, [r0], {101}	; 0x65
    4788:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4790 <_Min_Stack_Size+0x4390>
    478c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    4790:	696c0074 	stmdbvs	ip!, {r2, r4, r5, r6}^
    4794:	74552f62 	ldrbvc	r2, [r5], #-3938	; 0xf62
    4798:	74696c69 	strbtvc	r6, [r9], #-3177	; 0xc69
    479c:	2f736569 	svccs	0x00736569
    47a0:	334d5453 	movtcc	r5, #54355	; 0xd453
    47a4:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    47a8:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    47ac:	6f637369 	svcvs	0x00637369
    47b0:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    47b4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    47b8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    47bc:	5f693932 	svcpl	0x00693932
    47c0:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    47c4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    47c8:	636c5f79 	cmnvs	ip, #484	; 0x1e4
    47cc:	00632e64 	rsbeq	r2, r3, r4, ror #28
    47d0:	5f44434c 	svcpl	0x0044434c
    47d4:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    47d8:	6f737275 	svcvs	0x00737275
    47dc:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
    47e0:	596c6578 	stmdbpl	ip!, {r3, r4, r5, r6, r8, sl, sp, lr}^
    47e4:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    47e8:	6172445f 	cmnvs	r2, pc, asr r4
    47ec:	6c754677 	ldclvs	6, cr4, [r5], #-476	; 0xfffffe24
    47f0:	6c6c456c 	cfstr64vs	mvdx4, [ip], #-432	; 0xfffffe50
    47f4:	65737069 	ldrbvs	r7, [r3, #-105]!	; 0x69
    47f8:	72754300 	rsbsvc	r4, r5, #0, 6
    47fc:	75430058 	strbvc	r0, [r3, #-88]	; 0x58
    4800:	78005972 	stmdavc	r0, {r1, r4, r5, r6, r8, fp, ip, lr}
    4804:	00736f70 	rsbseq	r6, r3, r0, ror pc
    4808:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xf43
    480c:	46006e6d 	strmi	r6, [r0], -sp, ror #28
    4810:	31746e6f 	cmncc	r4, pc, ror #28
    4814:	32317832 	eorscc	r7, r1, #3276800	; 0x320000
    4818:	6f705900 	svcvs	0x00705900
    481c:	434c0073 	movtmi	r0, #49267	; 0xc073
    4820:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xf44
    4824:	61725474 	cmnvs	r2, r4, ror r4
    4828:	6170736e 	cmnvs	r0, lr, ror #6
    482c:	636e6572 	cmnvs	lr, #478150656	; 0x1c800000
    4830:	72740079 	rsbsvc	r0, r4, #121	; 0x79
    4834:	70736e61 	rsbsvc	r6, r3, r1, ror #28
    4838:	6e657261 	cdpvs	2, 6, cr7, cr5, cr1, {3}
    483c:	78007963 	stmdavc	r0, {r0, r1, r5, r6, r8, fp, ip, sp, lr}
    4840:	32636e69 	rsbcc	r6, r3, #1680	; 0x690
    4844:	6e6f4600 	cdpvs	6, 6, cr4, cr15, cr0, {0}
    4848:	78363174 	ldmdavc	r6!, {r2, r4, r5, r6, r8, ip, sp}
    484c:	4c003432 	cfstrsmi	mvf3, [r0], {50}	; 0x32
    4850:	445f4443 	ldrbmi	r4, [pc], #-1091	; 4858 <_Min_Stack_Size+0x4458>
    4854:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    4858:	74537961 	ldrbvc	r7, [r3], #-2401	; 0x961
    485c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4860:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4864:	42475200 	submi	r5, r7, #0, 4
    4868:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    486c:	434c0065 	movtmi	r0, #49253	; 0xc065
    4870:	6f505f44 	svcvs	0x00505f44
    4874:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4878:	4300656e 	movwmi	r6, #1390	; 0x56e
    487c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    4880:	614c746e 	cmpvs	ip, lr, ror #8
    4884:	00726579 	rsbseq	r6, r2, r9, ror r5
    4888:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
    488c:	31783849 	cmncc	r8, r9, asr #16
    4890:	61545f32 	cmpvs	r4, r2, lsr pc
    4894:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4898:	70727563 	rsbsvc	r7, r2, r3, ror #10
    489c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    48a0:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    48a4:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    48a8:	6c655370 	stclvs	3, cr5, [r5], #-448	; 0xfffffe40
    48ac:	00746365 	rsbseq	r6, r4, r5, ror #6
    48b0:	5f646552 	svcpl	0x00646552
    48b4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    48b8:	6d420065 	stclvs	0, cr0, [r2, #-404]	; 0xfffffe6c
    48bc:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    48c0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    48c4:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    48c8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    48cc:	6f6c6f43 	svcvs	0x006c6f43
    48d0:	43007372 	movwmi	r7, #882	; 0x372
    48d4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    48d8:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
    48dc:	42656d61 	rsbmi	r6, r5, #6208	; 0x1840
    48e0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    48e4:	434c0072 	movtmi	r0, #49266	; 0xc072
    48e8:	74435f44 	strbvc	r5, [r3], #-3908	; 0xf44
    48ec:	694c6c72 	stmdbvs	ip, {r1, r4, r5, r6, sl, fp, sp, lr}^
    48f0:	4373656e 	cmnmi	r3, #461373440	; 0x1b800000
    48f4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    48f8:	6f460067 	svcvs	0x00460067
    48fc:	7838746e 	ldmdavc	r8!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4900:	4c003231 	sfmmi	f3, 4, [r0], {49}	; 0x31
    4904:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    4908:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xf6c
    490c:	6c6f5064 	stclvs	0, cr5, [pc], #-400	; 4784 <_Min_Stack_Size+0x4384>
    4910:	6e694c79 	mcrvs	12, 3, r4, cr9, cr9, {3}
    4914:	6c655265 	sfmvs	f5, 2, [r5], #-404	; 0xfffffe6c
    4918:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    491c:	50700065 	rsbspl	r0, r0, r5, rrx
    4920:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    4924:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4928:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    492c:	6b636142 	blvs	18dce3c <_Min_Stack_Size+0x18dca3c>
    4930:	6f6c6f43 	svcvs	0x006c6f43
    4934:	6c420072 	mcrrvs	0, 7, r0, r2, cr2
    4938:	565f6575 			; <UNDEFINED> instruction: 0x565f6575
    493c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    4940:	72744300 	rsbsvc	r4, r4, #0, 6
    4944:	6e69506c 	cdpvs	0, 6, cr5, cr9, cr12, {3}
    4948:	75430073 	strbvc	r0, [r3, #-115]	; 0x73
    494c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    4950:	63614274 	cmnvs	r1, #116, 4	; 0x40000007
    4954:	6c6f436b 	stclvs	3, cr4, [pc], #-428	; 47b0 <_Min_Stack_Size+0x43b0>
    4958:	6200726f 	andvs	r7, r0, #-268435450	; 0xf0000006
    495c:	705f7469 	subsvc	r7, pc, r9, ror #8
    4960:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    4964:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    4968:	00646461 	rsbeq	r6, r4, r1, ror #8
    496c:	616f6c66 	cmnvs	pc, r6, ror #24
    4970:	61580074 	cmpvs	r8, r4, ror r0
    4974:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    4978:	4c007373 	stcmi	3, cr7, [r0], {115}	; 0x73
    497c:	575f4443 	ldrbpl	r4, [pc, -r3, asr #8]
    4980:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    4984:	00504d42 	subseq	r4, r0, r2, asr #26
    4988:	5f44434c 	svcpl	0x0044434c
    498c:	00676552 	rsbeq	r6, r7, r2, asr r5
    4990:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
    4994:	78323149 	ldmdavc	r2!, {r0, r3, r6, r8, ip, sp}
    4998:	545f3231 	ldrbpl	r3, [pc], #-561	; 49a0 <_Min_Stack_Size+0x45a0>
    499c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    49a0:	72694600 	rsbvc	r4, r9, #0, 12
    49a4:	47007473 	smlsdxmi	r0, r3, r4, r7
    49a8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    49ac:	6c61565f 	stclvs	6, cr5, [r1], #-380	; 0xfffffe84
    49b0:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
    49b4:	465f4443 	ldrbmi	r4, [pc], -r3, asr #8
    49b8:	546c6c69 	strbtpl	r6, [ip], #-3177	; 0xc69
    49bc:	6e616972 	mcrvs	9, 3, r6, cr1, cr2, {3}
    49c0:	00656c67 	rsbeq	r6, r5, r7, ror #24
    49c4:	5f44434c 	svcpl	0x0044434c
    49c8:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    49cc:	696c6c45 	stmdbvs	ip!, {r0, r2, r6, sl, fp, sp, lr}^
    49d0:	00657370 	rsbeq	r7, r5, r0, ror r3
    49d4:	50747550 	rsbspl	r7, r4, r0, asr r5
    49d8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    49dc:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    49e0:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    49e4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    49e8:	50006e4f 	andpl	r6, r0, pc, asr #28
    49ec:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    49f0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    49f4:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0x74
    49f8:	6c6f6366 	stclvs	3, cr6, [pc], #-408	; 4868 <_Min_Stack_Size+0x4468>
    49fc:	006e6d75 	rsbeq	r6, lr, r5, ror sp
    4a00:	5f44434c 	svcpl	0x0044434c
    4a04:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    4a08:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
    4a0c:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4a10:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    4a14:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    4a18:	69790065 	ldmdbvs	r9!, {r0, r2, r5, r6}^
    4a1c:	0031636e 	eorseq	r6, r1, lr, ror #6
    4a20:	636e6979 	cmnvs	lr, #1982464	; 0x1e4000
    4a24:	434c0032 	movtmi	r0, #49202	; 0xc032
    4a28:	69465f44 	stmdbvs	r6, {r2, r6, r8, r9, sl, fp, ip, lr}^
    4a2c:	6f506c6c 	svcvs	0x00506c6c
    4a30:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4a34:	4c00656e 	cfstr32mi	mvfx6, [r0], {110}	; 0x6e
    4a38:	575f4443 	ldrbpl	r4, [pc, -r3, asr #8]
    4a3c:	6f646e69 	svcvs	0x00646e69
    4a40:	646f4d77 	strbtvs	r4, [pc], #-3447	; 4a48 <_Min_Stack_Size+0x4648>
    4a44:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
    4a48:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    4a4c:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4a50:	776f505f 			; <UNDEFINED> instruction: 0x776f505f
    4a54:	6e4f7265 	cdpvs	2, 4, cr7, cr15, cr5, {3}
    4a58:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4a5c:	6172445f 	cmnvs	r2, pc, asr r4
    4a60:	63655277 	cmnvs	r5, #1879048199	; 0x70000007
    4a64:	434c0074 	movtmi	r0, #49268	; 0xc074
    4a68:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
    4a6c:	75467761 	strbvc	r7, [r6, #-1889]	; 0x761
    4a70:	69436c6c 	stmdbvs	r3, {r2, r3, r5, r6, sl, fp, sp, lr}^
    4a74:	656c6372 	strbvs	r6, [ip, #-882]!	; 0x372
    4a78:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4a7c:	6f6c435f 	svcvs	0x006c435f
    4a80:	50646573 	rsbpl	r6, r4, r3, ror r5
    4a84:	4c796c6f 	ldclmi	12, cr6, [r9], #-444	; 0xfffffe44
    4a88:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4a8c:	5f44434c 	svcpl	0x0044434c
    4a90:	796c6f50 	stmdbvc	ip!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    4a94:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4a98:	616c6552 	cmnvs	ip, r2, asr r5
    4a9c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    4aa0:	736f6c43 	cmnvc	pc, #17152	; 0x4300
    4aa4:	41006465 	tstmi	r0, r5, ror #8
    4aa8:	49494353 	stmdbmi	r9, {r0, r1, r4, r6, r8, r9, lr}^
    4aac:	32783631 	rsbscc	r3, r8, #51380224	; 0x3100000
    4ab0:	61545f34 	cmpvs	r4, r4, lsr pc
    4ab4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4ab8:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
    4abc:	78007468 	stmdavc	r0, {r3, r5, r6, sl, ip, sp, lr}
    4ac0:	31636e69 	cmncc	r3, r9, ror #28
    4ac4:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4ac8:	6172445f 	cmnvs	r2, pc, asr r4
    4acc:	72694377 	rsbvc	r4, r9, #-603979775	; 0xdc000001
    4ad0:	00656c63 	rsbeq	r6, r5, r3, ror #24
    4ad4:	5f44434c 	svcpl	0x0044434c
    4ad8:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    4adc:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4ae0:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4ae4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    4ae8:	6f6c6f43 	svcvs	0x006c6f43
    4aec:	58007372 	stmdapl	r0, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
    4af0:	00736f70 	rsbseq	r6, r3, r0, ror pc
    4af4:	5f44434c 	svcpl	0x0044434c
    4af8:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
    4afc:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    4b00:	74636552 	strbtvc	r6, [r3], #-1362	; 0x552
    4b04:	43534100 	cmpmi	r3, #0, 2
    4b08:	78384949 	ldmdavc	r8!, {r0, r3, r6, r8, fp, lr}
    4b0c:	61545f38 	cmpvs	r4, r8, lsr pc
    4b10:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4b14:	746c6564 	strbtvc	r6, [ip], #-1380	; 0x564
    4b18:	64007861 	strvs	r7, [r0], #-2145	; 0x861
    4b1c:	61746c65 	cmnvs	r4, r5, ror #24
    4b20:	434c0079 	movtmi	r0, #49273	; 0xc079
    4b24:	6f505f44 	svcvs	0x00505f44
    4b28:	694c796c 	stmdbvs	ip, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
    4b2c:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0x56e
    4b30:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    4b34:	72006576 	andvc	r6, r0, #494927872	; 0x1d800000
    4b38:	00316461 	eorseq	r6, r1, r1, ror #8
    4b3c:	32646172 	rsbcc	r6, r4, #-2147483620	; 0x8000001c
    4b40:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4b44:	6172445f 	cmnvs	r2, pc, asr r4
    4b48:	6e6f4d77 	mcrvs	13, 3, r4, cr15, cr7, {3}
    4b4c:	6369506f 	cmnvs	r9, #111	; 0x6f
    4b50:	434c0074 	movtmi	r0, #49268	; 0xc074
    4b54:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xf44
    4b58:	79614c74 	stmdbvc	r1!, {r2, r4, r5, r6, sl, fp, lr}^
    4b5c:	59007265 	stmdbpl	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    4b60:	6e65635f 	mcrvs	3, 3, r6, cr5, cr15, {2}
    4b64:	00726574 	rsbseq	r6, r2, r4, ror r5
    4b68:	746e6f46 	strbtvc	r6, [lr], #-3910	; 0xf46
    4b6c:	00387838 	eorseq	r7, r8, r8, lsr r8
    4b70:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0x970
    4b74:	4c00586c 	stcmi	8, cr5, [r0], {108}	; 0x6c
    4b78:	535f4443 	cmppl	pc, #1124073472	; 0x43000000
    4b7c:	6f434950 	svcvs	0x00434950
    4b80:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4b84:	696f5000 	stmdbvs	pc!, {ip, lr}^	; <UNPREDICTABLE>
    4b88:	0073746e 	rsbseq	r7, r3, lr, ror #8
    4b8c:	5f44434c 	svcpl	0x0044434c
    4b90:	46746553 			; <UNDEFINED> instruction: 0x46746553
    4b94:	00746e6f 	rsbseq	r6, r4, pc, ror #28
    4b98:	5f44434c 	svcpl	0x0044434c
    4b9c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    4ba0:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    4ba4:	69725773 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    4ba8:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4bac:	525f4443 	subspl	r4, pc, #1124073472	; 0x43000000
    4bb0:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
    4bb4:	6f6c6f43 	svcvs	0x006c6f43
    4bb8:	79654b72 	stmdbvc	r5!, {r1, r4, r5, r6, r8, r9, fp, lr}^
    4bbc:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4bc0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    4bc4:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xe65
    4bc8:	43747865 	cmnmi	r4, #6619136	; 0x650000
    4bcc:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    4bd0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    4bd4:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0x970
    4bd8:	4900736c 	stmdbmi	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    4bdc:	4547414d 	strbmi	r4, [r7, #-333]	; 0x14d
    4be0:	504f545f 	subpl	r5, pc, pc, asr r4	; <UNPREDICTABLE>
    4be4:	44434c00 	strbmi	r4, [r3], #-3072	; 0xc00
    4be8:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    4bec:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    4bf0:	0066664f 	rsbeq	r6, r6, pc, asr #12
    4bf4:	5f44434c 	svcpl	0x0044434c
    4bf8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    4bfc:	00746e6f 	rsbseq	r6, r4, pc, ror #28
    4c00:	5f44434c 	svcpl	0x0044434c
    4c04:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4c08:	74614465 	strbtvc	r4, [r1], #-1125	; 0x465
    4c0c:	4d490061 	stclmi	0, cr0, [r9, #-388]	; 0xfffffe7c
    4c10:	5f454741 	svcpl	0x00454741
    4c14:	54544f42 	ldrbpl	r4, [r4], #-3906	; 0xf42
    4c18:	4c004d4f 	stcmi	13, cr4, [r0], {79}	; 0x4f
    4c1c:	435f4443 	cmpmi	pc, #1124073472	; 0x43000000
    4c20:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    4c24:	6f66746e 	svcvs	0x0066746e
    4c28:	0073746e 	rsbseq	r7, r3, lr, ror #8
    4c2c:	5f454f49 	svcpl	0x00454f49
    4c30:	475f5054 			; <UNDEFINED> instruction: 0x475f5054
    4c34:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
    4c38:	00657461 	rsbeq	r7, r5, r1, ror #8
    4c3c:	535f5054 	cmppl	pc, #84	; 0x54
    4c40:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    4c44:	454f4900 	strbmi	r4, [pc, #-2304]	; 434c <_Min_Stack_Size+0x3f4c>
    4c48:	5449475f 	strbpl	r4, [r9], #-1887	; 0x75f
    4c4c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4c50:	5f454f49 	svcpl	0x00454f49
    4c54:	46414f49 	strbmi	r4, [r1], -r9, asr #30
    4c58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    4c5c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    4c60:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4c68 <_Min_Stack_Size+0x4868>
    4c64:	65525f50 	ldrbvs	r5, [r2, #-3920]	; 0xf50
    4c68:	585f6461 	ldmdapl	pc, {r0, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    4c6c:	5f505400 	svcpl	0x00505400
    4c70:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    4c74:	4f490045 	svcmi	0x00490045
    4c78:	50545f45 	subspl	r5, r4, r5, asr #30
    4c7c:	6165525f 	cmnvs	r5, pc, asr r2
    4c80:	005a5f64 	subseq	r5, sl, r4, ror #30
    4c84:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    4c88:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4c8c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4c90:	43324900 	teqmi	r2, #0, 18
    4c94:	414d445f 	cmpmi	sp, pc, asr r4
    4c98:	6165525f 	cmnvs	r5, pc, asr r2
    4c9c:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    4ca0:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4ca4:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4ca8:	00726574 	rsbseq	r6, r2, r4, ror r5
    4cac:	5f454f49 	svcpl	0x00454f49
    4cb0:	74636e46 	strbtvc	r6, [r3], #-3654	; 0xe46
    4cb4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4cb8:	5f454f49 	svcpl	0x00454f49
    4cbc:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    4cc0:	58547265 	ldmdapl	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4cc4:	454f4900 	strbmi	r4, [pc, #-2304]	; 43cc <_Min_Stack_Size+0x3fcc>
    4cc8:	4f73495f 	svcmi	0x0073495f
    4ccc:	61726570 	cmnvs	r2, r0, ror r5
    4cd0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    4cd4:	6c006c61 	stcvs	12, cr6, [r0], {97}	; 0x61
    4cd8:	552f6269 	strpl	r6, [pc, #-617]!	; 4a77 <_Min_Stack_Size+0x4677>
    4cdc:	696c6974 	stmdbvs	ip!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4ce0:	73656974 	cmnvc	r5, #116, 18	; 0x1d0000
    4ce4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4ce8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4cec:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    4cf0:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    4cf4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    4cf8:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xf79
    4cfc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4d00:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    4d04:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    4d08:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    4d0c:	695f7972 	ldmdbvs	pc, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    4d10:	632e656f 	teqvs	lr, #465567744	; 0x1bc00000
    4d14:	756f5400 	strbvc	r5, [pc, #-1024]!	; 491c <_Min_Stack_Size+0x451c>
    4d18:	65446863 	strbvs	r6, [r4, #-2147]	; 0x863
    4d1c:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    4d20:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
    4d24:	435f454f 	cmpmi	pc, #331350016	; 0x13c00000
    4d28:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4d2c:	50544947 	subspl	r4, r4, r7, asr #18
    4d30:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    4d34:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4d38:	495f454f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    4d3c:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    4d40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4d44:	4f490067 	svcmi	0x00490067
    4d48:	65475f45 	strbvs	r5, [r7, #-3909]	; 0xf45
    4d4c:	54494774 	strbpl	r4, [r9], #-1908	; 0x774
    4d50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    4d54:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4d58:	525f454f 	subspl	r4, pc, #331350016	; 0x13c00000
    4d5c:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4d60:	65520044 	ldrbvs	r0, [r2, #-68]	; 0x44
    4d64:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    4d68:	61567265 	cmpvs	r6, r5, ror #4
    4d6c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4d70:	5f433249 	svcpl	0x00433249
    4d74:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4d78:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4d7c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    4d80:	4f490065 	svcmi	0x00490065
    4d84:	50475f45 	subpl	r5, r7, r5, asr #30
    4d88:	435f4f49 	cmpmi	pc, #292	; 0x124
    4d8c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4d90:	4f490067 	svcmi	0x00490067
    4d94:	4b4f5f45 	blmi	13dcab0 <_Min_Stack_Size+0x13dc6b0>
    4d98:	454f4900 	strbmi	r4, [pc, #-2304]	; 44a0 <_Min_Stack_Size+0x40a0>
    4d9c:	5f50545f 	svcpl	0x0050545f
    4da0:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    4da4:	4900595f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, fp, ip, lr}
    4da8:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4db0 <_Min_Stack_Size+0x49b0>
    4dac:	6f656d69 	svcvs	0x00656d69
    4db0:	73557475 	cmpvc	r5, #1962934272	; 0x75000000
    4db4:	61437265 	cmpvs	r3, r5, ror #4
    4db8:	61626c6c 	cmnvs	r2, ip, ror #24
    4dbc:	49006b63 	stmdbmi	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    4dc0:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4dc8 <_Min_Stack_Size+0x49c8>
    4dc4:	43544950 	cmpmi	r4, #80, 18	; 0x140000
    4dc8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4dcc:	4f490067 	svcmi	0x00490067
    4dd0:	65525f45 	ldrbvs	r5, [r2, #-3909]	; 0xf45
    4dd4:	00746573 	rsbseq	r6, r4, r3, ror r5
    4dd8:	5f454f49 	svcpl	0x00454f49
    4ddc:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
    4de0:	0054554f 	subseq	r5, r4, pc, asr #10
    4de4:	5f433249 	svcpl	0x00433249
    4de8:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4dec:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4df0:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4df4:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4df8:	00726574 	rsbseq	r6, r2, r4, ror r5
    4dfc:	5f433249 	svcpl	0x00433249
    4e00:	5f414d44 	svcpl	0x00414d44
    4e04:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    4e08:	76654465 	strbtvc	r4, [r5], -r5, ror #8
    4e0c:	52656369 	rsbpl	r6, r5, #-1543503871	; 0xa4000001
    4e10:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    4e14:	00726574 	rsbseq	r6, r2, r4, ror r5
    4e18:	5f454f49 	svcpl	0x00454f49
    4e1c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    4e20:	0074754f 	rsbseq	r7, r4, pc, asr #10
    4e24:	5f454f49 	svcpl	0x00454f49
    4e28:	44414d44 	strbmi	r4, [r1], #-3396	; 0xd44
    4e2c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    4e30:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    4e34:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    4e38:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    4e3c:	454f4900 	strbmi	r4, [pc, #-2304]	; 4544 <_Min_Stack_Size+0x4144>
    4e40:	4941465f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r9, sl, lr}^
    4e44:	4552554c 	ldrbmi	r5, [r2, #-1356]	; 0x54c
    4e48:	454f4900 	strbmi	r4, [pc, #-2304]	; 4550 <_Min_Stack_Size+0x4150>
    4e4c:	414d445f 	cmpmi	sp, pc, asr r4
    4e50:	0058525f 	subseq	r5, r8, pc, asr r2
    4e54:	5f454f49 	svcpl	0x00454f49
    4e58:	43544947 	cmpmi	r4, #1163264	; 0x11c000
    4e5c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4e60:	65720067 	ldrbvs	r0, [r2, #-103]!	; 0x67
    4e64:	765f6461 	ldrbvc	r6, [pc], -r1, ror #8
    4e68:	66697265 	strbtvs	r7, [r9], -r5, ror #4
    4e6c:	69447800 	stmdbvs	r4, {fp, ip, sp, lr}^
    4e70:	49006666 	stmdbmi	r0, {r1, r2, r5, r6, r9, sl, sp, lr}
    4e74:	445f4332 	ldrbmi	r4, [pc], #-818	; 4e7c <_Min_Stack_Size+0x4a7c>
    4e78:	525f414d 	subspl	r4, pc, #1073741843	; 0x40000013
    4e7c:	44646165 	strbtmi	r6, [r4], #-357	; 0x165
    4e80:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    4e84:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    4e88:	4f490072 	svcmi	0x00490072
    4e8c:	6f435f45 	svcvs	0x00435f45
    4e90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4e94:	43324900 	teqmi	r2, #0, 18
    4e98:	6165525f 	cmnvs	r5, pc, asr r2
    4e9c:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    4ea0:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    4ea4:	00726566 	rsbseq	r6, r2, r6, ror #10
    4ea8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    4eac:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    4eb0:	4e5f454f 	cdpmi	5, 5, cr4, cr15, cr15, {2}
    4eb4:	4f5f544f 	svcmi	0x005f544f
    4eb8:	41524550 	cmpmi	r2, r0, asr r5
    4ebc:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
    4ec0:	49004c41 	stmdbmi	r0, {r0, r6, sl, fp, lr}
    4ec4:	545f454f 	ldrbpl	r4, [pc], #-1359	; 4ecc <_Min_Stack_Size+0x4acc>
    4ec8:	6f435f50 	svcvs	0x00435f50
    4ecc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4ed0:	454f4900 	strbmi	r4, [pc, #-2304]	; 45d8 <_Min_Stack_Size+0x41d8>
    4ed4:	6675425f 			; <UNDEFINED> instruction: 0x6675425f
    4ed8:	52726566 	rsbspl	r6, r2, #427819008	; 0x19800000
    4edc:	4f490058 	svcmi	0x00490058
    4ee0:	4d445f45 	stclmi	15, cr5, [r4, #-276]	; 0xfffffeec
    4ee4:	58545f41 	ldmdapl	r4, {r0, r6, r8, r9, sl, fp, ip, lr}^
    4ee8:	69447900 	stmdbvs	r4, {r8, fp, ip, sp, lr}^
    4eec:	50006666 	andpl	r6, r0, r6, ror #12
    4ef0:	4d415241 	sfmmi	f5, 2, [r1, #-260]	; 0xfffffefc
    4ef4:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    4ef8:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    4efc:	445f454f 	ldrbmi	r4, [pc], #-1359	; 4f04 <_Min_Stack_Size+0x4b04>
    4f00:	435f414d 	cmpmi	pc, #1073741843	; 0x40000013
    4f04:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4f08:	32490067 	subcc	r0, r9, #103	; 0x67
    4f0c:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    4f10:	65446461 	strbvs	r6, [r4, #-1121]	; 0x461
    4f14:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    4f18:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    4f1c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    4f20:	6f6c4700 	svcvs	0x006c4700
    4f24:	5f6c6162 	svcpl	0x006c6162
    4f28:	Address 0x0000000000004f28 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
   8:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
   c:	62753831 	rsbsvs	r3, r5, #3211264	; 0x310000
  10:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
  14:	32312b32 	eorscc	r2, r1, #51200	; 0xc800
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00332e38 	eorseq	r2, r3, r8, lsr lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	080001c0 	stmdaeq	r0, {r6, r7, r8}
      1c:	0000000e 	andeq	r0, r0, lr
      20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      24:	41018e02 	tstmi	r1, r2, lsl #28
      28:	0000070d 	andeq	r0, r0, sp, lsl #14
      2c:	0000001c 	andeq	r0, r0, ip, lsl r0
      30:	00000000 	andeq	r0, r0, r0
      34:	080001d0 	stmdaeq	r0, {r4, r6, r7, r8}
      38:	00000030 	andeq	r0, r0, r0, lsr r0
      3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      40:	41018e02 	tstmi	r1, r2, lsl #28
      44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      48:	00000007 	andeq	r0, r0, r7
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	08000200 	stmdaeq	r0, {r9}
      58:	00000042 	andeq	r0, r0, r2, asr #32
      5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      60:	41018e02 	tstmi	r1, r2, lsl #28
      64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      68:	00000007 	andeq	r0, r0, r7
      6c:	00000018 	andeq	r0, r0, r8, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	08000244 	stmdaeq	r0, {r2, r6, r9}
      78:	000000ac 	andeq	r0, r0, ip, lsr #1
      7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      80:	41018e02 	tstmi	r1, r2, lsl #28
      84:	0000070d 	andeq	r0, r0, sp, lsl #14
      88:	0000001c 	andeq	r0, r0, ip, lsl r0
      8c:	00000000 	andeq	r0, r0, r0
      90:	080002f0 	stmdaeq	r0, {r4, r5, r6, r7, r9}
      94:	00000054 	andeq	r0, r0, r4, asr r0
      98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      9c:	41018e02 	tstmi	r1, r2, lsl #28
      a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      a4:	00000007 	andeq	r0, r0, r7
      a8:	0000000c 	andeq	r0, r0, ip
      ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      b0:	7c020001 	stcvc	0, cr0, [r2], {1}
      b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      b8:	00000018 	andeq	r0, r0, r8, lsl r0
      bc:	000000a8 	andeq	r0, r0, r8, lsr #1
      c0:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
      c4:	00000068 	andeq	r0, r0, r8, rrx
      c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      cc:	41018e02 	tstmi	r1, r2, lsl #28
      d0:	0000070d 	andeq	r0, r0, sp, lsl #14
      d4:	00000018 	andeq	r0, r0, r8, lsl r0
      d8:	000000a8 	andeq	r0, r0, r8, lsr #1
      dc:	080003f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9}
      e0:	000000f8 	strdeq	r0, [r0], -r8
      e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
      e8:	200e4101 	andcs	r4, lr, r1, lsl #2
      ec:	00070d41 	andeq	r0, r7, r1, asr #26
      f0:	00000018 	andeq	r0, r0, r8, lsl r0
      f4:	000000a8 	andeq	r0, r0, r8, lsr #1
      f8:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
      fc:	000000f4 	strdeq	r0, [r0], -r4
     100:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     104:	100e4101 	andne	r4, lr, r1, lsl #2
     108:	00070d41 	andeq	r0, r7, r1, asr #26
     10c:	0000000c 	andeq	r0, r0, ip
     110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     114:	7c020001 	stcvc	0, cr0, [r2], {1}
     118:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     11c:	00000018 	andeq	r0, r0, r8, lsl r0
     120:	0000010c 	andeq	r0, r0, ip, lsl #2
     124:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
     128:	00000024 	andeq	r0, r0, r4, lsr #32
     12c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     130:	100e4101 	andne	r4, lr, r1, lsl #2
     134:	00070d41 	andeq	r0, r7, r1, asr #26
     138:	00000018 	andeq	r0, r0, r8, lsl r0
     13c:	0000010c 	andeq	r0, r0, ip, lsl #2
     140:	08000604 	stmdaeq	r0, {r2, r9, sl}
     144:	000000bc 	strheq	r0, [r0], -ip
     148:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     14c:	180e4101 	stmdane	lr, {r0, r8, lr}
     150:	00070d41 	andeq	r0, r7, r1, asr #26
     154:	00000018 	andeq	r0, r0, r8, lsl r0
     158:	0000010c 	andeq	r0, r0, ip, lsl #2
     15c:	080006c0 	stmdaeq	r0, {r6, r7, r9, sl}
     160:	0000002c 	andeq	r0, r0, ip, lsr #32
     164:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     168:	100e4101 	andne	r4, lr, r1, lsl #2
     16c:	00070d41 	andeq	r0, r7, r1, asr #26
     170:	00000018 	andeq	r0, r0, r8, lsl r0
     174:	0000010c 	andeq	r0, r0, ip, lsl #2
     178:	080006ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl}
     17c:	00000040 	andeq	r0, r0, r0, asr #32
     180:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     184:	100e4101 	andne	r4, lr, r1, lsl #2
     188:	00070d41 	andeq	r0, r7, r1, asr #26
     18c:	00000018 	andeq	r0, r0, r8, lsl r0
     190:	0000010c 	andeq	r0, r0, ip, lsl #2
     194:	0800072c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl}
     198:	00000038 	andeq	r0, r0, r8, lsr r0
     19c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1a0:	100e4101 	andne	r4, lr, r1, lsl #2
     1a4:	00070d41 	andeq	r0, r7, r1, asr #26
     1a8:	0000000c 	andeq	r0, r0, ip
     1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
     1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
     1c0:	08000764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl}
     1c4:	00000164 	andeq	r0, r0, r4, ror #2
     1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1cc:	41018e02 	tstmi	r1, r2, lsl #28
     1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1d4:	00000007 	andeq	r0, r0, r7
     1d8:	00000018 	andeq	r0, r0, r8, lsl r0
     1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
     1e0:	080008c8 	stmdaeq	r0, {r3, r6, r7, fp}
     1e4:	0000011a 	andeq	r0, r0, sl, lsl r1
     1e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     1ec:	200e4101 	andcs	r4, lr, r1, lsl #2
     1f0:	00070d41 	andeq	r0, r7, r1, asr #26
     1f4:	00000018 	andeq	r0, r0, r8, lsl r0
     1f8:	000001a8 	andeq	r0, r0, r8, lsr #3
     1fc:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
     200:	00000032 	andeq	r0, r0, r2, lsr r0
     204:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     208:	100e4101 	andne	r4, lr, r1, lsl #2
     20c:	00070d41 	andeq	r0, r7, r1, asr #26
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	000001a8 	andeq	r0, r0, r8, lsr #3
     218:	08000a18 	stmdaeq	r0, {r3, r4, r9, fp}
     21c:	00000042 	andeq	r0, r0, r2, asr #32
     220:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     224:	180e4101 	stmdane	lr, {r0, r8, lr}
     228:	00070d41 	andeq	r0, r7, r1, asr #26
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
     230:	000001a8 	andeq	r0, r0, r8, lsr #3
     234:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
     238:	00000034 	andeq	r0, r0, r4, lsr r0
     23c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     240:	180e4101 	stmdane	lr, {r0, r8, lr}
     244:	00070d41 	andeq	r0, r7, r1, asr #26
     248:	00000018 	andeq	r0, r0, r8, lsl r0
     24c:	000001a8 	andeq	r0, r0, r8, lsr #3
     250:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     254:	0000001a 	andeq	r0, r0, sl, lsl r0
     258:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     25c:	100e4101 	andne	r4, lr, r1, lsl #2
     260:	00070d41 	andeq	r0, r7, r1, asr #26
     264:	00000018 	andeq	r0, r0, r8, lsl r0
     268:	000001a8 	andeq	r0, r0, r8, lsr #3
     26c:	08000aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp}
     270:	00000034 	andeq	r0, r0, r4, lsr r0
     274:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     278:	180e4101 	stmdane	lr, {r0, r8, lr}
     27c:	00070d41 	andeq	r0, r7, r1, asr #26
     280:	00000018 	andeq	r0, r0, r8, lsl r0
     284:	000001a8 	andeq	r0, r0, r8, lsr #3
     288:	08000ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp}
     28c:	0000001a 	andeq	r0, r0, sl, lsl r0
     290:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     294:	100e4101 	andne	r4, lr, r1, lsl #2
     298:	00070d41 	andeq	r0, r7, r1, asr #26
     29c:	00000018 	andeq	r0, r0, r8, lsl r0
     2a0:	000001a8 	andeq	r0, r0, r8, lsr #3
     2a4:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
     2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2b0:	100e4101 	andne	r4, lr, r1, lsl #2
     2b4:	00070d41 	andeq	r0, r7, r1, asr #26
     2b8:	00000018 	andeq	r0, r0, r8, lsl r0
     2bc:	000001a8 	andeq	r0, r0, r8, lsr #3
     2c0:	08000b18 	stmdaeq	r0, {r3, r4, r8, r9, fp}
     2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2cc:	100e4101 	andne	r4, lr, r1, lsl #2
     2d0:	00070d41 	andeq	r0, r7, r1, asr #26
     2d4:	00000018 	andeq	r0, r0, r8, lsl r0
     2d8:	000001a8 	andeq	r0, r0, r8, lsr #3
     2dc:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
     2e0:	0000002e 	andeq	r0, r0, lr, lsr #32
     2e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     2e8:	100e4101 	andne	r4, lr, r1, lsl #2
     2ec:	00070d41 	andeq	r0, r7, r1, asr #26
     2f0:	00000018 	andeq	r0, r0, r8, lsl r0
     2f4:	000001a8 	andeq	r0, r0, r8, lsr #3
     2f8:	08000b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp}
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     304:	100e4101 	andne	r4, lr, r1, lsl #2
     308:	00070d41 	andeq	r0, r7, r1, asr #26
     30c:	00000018 	andeq	r0, r0, r8, lsl r0
     310:	000001a8 	andeq	r0, r0, r8, lsr #3
     314:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
     318:	00000022 	andeq	r0, r0, r2, lsr #32
     31c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     320:	100e4101 	andne	r4, lr, r1, lsl #2
     324:	00070d41 	andeq	r0, r7, r1, asr #26
     328:	00000018 	andeq	r0, r0, r8, lsl r0
     32c:	000001a8 	andeq	r0, r0, r8, lsr #3
     330:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
     334:	0000008c 	andeq	r0, r0, ip, lsl #1
     338:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     33c:	180e4101 	stmdane	lr, {r0, r8, lr}
     340:	00070d41 	andeq	r0, r7, r1, asr #26
     344:	0000000c 	andeq	r0, r0, ip
     348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     34c:	7c020001 	stcvc	0, cr0, [r2], {1}
     350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     354:	00000014 	andeq	r0, r0, r4, lsl r0
     358:	00000344 	andeq	r0, r0, r4, asr #6
     35c:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
     360:	00000070 	andeq	r0, r0, r0, ror r0
     364:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     368:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     36c:	00000018 	andeq	r0, r0, r8, lsl r0
     370:	00000344 	andeq	r0, r0, r4, asr #6
     374:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
     378:	00000024 	andeq	r0, r0, r4, lsr #32
     37c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     380:	100e4101 	andne	r4, lr, r1, lsl #2
     384:	00070d41 	andeq	r0, r7, r1, asr #26
     388:	0000001c 	andeq	r0, r0, ip, lsl r0
     38c:	00000344 	andeq	r0, r0, r4, asr #6
     390:	08000cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp}
     394:	00000050 	andeq	r0, r0, r0, asr r0
     398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     39c:	41018e02 	tstmi	r1, r2, lsl #28
     3a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     3a4:	00000007 	andeq	r0, r0, r7
     3a8:	00000018 	andeq	r0, r0, r8, lsl r0
     3ac:	00000344 	andeq	r0, r0, r4, asr #6
     3b0:	08000d14 	stmdaeq	r0, {r2, r4, r8, sl, fp}
     3b4:	0000003c 	andeq	r0, r0, ip, lsr r0
     3b8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3bc:	180e4101 	stmdane	lr, {r0, r8, lr}
     3c0:	00070d41 	andeq	r0, r7, r1, asr #26
     3c4:	00000018 	andeq	r0, r0, r8, lsl r0
     3c8:	00000344 	andeq	r0, r0, r4, asr #6
     3cc:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     3d0:	00000020 	andeq	r0, r0, r0, lsr #32
     3d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3d8:	100e4101 	andne	r4, lr, r1, lsl #2
     3dc:	00070d41 	andeq	r0, r7, r1, asr #26
     3e0:	00000018 	andeq	r0, r0, r8, lsl r0
     3e4:	00000344 	andeq	r0, r0, r4, asr #6
     3e8:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
     3ec:	00000040 	andeq	r0, r0, r0, asr #32
     3f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     3f4:	100e4101 	andne	r4, lr, r1, lsl #2
     3f8:	00070d41 	andeq	r0, r7, r1, asr #26
     3fc:	00000018 	andeq	r0, r0, r8, lsl r0
     400:	00000344 	andeq	r0, r0, r4, asr #6
     404:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
     408:	00000020 	andeq	r0, r0, r0, lsr #32
     40c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     410:	100e4101 	andne	r4, lr, r1, lsl #2
     414:	00070d41 	andeq	r0, r7, r1, asr #26
     418:	00000018 	andeq	r0, r0, r8, lsl r0
     41c:	00000344 	andeq	r0, r0, r4, asr #6
     420:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
     424:	0000003c 	andeq	r0, r0, ip, lsr r0
     428:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     42c:	180e4101 	stmdane	lr, {r0, r8, lr}
     430:	00070d41 	andeq	r0, r7, r1, asr #26
     434:	00000018 	andeq	r0, r0, r8, lsl r0
     438:	00000344 	andeq	r0, r0, r4, asr #6
     43c:	08000e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp}
     440:	00000020 	andeq	r0, r0, r0, lsr #32
     444:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     448:	100e4101 	andne	r4, lr, r1, lsl #2
     44c:	00070d41 	andeq	r0, r7, r1, asr #26
     450:	00000018 	andeq	r0, r0, r8, lsl r0
     454:	00000344 	andeq	r0, r0, r4, asr #6
     458:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
     45c:	00000030 	andeq	r0, r0, r0, lsr r0
     460:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     464:	180e4101 	stmdane	lr, {r0, r8, lr}
     468:	00070d41 	andeq	r0, r7, r1, asr #26
     46c:	00000018 	andeq	r0, r0, r8, lsl r0
     470:	00000344 	andeq	r0, r0, r4, asr #6
     474:	08000e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp}
     478:	00000020 	andeq	r0, r0, r0, lsr #32
     47c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     480:	100e4101 	andne	r4, lr, r1, lsl #2
     484:	00070d41 	andeq	r0, r7, r1, asr #26
     488:	00000018 	andeq	r0, r0, r8, lsl r0
     48c:	00000344 	andeq	r0, r0, r4, asr #6
     490:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
     494:	00000030 	andeq	r0, r0, r0, lsr r0
     498:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     49c:	180e4101 	stmdane	lr, {r0, r8, lr}
     4a0:	00070d41 	andeq	r0, r7, r1, asr #26
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000344 	andeq	r0, r0, r4, asr #6
     4ac:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     4b0:	00000020 	andeq	r0, r0, r0, lsr #32
     4b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4b8:	100e4101 	andne	r4, lr, r1, lsl #2
     4bc:	00070d41 	andeq	r0, r7, r1, asr #26
     4c0:	00000018 	andeq	r0, r0, r8, lsl r0
     4c4:	00000344 	andeq	r0, r0, r4, asr #6
     4c8:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
     4cc:	00000020 	andeq	r0, r0, r0, lsr #32
     4d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4d4:	100e4101 	andne	r4, lr, r1, lsl #2
     4d8:	00070d41 	andeq	r0, r7, r1, asr #26
     4dc:	00000018 	andeq	r0, r0, r8, lsl r0
     4e0:	00000344 	andeq	r0, r0, r4, asr #6
     4e4:	08000eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp}
     4e8:	0000003c 	andeq	r0, r0, ip, lsr r0
     4ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     4f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     4f4:	00070d41 	andeq	r0, r7, r1, asr #26
     4f8:	00000018 	andeq	r0, r0, r8, lsl r0
     4fc:	00000344 	andeq	r0, r0, r4, asr #6
     500:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
     504:	0000003c 	andeq	r0, r0, ip, lsr r0
     508:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     50c:	180e4101 	stmdane	lr, {r0, r8, lr}
     510:	00070d41 	andeq	r0, r7, r1, asr #26
     514:	00000018 	andeq	r0, r0, r8, lsl r0
     518:	00000344 	andeq	r0, r0, r4, asr #6
     51c:	08000f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp}
     520:	00000038 	andeq	r0, r0, r8, lsr r0
     524:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     528:	180e4101 	stmdane	lr, {r0, r8, lr}
     52c:	00070d41 	andeq	r0, r7, r1, asr #26
     530:	00000014 	andeq	r0, r0, r4, lsl r0
     534:	00000344 	andeq	r0, r0, r4, asr #6
     538:	08000f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp}
     53c:	00000020 	andeq	r0, r0, r0, lsr #32
     540:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     544:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     548:	00000018 	andeq	r0, r0, r8, lsl r0
     54c:	00000344 	andeq	r0, r0, r4, asr #6
     550:	08000fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp}
     554:	00000038 	andeq	r0, r0, r8, lsr r0
     558:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     55c:	180e4101 	stmdane	lr, {r0, r8, lr}
     560:	00070d41 	andeq	r0, r7, r1, asr #26
     564:	00000018 	andeq	r0, r0, r8, lsl r0
     568:	00000344 	andeq	r0, r0, r4, asr #6
     56c:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
     570:	00000038 	andeq	r0, r0, r8, lsr r0
     574:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     578:	180e4101 	stmdane	lr, {r0, r8, lr}
     57c:	00070d41 	andeq	r0, r7, r1, asr #26
     580:	00000018 	andeq	r0, r0, r8, lsl r0
     584:	00000344 	andeq	r0, r0, r4, asr #6
     588:	0800102c 	stmdaeq	r0, {r2, r3, r5, ip}
     58c:	00000038 	andeq	r0, r0, r8, lsr r0
     590:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     594:	180e4101 	stmdane	lr, {r0, r8, lr}
     598:	00070d41 	andeq	r0, r7, r1, asr #26
     59c:	00000018 	andeq	r0, r0, r8, lsl r0
     5a0:	00000344 	andeq	r0, r0, r4, asr #6
     5a4:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
     5a8:	00000154 	andeq	r0, r0, r4, asr r1
     5ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5b0:	280e4101 	stmdacs	lr, {r0, r8, lr}
     5b4:	00070d41 	andeq	r0, r7, r1, asr #26
     5b8:	00000018 	andeq	r0, r0, r8, lsl r0
     5bc:	00000344 	andeq	r0, r0, r4, asr #6
     5c0:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
     5c4:	0000005c 	andeq	r0, r0, ip, asr r0
     5c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5cc:	180e4101 	stmdane	lr, {r0, r8, lr}
     5d0:	00070d41 	andeq	r0, r7, r1, asr #26
     5d4:	00000018 	andeq	r0, r0, r8, lsl r0
     5d8:	00000344 	andeq	r0, r0, r4, asr #6
     5dc:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
     5e0:	00000020 	andeq	r0, r0, r0, lsr #32
     5e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     5e8:	100e4101 	andne	r4, lr, r1, lsl #2
     5ec:	00070d41 	andeq	r0, r7, r1, asr #26
     5f0:	00000018 	andeq	r0, r0, r8, lsl r0
     5f4:	00000344 	andeq	r0, r0, r4, asr #6
     5f8:	08001234 	stmdaeq	r0, {r2, r4, r5, r9, ip}
     5fc:	00000020 	andeq	r0, r0, r0, lsr #32
     600:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     604:	100e4101 	andne	r4, lr, r1, lsl #2
     608:	00070d41 	andeq	r0, r7, r1, asr #26
     60c:	00000018 	andeq	r0, r0, r8, lsl r0
     610:	00000344 	andeq	r0, r0, r4, asr #6
     614:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
     618:	0000001c 	andeq	r0, r0, ip, lsl r0
     61c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     620:	100e4101 	andne	r4, lr, r1, lsl #2
     624:	00070d41 	andeq	r0, r7, r1, asr #26
     628:	00000018 	andeq	r0, r0, r8, lsl r0
     62c:	00000344 	andeq	r0, r0, r4, asr #6
     630:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     634:	0000003c 	andeq	r0, r0, ip, lsr r0
     638:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     63c:	180e4101 	stmdane	lr, {r0, r8, lr}
     640:	00070d41 	andeq	r0, r7, r1, asr #26
     644:	00000018 	andeq	r0, r0, r8, lsl r0
     648:	00000344 	andeq	r0, r0, r4, asr #6
     64c:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
     650:	00000040 	andeq	r0, r0, r0, asr #32
     654:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     658:	180e4101 	stmdane	lr, {r0, r8, lr}
     65c:	00070d41 	andeq	r0, r7, r1, asr #26
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	00000344 	andeq	r0, r0, r4, asr #6
     668:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
     66c:	0000003c 	andeq	r0, r0, ip, lsr r0
     670:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     674:	180e4101 	stmdane	lr, {r0, r8, lr}
     678:	00070d41 	andeq	r0, r7, r1, asr #26
     67c:	00000018 	andeq	r0, r0, r8, lsl r0
     680:	00000344 	andeq	r0, r0, r4, asr #6
     684:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
     688:	0000003c 	andeq	r0, r0, ip, lsr r0
     68c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     690:	180e4101 	stmdane	lr, {r0, r8, lr}
     694:	00070d41 	andeq	r0, r7, r1, asr #26
     698:	00000018 	andeq	r0, r0, r8, lsl r0
     69c:	00000344 	andeq	r0, r0, r4, asr #6
     6a0:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
     6a4:	0000003c 	andeq	r0, r0, ip, lsr r0
     6a8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6ac:	180e4101 	stmdane	lr, {r0, r8, lr}
     6b0:	00070d41 	andeq	r0, r7, r1, asr #26
     6b4:	00000018 	andeq	r0, r0, r8, lsl r0
     6b8:	00000344 	andeq	r0, r0, r4, asr #6
     6bc:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6c8:	100e4101 	andne	r4, lr, r1, lsl #2
     6cc:	00070d41 	andeq	r0, r7, r1, asr #26
     6d0:	00000018 	andeq	r0, r0, r8, lsl r0
     6d4:	00000344 	andeq	r0, r0, r4, asr #6
     6d8:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
     6dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     6e0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     6e4:	100e4101 	andne	r4, lr, r1, lsl #2
     6e8:	00070d41 	andeq	r0, r7, r1, asr #26
     6ec:	00000018 	andeq	r0, r0, r8, lsl r0
     6f0:	00000344 	andeq	r0, r0, r4, asr #6
     6f4:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
     6f8:	0000003c 	andeq	r0, r0, ip, lsr r0
     6fc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     700:	100e4101 	andne	r4, lr, r1, lsl #2
     704:	00070d41 	andeq	r0, r7, r1, asr #26
     708:	00000018 	andeq	r0, r0, r8, lsl r0
     70c:	00000344 	andeq	r0, r0, r4, asr #6
     710:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
     714:	0000003c 	andeq	r0, r0, ip, lsr r0
     718:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     71c:	100e4101 	andne	r4, lr, r1, lsl #2
     720:	00070d41 	andeq	r0, r7, r1, asr #26
     724:	00000018 	andeq	r0, r0, r8, lsl r0
     728:	00000344 	andeq	r0, r0, r4, asr #6
     72c:	08001470 	stmdaeq	r0, {r4, r5, r6, sl, ip}
     730:	0000003c 	andeq	r0, r0, ip, lsr r0
     734:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     738:	100e4101 	andne	r4, lr, r1, lsl #2
     73c:	00070d41 	andeq	r0, r7, r1, asr #26
     740:	00000018 	andeq	r0, r0, r8, lsl r0
     744:	00000344 	andeq	r0, r0, r4, asr #6
     748:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
     74c:	0000003c 	andeq	r0, r0, ip, lsr r0
     750:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     754:	100e4101 	andne	r4, lr, r1, lsl #2
     758:	00070d41 	andeq	r0, r7, r1, asr #26
     75c:	00000018 	andeq	r0, r0, r8, lsl r0
     760:	00000344 	andeq	r0, r0, r4, asr #6
     764:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     768:	0000003c 	andeq	r0, r0, ip, lsr r0
     76c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     770:	100e4101 	andne	r4, lr, r1, lsl #2
     774:	00070d41 	andeq	r0, r7, r1, asr #26
     778:	00000018 	andeq	r0, r0, r8, lsl r0
     77c:	00000344 	andeq	r0, r0, r4, asr #6
     780:	08001524 	stmdaeq	r0, {r2, r5, r8, sl, ip}
     784:	0000003c 	andeq	r0, r0, ip, lsr r0
     788:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     78c:	100e4101 	andne	r4, lr, r1, lsl #2
     790:	00070d41 	andeq	r0, r7, r1, asr #26
     794:	00000018 	andeq	r0, r0, r8, lsl r0
     798:	00000344 	andeq	r0, r0, r4, asr #6
     79c:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
     7a0:	0000003c 	andeq	r0, r0, ip, lsr r0
     7a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7a8:	100e4101 	andne	r4, lr, r1, lsl #2
     7ac:	00070d41 	andeq	r0, r7, r1, asr #26
     7b0:	00000018 	andeq	r0, r0, r8, lsl r0
     7b4:	00000344 	andeq	r0, r0, r4, asr #6
     7b8:	0800159c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip}
     7bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     7c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7c4:	100e4101 	andne	r4, lr, r1, lsl #2
     7c8:	00070d41 	andeq	r0, r7, r1, asr #26
     7cc:	00000018 	andeq	r0, r0, r8, lsl r0
     7d0:	00000344 	andeq	r0, r0, r4, asr #6
     7d4:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
     7d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7e0:	100e4101 	andne	r4, lr, r1, lsl #2
     7e4:	00070d41 	andeq	r0, r7, r1, asr #26
     7e8:	00000018 	andeq	r0, r0, r8, lsl r0
     7ec:	00000344 	andeq	r0, r0, r4, asr #6
     7f0:	08001614 	stmdaeq	r0, {r2, r4, r9, sl, ip}
     7f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     7f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     7fc:	100e4101 	andne	r4, lr, r1, lsl #2
     800:	00070d41 	andeq	r0, r7, r1, asr #26
     804:	00000018 	andeq	r0, r0, r8, lsl r0
     808:	00000344 	andeq	r0, r0, r4, asr #6
     80c:	08001650 	stmdaeq	r0, {r4, r6, r9, sl, ip}
     810:	0000003c 	andeq	r0, r0, ip, lsr r0
     814:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     818:	100e4101 	andne	r4, lr, r1, lsl #2
     81c:	00070d41 	andeq	r0, r7, r1, asr #26
     820:	00000018 	andeq	r0, r0, r8, lsl r0
     824:	00000344 	andeq	r0, r0, r4, asr #6
     828:	0800168c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip}
     82c:	0000003c 	andeq	r0, r0, ip, lsr r0
     830:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     834:	100e4101 	andne	r4, lr, r1, lsl #2
     838:	00070d41 	andeq	r0, r7, r1, asr #26
     83c:	00000018 	andeq	r0, r0, r8, lsl r0
     840:	00000344 	andeq	r0, r0, r4, asr #6
     844:	080016c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip}
     848:	0000003c 	andeq	r0, r0, ip, lsr r0
     84c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     850:	100e4101 	andne	r4, lr, r1, lsl #2
     854:	00070d41 	andeq	r0, r7, r1, asr #26
     858:	00000018 	andeq	r0, r0, r8, lsl r0
     85c:	00000344 	andeq	r0, r0, r4, asr #6
     860:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
     864:	0000003c 	andeq	r0, r0, ip, lsr r0
     868:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     86c:	100e4101 	andne	r4, lr, r1, lsl #2
     870:	00070d41 	andeq	r0, r7, r1, asr #26
     874:	00000018 	andeq	r0, r0, r8, lsl r0
     878:	00000344 	andeq	r0, r0, r4, asr #6
     87c:	08001740 	stmdaeq	r0, {r6, r8, r9, sl, ip}
     880:	00000048 	andeq	r0, r0, r8, asr #32
     884:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     888:	100e4101 	andne	r4, lr, r1, lsl #2
     88c:	00070d41 	andeq	r0, r7, r1, asr #26
     890:	00000018 	andeq	r0, r0, r8, lsl r0
     894:	00000344 	andeq	r0, r0, r4, asr #6
     898:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
     89c:	00000074 	andeq	r0, r0, r4, ror r0
     8a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8a4:	200e4101 	andcs	r4, lr, r1, lsl #2
     8a8:	00070d41 	andeq	r0, r7, r1, asr #26
     8ac:	00000014 	andeq	r0, r0, r4, lsl r0
     8b0:	00000344 	andeq	r0, r0, r4, asr #6
     8b4:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
     8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     8c4:	00000018 	andeq	r0, r0, r8, lsl r0
     8c8:	00000344 	andeq	r0, r0, r4, asr #6
     8cc:	08001818 	stmdaeq	r0, {r3, r4, fp, ip}
     8d0:	00000038 	andeq	r0, r0, r8, lsr r0
     8d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8d8:	180e4101 	stmdane	lr, {r0, r8, lr}
     8dc:	00070d41 	andeq	r0, r7, r1, asr #26
     8e0:	00000018 	andeq	r0, r0, r8, lsl r0
     8e4:	00000344 	andeq	r0, r0, r4, asr #6
     8e8:	08001850 	stmdaeq	r0, {r4, r6, fp, ip}
     8ec:	00000020 	andeq	r0, r0, r0, lsr #32
     8f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     8f4:	100e4101 	andne	r4, lr, r1, lsl #2
     8f8:	00070d41 	andeq	r0, r7, r1, asr #26
     8fc:	0000000c 	andeq	r0, r0, ip
     900:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     904:	7c020001 	stcvc	0, cr0, [r2], {1}
     908:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     90c:	0000001c 	andeq	r0, r0, ip, lsl r0
     910:	000008fc 	strdeq	r0, [r0], -ip
     914:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
     918:	00000114 	andeq	r0, r0, r4, lsl r1
     91c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     920:	41018e02 	tstmi	r1, r2, lsl #28
     924:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     928:	00000007 	andeq	r0, r0, r7
     92c:	0000001c 	andeq	r0, r0, ip, lsl r0
     930:	000008fc 	strdeq	r0, [r0], -ip
     934:	08001984 	stmdaeq	r0, {r2, r7, r8, fp, ip}
     938:	00000174 	andeq	r0, r0, r4, ror r1
     93c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     940:	41018e02 	tstmi	r1, r2, lsl #28
     944:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     948:	00000007 	andeq	r0, r0, r7
     94c:	00000018 	andeq	r0, r0, r8, lsl r0
     950:	000008fc 	strdeq	r0, [r0], -ip
     954:	08001af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip}
     958:	00000038 	andeq	r0, r0, r8, lsr r0
     95c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     960:	100e4101 	andne	r4, lr, r1, lsl #2
     964:	00070d41 	andeq	r0, r7, r1, asr #26
     968:	00000018 	andeq	r0, r0, r8, lsl r0
     96c:	000008fc 	strdeq	r0, [r0], -ip
     970:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
     974:	00000052 	andeq	r0, r0, r2, asr r0
     978:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     97c:	180e4101 	stmdane	lr, {r0, r8, lr}
     980:	00070d41 	andeq	r0, r7, r1, asr #26
     984:	00000018 	andeq	r0, r0, r8, lsl r0
     988:	000008fc 	strdeq	r0, [r0], -ip
     98c:	08001b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip}
     990:	0000002a 	andeq	r0, r0, sl, lsr #32
     994:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     998:	100e4101 	andne	r4, lr, r1, lsl #2
     99c:	00070d41 	andeq	r0, r7, r1, asr #26
     9a0:	00000018 	andeq	r0, r0, r8, lsl r0
     9a4:	000008fc 	strdeq	r0, [r0], -ip
     9a8:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
     9ac:	0000003e 	andeq	r0, r0, lr, lsr r0
     9b0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9b4:	100e4101 	andne	r4, lr, r1, lsl #2
     9b8:	00070d41 	andeq	r0, r7, r1, asr #26
     9bc:	00000018 	andeq	r0, r0, r8, lsl r0
     9c0:	000008fc 	strdeq	r0, [r0], -ip
     9c4:	08001bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip}
     9c8:	00000038 	andeq	r0, r0, r8, lsr r0
     9cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9d0:	100e4101 	andne	r4, lr, r1, lsl #2
     9d4:	00070d41 	andeq	r0, r7, r1, asr #26
     9d8:	00000018 	andeq	r0, r0, r8, lsl r0
     9dc:	000008fc 	strdeq	r0, [r0], -ip
     9e0:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
     9e4:	00000042 	andeq	r0, r0, r2, asr #32
     9e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     9ec:	100e4101 	andne	r4, lr, r1, lsl #2
     9f0:	00070d41 	andeq	r0, r7, r1, asr #26
     9f4:	00000018 	andeq	r0, r0, r8, lsl r0
     9f8:	000008fc 	strdeq	r0, [r0], -ip
     9fc:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
     a00:	0000003e 	andeq	r0, r0, lr, lsr r0
     a04:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a08:	100e4101 	andne	r4, lr, r1, lsl #2
     a0c:	00070d41 	andeq	r0, r7, r1, asr #26
     a10:	00000018 	andeq	r0, r0, r8, lsl r0
     a14:	000008fc 	strdeq	r0, [r0], -ip
     a18:	08001cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip}
     a1c:	00000022 	andeq	r0, r0, r2, lsr #32
     a20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a24:	100e4101 	andne	r4, lr, r1, lsl #2
     a28:	00070d41 	andeq	r0, r7, r1, asr #26
     a2c:	00000018 	andeq	r0, r0, r8, lsl r0
     a30:	000008fc 	strdeq	r0, [r0], -ip
     a34:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
     a38:	00000020 	andeq	r0, r0, r0, lsr #32
     a3c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a40:	100e4101 	andne	r4, lr, r1, lsl #2
     a44:	00070d41 	andeq	r0, r7, r1, asr #26
     a48:	00000018 	andeq	r0, r0, r8, lsl r0
     a4c:	000008fc 	strdeq	r0, [r0], -ip
     a50:	08001cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip}
     a54:	00000038 	andeq	r0, r0, r8, lsr r0
     a58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a5c:	100e4101 	andne	r4, lr, r1, lsl #2
     a60:	00070d41 	andeq	r0, r7, r1, asr #26
     a64:	00000018 	andeq	r0, r0, r8, lsl r0
     a68:	000008fc 	strdeq	r0, [r0], -ip
     a6c:	08001d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip}
     a70:	0000003e 	andeq	r0, r0, lr, lsr r0
     a74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a78:	100e4101 	andne	r4, lr, r1, lsl #2
     a7c:	00070d41 	andeq	r0, r7, r1, asr #26
     a80:	00000018 	andeq	r0, r0, r8, lsl r0
     a84:	000008fc 	strdeq	r0, [r0], -ip
     a88:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
     a8c:	00000036 	andeq	r0, r0, r6, lsr r0
     a90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     a94:	100e4101 	andne	r4, lr, r1, lsl #2
     a98:	00070d41 	andeq	r0, r7, r1, asr #26
     a9c:	00000018 	andeq	r0, r0, r8, lsl r0
     aa0:	000008fc 	strdeq	r0, [r0], -ip
     aa4:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
     aa8:	00000036 	andeq	r0, r0, r6, lsr r0
     aac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ab0:	100e4101 	andne	r4, lr, r1, lsl #2
     ab4:	00070d41 	andeq	r0, r7, r1, asr #26
     ab8:	00000018 	andeq	r0, r0, r8, lsl r0
     abc:	000008fc 	strdeq	r0, [r0], -ip
     ac0:	08001dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip}
     ac4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ac8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     acc:	100e4101 	andne	r4, lr, r1, lsl #2
     ad0:	00070d41 	andeq	r0, r7, r1, asr #26
     ad4:	00000018 	andeq	r0, r0, r8, lsl r0
     ad8:	000008fc 	strdeq	r0, [r0], -ip
     adc:	08001e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip}
     ae0:	00000022 	andeq	r0, r0, r2, lsr #32
     ae4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ae8:	100e4101 	andne	r4, lr, r1, lsl #2
     aec:	00070d41 	andeq	r0, r7, r1, asr #26
     af0:	00000018 	andeq	r0, r0, r8, lsl r0
     af4:	000008fc 	strdeq	r0, [r0], -ip
     af8:	08001e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip}
     afc:	0000003e 	andeq	r0, r0, lr, lsr r0
     b00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b04:	100e4101 	andne	r4, lr, r1, lsl #2
     b08:	00070d41 	andeq	r0, r7, r1, asr #26
     b0c:	00000018 	andeq	r0, r0, r8, lsl r0
     b10:	000008fc 	strdeq	r0, [r0], -ip
     b14:	08001e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip}
     b18:	0000003a 	andeq	r0, r0, sl, lsr r0
     b1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b20:	100e4101 	andne	r4, lr, r1, lsl #2
     b24:	00070d41 	andeq	r0, r7, r1, asr #26
     b28:	00000018 	andeq	r0, r0, r8, lsl r0
     b2c:	000008fc 	strdeq	r0, [r0], -ip
     b30:	08001eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip}
     b34:	0000003e 	andeq	r0, r0, lr, lsr r0
     b38:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b3c:	100e4101 	andne	r4, lr, r1, lsl #2
     b40:	00070d41 	andeq	r0, r7, r1, asr #26
     b44:	00000018 	andeq	r0, r0, r8, lsl r0
     b48:	000008fc 	strdeq	r0, [r0], -ip
     b4c:	08001ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip}
     b50:	0000003e 	andeq	r0, r0, lr, lsr r0
     b54:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b58:	100e4101 	andne	r4, lr, r1, lsl #2
     b5c:	00070d41 	andeq	r0, r7, r1, asr #26
     b60:	00000018 	andeq	r0, r0, r8, lsl r0
     b64:	000008fc 	strdeq	r0, [r0], -ip
     b68:	08001f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip}
     b6c:	00000036 	andeq	r0, r0, r6, lsr r0
     b70:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b74:	100e4101 	andne	r4, lr, r1, lsl #2
     b78:	00070d41 	andeq	r0, r7, r1, asr #26
     b7c:	00000018 	andeq	r0, r0, r8, lsl r0
     b80:	000008fc 	strdeq	r0, [r0], -ip
     b84:	08001f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip}
     b88:	0000003e 	andeq	r0, r0, lr, lsr r0
     b8c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     b90:	100e4101 	andne	r4, lr, r1, lsl #2
     b94:	00070d41 	andeq	r0, r7, r1, asr #26
     b98:	00000018 	andeq	r0, r0, r8, lsl r0
     b9c:	000008fc 	strdeq	r0, [r0], -ip
     ba0:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
     ba4:	00000046 	andeq	r0, r0, r6, asr #32
     ba8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bac:	100e4101 	andne	r4, lr, r1, lsl #2
     bb0:	00070d41 	andeq	r0, r7, r1, asr #26
     bb4:	00000018 	andeq	r0, r0, r8, lsl r0
     bb8:	000008fc 	strdeq	r0, [r0], -ip
     bbc:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     bc0:	0000008e 	andeq	r0, r0, lr, lsl #1
     bc4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     bc8:	200e4101 	andcs	r4, lr, r1, lsl #2
     bcc:	00070d41 	andeq	r0, r7, r1, asr #26
     bd0:	00000018 	andeq	r0, r0, r8, lsl r0
     bd4:	000008fc 	strdeq	r0, [r0], -ip
     bd8:	08002088 	stmdaeq	r0, {r3, r7, sp}
     bdc:	00000038 	andeq	r0, r0, r8, lsr r0
     be0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     be4:	180e4101 	stmdane	lr, {r0, r8, lr}
     be8:	00070d41 	andeq	r0, r7, r1, asr #26
     bec:	00000018 	andeq	r0, r0, r8, lsl r0
     bf0:	000008fc 	strdeq	r0, [r0], -ip
     bf4:	080020c0 	stmdaeq	r0, {r6, r7, sp}
     bf8:	00000020 	andeq	r0, r0, r0, lsr #32
     bfc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c00:	100e4101 	andne	r4, lr, r1, lsl #2
     c04:	00070d41 	andeq	r0, r7, r1, asr #26
     c08:	00000018 	andeq	r0, r0, r8, lsl r0
     c0c:	000008fc 	strdeq	r0, [r0], -ip
     c10:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
     c14:	000000ae 	andeq	r0, r0, lr, lsr #1
     c18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c1c:	200e4101 	andcs	r4, lr, r1, lsl #2
     c20:	00070d41 	andeq	r0, r7, r1, asr #26
     c24:	00000018 	andeq	r0, r0, r8, lsl r0
     c28:	000008fc 	strdeq	r0, [r0], -ip
     c2c:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     c30:	00000038 	andeq	r0, r0, r8, lsr r0
     c34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c38:	180e4101 	stmdane	lr, {r0, r8, lr}
     c3c:	00070d41 	andeq	r0, r7, r1, asr #26
     c40:	0000000c 	andeq	r0, r0, ip
     c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c48:	7c020001 	stcvc	0, cr0, [r2], {1}
     c4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c50:	00000018 	andeq	r0, r0, r8, lsl r0
     c54:	00000c40 	andeq	r0, r0, r0, asr #24
     c58:	080021c8 	stmdaeq	r0, {r3, r6, r7, r8, sp}
     c5c:	0000001a 	andeq	r0, r0, sl, lsl r0
     c60:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c64:	41018e02 	tstmi	r1, r2, lsl #28
     c68:	0000070d 	andeq	r0, r0, sp, lsl #14
     c6c:	00000018 	andeq	r0, r0, r8, lsl r0
     c70:	00000c40 	andeq	r0, r0, r0, asr #24
     c74:	080021e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp}
     c78:	00000020 	andeq	r0, r0, r0, lsr #32
     c7c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c80:	100e4101 	andne	r4, lr, r1, lsl #2
     c84:	00070d41 	andeq	r0, r7, r1, asr #26
     c88:	00000018 	andeq	r0, r0, r8, lsl r0
     c8c:	00000c40 	andeq	r0, r0, r0, asr #24
     c90:	08002204 	stmdaeq	r0, {r2, r9, sp}
     c94:	00000020 	andeq	r0, r0, r0, lsr #32
     c98:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     c9c:	100e4101 	andne	r4, lr, r1, lsl #2
     ca0:	00070d41 	andeq	r0, r7, r1, asr #26
     ca4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ca8:	00000c40 	andeq	r0, r0, r0, asr #24
     cac:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
     cb0:	0000007c 	andeq	r0, r0, ip, ror r0
     cb4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     cb8:	41018702 	tstmi	r1, r2, lsl #14
     cbc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     cc0:	00000007 	andeq	r0, r0, r7
     cc4:	00000018 	andeq	r0, r0, r8, lsl r0
     cc8:	00000c40 	andeq	r0, r0, r0, asr #24
     ccc:	080022a0 	stmdaeq	r0, {r5, r7, r9, sp}
     cd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     cd8:	100e4101 	andne	r4, lr, r1, lsl #2
     cdc:	00070d41 	andeq	r0, r7, r1, asr #26
     ce0:	00000018 	andeq	r0, r0, r8, lsl r0
     ce4:	00000c40 	andeq	r0, r0, r0, asr #24
     ce8:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
     cec:	00000020 	andeq	r0, r0, r0, lsr #32
     cf0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     cf4:	100e4101 	andne	r4, lr, r1, lsl #2
     cf8:	00070d41 	andeq	r0, r7, r1, asr #26
     cfc:	00000018 	andeq	r0, r0, r8, lsl r0
     d00:	00000c40 	andeq	r0, r0, r0, asr #24
     d04:	080022dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp}
     d08:	00000034 	andeq	r0, r0, r4, lsr r0
     d0c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d10:	100e4101 	andne	r4, lr, r1, lsl #2
     d14:	00070d41 	andeq	r0, r7, r1, asr #26
     d18:	0000000c 	andeq	r0, r0, ip
     d1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d20:	7c020001 	stcvc	0, cr0, [r2], {1}
     d24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d28:	0000001c 	andeq	r0, r0, ip, lsl r0
     d2c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d30:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
     d34:	00000074 	andeq	r0, r0, r4, ror r0
     d38:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d3c:	41018e02 	tstmi	r1, r2, lsl #28
     d40:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     d44:	00000007 	andeq	r0, r0, r7
     d48:	0000001c 	andeq	r0, r0, ip, lsl r0
     d4c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d50:	08002384 	stmdaeq	r0, {r2, r7, r8, r9, sp}
     d54:	00000184 	andeq	r0, r0, r4, lsl #3
     d58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d5c:	41018e02 	tstmi	r1, r2, lsl #28
     d60:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
     d64:	00000007 	andeq	r0, r0, r7
     d68:	00000018 	andeq	r0, r0, r8, lsl r0
     d6c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d70:	08002508 	stmdaeq	r0, {r3, r8, sl, sp}
     d74:	0000003c 	andeq	r0, r0, ip, lsr r0
     d78:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d7c:	100e4101 	andne	r4, lr, r1, lsl #2
     d80:	00070d41 	andeq	r0, r7, r1, asr #26
     d84:	00000018 	andeq	r0, r0, r8, lsl r0
     d88:	00000d18 	andeq	r0, r0, r8, lsl sp
     d8c:	08002544 	stmdaeq	r0, {r2, r6, r8, sl, sp}
     d90:	0000003e 	andeq	r0, r0, lr, lsr r0
     d94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     d98:	100e4101 	andne	r4, lr, r1, lsl #2
     d9c:	00070d41 	andeq	r0, r7, r1, asr #26
     da0:	00000018 	andeq	r0, r0, r8, lsl r0
     da4:	00000d18 	andeq	r0, r0, r8, lsl sp
     da8:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
     dac:	0000003e 	andeq	r0, r0, lr, lsr r0
     db0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     db4:	100e4101 	andne	r4, lr, r1, lsl #2
     db8:	00070d41 	andeq	r0, r7, r1, asr #26
     dbc:	00000018 	andeq	r0, r0, r8, lsl r0
     dc0:	00000d18 	andeq	r0, r0, r8, lsl sp
     dc4:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
     dc8:	0000003e 	andeq	r0, r0, lr, lsr r0
     dcc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     dd0:	180e4101 	stmdane	lr, {r0, r8, lr}
     dd4:	00070d41 	andeq	r0, r7, r1, asr #26
     dd8:	00000018 	andeq	r0, r0, r8, lsl r0
     ddc:	00000d18 	andeq	r0, r0, r8, lsl sp
     de0:	08002604 	stmdaeq	r0, {r2, r9, sl, sp}
     de4:	0000003e 	andeq	r0, r0, lr, lsr r0
     de8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     dec:	100e4101 	andne	r4, lr, r1, lsl #2
     df0:	00070d41 	andeq	r0, r7, r1, asr #26
     df4:	00000018 	andeq	r0, r0, r8, lsl r0
     df8:	00000d18 	andeq	r0, r0, r8, lsl sp
     dfc:	08002644 	stmdaeq	r0, {r2, r6, r9, sl, sp}
     e00:	0000003e 	andeq	r0, r0, lr, lsr r0
     e04:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e08:	100e4101 	andne	r4, lr, r1, lsl #2
     e0c:	00070d41 	andeq	r0, r7, r1, asr #26
     e10:	00000018 	andeq	r0, r0, r8, lsl r0
     e14:	00000d18 	andeq	r0, r0, r8, lsl sp
     e18:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
     e1c:	0000003a 	andeq	r0, r0, sl, lsr r0
     e20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e24:	100e4101 	andne	r4, lr, r1, lsl #2
     e28:	00070d41 	andeq	r0, r7, r1, asr #26
     e2c:	00000018 	andeq	r0, r0, r8, lsl r0
     e30:	00000d18 	andeq	r0, r0, r8, lsl sp
     e34:	080026c0 	stmdaeq	r0, {r6, r7, r9, sl, sp}
     e38:	0000003e 	andeq	r0, r0, lr, lsr r0
     e3c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e40:	100e4101 	andne	r4, lr, r1, lsl #2
     e44:	00070d41 	andeq	r0, r7, r1, asr #26
     e48:	00000018 	andeq	r0, r0, r8, lsl r0
     e4c:	00000d18 	andeq	r0, r0, r8, lsl sp
     e50:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
     e54:	00000040 	andeq	r0, r0, r0, asr #32
     e58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e5c:	180e4101 	stmdane	lr, {r0, r8, lr}
     e60:	00070d41 	andeq	r0, r7, r1, asr #26
     e64:	00000018 	andeq	r0, r0, r8, lsl r0
     e68:	00000d18 	andeq	r0, r0, r8, lsl sp
     e6c:	08002740 	stmdaeq	r0, {r6, r8, r9, sl, sp}
     e70:	0000003e 	andeq	r0, r0, lr, lsr r0
     e74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e78:	100e4101 	andne	r4, lr, r1, lsl #2
     e7c:	00070d41 	andeq	r0, r7, r1, asr #26
     e80:	00000018 	andeq	r0, r0, r8, lsl r0
     e84:	00000d18 	andeq	r0, r0, r8, lsl sp
     e88:	08002780 	stmdaeq	r0, {r7, r8, r9, sl, sp}
     e8c:	0000003e 	andeq	r0, r0, lr, lsr r0
     e90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     e94:	100e4101 	andne	r4, lr, r1, lsl #2
     e98:	00070d41 	andeq	r0, r7, r1, asr #26
     e9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ea0:	00000d18 	andeq	r0, r0, r8, lsl sp
     ea4:	080027c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp}
     ea8:	00000042 	andeq	r0, r0, r2, asr #32
     eac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     eb0:	100e4101 	andne	r4, lr, r1, lsl #2
     eb4:	00070d41 	andeq	r0, r7, r1, asr #26
     eb8:	00000018 	andeq	r0, r0, r8, lsl r0
     ebc:	00000d18 	andeq	r0, r0, r8, lsl sp
     ec0:	08002804 	stmdaeq	r0, {r2, fp, sp}
     ec4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ec8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ecc:	100e4101 	andne	r4, lr, r1, lsl #2
     ed0:	00070d41 	andeq	r0, r7, r1, asr #26
     ed4:	00000018 	andeq	r0, r0, r8, lsl r0
     ed8:	00000d18 	andeq	r0, r0, r8, lsl sp
     edc:	08002844 	stmdaeq	r0, {r2, r6, fp, sp}
     ee0:	00000040 	andeq	r0, r0, r0, asr #32
     ee4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     ee8:	100e4101 	andne	r4, lr, r1, lsl #2
     eec:	00070d41 	andeq	r0, r7, r1, asr #26
     ef0:	00000018 	andeq	r0, r0, r8, lsl r0
     ef4:	00000d18 	andeq	r0, r0, r8, lsl sp
     ef8:	08002884 	stmdaeq	r0, {r2, r7, fp, sp}
     efc:	00000040 	andeq	r0, r0, r0, asr #32
     f00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f04:	100e4101 	andne	r4, lr, r1, lsl #2
     f08:	00070d41 	andeq	r0, r7, r1, asr #26
     f0c:	00000018 	andeq	r0, r0, r8, lsl r0
     f10:	00000d18 	andeq	r0, r0, r8, lsl sp
     f14:	080028c4 	stmdaeq	r0, {r2, r6, r7, fp, sp}
     f18:	00000040 	andeq	r0, r0, r0, asr #32
     f1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f20:	100e4101 	andne	r4, lr, r1, lsl #2
     f24:	00070d41 	andeq	r0, r7, r1, asr #26
     f28:	00000018 	andeq	r0, r0, r8, lsl r0
     f2c:	00000d18 	andeq	r0, r0, r8, lsl sp
     f30:	08002904 	stmdaeq	r0, {r2, r8, fp, sp}
     f34:	0000003e 	andeq	r0, r0, lr, lsr r0
     f38:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f3c:	100e4101 	andne	r4, lr, r1, lsl #2
     f40:	00070d41 	andeq	r0, r7, r1, asr #26
     f44:	00000018 	andeq	r0, r0, r8, lsl r0
     f48:	00000d18 	andeq	r0, r0, r8, lsl sp
     f4c:	08002944 	stmdaeq	r0, {r2, r6, r8, fp, sp}
     f50:	0000001e 	andeq	r0, r0, lr, lsl r0
     f54:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f58:	100e4101 	andne	r4, lr, r1, lsl #2
     f5c:	00070d41 	andeq	r0, r7, r1, asr #26
     f60:	00000018 	andeq	r0, r0, r8, lsl r0
     f64:	00000d18 	andeq	r0, r0, r8, lsl sp
     f68:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f74:	100e4101 	andne	r4, lr, r1, lsl #2
     f78:	00070d41 	andeq	r0, r7, r1, asr #26
     f7c:	00000018 	andeq	r0, r0, r8, lsl r0
     f80:	00000d18 	andeq	r0, r0, r8, lsl sp
     f84:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
     f88:	0000003e 	andeq	r0, r0, lr, lsr r0
     f8c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     f90:	100e4101 	andne	r4, lr, r1, lsl #2
     f94:	00070d41 	andeq	r0, r7, r1, asr #26
     f98:	00000018 	andeq	r0, r0, r8, lsl r0
     f9c:	00000d18 	andeq	r0, r0, r8, lsl sp
     fa0:	080029c0 	stmdaeq	r0, {r6, r7, r8, fp, sp}
     fa4:	00000040 	andeq	r0, r0, r0, asr #32
     fa8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fac:	100e4101 	andne	r4, lr, r1, lsl #2
     fb0:	00070d41 	andeq	r0, r7, r1, asr #26
     fb4:	00000018 	andeq	r0, r0, r8, lsl r0
     fb8:	00000d18 	andeq	r0, r0, r8, lsl sp
     fbc:	08002a00 	stmdaeq	r0, {r9, fp, sp}
     fc0:	0000003e 	andeq	r0, r0, lr, lsr r0
     fc4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fc8:	100e4101 	andne	r4, lr, r1, lsl #2
     fcc:	00070d41 	andeq	r0, r7, r1, asr #26
     fd0:	00000018 	andeq	r0, r0, r8, lsl r0
     fd4:	00000d18 	andeq	r0, r0, r8, lsl sp
     fd8:	08002a40 	stmdaeq	r0, {r6, r9, fp, sp}
     fdc:	00000020 	andeq	r0, r0, r0, lsr #32
     fe0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
     fe4:	100e4101 	andne	r4, lr, r1, lsl #2
     fe8:	00070d41 	andeq	r0, r7, r1, asr #26
     fec:	00000018 	andeq	r0, r0, r8, lsl r0
     ff0:	00000d18 	andeq	r0, r0, r8, lsl sp
     ff4:	08002a60 	stmdaeq	r0, {r5, r6, r9, fp, sp}
     ff8:	0000003e 	andeq	r0, r0, lr, lsr r0
     ffc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1000:	100e4101 	andne	r4, lr, r1, lsl #2
    1004:	00070d41 	andeq	r0, r7, r1, asr #26
    1008:	00000018 	andeq	r0, r0, r8, lsl r0
    100c:	00000d18 	andeq	r0, r0, r8, lsl sp
    1010:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    1014:	0000003e 	andeq	r0, r0, lr, lsr r0
    1018:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    101c:	100e4101 	andne	r4, lr, r1, lsl #2
    1020:	00070d41 	andeq	r0, r7, r1, asr #26
    1024:	00000018 	andeq	r0, r0, r8, lsl r0
    1028:	00000d18 	andeq	r0, r0, r8, lsl sp
    102c:	08002ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, sp}
    1030:	0000002e 	andeq	r0, r0, lr, lsr #32
    1034:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1038:	180e4101 	stmdane	lr, {r0, r8, lr}
    103c:	00070d41 	andeq	r0, r7, r1, asr #26
    1040:	00000018 	andeq	r0, r0, r8, lsl r0
    1044:	00000d18 	andeq	r0, r0, r8, lsl sp
    1048:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
    104c:	00000046 	andeq	r0, r0, r6, asr #32
    1050:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1054:	100e4101 	andne	r4, lr, r1, lsl #2
    1058:	00070d41 	andeq	r0, r7, r1, asr #26
    105c:	00000018 	andeq	r0, r0, r8, lsl r0
    1060:	00000d18 	andeq	r0, r0, r8, lsl sp
    1064:	08002b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, sp}
    1068:	00000060 	andeq	r0, r0, r0, rrx
    106c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1070:	200e4101 	andcs	r4, lr, r1, lsl #2
    1074:	00070d41 	andeq	r0, r7, r1, asr #26
    1078:	00000018 	andeq	r0, r0, r8, lsl r0
    107c:	00000d18 	andeq	r0, r0, r8, lsl sp
    1080:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
    1084:	00000044 	andeq	r0, r0, r4, asr #32
    1088:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    108c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1090:	00070d41 	andeq	r0, r7, r1, asr #26
    1094:	00000018 	andeq	r0, r0, r8, lsl r0
    1098:	00000d18 	andeq	r0, r0, r8, lsl sp
    109c:	08002bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp}
    10a0:	00000066 	andeq	r0, r0, r6, rrx
    10a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10a8:	200e4101 	andcs	r4, lr, r1, lsl #2
    10ac:	00070d41 	andeq	r0, r7, r1, asr #26
    10b0:	00000018 	andeq	r0, r0, r8, lsl r0
    10b4:	00000d18 	andeq	r0, r0, r8, lsl sp
    10b8:	08002c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp}
    10bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10c4:	180e4101 	stmdane	lr, {r0, r8, lr}
    10c8:	00070d41 	andeq	r0, r7, r1, asr #26
    10cc:	00000018 	andeq	r0, r0, r8, lsl r0
    10d0:	00000d18 	andeq	r0, r0, r8, lsl sp
    10d4:	08002c90 	stmdaeq	r0, {r4, r7, sl, fp, sp}
    10d8:	0000005a 	andeq	r0, r0, sl, asr r0
    10dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    10e4:	00070d41 	andeq	r0, r7, r1, asr #26
    10e8:	00000018 	andeq	r0, r0, r8, lsl r0
    10ec:	00000d18 	andeq	r0, r0, r8, lsl sp
    10f0:	08002cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, sp}
    10f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    10fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1100:	00070d41 	andeq	r0, r7, r1, asr #26
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    110c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1110:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1114:	00000018 	andeq	r0, r0, r8, lsl r0
    1118:	00001104 	andeq	r1, r0, r4, lsl #2
    111c:	08002d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp}
    1120:	000001a4 	andeq	r0, r0, r4, lsr #3
    1124:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1128:	100e4101 	andne	r4, lr, r1, lsl #2
    112c:	00070d41 	andeq	r0, r7, r1, asr #26
    1130:	00000018 	andeq	r0, r0, r8, lsl r0
    1134:	00001104 	andeq	r1, r0, r4, lsl #2
    1138:	08002ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, sp}
    113c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1140:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1144:	180e4101 	stmdane	lr, {r0, r8, lr}
    1148:	00070d41 	andeq	r0, r7, r1, asr #26
    114c:	00000018 	andeq	r0, r0, r8, lsl r0
    1150:	00001104 	andeq	r1, r0, r4, lsl #2
    1154:	08002f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp}
    1158:	0000006c 	andeq	r0, r0, ip, rrx
    115c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1160:	100e4101 	andne	r4, lr, r1, lsl #2
    1164:	00070d41 	andeq	r0, r7, r1, asr #26
    1168:	00000018 	andeq	r0, r0, r8, lsl r0
    116c:	00001104 	andeq	r1, r0, r4, lsl #2
    1170:	08002fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, sp}
    1174:	00000036 	andeq	r0, r0, r6, lsr r0
    1178:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    117c:	100e4101 	andne	r4, lr, r1, lsl #2
    1180:	00070d41 	andeq	r0, r7, r1, asr #26
    1184:	00000018 	andeq	r0, r0, r8, lsl r0
    1188:	00001104 	andeq	r1, r0, r4, lsl #2
    118c:	0800300c 	stmdaeq	r0, {r2, r3, ip, sp}
    1190:	00000034 	andeq	r0, r0, r4, lsr r0
    1194:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1198:	100e4101 	andne	r4, lr, r1, lsl #2
    119c:	00070d41 	andeq	r0, r7, r1, asr #26
    11a0:	00000018 	andeq	r0, r0, r8, lsl r0
    11a4:	00001104 	andeq	r1, r0, r4, lsl #2
    11a8:	08003040 	stmdaeq	r0, {r6, ip, sp}
    11ac:	00000034 	andeq	r0, r0, r4, lsr r0
    11b0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11b4:	100e4101 	andne	r4, lr, r1, lsl #2
    11b8:	00070d41 	andeq	r0, r7, r1, asr #26
    11bc:	00000018 	andeq	r0, r0, r8, lsl r0
    11c0:	00001104 	andeq	r1, r0, r4, lsl #2
    11c4:	08003074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp}
    11c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11d0:	100e4101 	andne	r4, lr, r1, lsl #2
    11d4:	00070d41 	andeq	r0, r7, r1, asr #26
    11d8:	00000018 	andeq	r0, r0, r8, lsl r0
    11dc:	00001104 	andeq	r1, r0, r4, lsl #2
    11e0:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
    11e4:	0000001a 	andeq	r0, r0, sl, lsl r0
    11e8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    11ec:	100e4101 	andne	r4, lr, r1, lsl #2
    11f0:	00070d41 	andeq	r0, r7, r1, asr #26
    11f4:	00000018 	andeq	r0, r0, r8, lsl r0
    11f8:	00001104 	andeq	r1, r0, r4, lsl #2
    11fc:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
    1200:	0000003c 	andeq	r0, r0, ip, lsr r0
    1204:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1208:	180e4101 	stmdane	lr, {r0, r8, lr}
    120c:	00070d41 	andeq	r0, r7, r1, asr #26
    1210:	00000018 	andeq	r0, r0, r8, lsl r0
    1214:	00001104 	andeq	r1, r0, r4, lsl #2
    1218:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
    121c:	00000036 	andeq	r0, r0, r6, lsr r0
    1220:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1224:	100e4101 	andne	r4, lr, r1, lsl #2
    1228:	00070d41 	andeq	r0, r7, r1, asr #26
    122c:	00000018 	andeq	r0, r0, r8, lsl r0
    1230:	00001104 	andeq	r1, r0, r4, lsl #2
    1234:	08003120 	stmdaeq	r0, {r5, r8, ip, sp}
    1238:	0000002a 	andeq	r0, r0, sl, lsr #32
    123c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1240:	180e4101 	stmdane	lr, {r0, r8, lr}
    1244:	00070d41 	andeq	r0, r7, r1, asr #26
    1248:	00000018 	andeq	r0, r0, r8, lsl r0
    124c:	00001104 	andeq	r1, r0, r4, lsl #2
    1250:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
    1254:	00000030 	andeq	r0, r0, r0, lsr r0
    1258:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    125c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1260:	00070d41 	andeq	r0, r7, r1, asr #26
    1264:	00000018 	andeq	r0, r0, r8, lsl r0
    1268:	00001104 	andeq	r1, r0, r4, lsl #2
    126c:	0800317c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp}
    1270:	00000030 	andeq	r0, r0, r0, lsr r0
    1274:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1278:	180e4101 	stmdane	lr, {r0, r8, lr}
    127c:	00070d41 	andeq	r0, r7, r1, asr #26
    1280:	00000018 	andeq	r0, r0, r8, lsl r0
    1284:	00001104 	andeq	r1, r0, r4, lsl #2
    1288:	080031ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp}
    128c:	00000024 	andeq	r0, r0, r4, lsr #32
    1290:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1294:	180e4101 	stmdane	lr, {r0, r8, lr}
    1298:	00070d41 	andeq	r0, r7, r1, asr #26
    129c:	00000018 	andeq	r0, r0, r8, lsl r0
    12a0:	00001104 	andeq	r1, r0, r4, lsl #2
    12a4:	080031d0 	stmdaeq	r0, {r4, r6, r7, r8, ip, sp}
    12a8:	00000078 	andeq	r0, r0, r8, ror r0
    12ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12b0:	200e4101 	andcs	r4, lr, r1, lsl #2
    12b4:	00070d41 	andeq	r0, r7, r1, asr #26
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	00001104 	andeq	r1, r0, r4, lsl #2
    12c0:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
    12c4:	0000005c 	andeq	r0, r0, ip, asr r0
    12c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12cc:	180e4101 	stmdane	lr, {r0, r8, lr}
    12d0:	00070d41 	andeq	r0, r7, r1, asr #26
    12d4:	00000018 	andeq	r0, r0, r8, lsl r0
    12d8:	00001104 	andeq	r1, r0, r4, lsl #2
    12dc:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    12e0:	00000072 	andeq	r0, r0, r2, ror r0
    12e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    12e8:	180e4101 	stmdane	lr, {r0, r8, lr}
    12ec:	00070d41 	andeq	r0, r7, r1, asr #26
    12f0:	00000018 	andeq	r0, r0, r8, lsl r0
    12f4:	00001104 	andeq	r1, r0, r4, lsl #2
    12f8:	08003318 	stmdaeq	r0, {r3, r4, r8, r9, ip, sp}
    12fc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1300:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1304:	200e4101 	andcs	r4, lr, r1, lsl #2
    1308:	00070d41 	andeq	r0, r7, r1, asr #26
    130c:	00000018 	andeq	r0, r0, r8, lsl r0
    1310:	00001104 	andeq	r1, r0, r4, lsl #2
    1314:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
    1318:	0000005c 	andeq	r0, r0, ip, asr r0
    131c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1320:	180e4101 	stmdane	lr, {r0, r8, lr}
    1324:	00070d41 	andeq	r0, r7, r1, asr #26
    1328:	0000000c 	andeq	r0, r0, ip
    132c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1330:	7c020001 	stcvc	0, cr0, [r2], {1}
    1334:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1338:	0000001c 	andeq	r0, r0, ip, lsl r0
    133c:	00001328 	andeq	r1, r0, r8, lsr #6
    1340:	08003424 	stmdaeq	r0, {r2, r5, sl, ip, sp}
    1344:	000000d8 	ldrdeq	r0, [r0], -r8
    1348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    134c:	41018e02 	tstmi	r1, r2, lsl #28
    1350:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1354:	00000007 	andeq	r0, r0, r7
    1358:	00000018 	andeq	r0, r0, r8, lsl r0
    135c:	00001328 	andeq	r1, r0, r8, lsr #6
    1360:	080034fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp}
    1364:	00000086 	andeq	r0, r0, r6, lsl #1
    1368:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    136c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1370:	00070d41 	andeq	r0, r7, r1, asr #26
    1374:	00000018 	andeq	r0, r0, r8, lsl r0
    1378:	00001328 	andeq	r1, r0, r8, lsr #6
    137c:	08003584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp}
    1380:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1384:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1388:	300e4101 	andcc	r4, lr, r1, lsl #2
    138c:	00070d41 	andeq	r0, r7, r1, asr #26
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
    1394:	00001328 	andeq	r1, r0, r8, lsr #6
    1398:	08003734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp}
    139c:	00000048 	andeq	r0, r0, r8, asr #32
    13a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13a4:	100e4101 	andne	r4, lr, r1, lsl #2
    13a8:	00070d41 	andeq	r0, r7, r1, asr #26
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
    13b0:	00001328 	andeq	r1, r0, r8, lsr #6
    13b4:	0800377c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
    13b8:	00000036 	andeq	r0, r0, r6, lsr r0
    13bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13c0:	100e4101 	andne	r4, lr, r1, lsl #2
    13c4:	00070d41 	andeq	r0, r7, r1, asr #26
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
    13cc:	00001328 	andeq	r1, r0, r8, lsr #6
    13d0:	080037b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip, sp}
    13d4:	0000003e 	andeq	r0, r0, lr, lsr r0
    13d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13dc:	100e4101 	andne	r4, lr, r1, lsl #2
    13e0:	00070d41 	andeq	r0, r7, r1, asr #26
    13e4:	00000018 	andeq	r0, r0, r8, lsl r0
    13e8:	00001328 	andeq	r1, r0, r8, lsr #6
    13ec:	080037f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    13f0:	0000003e 	andeq	r0, r0, lr, lsr r0
    13f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    13f8:	100e4101 	andne	r4, lr, r1, lsl #2
    13fc:	00070d41 	andeq	r0, r7, r1, asr #26
    1400:	00000018 	andeq	r0, r0, r8, lsl r0
    1404:	00001328 	andeq	r1, r0, r8, lsr #6
    1408:	08003834 	stmdaeq	r0, {r2, r4, r5, fp, ip, sp}
    140c:	00000036 	andeq	r0, r0, r6, lsr r0
    1410:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1414:	100e4101 	andne	r4, lr, r1, lsl #2
    1418:	00070d41 	andeq	r0, r7, r1, asr #26
    141c:	00000018 	andeq	r0, r0, r8, lsl r0
    1420:	00001328 	andeq	r1, r0, r8, lsr #6
    1424:	0800386c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, sp}
    1428:	00000040 	andeq	r0, r0, r0, asr #32
    142c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1430:	100e4101 	andne	r4, lr, r1, lsl #2
    1434:	00070d41 	andeq	r0, r7, r1, asr #26
    1438:	00000018 	andeq	r0, r0, r8, lsl r0
    143c:	00001328 	andeq	r1, r0, r8, lsr #6
    1440:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
    1444:	00000042 	andeq	r0, r0, r2, asr #32
    1448:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    144c:	100e4101 	andne	r4, lr, r1, lsl #2
    1450:	00070d41 	andeq	r0, r7, r1, asr #26
    1454:	00000018 	andeq	r0, r0, r8, lsl r0
    1458:	00001328 	andeq	r1, r0, r8, lsr #6
    145c:	080038f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, ip, sp}
    1460:	0000003e 	andeq	r0, r0, lr, lsr r0
    1464:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1468:	100e4101 	andne	r4, lr, r1, lsl #2
    146c:	00070d41 	andeq	r0, r7, r1, asr #26
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
    1474:	00001328 	andeq	r1, r0, r8, lsr #6
    1478:	08003930 	stmdaeq	r0, {r4, r5, r8, fp, ip, sp}
    147c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1480:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1484:	100e4101 	andne	r4, lr, r1, lsl #2
    1488:	00070d41 	andeq	r0, r7, r1, asr #26
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	00001328 	andeq	r1, r0, r8, lsr #6
    1494:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
    1498:	0000009a 	muleq	r0, sl, r0
    149c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14a0:	180e4101 	stmdane	lr, {r0, r8, lr}
    14a4:	00070d41 	andeq	r0, r7, r1, asr #26
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	00001328 	andeq	r1, r0, r8, lsr #6
    14b0:	08003a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, sp}
    14b4:	0000001a 	andeq	r0, r0, sl, lsl r0
    14b8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14bc:	100e4101 	andne	r4, lr, r1, lsl #2
    14c0:	00070d41 	andeq	r0, r7, r1, asr #26
    14c4:	00000018 	andeq	r0, r0, r8, lsl r0
    14c8:	00001328 	andeq	r1, r0, r8, lsr #6
    14cc:	08003a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, sp}
    14d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14d8:	100e4101 	andne	r4, lr, r1, lsl #2
    14dc:	00070d41 	andeq	r0, r7, r1, asr #26
    14e0:	00000018 	andeq	r0, r0, r8, lsl r0
    14e4:	00001328 	andeq	r1, r0, r8, lsr #6
    14e8:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
    14ec:	0000003e 	andeq	r0, r0, lr, lsr r0
    14f0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    14f4:	100e4101 	andne	r4, lr, r1, lsl #2
    14f8:	00070d41 	andeq	r0, r7, r1, asr #26
    14fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1500:	00001328 	andeq	r1, r0, r8, lsr #6
    1504:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
    1508:	00000022 	andeq	r0, r0, r2, lsr #32
    150c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1510:	100e4101 	andne	r4, lr, r1, lsl #2
    1514:	00070d41 	andeq	r0, r7, r1, asr #26
    1518:	00000018 	andeq	r0, r0, r8, lsl r0
    151c:	00001328 	andeq	r1, r0, r8, lsr #6
    1520:	08003aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip, sp}
    1524:	00000032 	andeq	r0, r0, r2, lsr r0
    1528:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    152c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1530:	00070d41 	andeq	r0, r7, r1, asr #26
    1534:	00000018 	andeq	r0, r0, r8, lsl r0
    1538:	00001328 	andeq	r1, r0, r8, lsr #6
    153c:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
    1540:	0000001a 	andeq	r0, r0, sl, lsl r0
    1544:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1548:	100e4101 	andne	r4, lr, r1, lsl #2
    154c:	00070d41 	andeq	r0, r7, r1, asr #26
    1550:	00000018 	andeq	r0, r0, r8, lsl r0
    1554:	00001328 	andeq	r1, r0, r8, lsr #6
    1558:	08003af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, ip, sp}
    155c:	00000046 	andeq	r0, r0, r6, asr #32
    1560:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1564:	100e4101 	andne	r4, lr, r1, lsl #2
    1568:	00070d41 	andeq	r0, r7, r1, asr #26
    156c:	00000018 	andeq	r0, r0, r8, lsl r0
    1570:	00001328 	andeq	r1, r0, r8, lsr #6
    1574:	08003b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, sp}
    1578:	00000060 	andeq	r0, r0, r0, rrx
    157c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1580:	180e4101 	stmdane	lr, {r0, r8, lr}
    1584:	00070d41 	andeq	r0, r7, r1, asr #26
    1588:	00000018 	andeq	r0, r0, r8, lsl r0
    158c:	00001328 	andeq	r1, r0, r8, lsr #6
    1590:	08003ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, sp}
    1594:	00000038 	andeq	r0, r0, r8, lsr r0
    1598:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    159c:	180e4101 	stmdane	lr, {r0, r8, lr}
    15a0:	00070d41 	andeq	r0, r7, r1, asr #26
    15a4:	00000018 	andeq	r0, r0, r8, lsl r0
    15a8:	00001328 	andeq	r1, r0, r8, lsr #6
    15ac:	08003bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, sp}
    15b0:	00000020 	andeq	r0, r0, r0, lsr #32
    15b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15b8:	100e4101 	andne	r4, lr, r1, lsl #2
    15bc:	00070d41 	andeq	r0, r7, r1, asr #26
    15c0:	00000018 	andeq	r0, r0, r8, lsl r0
    15c4:	00001328 	andeq	r1, r0, r8, lsr #6
    15c8:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    15cc:	00000076 	andeq	r0, r0, r6, ror r0
    15d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15d4:	180e4101 	stmdane	lr, {r0, r8, lr}
    15d8:	00070d41 	andeq	r0, r7, r1, asr #26
    15dc:	00000018 	andeq	r0, r0, r8, lsl r0
    15e0:	00001328 	andeq	r1, r0, r8, lsr #6
    15e4:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
    15e8:	00000032 	andeq	r0, r0, r2, lsr r0
    15ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    15f0:	180e4101 	stmdane	lr, {r0, r8, lr}
    15f4:	00070d41 	andeq	r0, r7, r1, asr #26
    15f8:	0000000c 	andeq	r0, r0, ip
    15fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1600:	7c020001 	stcvc	0, cr0, [r2], {1}
    1604:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1608:	00000014 	andeq	r0, r0, r4, lsl r0
    160c:	000015f8 	strdeq	r1, [r0], -r8
    1610:	08003ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp}
    1614:	00000034 	andeq	r0, r0, r4, lsr r0
    1618:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    161c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1620:	00000018 	andeq	r0, r0, r8, lsl r0
    1624:	000015f8 	strdeq	r1, [r0], -r8
    1628:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
    162c:	000000dc 	ldrdeq	r0, [r0], -ip
    1630:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1634:	180e4101 	stmdane	lr, {r0, r8, lr}
    1638:	00070d41 	andeq	r0, r7, r1, asr #26
    163c:	00000018 	andeq	r0, r0, r8, lsl r0
    1640:	000015f8 	strdeq	r1, [r0], -r8
    1644:	08003db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp}
    1648:	0000002a 	andeq	r0, r0, sl, lsr #32
    164c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1650:	100e4101 	andne	r4, lr, r1, lsl #2
    1654:	00070d41 	andeq	r0, r7, r1, asr #26
    1658:	00000018 	andeq	r0, r0, r8, lsl r0
    165c:	000015f8 	strdeq	r1, [r0], -r8
    1660:	08003de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, sp}
    1664:	00000024 	andeq	r0, r0, r4, lsr #32
    1668:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    166c:	100e4101 	andne	r4, lr, r1, lsl #2
    1670:	00070d41 	andeq	r0, r7, r1, asr #26
    1674:	00000018 	andeq	r0, r0, r8, lsl r0
    1678:	000015f8 	strdeq	r1, [r0], -r8
    167c:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
    1680:	00000034 	andeq	r0, r0, r4, lsr r0
    1684:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1688:	180e4101 	stmdane	lr, {r0, r8, lr}
    168c:	00070d41 	andeq	r0, r7, r1, asr #26
    1690:	00000018 	andeq	r0, r0, r8, lsl r0
    1694:	000015f8 	strdeq	r1, [r0], -r8
    1698:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
    169c:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16a4:	100e4101 	andne	r4, lr, r1, lsl #2
    16a8:	00070d41 	andeq	r0, r7, r1, asr #26
    16ac:	00000018 	andeq	r0, r0, r8, lsl r0
    16b0:	000015f8 	strdeq	r1, [r0], -r8
    16b4:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
    16b8:	00000034 	andeq	r0, r0, r4, lsr r0
    16bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16c0:	180e4101 	stmdane	lr, {r0, r8, lr}
    16c4:	00070d41 	andeq	r0, r7, r1, asr #26
    16c8:	00000018 	andeq	r0, r0, r8, lsl r0
    16cc:	000015f8 	strdeq	r1, [r0], -r8
    16d0:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
    16d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    16dc:	100e4101 	andne	r4, lr, r1, lsl #2
    16e0:	00070d41 	andeq	r0, r7, r1, asr #26
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    16f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16f4:	00000018 	andeq	r0, r0, r8, lsl r0
    16f8:	000016e4 	andeq	r1, r0, r4, ror #13
    16fc:	08003ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp}
    1700:	0000001a 	andeq	r0, r0, sl, lsl r0
    1704:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1708:	41018e02 	tstmi	r1, r2, lsl #28
    170c:	0000070d 	andeq	r0, r0, sp, lsl #14
    1710:	00000018 	andeq	r0, r0, r8, lsl r0
    1714:	000016e4 	andeq	r1, r0, r4, ror #13
    1718:	08003ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip, sp}
    171c:	0000015c 	andeq	r0, r0, ip, asr r1
    1720:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1724:	200e4101 	andcs	r4, lr, r1, lsl #2
    1728:	00070d41 	andeq	r0, r7, r1, asr #26
    172c:	00000018 	andeq	r0, r0, r8, lsl r0
    1730:	000016e4 	andeq	r1, r0, r4, ror #13
    1734:	0800401c 	stmdaeq	r0, {r2, r3, r4, lr}
    1738:	0000004e 	andeq	r0, r0, lr, asr #32
    173c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1740:	100e4101 	andne	r4, lr, r1, lsl #2
    1744:	00070d41 	andeq	r0, r7, r1, asr #26
    1748:	00000014 	andeq	r0, r0, r4, lsl r0
    174c:	000016e4 	andeq	r1, r0, r4, ror #13
    1750:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
    1754:	0000001c 	andeq	r0, r0, ip, lsl r0
    1758:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    175c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1760:	00000014 	andeq	r0, r0, r4, lsl r0
    1764:	000016e4 	andeq	r1, r0, r4, ror #13
    1768:	08004088 	stmdaeq	r0, {r3, r7, lr}
    176c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1770:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1774:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1778:	00000018 	andeq	r0, r0, r8, lsl r0
    177c:	000016e4 	andeq	r1, r0, r4, ror #13
    1780:	080040a4 	stmdaeq	r0, {r2, r5, r7, lr}
    1784:	00000038 	andeq	r0, r0, r8, lsr r0
    1788:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    178c:	100e4101 	andne	r4, lr, r1, lsl #2
    1790:	00070d41 	andeq	r0, r7, r1, asr #26
    1794:	00000018 	andeq	r0, r0, r8, lsl r0
    1798:	000016e4 	andeq	r1, r0, r4, ror #13
    179c:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    17a0:	000000dc 	ldrdeq	r0, [r0], -ip
    17a4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17a8:	280e4101 	stmdacs	lr, {r0, r8, lr}
    17ac:	00070d41 	andeq	r0, r7, r1, asr #26
    17b0:	00000018 	andeq	r0, r0, r8, lsl r0
    17b4:	000016e4 	andeq	r1, r0, r4, ror #13
    17b8:	080041b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, lr}
    17bc:	00000054 	andeq	r0, r0, r4, asr r0
    17c0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17c4:	100e4101 	andne	r4, lr, r1, lsl #2
    17c8:	00070d41 	andeq	r0, r7, r1, asr #26
    17cc:	00000018 	andeq	r0, r0, r8, lsl r0
    17d0:	000016e4 	andeq	r1, r0, r4, ror #13
    17d4:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
    17d8:	000000dc 	ldrdeq	r0, [r0], -ip
    17dc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17e0:	280e4101 	stmdacs	lr, {r0, r8, lr}
    17e4:	00070d41 	andeq	r0, r7, r1, asr #26
    17e8:	00000018 	andeq	r0, r0, r8, lsl r0
    17ec:	000016e4 	andeq	r1, r0, r4, ror #13
    17f0:	080042e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, lr}
    17f4:	00000054 	andeq	r0, r0, r4, asr r0
    17f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    17fc:	100e4101 	andne	r4, lr, r1, lsl #2
    1800:	00070d41 	andeq	r0, r7, r1, asr #26
    1804:	00000018 	andeq	r0, r0, r8, lsl r0
    1808:	000016e4 	andeq	r1, r0, r4, ror #13
    180c:	0800433c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, lr}
    1810:	00000038 	andeq	r0, r0, r8, lsr r0
    1814:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1818:	100e4101 	andne	r4, lr, r1, lsl #2
    181c:	00070d41 	andeq	r0, r7, r1, asr #26
    1820:	00000018 	andeq	r0, r0, r8, lsl r0
    1824:	000016e4 	andeq	r1, r0, r4, ror #13
    1828:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
    182c:	00000038 	andeq	r0, r0, r8, lsr r0
    1830:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1834:	100e4101 	andne	r4, lr, r1, lsl #2
    1838:	00070d41 	andeq	r0, r7, r1, asr #26
    183c:	00000018 	andeq	r0, r0, r8, lsl r0
    1840:	000016e4 	andeq	r1, r0, r4, ror #13
    1844:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
    1848:	00000054 	andeq	r0, r0, r4, asr r0
    184c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1850:	180e4101 	stmdane	lr, {r0, r8, lr}
    1854:	00070d41 	andeq	r0, r7, r1, asr #26
    1858:	00000018 	andeq	r0, r0, r8, lsl r0
    185c:	000016e4 	andeq	r1, r0, r4, ror #13
    1860:	08004400 	stmdaeq	r0, {sl, lr}
    1864:	0000001c 	andeq	r0, r0, ip, lsl r0
    1868:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    186c:	100e4101 	andne	r4, lr, r1, lsl #2
    1870:	00070d41 	andeq	r0, r7, r1, asr #26
    1874:	00000018 	andeq	r0, r0, r8, lsl r0
    1878:	000016e4 	andeq	r1, r0, r4, ror #13
    187c:	0800441c 	stmdaeq	r0, {r2, r3, r4, sl, lr}
    1880:	0000003c 	andeq	r0, r0, ip, lsr r0
    1884:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1888:	100e4101 	andne	r4, lr, r1, lsl #2
    188c:	00070d41 	andeq	r0, r7, r1, asr #26
    1890:	00000018 	andeq	r0, r0, r8, lsl r0
    1894:	000016e4 	andeq	r1, r0, r4, ror #13
    1898:	08004458 	stmdaeq	r0, {r3, r4, r6, sl, lr}
    189c:	00000034 	andeq	r0, r0, r4, lsr r0
    18a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18a4:	180e4101 	stmdane	lr, {r0, r8, lr}
    18a8:	00070d41 	andeq	r0, r7, r1, asr #26
    18ac:	00000018 	andeq	r0, r0, r8, lsl r0
    18b0:	000016e4 	andeq	r1, r0, r4, ror #13
    18b4:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
    18b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    18bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18c0:	100e4101 	andne	r4, lr, r1, lsl #2
    18c4:	00070d41 	andeq	r0, r7, r1, asr #26
    18c8:	00000018 	andeq	r0, r0, r8, lsl r0
    18cc:	000016e4 	andeq	r1, r0, r4, ror #13
    18d0:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
    18d4:	00000058 	andeq	r0, r0, r8, asr r0
    18d8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18dc:	180e4101 	stmdane	lr, {r0, r8, lr}
    18e0:	00070d41 	andeq	r0, r7, r1, asr #26
    18e4:	00000018 	andeq	r0, r0, r8, lsl r0
    18e8:	000016e4 	andeq	r1, r0, r4, ror #13
    18ec:	08004500 	stmdaeq	r0, {r8, sl, lr}
    18f0:	00000024 	andeq	r0, r0, r4, lsr #32
    18f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    18f8:	100e4101 	andne	r4, lr, r1, lsl #2
    18fc:	00070d41 	andeq	r0, r7, r1, asr #26
    1900:	0000000c 	andeq	r0, r0, ip
    1904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1908:	7c020001 	stcvc	0, cr0, [r2], {1}
    190c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1910:	00000018 	andeq	r0, r0, r8, lsl r0
    1914:	00001900 	andeq	r1, r0, r0, lsl #18
    1918:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
    191c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1920:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1924:	41018e02 	tstmi	r1, r2, lsl #28
    1928:	0000070d 	andeq	r0, r0, sp, lsl #14
    192c:	00000018 	andeq	r0, r0, r8, lsl r0
    1930:	00001900 	andeq	r1, r0, r0, lsl #18
    1934:	08004540 	stmdaeq	r0, {r6, r8, sl, lr}
    1938:	0000012c 	andeq	r0, r0, ip, lsr #2
    193c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1940:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1944:	00070d41 	andeq	r0, r7, r1, asr #26
    1948:	00000018 	andeq	r0, r0, r8, lsl r0
    194c:	00001900 	andeq	r1, r0, r0, lsl #18
    1950:	0800466c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, lr}
    1954:	0000006c 	andeq	r0, r0, ip, rrx
    1958:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    195c:	100e4101 	andne	r4, lr, r1, lsl #2
    1960:	00070d41 	andeq	r0, r7, r1, asr #26
    1964:	00000018 	andeq	r0, r0, r8, lsl r0
    1968:	00001900 	andeq	r1, r0, r0, lsl #18
    196c:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
    1970:	00000038 	andeq	r0, r0, r8, lsr r0
    1974:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1978:	100e4101 	andne	r4, lr, r1, lsl #2
    197c:	00070d41 	andeq	r0, r7, r1, asr #26
    1980:	00000018 	andeq	r0, r0, r8, lsl r0
    1984:	00001900 	andeq	r1, r0, r0, lsl #18
    1988:	08004710 	stmdaeq	r0, {r4, r8, r9, sl, lr}
    198c:	00000038 	andeq	r0, r0, r8, lsr r0
    1990:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1994:	100e4101 	andne	r4, lr, r1, lsl #2
    1998:	00070d41 	andeq	r0, r7, r1, asr #26
    199c:	00000018 	andeq	r0, r0, r8, lsl r0
    19a0:	00001900 	andeq	r1, r0, r0, lsl #18
    19a4:	08004748 	stmdaeq	r0, {r3, r6, r8, r9, sl, lr}
    19a8:	00000058 	andeq	r0, r0, r8, asr r0
    19ac:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19b0:	200e4101 	andcs	r4, lr, r1, lsl #2
    19b4:	00070d41 	andeq	r0, r7, r1, asr #26
    19b8:	00000018 	andeq	r0, r0, r8, lsl r0
    19bc:	00001900 	andeq	r1, r0, r0, lsl #18
    19c0:	080047a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, lr}
    19c4:	00000024 	andeq	r0, r0, r4, lsr #32
    19c8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19cc:	100e4101 	andne	r4, lr, r1, lsl #2
    19d0:	00070d41 	andeq	r0, r7, r1, asr #26
    19d4:	00000018 	andeq	r0, r0, r8, lsl r0
    19d8:	00001900 	andeq	r1, r0, r0, lsl #18
    19dc:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
    19e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    19e4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    19e8:	100e4101 	andne	r4, lr, r1, lsl #2
    19ec:	00070d41 	andeq	r0, r7, r1, asr #26
    19f0:	00000018 	andeq	r0, r0, r8, lsl r0
    19f4:	00001900 	andeq	r1, r0, r0, lsl #18
    19f8:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
    19fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a00:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a04:	100e4101 	andne	r4, lr, r1, lsl #2
    1a08:	00070d41 	andeq	r0, r7, r1, asr #26
    1a0c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a10:	00001900 	andeq	r1, r0, r0, lsl #18
    1a14:	080047fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1a18:	00000132 	andeq	r0, r0, r2, lsr r1
    1a1c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a20:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1a24:	00070d41 	andeq	r0, r7, r1, asr #26
    1a28:	00000018 	andeq	r0, r0, r8, lsl r0
    1a2c:	00001900 	andeq	r1, r0, r0, lsl #18
    1a30:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
    1a34:	00000074 	andeq	r0, r0, r4, ror r0
    1a38:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a3c:	100e4101 	andne	r4, lr, r1, lsl #2
    1a40:	00070d41 	andeq	r0, r7, r1, asr #26
    1a44:	00000018 	andeq	r0, r0, r8, lsl r0
    1a48:	00001900 	andeq	r1, r0, r0, lsl #18
    1a4c:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    1a50:	00000036 	andeq	r0, r0, r6, lsr r0
    1a54:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a58:	100e4101 	andne	r4, lr, r1, lsl #2
    1a5c:	00070d41 	andeq	r0, r7, r1, asr #26
    1a60:	00000018 	andeq	r0, r0, r8, lsl r0
    1a64:	00001900 	andeq	r1, r0, r0, lsl #18
    1a68:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    1a6c:	00000040 	andeq	r0, r0, r0, asr #32
    1a70:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a74:	180e4101 	stmdane	lr, {r0, r8, lr}
    1a78:	00070d41 	andeq	r0, r7, r1, asr #26
    1a7c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a80:	00001900 	andeq	r1, r0, r0, lsl #18
    1a84:	08004a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, lr}
    1a88:	0000001e 	andeq	r0, r0, lr, lsl r0
    1a8c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1a90:	100e4101 	andne	r4, lr, r1, lsl #2
    1a94:	00070d41 	andeq	r0, r7, r1, asr #26
    1a98:	00000018 	andeq	r0, r0, r8, lsl r0
    1a9c:	00001900 	andeq	r1, r0, r0, lsl #18
    1aa0:	08004a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, lr}
    1aa4:	00000030 	andeq	r0, r0, r0, lsr r0
    1aa8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1aac:	180e4101 	stmdane	lr, {r0, r8, lr}
    1ab0:	00070d41 	andeq	r0, r7, r1, asr #26
    1ab4:	00000018 	andeq	r0, r0, r8, lsl r0
    1ab8:	00001900 	andeq	r1, r0, r0, lsl #18
    1abc:	08004a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, lr}
    1ac0:	0000007c 	andeq	r0, r0, ip, ror r0
    1ac4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ac8:	200e4101 	andcs	r4, lr, r1, lsl #2
    1acc:	00070d41 	andeq	r0, r7, r1, asr #26
    1ad0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ad4:	00001900 	andeq	r1, r0, r0, lsl #18
    1ad8:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
    1adc:	00000024 	andeq	r0, r0, r4, lsr #32
    1ae0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ae4:	100e4101 	andne	r4, lr, r1, lsl #2
    1ae8:	00070d41 	andeq	r0, r7, r1, asr #26
    1aec:	00000018 	andeq	r0, r0, r8, lsl r0
    1af0:	00001900 	andeq	r1, r0, r0, lsl #18
    1af4:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
    1af8:	00000040 	andeq	r0, r0, r0, asr #32
    1afc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b00:	100e4101 	andne	r4, lr, r1, lsl #2
    1b04:	00070d41 	andeq	r0, r7, r1, asr #26
    1b08:	00000018 	andeq	r0, r0, r8, lsl r0
    1b0c:	00001900 	andeq	r1, r0, r0, lsl #18
    1b10:	08004b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, lr}
    1b14:	0000004c 	andeq	r0, r0, ip, asr #32
    1b18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b1c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1b20:	00070d41 	andeq	r0, r7, r1, asr #26
    1b24:	00000018 	andeq	r0, r0, r8, lsl r0
    1b28:	00001900 	andeq	r1, r0, r0, lsl #18
    1b2c:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
    1b30:	0000002a 	andeq	r0, r0, sl, lsr #32
    1b34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b38:	100e4101 	andne	r4, lr, r1, lsl #2
    1b3c:	00070d41 	andeq	r0, r7, r1, asr #26
    1b40:	00000018 	andeq	r0, r0, r8, lsl r0
    1b44:	00001900 	andeq	r1, r0, r0, lsl #18
    1b48:	08004bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, lr}
    1b4c:	000000dc 	ldrdeq	r0, [r0], -ip
    1b50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b54:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1b58:	00070d41 	andeq	r0, r7, r1, asr #26
    1b5c:	00000018 	andeq	r0, r0, r8, lsl r0
    1b60:	00001900 	andeq	r1, r0, r0, lsl #18
    1b64:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
    1b68:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b70:	100e4101 	andne	r4, lr, r1, lsl #2
    1b74:	00070d41 	andeq	r0, r7, r1, asr #26
    1b78:	00000018 	andeq	r0, r0, r8, lsl r0
    1b7c:	00001900 	andeq	r1, r0, r0, lsl #18
    1b80:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    1b84:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1b8c:	100e4101 	andne	r4, lr, r1, lsl #2
    1b90:	00070d41 	andeq	r0, r7, r1, asr #26
    1b94:	00000018 	andeq	r0, r0, r8, lsl r0
    1b98:	00001900 	andeq	r1, r0, r0, lsl #18
    1b9c:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
    1ba0:	000000ca 	andeq	r0, r0, sl, asr #1
    1ba4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ba8:	300e4101 	andcc	r4, lr, r1, lsl #2
    1bac:	00070d41 	andeq	r0, r7, r1, asr #26
    1bb0:	00000018 	andeq	r0, r0, r8, lsl r0
    1bb4:	00001900 	andeq	r1, r0, r0, lsl #18
    1bb8:	08004da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, lr}
    1bbc:	000000c0 	andeq	r0, r0, r0, asr #1
    1bc0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bc4:	180e4101 	stmdane	lr, {r0, r8, lr}
    1bc8:	00070d41 	andeq	r0, r7, r1, asr #26
    1bcc:	00000018 	andeq	r0, r0, r8, lsl r0
    1bd0:	00001900 	andeq	r1, r0, r0, lsl #18
    1bd4:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
    1bd8:	0000003c 	andeq	r0, r0, ip, lsr r0
    1bdc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1be0:	100e4101 	andne	r4, lr, r1, lsl #2
    1be4:	00070d41 	andeq	r0, r7, r1, asr #26
    1be8:	00000018 	andeq	r0, r0, r8, lsl r0
    1bec:	00001900 	andeq	r1, r0, r0, lsl #18
    1bf0:	08004ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, lr}
    1bf4:	00000034 	andeq	r0, r0, r4, lsr r0
    1bf8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1bfc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c00:	00070d41 	andeq	r0, r7, r1, asr #26
    1c04:	00000018 	andeq	r0, r0, r8, lsl r0
    1c08:	00001900 	andeq	r1, r0, r0, lsl #18
    1c0c:	08004ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, lr}
    1c10:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c18:	100e4101 	andne	r4, lr, r1, lsl #2
    1c1c:	00070d41 	andeq	r0, r7, r1, asr #26
    1c20:	00000018 	andeq	r0, r0, r8, lsl r0
    1c24:	00001900 	andeq	r1, r0, r0, lsl #18
    1c28:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
    1c2c:	00000050 	andeq	r0, r0, r0, asr r0
    1c30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c34:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c38:	00070d41 	andeq	r0, r7, r1, asr #26
    1c3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1c40:	00001900 	andeq	r1, r0, r0, lsl #18
    1c44:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
    1c48:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c50:	100e4101 	andne	r4, lr, r1, lsl #2
    1c54:	00070d41 	andeq	r0, r7, r1, asr #26
    1c58:	0000000c 	andeq	r0, r0, ip
    1c5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1c60:	7c020001 	stcvc	0, cr0, [r2], {1}
    1c64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1c68:	00000018 	andeq	r0, r0, r8, lsl r0
    1c6c:	00001c58 	andeq	r1, r0, r8, asr ip
    1c70:	08004f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, lr}
    1c74:	00000058 	andeq	r0, r0, r8, asr r0
    1c78:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c7c:	100e4101 	andne	r4, lr, r1, lsl #2
    1c80:	00070d41 	andeq	r0, r7, r1, asr #26
    1c84:	00000018 	andeq	r0, r0, r8, lsl r0
    1c88:	00001c58 	andeq	r1, r0, r8, asr ip
    1c8c:	08004fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, lr}
    1c90:	00000194 	muleq	r0, r4, r1
    1c94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1c98:	180e4101 	stmdane	lr, {r0, r8, lr}
    1c9c:	00070d41 	andeq	r0, r7, r1, asr #26
    1ca0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ca4:	00001c58 	andeq	r1, r0, r8, asr ip
    1ca8:	08005148 	stmdaeq	r0, {r3, r6, r8, ip, lr}
    1cac:	000000da 	ldrdeq	r0, [r0], -sl
    1cb0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cb4:	100e4101 	andne	r4, lr, r1, lsl #2
    1cb8:	00070d41 	andeq	r0, r7, r1, asr #26
    1cbc:	00000018 	andeq	r0, r0, r8, lsl r0
    1cc0:	00001c58 	andeq	r1, r0, r8, asr ip
    1cc4:	08005224 	stmdaeq	r0, {r2, r5, r9, ip, lr}
    1cc8:	00000054 	andeq	r0, r0, r4, asr r0
    1ccc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cd0:	100e4101 	andne	r4, lr, r1, lsl #2
    1cd4:	00070d41 	andeq	r0, r7, r1, asr #26
    1cd8:	00000018 	andeq	r0, r0, r8, lsl r0
    1cdc:	00001c58 	andeq	r1, r0, r8, asr ip
    1ce0:	08005278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, lr}
    1ce4:	0000005c 	andeq	r0, r0, ip, asr r0
    1ce8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1cec:	100e4101 	andne	r4, lr, r1, lsl #2
    1cf0:	00070d41 	andeq	r0, r7, r1, asr #26
    1cf4:	00000018 	andeq	r0, r0, r8, lsl r0
    1cf8:	00001c58 	andeq	r1, r0, r8, asr ip
    1cfc:	080052d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, lr}
    1d00:	000000cc 	andeq	r0, r0, ip, asr #1
    1d04:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d08:	200e4101 	andcs	r4, lr, r1, lsl #2
    1d0c:	00070d41 	andeq	r0, r7, r1, asr #26
    1d10:	00000018 	andeq	r0, r0, r8, lsl r0
    1d14:	00001c58 	andeq	r1, r0, r8, asr ip
    1d18:	080053a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, lr}
    1d1c:	0000007c 	andeq	r0, r0, ip, ror r0
    1d20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d24:	100e4101 	andne	r4, lr, r1, lsl #2
    1d28:	00070d41 	andeq	r0, r7, r1, asr #26
    1d2c:	00000018 	andeq	r0, r0, r8, lsl r0
    1d30:	00001c58 	andeq	r1, r0, r8, asr ip
    1d34:	0800541c 	stmdaeq	r0, {r2, r3, r4, sl, ip, lr}
    1d38:	0000006c 	andeq	r0, r0, ip, rrx
    1d3c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d40:	100e4101 	andne	r4, lr, r1, lsl #2
    1d44:	00070d41 	andeq	r0, r7, r1, asr #26
    1d48:	00000018 	andeq	r0, r0, r8, lsl r0
    1d4c:	00001c58 	andeq	r1, r0, r8, asr ip
    1d50:	08005488 	stmdaeq	r0, {r3, r7, sl, ip, lr}
    1d54:	0000006c 	andeq	r0, r0, ip, rrx
    1d58:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d5c:	100e4101 	andne	r4, lr, r1, lsl #2
    1d60:	00070d41 	andeq	r0, r7, r1, asr #26
    1d64:	00000018 	andeq	r0, r0, r8, lsl r0
    1d68:	00001c58 	andeq	r1, r0, r8, asr ip
    1d6c:	080054f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, lr}
    1d70:	00000038 	andeq	r0, r0, r8, lsr r0
    1d74:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d78:	180e4101 	stmdane	lr, {r0, r8, lr}
    1d7c:	00070d41 	andeq	r0, r7, r1, asr #26
    1d80:	00000014 	andeq	r0, r0, r4, lsl r0
    1d84:	00001c58 	andeq	r1, r0, r8, asr ip
    1d88:	0800552c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, lr}
    1d8c:	00000034 	andeq	r0, r0, r4, lsr r0
    1d90:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1d94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1d98:	00000018 	andeq	r0, r0, r8, lsl r0
    1d9c:	00001c58 	andeq	r1, r0, r8, asr ip
    1da0:	08005560 	stmdaeq	r0, {r5, r6, r8, sl, ip, lr}
    1da4:	000000ac 	andeq	r0, r0, ip, lsr #1
    1da8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1dac:	100e4101 	andne	r4, lr, r1, lsl #2
    1db0:	00070d41 	andeq	r0, r7, r1, asr #26
    1db4:	00000018 	andeq	r0, r0, r8, lsl r0
    1db8:	00001c58 	andeq	r1, r0, r8, asr ip
    1dbc:	0800560c 	stmdaeq	r0, {r2, r3, r9, sl, ip, lr}
    1dc0:	00000084 	andeq	r0, r0, r4, lsl #1
    1dc4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1dc8:	100e4101 	andne	r4, lr, r1, lsl #2
    1dcc:	00070d41 	andeq	r0, r7, r1, asr #26
    1dd0:	00000018 	andeq	r0, r0, r8, lsl r0
    1dd4:	00001c58 	andeq	r1, r0, r8, asr ip
    1dd8:	08005690 	stmdaeq	r0, {r4, r7, r9, sl, ip, lr}
    1ddc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1de0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1de4:	100e4101 	andne	r4, lr, r1, lsl #2
    1de8:	00070d41 	andeq	r0, r7, r1, asr #26
    1dec:	00000018 	andeq	r0, r0, r8, lsl r0
    1df0:	00001c58 	andeq	r1, r0, r8, asr ip
    1df4:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
    1df8:	00000044 	andeq	r0, r0, r4, asr #32
    1dfc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e00:	100e4101 	andne	r4, lr, r1, lsl #2
    1e04:	00070d41 	andeq	r0, r7, r1, asr #26
    1e08:	00000018 	andeq	r0, r0, r8, lsl r0
    1e0c:	00001c58 	andeq	r1, r0, r8, asr ip
    1e10:	08005710 	stmdaeq	r0, {r4, r8, r9, sl, ip, lr}
    1e14:	0000015c 	andeq	r0, r0, ip, asr r1
    1e18:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e1c:	200e4101 	andcs	r4, lr, r1, lsl #2
    1e20:	00070d41 	andeq	r0, r7, r1, asr #26
    1e24:	00000018 	andeq	r0, r0, r8, lsl r0
    1e28:	00001c58 	andeq	r1, r0, r8, asr ip
    1e2c:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
    1e30:	00000088 	andeq	r0, r0, r8, lsl #1
    1e34:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e38:	100e4101 	andne	r4, lr, r1, lsl #2
    1e3c:	00070d41 	andeq	r0, r7, r1, asr #26
    1e40:	00000018 	andeq	r0, r0, r8, lsl r0
    1e44:	00001c58 	andeq	r1, r0, r8, asr ip
    1e48:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
    1e4c:	00000040 	andeq	r0, r0, r0, asr #32
    1e50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e54:	180e4101 	stmdane	lr, {r0, r8, lr}
    1e58:	00070d41 	andeq	r0, r7, r1, asr #26
    1e5c:	00000018 	andeq	r0, r0, r8, lsl r0
    1e60:	00001c58 	andeq	r1, r0, r8, asr ip
    1e64:	08005934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, lr}
    1e68:	0000003c 	andeq	r0, r0, ip, lsr r0
    1e6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e70:	180e4101 	stmdane	lr, {r0, r8, lr}
    1e74:	00070d41 	andeq	r0, r7, r1, asr #26
    1e78:	00000018 	andeq	r0, r0, r8, lsl r0
    1e7c:	00001c58 	andeq	r1, r0, r8, asr ip
    1e80:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
    1e84:	00000024 	andeq	r0, r0, r4, lsr #32
    1e88:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1e8c:	100e4101 	andne	r4, lr, r1, lsl #2
    1e90:	00070d41 	andeq	r0, r7, r1, asr #26
    1e94:	00000018 	andeq	r0, r0, r8, lsl r0
    1e98:	00001c58 	andeq	r1, r0, r8, asr ip
    1e9c:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    1ea0:	00000024 	andeq	r0, r0, r4, lsr #32
    1ea4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ea8:	100e4101 	andne	r4, lr, r1, lsl #2
    1eac:	00070d41 	andeq	r0, r7, r1, asr #26
    1eb0:	00000018 	andeq	r0, r0, r8, lsl r0
    1eb4:	00001c58 	andeq	r1, r0, r8, asr ip
    1eb8:	080059b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, lr}
    1ebc:	0000004c 	andeq	r0, r0, ip, asr #32
    1ec0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ec4:	100e4101 	andne	r4, lr, r1, lsl #2
    1ec8:	00070d41 	andeq	r0, r7, r1, asr #26
    1ecc:	00000018 	andeq	r0, r0, r8, lsl r0
    1ed0:	00001c58 	andeq	r1, r0, r8, asr ip
    1ed4:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    1ed8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1edc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1ee0:	180e4101 	stmdane	lr, {r0, r8, lr}
    1ee4:	00070d41 	andeq	r0, r7, r1, asr #26
    1ee8:	00000018 	andeq	r0, r0, r8, lsl r0
    1eec:	00001c58 	andeq	r1, r0, r8, asr ip
    1ef0:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
    1ef4:	0000007c 	andeq	r0, r0, ip, ror r0
    1ef8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1efc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f00:	00070d41 	andeq	r0, r7, r1, asr #26
    1f04:	00000018 	andeq	r0, r0, r8, lsl r0
    1f08:	00001c58 	andeq	r1, r0, r8, asr ip
    1f0c:	08005b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, lr}
    1f10:	00000078 	andeq	r0, r0, r8, ror r0
    1f14:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f18:	100e4101 	andne	r4, lr, r1, lsl #2
    1f1c:	00070d41 	andeq	r0, r7, r1, asr #26
    1f20:	00000018 	andeq	r0, r0, r8, lsl r0
    1f24:	00001c58 	andeq	r1, r0, r8, asr ip
    1f28:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
    1f2c:	000000b4 	strheq	r0, [r0], -r4
    1f30:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f34:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1f38:	00070d41 	andeq	r0, r7, r1, asr #26
    1f3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1f40:	00001c58 	andeq	r1, r0, r8, asr ip
    1f44:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
    1f48:	0000007c 	andeq	r0, r0, ip, ror r0
    1f4c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f50:	100e4101 	andne	r4, lr, r1, lsl #2
    1f54:	00070d41 	andeq	r0, r7, r1, asr #26
    1f58:	0000000c 	andeq	r0, r0, ip
    1f5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1f60:	7c020001 	stcvc	0, cr0, [r2], {1}
    1f64:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1f68:	00000018 	andeq	r0, r0, r8, lsl r0
    1f6c:	00001f58 	andeq	r1, r0, r8, asr pc
    1f70:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
    1f74:	00000016 	andeq	r0, r0, r6, lsl r0
    1f78:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1f7c:	41018e02 	tstmi	r1, r2, lsl #28
    1f80:	0000070d 	andeq	r0, r0, sp, lsl #14
    1f84:	00000018 	andeq	r0, r0, r8, lsl r0
    1f88:	00001f58 	andeq	r1, r0, r8, asr pc
    1f8c:	08005d10 	stmdaeq	r0, {r4, r8, sl, fp, ip, lr}
    1f90:	00000038 	andeq	r0, r0, r8, lsr r0
    1f94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1f98:	100e4101 	andne	r4, lr, r1, lsl #2
    1f9c:	00070d41 	andeq	r0, r7, r1, asr #26
    1fa0:	00000014 	andeq	r0, r0, r4, lsl r0
    1fa4:	00001f58 	andeq	r1, r0, r8, asr pc
    1fa8:	08005d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip, lr}
    1fac:	00000018 	andeq	r0, r0, r8, lsl r0
    1fb0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fb4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    1fb8:	00000018 	andeq	r0, r0, r8, lsl r0
    1fbc:	00001f58 	andeq	r1, r0, r8, asr pc
    1fc0:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
    1fc4:	00000038 	andeq	r0, r0, r8, lsr r0
    1fc8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fcc:	100e4101 	andne	r4, lr, r1, lsl #2
    1fd0:	00070d41 	andeq	r0, r7, r1, asr #26
    1fd4:	00000018 	andeq	r0, r0, r8, lsl r0
    1fd8:	00001f58 	andeq	r1, r0, r8, asr pc
    1fdc:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
    1fe0:	00000038 	andeq	r0, r0, r8, lsr r0
    1fe4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    1fe8:	180e4101 	stmdane	lr, {r0, r8, lr}
    1fec:	00070d41 	andeq	r0, r7, r1, asr #26
    1ff0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ff4:	00001f58 	andeq	r1, r0, r8, asr pc
    1ff8:	08005dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, lr}
    1ffc:	00000024 	andeq	r0, r0, r4, lsr #32
    2000:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2004:	100e4101 	andne	r4, lr, r1, lsl #2
    2008:	00070d41 	andeq	r0, r7, r1, asr #26
    200c:	00000018 	andeq	r0, r0, r8, lsl r0
    2010:	00001f58 	andeq	r1, r0, r8, asr pc
    2014:	08005df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    2018:	00000038 	andeq	r0, r0, r8, lsr r0
    201c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2020:	180e4101 	stmdane	lr, {r0, r8, lr}
    2024:	00070d41 	andeq	r0, r7, r1, asr #26
    2028:	00000018 	andeq	r0, r0, r8, lsl r0
    202c:	00001f58 	andeq	r1, r0, r8, asr pc
    2030:	08005e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, lr}
    2034:	00000024 	andeq	r0, r0, r4, lsr #32
    2038:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    203c:	100e4101 	andne	r4, lr, r1, lsl #2
    2040:	00070d41 	andeq	r0, r7, r1, asr #26
    2044:	0000000c 	andeq	r0, r0, ip
    2048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    204c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2050:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2054:	0000001c 	andeq	r0, r0, ip, lsl r0
    2058:	00002044 	andeq	r2, r0, r4, asr #32
    205c:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
    2060:	0000005c 	andeq	r0, r0, ip, asr r0
    2064:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2068:	41018e02 	tstmi	r1, r2, lsl #28
    206c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2070:	00000007 	andeq	r0, r0, r7
    2074:	00000018 	andeq	r0, r0, r8, lsl r0
    2078:	00002044 	andeq	r2, r0, r4, asr #32
    207c:	08005eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, lr}
    2080:	00000030 	andeq	r0, r0, r0, lsr r0
    2084:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2088:	100e4101 	andne	r4, lr, r1, lsl #2
    208c:	00070d41 	andeq	r0, r7, r1, asr #26
    2090:	00000018 	andeq	r0, r0, r8, lsl r0
    2094:	00002044 	andeq	r2, r0, r4, asr #32
    2098:	08005edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    209c:	00000030 	andeq	r0, r0, r0, lsr r0
    20a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    20a4:	100e4101 	andne	r4, lr, r1, lsl #2
    20a8:	00070d41 	andeq	r0, r7, r1, asr #26
    20ac:	00000018 	andeq	r0, r0, r8, lsl r0
    20b0:	00002044 	andeq	r2, r0, r4, asr #32
    20b4:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
    20b8:	0000003c 	andeq	r0, r0, ip, lsr r0
    20bc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    20c0:	100e4101 	andne	r4, lr, r1, lsl #2
    20c4:	00070d41 	andeq	r0, r7, r1, asr #26
    20c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    20cc:	00002044 	andeq	r2, r0, r4, asr #32
    20d0:	08005f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, lr}
    20d4:	00000094 	muleq	r0, r4, r0
    20d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    20dc:	41018e02 	tstmi	r1, r2, lsl #28
    20e0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    20e4:	00000007 	andeq	r0, r0, r7
    20e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    20ec:	00002044 	andeq	r2, r0, r4, asr #32
    20f0:	08005fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
    20f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    20f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    20fc:	41018e02 	tstmi	r1, r2, lsl #28
    2100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2104:	00000007 	andeq	r0, r0, r7
    2108:	0000001c 	andeq	r0, r0, ip, lsl r0
    210c:	00002044 	andeq	r2, r0, r4, asr #32
    2110:	08006008 	stmdaeq	r0, {r3, sp, lr}
    2114:	000000b8 	strheq	r0, [r0], -r8
    2118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    211c:	41018e02 	tstmi	r1, r2, lsl #28
    2120:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2124:	00000007 	andeq	r0, r0, r7
    2128:	0000001c 	andeq	r0, r0, ip, lsl r0
    212c:	00002044 	andeq	r2, r0, r4, asr #32
    2130:	080060c0 	stmdaeq	r0, {r6, r7, sp, lr}
    2134:	00000198 	muleq	r0, r8, r1
    2138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    213c:	41018e02 	tstmi	r1, r2, lsl #28
    2140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2144:	00000007 	andeq	r0, r0, r7
    2148:	0000001c 	andeq	r0, r0, ip, lsl r0
    214c:	00002044 	andeq	r2, r0, r4, asr #32
    2150:	08006258 	stmdaeq	r0, {r3, r4, r6, r9, sp, lr}
    2154:	0000005c 	andeq	r0, r0, ip, asr r0
    2158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    215c:	41018e02 	tstmi	r1, r2, lsl #28
    2160:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2164:	00000007 	andeq	r0, r0, r7
    2168:	0000000c 	andeq	r0, r0, ip
    216c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2170:	7c020001 	stcvc	0, cr0, [r2], {1}
    2174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2178:	0000001c 	andeq	r0, r0, ip, lsl r0
    217c:	00002168 	andeq	r2, r0, r8, ror #2
    2180:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
    2184:	00000074 	andeq	r0, r0, r4, ror r0
    2188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    218c:	41018e02 	tstmi	r1, r2, lsl #28
    2190:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
    2194:	00000007 	andeq	r0, r0, r7
    2198:	0000001c 	andeq	r0, r0, ip, lsl r0
    219c:	00002168 	andeq	r2, r0, r8, ror #2
    21a0:	08006328 	stmdaeq	r0, {r3, r5, r8, r9, sp, lr}
    21a4:	00000214 	andeq	r0, r0, r4, lsl r2
    21a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21ac:	41018e02 	tstmi	r1, r2, lsl #28
    21b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    21b4:	00000007 	andeq	r0, r0, r7
    21b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    21bc:	00002168 	andeq	r2, r0, r8, ror #2
    21c0:	0800653c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, sp, lr}
    21c4:	000000ec 	andeq	r0, r0, ip, ror #1
    21c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21cc:	41018e02 	tstmi	r1, r2, lsl #28
    21d0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    21d4:	00000007 	andeq	r0, r0, r7
    21d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    21dc:	00002168 	andeq	r2, r0, r8, ror #2
    21e0:	08006628 	stmdaeq	r0, {r3, r5, r9, sl, sp, lr}
    21e4:	00000054 	andeq	r0, r0, r4, asr r0
    21e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    21ec:	41018e02 	tstmi	r1, r2, lsl #28
    21f0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    21f4:	00000007 	andeq	r0, r0, r7
    21f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    21fc:	00002168 	andeq	r2, r0, r8, ror #2
    2200:	0800667c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp, lr}
    2204:	0000004a 	andeq	r0, r0, sl, asr #32
    2208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    220c:	41018e02 	tstmi	r1, r2, lsl #28
    2210:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    2214:	00000007 	andeq	r0, r0, r7
    2218:	00000018 	andeq	r0, r0, r8, lsl r0
    221c:	00002168 	andeq	r2, r0, r8, ror #2
    2220:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
    2224:	00000034 	andeq	r0, r0, r4, lsr r0
    2228:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    222c:	180e4101 	stmdane	lr, {r0, r8, lr}
    2230:	00070d41 	andeq	r0, r7, r1, asr #26
    2234:	0000000c 	andeq	r0, r0, ip
    2238:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    223c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2240:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2244:	0000001c 	andeq	r0, r0, ip, lsl r0
    2248:	00002234 	andeq	r2, r0, r4, lsr r2
    224c:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
    2250:	00000076 	andeq	r0, r0, r6, ror r0
    2254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2258:	41018e02 	tstmi	r1, r2, lsl #28
    225c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2260:	00000007 	andeq	r0, r0, r7
    2264:	0000001c 	andeq	r0, r0, ip, lsl r0
    2268:	00002234 	andeq	r2, r0, r4, lsr r2
    226c:	08006774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, sp, lr}
    2270:	0000002e 	andeq	r0, r0, lr, lsr #32
    2274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2278:	41018e02 	tstmi	r1, r2, lsl #28
    227c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2280:	00000007 	andeq	r0, r0, r7
    2284:	0000001c 	andeq	r0, r0, ip, lsl r0
    2288:	00002234 	andeq	r2, r0, r4, lsr r2
    228c:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
    2290:	00000082 	andeq	r0, r0, r2, lsl #1
    2294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2298:	41018e02 	tstmi	r1, r2, lsl #28
    229c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22a0:	00000007 	andeq	r0, r0, r7
    22a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    22a8:	00002234 	andeq	r2, r0, r4, lsr r2
    22ac:	08006828 	stmdaeq	r0, {r3, r5, fp, sp, lr}
    22b0:	00000040 	andeq	r0, r0, r0, asr #32
    22b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22b8:	41018e02 	tstmi	r1, r2, lsl #28
    22bc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22c0:	00000007 	andeq	r0, r0, r7
    22c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    22c8:	00002234 	andeq	r2, r0, r4, lsr r2
    22cc:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
    22d0:	00000040 	andeq	r0, r0, r0, asr #32
    22d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22d8:	41018e02 	tstmi	r1, r2, lsl #28
    22dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    22e0:	00000007 	andeq	r0, r0, r7
    22e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    22e8:	00002234 	andeq	r2, r0, r4, lsr r2
    22ec:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
    22f0:	00000048 	andeq	r0, r0, r8, asr #32
    22f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    22f8:	41018e02 	tstmi	r1, r2, lsl #28
    22fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2300:	00000007 	andeq	r0, r0, r7
    2304:	0000001c 	andeq	r0, r0, ip, lsl r0
    2308:	00002234 	andeq	r2, r0, r4, lsr r2
    230c:	080068f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, sp, lr}
    2310:	00000040 	andeq	r0, r0, r0, asr #32
    2314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2318:	41018e02 	tstmi	r1, r2, lsl #28
    231c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2320:	00000007 	andeq	r0, r0, r7
    2324:	0000001c 	andeq	r0, r0, ip, lsl r0
    2328:	00002234 	andeq	r2, r0, r4, lsr r2
    232c:	08006930 	stmdaeq	r0, {r4, r5, r8, fp, sp, lr}
    2330:	0000001c 	andeq	r0, r0, ip, lsl r0
    2334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2338:	41018e02 	tstmi	r1, r2, lsl #28
    233c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2340:	00000007 	andeq	r0, r0, r7
    2344:	0000001c 	andeq	r0, r0, ip, lsl r0
    2348:	00002234 	andeq	r2, r0, r4, lsr r2
    234c:	0800694c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp, lr}
    2350:	00000060 	andeq	r0, r0, r0, rrx
    2354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2358:	41018e02 	tstmi	r1, r2, lsl #28
    235c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2360:	00000007 	andeq	r0, r0, r7
    2364:	0000001c 	andeq	r0, r0, ip, lsl r0
    2368:	00002234 	andeq	r2, r0, r4, lsr r2
    236c:	080069ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, sp, lr}
    2370:	0000006c 	andeq	r0, r0, ip, rrx
    2374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2378:	41018e02 	tstmi	r1, r2, lsl #28
    237c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2380:	00000007 	andeq	r0, r0, r7
    2384:	0000001c 	andeq	r0, r0, ip, lsl r0
    2388:	00002234 	andeq	r2, r0, r4, lsr r2
    238c:	08006a18 	stmdaeq	r0, {r3, r4, r9, fp, sp, lr}
    2390:	00000138 	andeq	r0, r0, r8, lsr r1
    2394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2398:	41018e02 	tstmi	r1, r2, lsl #28
    239c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    23a0:	00000007 	andeq	r0, r0, r7
    23a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    23a8:	00002234 	andeq	r2, r0, r4, lsr r2
    23ac:	08006b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, sp, lr}
    23b0:	00000090 	muleq	r0, r0, r0
    23b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    23b8:	41018e02 	tstmi	r1, r2, lsl #28
    23bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    23c0:	00000007 	andeq	r0, r0, r7
    23c4:	00000014 	andeq	r0, r0, r4, lsl r0
    23c8:	00002234 	andeq	r2, r0, r4, lsr r2
    23cc:	08006be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp, lr}
    23d0:	00000006 	andeq	r0, r0, r6
    23d4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    23d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    23dc:	0000000c 	andeq	r0, r0, ip
    23e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    23e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    23e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    23ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    23f0:	000023dc 	ldrdeq	r2, [r0], -ip
    23f4:	08006be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp, lr}
    23f8:	00000224 	andeq	r0, r0, r4, lsr #4
    23fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2400:	41018e02 	tstmi	r1, r2, lsl #28
    2404:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2408:	00000007 	andeq	r0, r0, r7
    240c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2410:	000023dc 	ldrdeq	r2, [r0], -ip
    2414:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
    2418:	000000b2 	strheq	r0, [r0], -r2
    241c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2420:	41018e02 	tstmi	r1, r2, lsl #28
    2424:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    2428:	00000007 	andeq	r0, r0, r7
    242c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2430:	000023dc 	ldrdeq	r2, [r0], -ip
    2434:	08006ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, sp, lr}
    2438:	000000b4 	strheq	r0, [r0], -r4
    243c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2440:	41018e02 	tstmi	r1, r2, lsl #28
    2444:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    2448:	00000007 	andeq	r0, r0, r7
    244c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2450:	000023dc 	ldrdeq	r2, [r0], -ip
    2454:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
    2458:	0000002c 	andeq	r0, r0, ip, lsr #32
    245c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2460:	41018e02 	tstmi	r1, r2, lsl #28
    2464:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2468:	00000007 	andeq	r0, r0, r7
    246c:	00000018 	andeq	r0, r0, r8, lsl r0
    2470:	000023dc 	ldrdeq	r2, [r0], -ip
    2474:	08006fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, sp, lr}
    2478:	00000040 	andeq	r0, r0, r0, asr #32
    247c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2480:	100e4101 	andne	r4, lr, r1, lsl #2
    2484:	00070d41 	andeq	r0, r7, r1, asr #26
    2488:	00000018 	andeq	r0, r0, r8, lsl r0
    248c:	000023dc 	ldrdeq	r2, [r0], -ip
    2490:	08006fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp, lr}
    2494:	0000002c 	andeq	r0, r0, ip, lsr #32
    2498:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    249c:	100e4101 	andne	r4, lr, r1, lsl #2
    24a0:	00070d41 	andeq	r0, r7, r1, asr #26
    24a4:	00000018 	andeq	r0, r0, r8, lsl r0
    24a8:	000023dc 	ldrdeq	r2, [r0], -ip
    24ac:	0800700c 	stmdaeq	r0, {r2, r3, ip, sp, lr}
    24b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    24b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    24b8:	100e4101 	andne	r4, lr, r1, lsl #2
    24bc:	00070d41 	andeq	r0, r7, r1, asr #26
    24c0:	00000018 	andeq	r0, r0, r8, lsl r0
    24c4:	000023dc 	ldrdeq	r2, [r0], -ip
    24c8:	08007038 	stmdaeq	r0, {r3, r4, r5, ip, sp, lr}
    24cc:	00000020 	andeq	r0, r0, r0, lsr #32
    24d0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    24d4:	100e4101 	andne	r4, lr, r1, lsl #2
    24d8:	00070d41 	andeq	r0, r7, r1, asr #26
    24dc:	00000018 	andeq	r0, r0, r8, lsl r0
    24e0:	000023dc 	ldrdeq	r2, [r0], -ip
    24e4:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
    24e8:	00000020 	andeq	r0, r0, r0, lsr #32
    24ec:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    24f0:	100e4101 	andne	r4, lr, r1, lsl #2
    24f4:	00070d41 	andeq	r0, r7, r1, asr #26
    24f8:	00000018 	andeq	r0, r0, r8, lsl r0
    24fc:	000023dc 	ldrdeq	r2, [r0], -ip
    2500:	08007078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp, lr}
    2504:	0000001c 	andeq	r0, r0, ip, lsl r0
    2508:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    250c:	100e4101 	andne	r4, lr, r1, lsl #2
    2510:	00070d41 	andeq	r0, r7, r1, asr #26
    2514:	0000001c 	andeq	r0, r0, ip, lsl r0
    2518:	000023dc 	ldrdeq	r2, [r0], -ip
    251c:	08007094 	stmdaeq	r0, {r2, r4, r7, ip, sp, lr}
    2520:	00000040 	andeq	r0, r0, r0, asr #32
    2524:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2528:	41018e02 	tstmi	r1, r2, lsl #28
    252c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2530:	00000007 	andeq	r0, r0, r7
    2534:	00000014 	andeq	r0, r0, r4, lsl r0
    2538:	000023dc 	ldrdeq	r2, [r0], -ip
    253c:	080070d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, sp, lr}
    2540:	00000018 	andeq	r0, r0, r8, lsl r0
    2544:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2548:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    254c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2550:	000023dc 	ldrdeq	r2, [r0], -ip
    2554:	080070ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, lr}
    2558:	00000050 	andeq	r0, r0, r0, asr r0
    255c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2560:	41018e02 	tstmi	r1, r2, lsl #28
    2564:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2568:	00000007 	andeq	r0, r0, r7
    256c:	00000018 	andeq	r0, r0, r8, lsl r0
    2570:	000023dc 	ldrdeq	r2, [r0], -ip
    2574:	0800713c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp, lr}
    2578:	00000040 	andeq	r0, r0, r0, asr #32
    257c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2580:	180e4101 	stmdane	lr, {r0, r8, lr}
    2584:	00070d41 	andeq	r0, r7, r1, asr #26
    2588:	00000018 	andeq	r0, r0, r8, lsl r0
    258c:	000023dc 	ldrdeq	r2, [r0], -ip
    2590:	0800717c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
    2594:	00000038 	andeq	r0, r0, r8, lsr r0
    2598:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    259c:	100e4101 	andne	r4, lr, r1, lsl #2
    25a0:	00070d41 	andeq	r0, r7, r1, asr #26
    25a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    25a8:	000023dc 	ldrdeq	r2, [r0], -ip
    25ac:	080071b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp, lr}
    25b0:	00000068 	andeq	r0, r0, r8, rrx
    25b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    25b8:	41018e02 	tstmi	r1, r2, lsl #28
    25bc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    25c0:	00000007 	andeq	r0, r0, r7
    25c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    25c8:	000023dc 	ldrdeq	r2, [r0], -ip
    25cc:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
    25d0:	00000048 	andeq	r0, r0, r8, asr #32
    25d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    25d8:	41018e02 	tstmi	r1, r2, lsl #28
    25dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    25e0:	00000007 	andeq	r0, r0, r7
    25e4:	00000018 	andeq	r0, r0, r8, lsl r0
    25e8:	000023dc 	ldrdeq	r2, [r0], -ip
    25ec:	08007264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp, lr}
    25f0:	00000120 	andeq	r0, r0, r0, lsr #2
    25f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    25f8:	200e4101 	andcs	r4, lr, r1, lsl #2
    25fc:	00070d41 	andeq	r0, r7, r1, asr #26
    2600:	0000001c 	andeq	r0, r0, ip, lsl r0
    2604:	000023dc 	ldrdeq	r2, [r0], -ip
    2608:	08007384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp, lr}
    260c:	00000048 	andeq	r0, r0, r8, asr #32
    2610:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2614:	41018e02 	tstmi	r1, r2, lsl #28
    2618:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    261c:	00000007 	andeq	r0, r0, r7
    2620:	0000001c 	andeq	r0, r0, ip, lsl r0
    2624:	000023dc 	ldrdeq	r2, [r0], -ip
    2628:	080073cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp, lr}
    262c:	00000078 	andeq	r0, r0, r8, ror r0
    2630:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2634:	41018e02 	tstmi	r1, r2, lsl #28
    2638:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    263c:	00000007 	andeq	r0, r0, r7
    2640:	0000001c 	andeq	r0, r0, ip, lsl r0
    2644:	000023dc 	ldrdeq	r2, [r0], -ip
    2648:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
    264c:	0000007c 	andeq	r0, r0, ip, ror r0
    2650:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2654:	41018e02 	tstmi	r1, r2, lsl #28
    2658:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    265c:	00000007 	andeq	r0, r0, r7
    2660:	00000018 	andeq	r0, r0, r8, lsl r0
    2664:	000023dc 	ldrdeq	r2, [r0], -ip
    2668:	080074c0 	stmdaeq	r0, {r6, r7, sl, ip, sp, lr}
    266c:	00000014 	andeq	r0, r0, r4, lsl r0
    2670:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2674:	41018e02 	tstmi	r1, r2, lsl #28
    2678:	0000070d 	andeq	r0, r0, sp, lsl #14
    267c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2680:	000023dc 	ldrdeq	r2, [r0], -ip
    2684:	080074d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, sp, lr}
    2688:	000000c8 	andeq	r0, r0, r8, asr #1
    268c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2690:	41018e02 	tstmi	r1, r2, lsl #28
    2694:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    2698:	00000007 	andeq	r0, r0, r7
    269c:	0000001c 	andeq	r0, r0, ip, lsl r0
    26a0:	000023dc 	ldrdeq	r2, [r0], -ip
    26a4:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    26a8:	00000068 	andeq	r0, r0, r8, rrx
    26ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26b0:	41018e02 	tstmi	r1, r2, lsl #28
    26b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    26b8:	00000007 	andeq	r0, r0, r7
    26bc:	00000018 	andeq	r0, r0, r8, lsl r0
    26c0:	000023dc 	ldrdeq	r2, [r0], -ip
    26c4:	08007604 	stmdaeq	r0, {r2, r9, sl, ip, sp, lr}
    26c8:	00000128 	andeq	r0, r0, r8, lsr #2
    26cc:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    26d0:	200e4101 	andcs	r4, lr, r1, lsl #2
    26d4:	00070d41 	andeq	r0, r7, r1, asr #26
    26d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    26dc:	000023dc 	ldrdeq	r2, [r0], -ip
    26e0:	0800772c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp, lr}
    26e4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    26e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    26ec:	41018e02 	tstmi	r1, r2, lsl #28
    26f0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
    26f4:	00000007 	andeq	r0, r0, r7
    26f8:	00000018 	andeq	r0, r0, r8, lsl r0
    26fc:	000023dc 	ldrdeq	r2, [r0], -ip
    2700:	080079e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp, lr}
    2704:	00000350 	andeq	r0, r0, r0, asr r3
    2708:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    270c:	380e4101 	stmdacc	lr, {r0, r8, lr}
    2710:	00070d41 	andeq	r0, r7, r1, asr #26
    2714:	00000018 	andeq	r0, r0, r8, lsl r0
    2718:	000023dc 	ldrdeq	r2, [r0], -ip
    271c:	08007d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, sp, lr}
    2720:	0000007c 	andeq	r0, r0, ip, ror r0
    2724:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2728:	180e4101 	stmdane	lr, {r0, r8, lr}
    272c:	00070d41 	andeq	r0, r7, r1, asr #26
    2730:	0000001c 	andeq	r0, r0, ip, lsl r0
    2734:	000023dc 	ldrdeq	r2, [r0], -ip
    2738:	08007db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
    273c:	000001dc 	ldrdeq	r0, [r0], -ip
    2740:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2744:	41018e02 	tstmi	r1, r2, lsl #28
    2748:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    274c:	00000007 	andeq	r0, r0, r7
    2750:	0000001c 	andeq	r0, r0, ip, lsl r0
    2754:	000023dc 	ldrdeq	r2, [r0], -ip
    2758:	08007f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp, lr}
    275c:	000000c0 	andeq	r0, r0, r0, asr #1
    2760:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2764:	41018e02 	tstmi	r1, r2, lsl #28
    2768:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
    276c:	00000007 	andeq	r0, r0, r7
    2770:	0000001c 	andeq	r0, r0, ip, lsl r0
    2774:	000023dc 	ldrdeq	r2, [r0], -ip
    2778:	08008050 	stmdaeq	r0, {r4, r6, pc}
    277c:	00000120 	andeq	r0, r0, r0, lsr #2
    2780:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2784:	41018e02 	tstmi	r1, r2, lsl #28
    2788:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    278c:	00000007 	andeq	r0, r0, r7
    2790:	0000001c 	andeq	r0, r0, ip, lsl r0
    2794:	000023dc 	ldrdeq	r2, [r0], -ip
    2798:	08008170 	stmdaeq	r0, {r4, r5, r6, r8, pc}
    279c:	00000166 	andeq	r0, r0, r6, ror #2
    27a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27a4:	41018e02 	tstmi	r1, r2, lsl #28
    27a8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    27ac:	00000007 	andeq	r0, r0, r7
    27b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    27b4:	000023dc 	ldrdeq	r2, [r0], -ip
    27b8:	080082d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, pc}
    27bc:	00000076 	andeq	r0, r0, r6, ror r0
    27c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27c4:	41018e02 	tstmi	r1, r2, lsl #28
    27c8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    27cc:	00000007 	andeq	r0, r0, r7
    27d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    27d4:	000023dc 	ldrdeq	r2, [r0], -ip
    27d8:	08008350 	stmdaeq	r0, {r4, r6, r8, r9, pc}
    27dc:	00000162 	andeq	r0, r0, r2, ror #2
    27e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    27e4:	41018e02 	tstmi	r1, r2, lsl #28
    27e8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
    27ec:	00000007 	andeq	r0, r0, r7
    27f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    27f4:	000023dc 	ldrdeq	r2, [r0], -ip
    27f8:	080084b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, pc}
    27fc:	00000056 	andeq	r0, r0, r6, asr r0
    2800:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2804:	41018e02 	tstmi	r1, r2, lsl #28
    2808:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    280c:	00000007 	andeq	r0, r0, r7
    2810:	0000001c 	andeq	r0, r0, ip, lsl r0
    2814:	000023dc 	ldrdeq	r2, [r0], -ip
    2818:	0800850c 	stmdaeq	r0, {r2, r3, r8, sl, pc}
    281c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2820:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    2824:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    2828:	200e4101 	andcs	r4, lr, r1, lsl #2
    282c:	00070d41 	andeq	r0, r7, r1, asr #26
    2830:	0000001c 	andeq	r0, r0, ip, lsl r0
    2834:	000023dc 	ldrdeq	r2, [r0], -ip
    2838:	080085ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, pc}
    283c:	00000050 	andeq	r0, r0, r0, asr r0
    2840:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    2844:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    2848:	180e4101 	stmdane	lr, {r0, r8, lr}
    284c:	00070d41 	andeq	r0, r7, r1, asr #26
    2850:	0000001c 	andeq	r0, r0, ip, lsl r0
    2854:	000023dc 	ldrdeq	r2, [r0], -ip
    2858:	080085fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, pc}
    285c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2860:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2864:	41018e02 	tstmi	r1, r2, lsl #28
    2868:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    286c:	00000007 	andeq	r0, r0, r7
    2870:	0000001c 	andeq	r0, r0, ip, lsl r0
    2874:	000023dc 	ldrdeq	r2, [r0], -ip
    2878:	0800861c 	stmdaeq	r0, {r2, r3, r4, r9, sl, pc}
    287c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2880:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2884:	41018e02 	tstmi	r1, r2, lsl #28
    2888:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    288c:	00000007 	andeq	r0, r0, r7
    2890:	00000020 	andeq	r0, r0, r0, lsr #32
    2894:	000023dc 	ldrdeq	r2, [r0], -ip
    2898:	0800863c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, pc}
    289c:	000001a0 	andeq	r0, r0, r0, lsr #3
    28a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    28a4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    28a8:	41018e02 	tstmi	r1, r2, lsl #28
    28ac:	0c41400e 	mcrreq	0, 0, r4, r1, cr14
    28b0:	00003807 	andeq	r3, r0, r7, lsl #16
    28b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28b8:	000023dc 	ldrdeq	r2, [r0], -ip
    28bc:	080087dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, pc}
    28c0:	0000005c 	andeq	r0, r0, ip, asr r0
    28c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    28c8:	41018e02 	tstmi	r1, r2, lsl #28
    28cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    28d0:	00000007 	andeq	r0, r0, r7
    28d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    28d8:	000023dc 	ldrdeq	r2, [r0], -ip
    28dc:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
    28e0:	0000005c 	andeq	r0, r0, ip, asr r0
    28e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    28e8:	41018e02 	tstmi	r1, r2, lsl #28
    28ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    28f0:	00000007 	andeq	r0, r0, r7
    28f4:	00000018 	andeq	r0, r0, r8, lsl r0
    28f8:	000023dc 	ldrdeq	r2, [r0], -ip
    28fc:	08008894 	stmdaeq	r0, {r2, r4, r7, fp, pc}
    2900:	0000028e 	andeq	r0, r0, lr, lsl #5
    2904:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2908:	41018e02 	tstmi	r1, r2, lsl #28
    290c:	0000070d 	andeq	r0, r0, sp, lsl #14
    2910:	00000018 	andeq	r0, r0, r8, lsl r0
    2914:	000023dc 	ldrdeq	r2, [r0], -ip
    2918:	08008b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, pc}
    291c:	0000000c 	andeq	r0, r0, ip
    2920:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2924:	41018e02 	tstmi	r1, r2, lsl #28
    2928:	0000070d 	andeq	r0, r0, sp, lsl #14
    292c:	00000018 	andeq	r0, r0, r8, lsl r0
    2930:	000023dc 	ldrdeq	r2, [r0], -ip
    2934:	08008b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, pc}
    2938:	0000000c 	andeq	r0, r0, ip
    293c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2940:	41018e02 	tstmi	r1, r2, lsl #28
    2944:	0000070d 	andeq	r0, r0, sp, lsl #14
    2948:	0000001c 	andeq	r0, r0, ip, lsl r0
    294c:	000023dc 	ldrdeq	r2, [r0], -ip
    2950:	08008b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, pc}
    2954:	00000054 	andeq	r0, r0, r4, asr r0
    2958:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    295c:	41018e02 	tstmi	r1, r2, lsl #28
    2960:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2964:	00000007 	andeq	r0, r0, r7
    2968:	0000001c 	andeq	r0, r0, ip, lsl r0
    296c:	000023dc 	ldrdeq	r2, [r0], -ip
    2970:	08008b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, pc}
    2974:	00000024 	andeq	r0, r0, r4, lsr #32
    2978:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    297c:	41018e02 	tstmi	r1, r2, lsl #28
    2980:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2984:	00000007 	andeq	r0, r0, r7
    2988:	0000001c 	andeq	r0, r0, ip, lsl r0
    298c:	000023dc 	ldrdeq	r2, [r0], -ip
    2990:	08008bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, pc}
    2994:	000000d4 	ldrdeq	r0, [r0], -r4
    2998:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    299c:	41018e02 	tstmi	r1, r2, lsl #28
    29a0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    29a4:	00000007 	andeq	r0, r0, r7
    29a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    29ac:	000023dc 	ldrdeq	r2, [r0], -ip
    29b0:	08008c88 	stmdaeq	r0, {r3, r7, sl, fp, pc}
    29b4:	00000178 	andeq	r0, r0, r8, ror r1
    29b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29bc:	41018e02 	tstmi	r1, r2, lsl #28
    29c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    29c4:	00000007 	andeq	r0, r0, r7
    29c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    29cc:	000023dc 	ldrdeq	r2, [r0], -ip
    29d0:	08008e00 	stmdaeq	r0, {r9, sl, fp, pc}
    29d4:	00000048 	andeq	r0, r0, r8, asr #32
    29d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    29dc:	41018e02 	tstmi	r1, r2, lsl #28
    29e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    29e4:	00000007 	andeq	r0, r0, r7
    29e8:	00000018 	andeq	r0, r0, r8, lsl r0
    29ec:	000023dc 	ldrdeq	r2, [r0], -ip
    29f0:	08008e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, pc}
    29f4:	00000028 	andeq	r0, r0, r8, lsr #32
    29f8:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    29fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    2a00:	00070d41 	andeq	r0, r7, r1, asr #26
    2a04:	0000000c 	andeq	r0, r0, ip
    2a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a0c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a14:	00000018 	andeq	r0, r0, r8, lsl r0
    2a18:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a1c:	08008e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, pc}
    2a20:	00000030 	andeq	r0, r0, r0, lsr r0
    2a24:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a28:	41018e02 	tstmi	r1, r2, lsl #28
    2a2c:	0000070d 	andeq	r0, r0, sp, lsl #14
    2a30:	00000018 	andeq	r0, r0, r8, lsl r0
    2a34:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a38:	08008ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, pc}
    2a3c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a44:	41018e02 	tstmi	r1, r2, lsl #28
    2a48:	0000070d 	andeq	r0, r0, sp, lsl #14
    2a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a50:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a54:	08008ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, pc}
    2a58:	000000c8 	andeq	r0, r0, r8, asr #1
    2a5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a60:	41018e02 	tstmi	r1, r2, lsl #28
    2a64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2a68:	00000007 	andeq	r0, r0, r7
    2a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a70:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a74:	08008f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, pc}
    2a78:	00000034 	andeq	r0, r0, r4, lsr r0
    2a7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2a80:	41018e02 	tstmi	r1, r2, lsl #28
    2a84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2a88:	00000007 	andeq	r0, r0, r7
    2a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2a90:	00002a04 	andeq	r2, r0, r4, lsl #20
    2a94:	08008fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, pc}
    2a98:	0000001e 	andeq	r0, r0, lr, lsl r0
    2a9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2aa0:	41018e02 	tstmi	r1, r2, lsl #28
    2aa4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2aa8:	00000007 	andeq	r0, r0, r7
    2aac:	00000018 	andeq	r0, r0, r8, lsl r0
    2ab0:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ab4:	08008fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, pc}
    2ab8:	00000034 	andeq	r0, r0, r4, lsr r0
    2abc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2ac0:	41018e02 	tstmi	r1, r2, lsl #28
    2ac4:	0000070d 	andeq	r0, r0, sp, lsl #14
    2ac8:	00000018 	andeq	r0, r0, r8, lsl r0
    2acc:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ad0:	08009010 	stmdaeq	r0, {r4, ip, pc}
    2ad4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ad8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2adc:	41018e02 	tstmi	r1, r2, lsl #28
    2ae0:	0000070d 	andeq	r0, r0, sp, lsl #14
    2ae4:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ae8:	00002a04 	andeq	r2, r0, r4, lsl #20
    2aec:	08009030 	stmdaeq	r0, {r4, r5, ip, pc}
    2af0:	00000034 	andeq	r0, r0, r4, lsr r0
    2af4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2af8:	41018e02 	tstmi	r1, r2, lsl #28
    2afc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2b00:	00000007 	andeq	r0, r0, r7
    2b04:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b08:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b0c:	08009064 	stmdaeq	r0, {r2, r5, r6, ip, pc}
    2b10:	0000004e 	andeq	r0, r0, lr, asr #32
    2b14:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b18:	41018e02 	tstmi	r1, r2, lsl #28
    2b1c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b20:	00000007 	andeq	r0, r0, r7
    2b24:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b28:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b2c:	080090b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, pc}
    2b30:	00000044 	andeq	r0, r0, r4, asr #32
    2b34:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b38:	41018e02 	tstmi	r1, r2, lsl #28
    2b3c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b40:	00000007 	andeq	r0, r0, r7
    2b44:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b48:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b4c:	080090f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, pc}
    2b50:	0000004e 	andeq	r0, r0, lr, asr #32
    2b54:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b58:	41018e02 	tstmi	r1, r2, lsl #28
    2b5c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b60:	00000007 	andeq	r0, r0, r7
    2b64:	00000018 	andeq	r0, r0, r8, lsl r0
    2b68:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b6c:	08009148 	stmdaeq	r0, {r3, r6, r8, ip, pc}
    2b70:	00000094 	muleq	r0, r4, r0
    2b74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b78:	41018e02 	tstmi	r1, r2, lsl #28
    2b7c:	0000070d 	andeq	r0, r0, sp, lsl #14
    2b80:	0000001c 	andeq	r0, r0, ip, lsl r0
    2b84:	00002a04 	andeq	r2, r0, r4, lsl #20
    2b88:	080091dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, pc}
    2b8c:	0000004e 	andeq	r0, r0, lr, asr #32
    2b90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2b94:	41018e02 	tstmi	r1, r2, lsl #28
    2b98:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2b9c:	00000007 	andeq	r0, r0, r7
    2ba0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ba4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ba8:	0800922c 	stmdaeq	r0, {r2, r3, r5, r9, ip, pc}
    2bac:	00000194 	muleq	r0, r4, r1
    2bb0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bb4:	41018e02 	tstmi	r1, r2, lsl #28
    2bb8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bbc:	00000007 	andeq	r0, r0, r7
    2bc0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2bc4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2bc8:	080093c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, pc}
    2bcc:	000001d4 	ldrdeq	r0, [r0], -r4
    2bd0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bd4:	41018e02 	tstmi	r1, r2, lsl #28
    2bd8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bdc:	00000007 	andeq	r0, r0, r7
    2be0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2be4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2be8:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}
    2bec:	000001f4 	strdeq	r0, [r0], -r4
    2bf0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2bf4:	41018e02 	tstmi	r1, r2, lsl #28
    2bf8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2bfc:	00000007 	andeq	r0, r0, r7
    2c00:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c04:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c08:	08009788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, pc}
    2c0c:	00000068 	andeq	r0, r0, r8, rrx
    2c10:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c14:	41018e02 	tstmi	r1, r2, lsl #28
    2c18:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c1c:	00000007 	andeq	r0, r0, r7
    2c20:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c24:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c28:	080097f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, pc}
    2c2c:	00000054 	andeq	r0, r0, r4, asr r0
    2c30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c34:	41018e02 	tstmi	r1, r2, lsl #28
    2c38:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c3c:	00000007 	andeq	r0, r0, r7
    2c40:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c44:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c48:	08009844 	stmdaeq	r0, {r2, r6, fp, ip, pc}
    2c4c:	00000026 	andeq	r0, r0, r6, lsr #32
    2c50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c54:	41018e02 	tstmi	r1, r2, lsl #28
    2c58:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c5c:	00000007 	andeq	r0, r0, r7
    2c60:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c64:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c68:	0800986c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, pc}
    2c6c:	0000008c 	andeq	r0, r0, ip, lsl #1
    2c70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c74:	41018e02 	tstmi	r1, r2, lsl #28
    2c78:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    2c7c:	00000007 	andeq	r0, r0, r7
    2c80:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c84:	00002a04 	andeq	r2, r0, r4, lsl #20
    2c88:	080098f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, pc}
    2c8c:	00000054 	andeq	r0, r0, r4, asr r0
    2c90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2c94:	41018e02 	tstmi	r1, r2, lsl #28
    2c98:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2c9c:	00000007 	andeq	r0, r0, r7
    2ca0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ca4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ca8:	0800994c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, pc}
    2cac:	000000a4 	andeq	r0, r0, r4, lsr #1
    2cb0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cb4:	41018e02 	tstmi	r1, r2, lsl #28
    2cb8:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
    2cbc:	00000007 	andeq	r0, r0, r7
    2cc0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2cc4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2cc8:	080099f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, pc}
    2ccc:	0000015c 	andeq	r0, r0, ip, asr r1
    2cd0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cd4:	41018e02 	tstmi	r1, r2, lsl #28
    2cd8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2cdc:	00000007 	andeq	r0, r0, r7
    2ce0:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ce4:	00002a04 	andeq	r2, r0, r4, lsl #20
    2ce8:	08009b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip, pc}
    2cec:	000001dc 	ldrdeq	r0, [r0], -ip
    2cf0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2cf4:	41018e02 	tstmi	r1, r2, lsl #28
    2cf8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2cfc:	00000007 	andeq	r0, r0, r7
    2d00:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d04:	00002a04 	andeq	r2, r0, r4, lsl #20
    2d08:	08009d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip, pc}
    2d0c:	000001cc 	andeq	r0, r0, ip, asr #3
    2d10:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d14:	41018e02 	tstmi	r1, r2, lsl #28
    2d18:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d1c:	00000007 	andeq	r0, r0, r7
    2d20:	0000001c 	andeq	r0, r0, ip, lsl r0
    2d24:	00002a04 	andeq	r2, r0, r4, lsl #20
    2d28:	08009ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, pc}
    2d2c:	0000006c 	andeq	r0, r0, ip, rrx
    2d30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    2d34:	41018e02 	tstmi	r1, r2, lsl #28
    2d38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    2d3c:	00000007 	andeq	r0, r0, r7
    2d40:	00000018 	andeq	r0, r0, r8, lsl r0
    2d44:	00002a04 	andeq	r2, r0, r4, lsl #20
    2d48:	08009f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, pc}
    2d4c:	00000034 	andeq	r0, r0, r4, lsr r0
    2d50:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    2d54:	180e4101 	stmdane	lr, {r0, r8, lr}
    2d58:	00070d41 	andeq	r0, r7, r1, asr #26
